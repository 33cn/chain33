// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blacklist.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	blacklist.proto

It has these top-level messages:
	BlackAction
	Record
	Transaction
	Org
	Agency
	Query
	QueryOrgParam
	QueryTransactionParam
	QueryRecordParam
	DeleteRecordParam
	QueryKeyParam
	User
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BlackAction struct {
	// Types that are valid to be assigned to Value:
	//	*BlackAction_Rc
	//	*BlackAction_Or
	//	*BlackAction_Tr
	//	*BlackAction_Ac
	//	*BlackAction_User
	Value    isBlackAction_Value `protobuf_oneof:"value"`
	FuncName string              `protobuf:"bytes,2,opt,name=funcName" json:"funcName,omitempty"`
}

func (m *BlackAction) Reset()                    { *m = BlackAction{} }
func (m *BlackAction) String() string            { return proto.CompactTextString(m) }
func (*BlackAction) ProtoMessage()               {}
func (*BlackAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isBlackAction_Value interface {
	isBlackAction_Value()
}

type BlackAction_Rc struct {
	Rc *Record `protobuf:"bytes,1,opt,name=rc,oneof"`
}
type BlackAction_Or struct {
	Or *Org `protobuf:"bytes,3,opt,name=or,oneof"`
}
type BlackAction_Tr struct {
	Tr *Transaction `protobuf:"bytes,4,opt,name=tr,oneof"`
}
type BlackAction_Ac struct {
	Ac *Agency `protobuf:"bytes,5,opt,name=ac,oneof"`
}
type BlackAction_User struct {
	User *User `protobuf:"bytes,6,opt,name=user,oneof"`
}

func (*BlackAction_Rc) isBlackAction_Value()   {}
func (*BlackAction_Or) isBlackAction_Value()   {}
func (*BlackAction_Tr) isBlackAction_Value()   {}
func (*BlackAction_Ac) isBlackAction_Value()   {}
func (*BlackAction_User) isBlackAction_Value() {}

func (m *BlackAction) GetValue() isBlackAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BlackAction) GetRc() *Record {
	if x, ok := m.GetValue().(*BlackAction_Rc); ok {
		return x.Rc
	}
	return nil
}

func (m *BlackAction) GetOr() *Org {
	if x, ok := m.GetValue().(*BlackAction_Or); ok {
		return x.Or
	}
	return nil
}

func (m *BlackAction) GetTr() *Transaction {
	if x, ok := m.GetValue().(*BlackAction_Tr); ok {
		return x.Tr
	}
	return nil
}

func (m *BlackAction) GetAc() *Agency {
	if x, ok := m.GetValue().(*BlackAction_Ac); ok {
		return x.Ac
	}
	return nil
}

func (m *BlackAction) GetUser() *User {
	if x, ok := m.GetValue().(*BlackAction_User); ok {
		return x.User
	}
	return nil
}

func (m *BlackAction) GetFuncName() string {
	if m != nil {
		return m.FuncName
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BlackAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BlackAction_OneofMarshaler, _BlackAction_OneofUnmarshaler, _BlackAction_OneofSizer, []interface{}{
		(*BlackAction_Rc)(nil),
		(*BlackAction_Or)(nil),
		(*BlackAction_Tr)(nil),
		(*BlackAction_Ac)(nil),
		(*BlackAction_User)(nil),
	}
}

func _BlackAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BlackAction)
	// value
	switch x := m.Value.(type) {
	case *BlackAction_Rc:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rc); err != nil {
			return err
		}
	case *BlackAction_Or:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Or); err != nil {
			return err
		}
	case *BlackAction_Tr:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tr); err != nil {
			return err
		}
	case *BlackAction_Ac:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ac); err != nil {
			return err
		}
	case *BlackAction_User:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.User); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BlackAction.Value has unexpected type %T", x)
	}
	return nil
}

func _BlackAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BlackAction)
	switch tag {
	case 1: // value.rc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Record)
		err := b.DecodeMessage(msg)
		m.Value = &BlackAction_Rc{msg}
		return true, err
	case 3: // value.or
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Org)
		err := b.DecodeMessage(msg)
		m.Value = &BlackAction_Or{msg}
		return true, err
	case 4: // value.tr
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction)
		err := b.DecodeMessage(msg)
		m.Value = &BlackAction_Tr{msg}
		return true, err
	case 5: // value.ac
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Agency)
		err := b.DecodeMessage(msg)
		m.Value = &BlackAction_Ac{msg}
		return true, err
	case 6: // value.user
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(User)
		err := b.DecodeMessage(msg)
		m.Value = &BlackAction_User{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BlackAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BlackAction)
	// value
	switch x := m.Value.(type) {
	case *BlackAction_Rc:
		s := proto.Size(x.Rc)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BlackAction_Or:
		s := proto.Size(x.Or)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BlackAction_Tr:
		s := proto.Size(x.Tr)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BlackAction_Ac:
		s := proto.Size(x.Ac)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BlackAction_User:
		s := proto.Size(x.User)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Record struct {
	RecordId         string `protobuf:"bytes,1,opt,name=recordId" json:"recordId,omitempty"`
	DocType          string `protobuf:"bytes,2,opt,name=docType" json:"docType,omitempty"`
	ClientId         string `protobuf:"bytes,3,opt,name=clientId" json:"clientId,omitempty"`
	ClientName       string `protobuf:"bytes,4,opt,name=clientName" json:"clientName,omitempty"`
	NegativeType     string `protobuf:"bytes,5,opt,name=negativeType" json:"negativeType,omitempty"`
	NegativeSeverity string `protobuf:"bytes,6,opt,name=negativeSeverity" json:"negativeSeverity,omitempty"`
	NegativeInfo     string `protobuf:"bytes,7,opt,name=negativeInfo" json:"negativeInfo,omitempty"`
	OrgAddr          string `protobuf:"bytes,8,opt,name=orgAddr" json:"orgAddr,omitempty"`
	Searchable       bool   `protobuf:"varint,9,opt,name=searchable" json:"searchable,omitempty"`
	CreateTime       string `protobuf:"bytes,10,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime       string `protobuf:"bytes,11,opt,name=updateTime" json:"updateTime,omitempty"`
	OrgId            string `protobuf:"bytes,12,opt,name=orgId" json:"orgId,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Record) GetRecordId() string {
	if m != nil {
		return m.RecordId
	}
	return ""
}

func (m *Record) GetDocType() string {
	if m != nil {
		return m.DocType
	}
	return ""
}

func (m *Record) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *Record) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *Record) GetNegativeType() string {
	if m != nil {
		return m.NegativeType
	}
	return ""
}

func (m *Record) GetNegativeSeverity() string {
	if m != nil {
		return m.NegativeSeverity
	}
	return ""
}

func (m *Record) GetNegativeInfo() string {
	if m != nil {
		return m.NegativeInfo
	}
	return ""
}

func (m *Record) GetOrgAddr() string {
	if m != nil {
		return m.OrgAddr
	}
	return ""
}

func (m *Record) GetSearchable() bool {
	if m != nil {
		return m.Searchable
	}
	return false
}

func (m *Record) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *Record) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

func (m *Record) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

type Transaction struct {
	DocType    string `protobuf:"bytes,1,opt,name=docType" json:"docType,omitempty"`
	TxId       string `protobuf:"bytes,2,opt,name=txId" json:"txId,omitempty"`
	From       string `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
	To         string `protobuf:"bytes,4,opt,name=to" json:"to,omitempty"`
	Credit     int64  `protobuf:"varint,5,opt,name=credit" json:"credit,omitempty"`
	CreateTime string `protobuf:"bytes,6,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime string `protobuf:"bytes,7,opt,name=updateTime" json:"updateTime,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Transaction) GetDocType() string {
	if m != nil {
		return m.DocType
	}
	return ""
}

func (m *Transaction) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *Transaction) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Transaction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Transaction) GetCredit() int64 {
	if m != nil {
		return m.Credit
	}
	return 0
}

func (m *Transaction) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *Transaction) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

type Org struct {
	DocType    string `protobuf:"bytes,1,opt,name=docType" json:"docType,omitempty"`
	OrgId      string `protobuf:"bytes,2,opt,name=orgId" json:"orgId,omitempty"`
	OrgName    string `protobuf:"bytes,3,opt,name=orgName" json:"orgName,omitempty"`
	OrgAddr    string `protobuf:"bytes,4,opt,name=orgAddr" json:"orgAddr,omitempty"`
	OrgCredit  int64  `protobuf:"varint,5,opt,name=orgCredit" json:"orgCredit,omitempty"`
	CreateTime string `protobuf:"bytes,6,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime string `protobuf:"bytes,7,opt,name=updateTime" json:"updateTime,omitempty"`
}

func (m *Org) Reset()                    { *m = Org{} }
func (m *Org) String() string            { return proto.CompactTextString(m) }
func (*Org) ProtoMessage()               {}
func (*Org) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Org) GetDocType() string {
	if m != nil {
		return m.DocType
	}
	return ""
}

func (m *Org) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *Org) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *Org) GetOrgAddr() string {
	if m != nil {
		return m.OrgAddr
	}
	return ""
}

func (m *Org) GetOrgCredit() int64 {
	if m != nil {
		return m.OrgCredit
	}
	return 0
}

func (m *Org) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *Org) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

type Agency struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Addr        string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Credit      int64  `protobuf:"varint,3,opt,name=credit" json:"credit,omitempty"`
	IssueCredit int64  `protobuf:"varint,4,opt,name=issueCredit" json:"issueCredit,omitempty"`
	CreateTime  string `protobuf:"bytes,5,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime  string `protobuf:"bytes,6,opt,name=updateTime" json:"updateTime,omitempty"`
}

func (m *Agency) Reset()                    { *m = Agency{} }
func (m *Agency) String() string            { return proto.CompactTextString(m) }
func (*Agency) ProtoMessage()               {}
func (*Agency) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Agency) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Agency) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Agency) GetCredit() int64 {
	if m != nil {
		return m.Credit
	}
	return 0
}

func (m *Agency) GetIssueCredit() int64 {
	if m != nil {
		return m.IssueCredit
	}
	return 0
}

func (m *Agency) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *Agency) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

type Query struct {
	// Types that are valid to be assigned to Value:
	//	*Query_QueryOrg
	//	*Query_QueryTransaction
	//	*Query_QueryRecord
	//	*Query_DelRecord
	//	*Query_LoginCheck
	//	*Query_QueryKey
	Value      isQuery_Value `protobuf_oneof:"value"`
	PrivateKey string        `protobuf:"bytes,5,opt,name=PrivateKey" json:"PrivateKey,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isQuery_Value interface {
	isQuery_Value()
}

type Query_QueryOrg struct {
	QueryOrg *QueryOrgParam `protobuf:"bytes,1,opt,name=queryOrg,oneof"`
}
type Query_QueryTransaction struct {
	QueryTransaction *QueryTransactionParam `protobuf:"bytes,2,opt,name=queryTransaction,oneof"`
}
type Query_QueryRecord struct {
	QueryRecord *QueryRecordParam `protobuf:"bytes,3,opt,name=queryRecord,oneof"`
}
type Query_DelRecord struct {
	DelRecord *DeleteRecordParam `protobuf:"bytes,4,opt,name=delRecord,oneof"`
}
type Query_LoginCheck struct {
	LoginCheck *User `protobuf:"bytes,6,opt,name=loginCheck,oneof"`
}
type Query_QueryKey struct {
	QueryKey *QueryKeyParam `protobuf:"bytes,7,opt,name=queryKey,oneof"`
}

func (*Query_QueryOrg) isQuery_Value()         {}
func (*Query_QueryTransaction) isQuery_Value() {}
func (*Query_QueryRecord) isQuery_Value()      {}
func (*Query_DelRecord) isQuery_Value()        {}
func (*Query_LoginCheck) isQuery_Value()       {}
func (*Query_QueryKey) isQuery_Value()         {}

func (m *Query) GetValue() isQuery_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Query) GetQueryOrg() *QueryOrgParam {
	if x, ok := m.GetValue().(*Query_QueryOrg); ok {
		return x.QueryOrg
	}
	return nil
}

func (m *Query) GetQueryTransaction() *QueryTransactionParam {
	if x, ok := m.GetValue().(*Query_QueryTransaction); ok {
		return x.QueryTransaction
	}
	return nil
}

func (m *Query) GetQueryRecord() *QueryRecordParam {
	if x, ok := m.GetValue().(*Query_QueryRecord); ok {
		return x.QueryRecord
	}
	return nil
}

func (m *Query) GetDelRecord() *DeleteRecordParam {
	if x, ok := m.GetValue().(*Query_DelRecord); ok {
		return x.DelRecord
	}
	return nil
}

func (m *Query) GetLoginCheck() *User {
	if x, ok := m.GetValue().(*Query_LoginCheck); ok {
		return x.LoginCheck
	}
	return nil
}

func (m *Query) GetQueryKey() *QueryKeyParam {
	if x, ok := m.GetValue().(*Query_QueryKey); ok {
		return x.QueryKey
	}
	return nil
}

func (m *Query) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Query) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Query_OneofMarshaler, _Query_OneofUnmarshaler, _Query_OneofSizer, []interface{}{
		(*Query_QueryOrg)(nil),
		(*Query_QueryTransaction)(nil),
		(*Query_QueryRecord)(nil),
		(*Query_DelRecord)(nil),
		(*Query_LoginCheck)(nil),
		(*Query_QueryKey)(nil),
	}
}

func _Query_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Query)
	// value
	switch x := m.Value.(type) {
	case *Query_QueryOrg:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QueryOrg); err != nil {
			return err
		}
	case *Query_QueryTransaction:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QueryTransaction); err != nil {
			return err
		}
	case *Query_QueryRecord:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QueryRecord); err != nil {
			return err
		}
	case *Query_DelRecord:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DelRecord); err != nil {
			return err
		}
	case *Query_LoginCheck:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LoginCheck); err != nil {
			return err
		}
	case *Query_QueryKey:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QueryKey); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Query.Value has unexpected type %T", x)
	}
	return nil
}

func _Query_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Query)
	switch tag {
	case 1: // value.queryOrg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QueryOrgParam)
		err := b.DecodeMessage(msg)
		m.Value = &Query_QueryOrg{msg}
		return true, err
	case 2: // value.queryTransaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QueryTransactionParam)
		err := b.DecodeMessage(msg)
		m.Value = &Query_QueryTransaction{msg}
		return true, err
	case 3: // value.queryRecord
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QueryRecordParam)
		err := b.DecodeMessage(msg)
		m.Value = &Query_QueryRecord{msg}
		return true, err
	case 4: // value.delRecord
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteRecordParam)
		err := b.DecodeMessage(msg)
		m.Value = &Query_DelRecord{msg}
		return true, err
	case 6: // value.loginCheck
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(User)
		err := b.DecodeMessage(msg)
		m.Value = &Query_LoginCheck{msg}
		return true, err
	case 7: // value.queryKey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QueryKeyParam)
		err := b.DecodeMessage(msg)
		m.Value = &Query_QueryKey{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Query_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Query)
	// value
	switch x := m.Value.(type) {
	case *Query_QueryOrg:
		s := proto.Size(x.QueryOrg)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Query_QueryTransaction:
		s := proto.Size(x.QueryTransaction)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Query_QueryRecord:
		s := proto.Size(x.QueryRecord)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Query_DelRecord:
		s := proto.Size(x.DelRecord)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Query_LoginCheck:
		s := proto.Size(x.LoginCheck)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Query_QueryKey:
		s := proto.Size(x.QueryKey)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type QueryOrgParam struct {
	OrgId string `protobuf:"bytes,1,opt,name=orgId" json:"orgId,omitempty"`
}

func (m *QueryOrgParam) Reset()                    { *m = QueryOrgParam{} }
func (m *QueryOrgParam) String() string            { return proto.CompactTextString(m) }
func (*QueryOrgParam) ProtoMessage()               {}
func (*QueryOrgParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *QueryOrgParam) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

type QueryTransactionParam struct {
	ByTxId     string `protobuf:"bytes,1,opt,name=byTxId" json:"byTxId,omitempty"`
	ByToAddr   string `protobuf:"bytes,2,opt,name=byToAddr" json:"byToAddr,omitempty"`
	ByFromAddr string `protobuf:"bytes,3,opt,name=byFromAddr" json:"byFromAddr,omitempty"`
}

func (m *QueryTransactionParam) Reset()                    { *m = QueryTransactionParam{} }
func (m *QueryTransactionParam) String() string            { return proto.CompactTextString(m) }
func (*QueryTransactionParam) ProtoMessage()               {}
func (*QueryTransactionParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *QueryTransactionParam) GetByTxId() string {
	if m != nil {
		return m.ByTxId
	}
	return ""
}

func (m *QueryTransactionParam) GetByToAddr() string {
	if m != nil {
		return m.ByToAddr
	}
	return ""
}

func (m *QueryTransactionParam) GetByFromAddr() string {
	if m != nil {
		return m.ByFromAddr
	}
	return ""
}

type QueryRecordParam struct {
	ByClientId   string `protobuf:"bytes,1,opt,name=byClientId" json:"byClientId,omitempty"`
	ByClientName string `protobuf:"bytes,2,opt,name=byClientName" json:"byClientName,omitempty"`
}

func (m *QueryRecordParam) Reset()                    { *m = QueryRecordParam{} }
func (m *QueryRecordParam) String() string            { return proto.CompactTextString(m) }
func (*QueryRecordParam) ProtoMessage()               {}
func (*QueryRecordParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *QueryRecordParam) GetByClientId() string {
	if m != nil {
		return m.ByClientId
	}
	return ""
}

func (m *QueryRecordParam) GetByClientName() string {
	if m != nil {
		return m.ByClientName
	}
	return ""
}

type DeleteRecordParam struct {
	OrgId    string `protobuf:"bytes,1,opt,name=orgId" json:"orgId,omitempty"`
	RecordId string `protobuf:"bytes,2,opt,name=recordId" json:"recordId,omitempty"`
}

func (m *DeleteRecordParam) Reset()                    { *m = DeleteRecordParam{} }
func (m *DeleteRecordParam) String() string            { return proto.CompactTextString(m) }
func (*DeleteRecordParam) ProtoMessage()               {}
func (*DeleteRecordParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteRecordParam) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *DeleteRecordParam) GetRecordId() string {
	if m != nil {
		return m.RecordId
	}
	return ""
}

type QueryKeyParam struct {
	Key string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
}

func (m *QueryKeyParam) Reset()                    { *m = QueryKeyParam{} }
func (m *QueryKeyParam) String() string            { return proto.CompactTextString(m) }
func (*QueryKeyParam) ProtoMessage()               {}
func (*QueryKeyParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *QueryKeyParam) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type User struct {
	UserName   string `protobuf:"bytes,1,opt,name=userName" json:"userName,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=userId" json:"userId,omitempty"`
	OrgId      string `protobuf:"bytes,3,opt,name=orgId" json:"orgId,omitempty"`
	PassWord   string `protobuf:"bytes,4,opt,name=passWord" json:"passWord,omitempty"`
	CreateTime string `protobuf:"bytes,5,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime string `protobuf:"bytes,6,opt,name=updateTime" json:"updateTime,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *User) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *User) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *User) GetOrgId() string {
	if m != nil {
		return m.OrgId
	}
	return ""
}

func (m *User) GetPassWord() string {
	if m != nil {
		return m.PassWord
	}
	return ""
}

func (m *User) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func (m *User) GetUpdateTime() string {
	if m != nil {
		return m.UpdateTime
	}
	return ""
}

func init() {
	proto.RegisterType((*BlackAction)(nil), "types.BlackAction")
	proto.RegisterType((*Record)(nil), "types.Record")
	proto.RegisterType((*Transaction)(nil), "types.Transaction")
	proto.RegisterType((*Org)(nil), "types.Org")
	proto.RegisterType((*Agency)(nil), "types.Agency")
	proto.RegisterType((*Query)(nil), "types.Query")
	proto.RegisterType((*QueryOrgParam)(nil), "types.QueryOrgParam")
	proto.RegisterType((*QueryTransactionParam)(nil), "types.QueryTransactionParam")
	proto.RegisterType((*QueryRecordParam)(nil), "types.QueryRecordParam")
	proto.RegisterType((*DeleteRecordParam)(nil), "types.DeleteRecordParam")
	proto.RegisterType((*QueryKeyParam)(nil), "types.QueryKeyParam")
	proto.RegisterType((*User)(nil), "types.User")
}

func init() { proto.RegisterFile("blacklist.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 809 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xae, 0xed, 0xc4, 0x89, 0x8f, 0xdb, 0x7b, 0x73, 0x47, 0xbd, 0xf7, 0x5a, 0xa8, 0x82, 0xd4,
	0x02, 0xa9, 0x42, 0xa2, 0x8b, 0xb2, 0x41, 0x62, 0x95, 0x16, 0x50, 0x43, 0xa5, 0xfe, 0x98, 0x14,
	0xd6, 0x13, 0x7b, 0xea, 0x5a, 0x75, 0x3c, 0x61, 0x3c, 0x89, 0xea, 0x57, 0xe0, 0x51, 0x10, 0x7b,
	0x1e, 0x81, 0x87, 0xe0, 0x5d, 0x10, 0x9a, 0xf1, 0xd8, 0x1e, 0x27, 0x15, 0x5d, 0x74, 0x77, 0xfe,
	0x7d, 0xbe, 0xef, 0xcc, 0x9c, 0x31, 0xfc, 0x3d, 0x4d, 0x71, 0x78, 0x93, 0x26, 0x39, 0xdf, 0x9f,
	0x33, 0xca, 0x29, 0xea, 0xf2, 0x62, 0x4e, 0x72, 0xff, 0xa7, 0x01, 0xee, 0xa1, 0x70, 0x8d, 0x42,
	0x9e, 0xd0, 0x0c, 0x3d, 0x01, 0x93, 0x85, 0x9e, 0x31, 0x34, 0xf6, 0xdc, 0x83, 0xad, 0x7d, 0x19,
	0xb3, 0x1f, 0x90, 0x90, 0xb2, 0xe8, 0x78, 0x23, 0x30, 0x59, 0x88, 0x76, 0xc0, 0xa4, 0xcc, 0xb3,
	0x64, 0x00, 0xa8, 0x80, 0x33, 0x16, 0x0b, 0x2f, 0x65, 0xe8, 0x29, 0x98, 0x9c, 0x79, 0x1d, 0xe9,
	0x45, 0xca, 0x3b, 0x61, 0x38, 0xcb, 0xb1, 0x2c, 0x2f, 0xa2, 0x38, 0x13, 0x1f, 0xc1, 0xa1, 0xd7,
	0x6d, 0x7d, 0x64, 0x14, 0x93, 0x2c, 0x2c, 0x44, 0x00, 0x0e, 0xd1, 0x2e, 0x74, 0x16, 0x39, 0x61,
	0x9e, 0x2d, 0x43, 0x5c, 0x15, 0x72, 0x99, 0x13, 0x76, 0xbc, 0x11, 0x48, 0x17, 0x7a, 0x04, 0xfd,
	0xab, 0x45, 0x16, 0x9e, 0xe2, 0x19, 0xf1, 0xcc, 0xa1, 0xb1, 0xe7, 0x04, 0xb5, 0x7e, 0xd8, 0x83,
	0xee, 0x12, 0xa7, 0x0b, 0xe2, 0xff, 0x32, 0xc1, 0x2e, 0xbb, 0x17, 0xf1, 0x4c, 0x4a, 0xe3, 0x48,
	0xc2, 0x73, 0x82, 0x5a, 0x47, 0x1e, 0xf4, 0x22, 0x1a, 0x4e, 0x8a, 0x79, 0x55, 0xaa, 0x52, 0x45,
	0x56, 0x98, 0x26, 0x24, 0xe3, 0xe3, 0x48, 0x62, 0x76, 0x82, 0x5a, 0x47, 0x8f, 0x01, 0x4a, 0x59,
	0xf6, 0xd0, 0x91, 0x5e, 0xcd, 0x82, 0x7c, 0xd8, 0xcc, 0x48, 0x8c, 0x79, 0xb2, 0x24, 0xb2, 0x74,
	0x57, 0x46, 0xb4, 0x6c, 0xe8, 0x39, 0x0c, 0x2a, 0xfd, 0x03, 0x59, 0x12, 0x96, 0xf0, 0x42, 0x82,
	0x76, 0x82, 0x35, 0xbb, 0x5e, 0x6f, 0x9c, 0x5d, 0x51, 0xaf, 0xd7, 0xae, 0x27, 0x6c, 0x02, 0x09,
	0x65, 0xf1, 0x28, 0x8a, 0x98, 0xd7, 0x2f, 0x91, 0x28, 0x55, 0x74, 0x9b, 0x13, 0xcc, 0xc2, 0x6b,
	0x3c, 0x4d, 0x89, 0xe7, 0x0c, 0x8d, 0xbd, 0x7e, 0xa0, 0x59, 0x24, 0x1a, 0x46, 0x30, 0x27, 0x93,
	0x64, 0x46, 0x3c, 0x50, 0x68, 0x6a, 0x8b, 0xf0, 0x2f, 0xe6, 0x51, 0xe5, 0x77, 0x4b, 0x7f, 0x63,
	0x41, 0xdb, 0xd0, 0xa5, 0x2c, 0x1e, 0x47, 0xde, 0xa6, 0x74, 0x95, 0x8a, 0xff, 0xdd, 0x00, 0x57,
	0x9b, 0xbf, 0xce, 0xb4, 0xd1, 0x66, 0x1a, 0x41, 0x87, 0xdf, 0x8e, 0x23, 0x35, 0x00, 0x29, 0x0b,
	0xdb, 0x15, 0xa3, 0x33, 0xc5, 0xbc, 0x94, 0xd1, 0x5f, 0x60, 0x72, 0xaa, 0xd8, 0x36, 0x39, 0x45,
	0xff, 0x81, 0x1d, 0x32, 0x12, 0x25, 0x5c, 0xf2, 0x6b, 0x05, 0x4a, 0x5b, 0xc1, 0x63, 0xdf, 0x83,
	0xa7, 0xb7, 0x8a, 0xc7, 0xff, 0x61, 0x80, 0x75, 0xc6, 0xe2, 0x3f, 0x74, 0x5c, 0x23, 0x36, 0x35,
	0xc4, 0x6a, 0x02, 0xf2, 0x48, 0x58, 0xf5, 0x04, 0xe4, 0x79, 0xd0, 0x66, 0xd3, 0x69, 0xcf, 0x66,
	0x07, 0x1c, 0xca, 0xe2, 0x23, 0x1d, 0x46, 0x63, 0x78, 0x30, 0x92, 0xaf, 0x06, 0xd8, 0xe5, 0xed,
	0x12, 0x84, 0x66, 0xa2, 0xb3, 0x12, 0x89, 0x94, 0x85, 0x0d, 0x8b, 0x9e, 0x14, 0xf1, 0x42, 0xd6,
	0x48, 0xb5, 0x5a, 0xa4, 0x0e, 0xc1, 0x4d, 0xf2, 0x7c, 0x41, 0x54, 0xab, 0x1d, 0xe9, 0xd4, 0x4d,
	0x2b, 0xcd, 0x76, 0xef, 0x69, 0xd6, 0x5e, 0x6b, 0xf6, 0x8b, 0x05, 0xdd, 0x8b, 0x05, 0x61, 0x05,
	0x3a, 0x80, 0xfe, 0x67, 0x21, 0x9c, 0xb1, 0x58, 0xed, 0xa3, 0x6d, 0xb5, 0x07, 0x2e, 0x94, 0xf9,
	0x1c, 0x33, 0x3c, 0x3b, 0xde, 0x08, 0xea, 0x38, 0xf4, 0x1e, 0x06, 0x52, 0xd6, 0x8e, 0x9c, 0xc4,
	0xe5, 0x1e, 0xec, 0xe8, 0xb9, 0x9a, 0xbb, 0xaa, 0xb1, 0x96, 0x87, 0x5e, 0x83, 0x2b, 0x6d, 0xe5,
	0xfe, 0x50, 0x1b, 0xef, 0x7f, 0xbd, 0x4c, 0xe9, 0xa9, 0x2a, 0xe8, 0xd1, 0xe8, 0x15, 0x38, 0x11,
	0x49, 0x55, 0x6a, 0xb9, 0x0e, 0x3d, 0x95, 0xfa, 0x86, 0xa4, 0x84, 0x93, 0x76, 0x6e, 0x13, 0x8c,
	0x5e, 0x00, 0xa4, 0x34, 0x4e, 0xb2, 0xa3, 0x6b, 0x12, 0xde, 0xdc, 0xbd, 0x00, 0xb5, 0x80, 0x9a,
	0xa5, 0x13, 0x52, 0xc8, 0xd1, 0xaf, 0xb0, 0x74, 0x42, 0x8a, 0x36, 0x4b, 0x27, 0xa4, 0x10, 0x33,
	0x38, 0x67, 0xc9, 0x12, 0x73, 0x22, 0xb2, 0xd4, 0x8c, 0x1a, 0x4b, 0xb3, 0x3e, 0x9f, 0xc1, 0x56,
	0x8b, 0xeb, 0xe6, 0xc8, 0x1b, 0xfa, 0x25, 0xbf, 0x81, 0x7f, 0xef, 0xa4, 0x55, 0x1c, 0xa3, 0x69,
	0x31, 0xb9, 0xad, 0xe3, 0x95, 0x26, 0xb6, 0xea, 0xb4, 0x98, 0xd0, 0x51, 0x73, 0xec, 0x6a, 0x5d,
	0x34, 0x37, 0x2d, 0xde, 0x31, 0x3a, 0x93, 0xde, 0xf2, 0x0a, 0x69, 0x16, 0xff, 0x23, 0x0c, 0x56,
	0xc9, 0x2f, 0x73, 0x8e, 0xaa, 0x3d, 0x6d, 0x54, 0x39, 0x95, 0x45, 0x6c, 0xce, 0x4a, 0xd3, 0xde,
	0x8b, 0x96, 0xcd, 0x7f, 0x0b, 0xff, 0xac, 0x4d, 0xe6, 0x6e, 0xbc, 0xad, 0xa7, 0xc4, 0x6c, 0x3f,
	0x25, 0xfe, 0xae, 0xa2, 0xac, 0x22, 0x1e, 0x0d, 0xc0, 0x12, 0x2c, 0x97, 0x05, 0x84, 0xe8, 0x7f,
	0x33, 0xa0, 0x73, 0xa9, 0x9e, 0x30, 0xf1, 0x94, 0x9d, 0x36, 0x37, 0xb2, 0xd6, 0x05, 0x75, 0x42,
	0xae, 0xbf, 0xa0, 0xb4, 0xa6, 0x23, 0x6b, 0xa5, 0xa3, 0x39, 0xce, 0xf3, 0x4f, 0xd5, 0x69, 0x73,
	0x82, 0x5a, 0x7f, 0xe8, 0x8d, 0x9c, 0xda, 0xf2, 0x7f, 0xe1, 0xe5, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x52, 0xe2, 0x5a, 0x0c, 0x42, 0x08, 0x00, 0x00,
}
