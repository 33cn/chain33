package types

import (
"gitlab.33.cn/chain33/chain33/types"
)

// action for executor
${ACTIONIDTEXT}

${TYLOGACTIONTYPE}

var (
    logMap = ${LOGMAPTEXT}

    typeMap = ${TYPEMAPTEXT}
)

func init() {
    types.AllowUserExec = append(types.AllowUserExec, []byte(${EXECUTENAME}))
    types.RegistorExecutor(types.${EXECUTENAME}, NewType())
}

type ${TYPENAME} struct {
    types.ExecTypeBase
}

func NewType() *${TYPENAME} {
    c := &${TYPENAME}{}
    c.SetChild(c)
    return c
}

func (t *${TYPENAME}) GetPayload() types.Message {
    return &${ACTIONNAME}{}
}

func (t *${TYPENAME}) GetTypeMap() map[string]int32 {
    return typeMap
}

func (t *${TYPENAME}) GetLogMap() map[int64]*types.LogInfo {
    return logMap
}