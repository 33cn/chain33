// Code generated by protoc-gen-go.
// source: node.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	node.proto

It has these top-level messages:
	Node
	HaveChild
	FullNode
	ShortNode
	HashNode
	ValueNode
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Node struct {
	Ty int32 `protobuf:"varint,1,opt,name=Ty" json:"Ty,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Node_Full
	//	*Node_Short
	//	*Node_Hash
	//	*Node_Val
	Value isNode_Value `protobuf_oneof:"value"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isNode_Value interface {
	isNode_Value()
}

type Node_Full struct {
	Full *FullNode `protobuf:"bytes,2,opt,name=full,oneof"`
}
type Node_Short struct {
	Short *ShortNode `protobuf:"bytes,3,opt,name=short,oneof"`
}
type Node_Hash struct {
	Hash *HashNode `protobuf:"bytes,4,opt,name=hash,oneof"`
}
type Node_Val struct {
	Val *ValueNode `protobuf:"bytes,5,opt,name=val,oneof"`
}

func (*Node_Full) isNode_Value()  {}
func (*Node_Short) isNode_Value() {}
func (*Node_Hash) isNode_Value()  {}
func (*Node_Val) isNode_Value()   {}

func (m *Node) GetValue() isNode_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Node) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *Node) GetFull() *FullNode {
	if x, ok := m.GetValue().(*Node_Full); ok {
		return x.Full
	}
	return nil
}

func (m *Node) GetShort() *ShortNode {
	if x, ok := m.GetValue().(*Node_Short); ok {
		return x.Short
	}
	return nil
}

func (m *Node) GetHash() *HashNode {
	if x, ok := m.GetValue().(*Node_Hash); ok {
		return x.Hash
	}
	return nil
}

func (m *Node) GetVal() *ValueNode {
	if x, ok := m.GetValue().(*Node_Val); ok {
		return x.Val
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Node) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Node_OneofMarshaler, _Node_OneofUnmarshaler, _Node_OneofSizer, []interface{}{
		(*Node_Full)(nil),
		(*Node_Short)(nil),
		(*Node_Hash)(nil),
		(*Node_Val)(nil),
	}
}

func _Node_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Node)
	// value
	switch x := m.Value.(type) {
	case *Node_Full:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Full); err != nil {
			return err
		}
	case *Node_Short:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Short); err != nil {
			return err
		}
	case *Node_Hash:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hash); err != nil {
			return err
		}
	case *Node_Val:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Val); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Node.Value has unexpected type %T", x)
	}
	return nil
}

func _Node_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Node)
	switch tag {
	case 2: // value.full
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FullNode)
		err := b.DecodeMessage(msg)
		m.Value = &Node_Full{msg}
		return true, err
	case 3: // value.short
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ShortNode)
		err := b.DecodeMessage(msg)
		m.Value = &Node_Short{msg}
		return true, err
	case 4: // value.hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashNode)
		err := b.DecodeMessage(msg)
		m.Value = &Node_Hash{msg}
		return true, err
	case 5: // value.val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ValueNode)
		err := b.DecodeMessage(msg)
		m.Value = &Node_Val{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Node_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Node)
	// value
	switch x := m.Value.(type) {
	case *Node_Full:
		s := proto.Size(x.Full)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_Short:
		s := proto.Size(x.Short)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_Hash:
		s := proto.Size(x.Hash)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Node_Val:
		s := proto.Size(x.Val)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HaveChild struct {
	Have      bool  `protobuf:"varint,1,opt,name=have" json:"have,omitempty"`
	ChildNode *Node `protobuf:"bytes,2,opt,name=childNode" json:"childNode,omitempty"`
}

func (m *HaveChild) Reset()                    { *m = HaveChild{} }
func (m *HaveChild) String() string            { return proto.CompactTextString(m) }
func (*HaveChild) ProtoMessage()               {}
func (*HaveChild) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HaveChild) GetHave() bool {
	if m != nil {
		return m.Have
	}
	return false
}

func (m *HaveChild) GetChildNode() *Node {
	if m != nil {
		return m.ChildNode
	}
	return nil
}

type FullNode struct {
	HasChild []*HaveChild `protobuf:"bytes,1,rep,name=hasChild" json:"hasChild,omitempty"`
}

func (m *FullNode) Reset()                    { *m = FullNode{} }
func (m *FullNode) String() string            { return proto.CompactTextString(m) }
func (*FullNode) ProtoMessage()               {}
func (*FullNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FullNode) GetHasChild() []*HaveChild {
	if m != nil {
		return m.HasChild
	}
	return nil
}

type ShortNode struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Val *Node  `protobuf:"bytes,2,opt,name=val" json:"val,omitempty"`
}

func (m *ShortNode) Reset()                    { *m = ShortNode{} }
func (m *ShortNode) String() string            { return proto.CompactTextString(m) }
func (*ShortNode) ProtoMessage()               {}
func (*ShortNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ShortNode) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ShortNode) GetVal() *Node {
	if m != nil {
		return m.Val
	}
	return nil
}

type HashNode struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *HashNode) Reset()                    { *m = HashNode{} }
func (m *HashNode) String() string            { return proto.CompactTextString(m) }
func (*HashNode) ProtoMessage()               {}
func (*HashNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HashNode) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type ValueNode struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ValueNode) Reset()                    { *m = ValueNode{} }
func (m *ValueNode) String() string            { return proto.CompactTextString(m) }
func (*ValueNode) ProtoMessage()               {}
func (*ValueNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ValueNode) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*Node)(nil), "types.Node")
	proto.RegisterType((*HaveChild)(nil), "types.HaveChild")
	proto.RegisterType((*FullNode)(nil), "types.FullNode")
	proto.RegisterType((*ShortNode)(nil), "types.ShortNode")
	proto.RegisterType((*HashNode)(nil), "types.HashNode")
	proto.RegisterType((*ValueNode)(nil), "types.ValueNode")
}

func init() { proto.RegisterFile("node.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0xed, 0x3f, 0x6d, 0x67, 0x45, 0x97, 0xc1, 0x43, 0x2e, 0x4a, 0x0d, 0x0a, 0x15, 0xa4,
	0x07, 0xbd, 0x78, 0xf0, 0xa4, 0x20, 0xc5, 0x83, 0x87, 0xb8, 0x78, 0x8f, 0x36, 0x12, 0x31, 0xd8,
	0x65, 0xd3, 0x16, 0xfa, 0xe1, 0xfc, 0x6e, 0x32, 0x69, 0x5a, 0x5d, 0xf0, 0x36, 0x9d, 0xf7, 0x9b,
	0x37, 0x7d, 0x13, 0x80, 0xaf, 0xa6, 0x56, 0xe5, 0x7a, 0xd3, 0xb4, 0x0d, 0x26, 0xed, 0xb0, 0x56,
	0x96, 0x7f, 0x07, 0x10, 0x3f, 0x35, 0xb5, 0xc2, 0x03, 0x08, 0x57, 0x03, 0x0b, 0xf2, 0xa0, 0x48,
	0x44, 0xb8, 0x1a, 0xf0, 0x1c, 0xe2, 0xf7, 0xce, 0x18, 0x16, 0xe6, 0x41, 0xb1, 0xb8, 0x3a, 0x2c,
	0x1d, 0x5e, 0x3e, 0x74, 0xc6, 0x10, 0x5e, 0xed, 0x08, 0x27, 0x63, 0x01, 0x89, 0xd5, 0xcd, 0xa6,
	0x65, 0x91, 0xe3, 0x96, 0x9e, 0x7b, 0xa6, 0x9e, 0x07, 0x47, 0x80, 0x0c, 0xb5, 0xb4, 0x9a, 0xc5,
	0x5b, 0x86, 0x95, 0xb4, 0x7a, 0x32, 0x24, 0x19, 0xcf, 0x20, 0xea, 0xa5, 0x61, 0xc9, 0x96, 0xdd,
	0x8b, 0x34, 0x9d, 0xf2, 0x18, 0xc9, 0x77, 0x7b, 0x90, 0xf4, 0xd4, 0xe3, 0x8f, 0x90, 0x55, 0xb2,
	0x57, 0xf7, 0xfa, 0xc3, 0xd4, 0x88, 0xb4, 0xa2, 0x57, 0x2e, 0x45, 0x2a, 0x5c, 0x8d, 0x17, 0x90,
	0xbd, 0x91, 0x48, 0xd3, 0x3e, 0xcc, 0xc2, 0xbb, 0x52, 0x4b, 0xfc, 0xaa, 0xfc, 0x06, 0xd2, 0x29,
	0x1f, 0x5e, 0x42, 0xaa, 0xa5, 0x75, 0xb6, 0x2c, 0xc8, 0xa3, 0x3f, 0xff, 0x32, 0xaf, 0x13, 0x33,
	0xc1, 0x6f, 0x21, 0x9b, 0x13, 0xe3, 0x12, 0xa2, 0x4f, 0x35, 0x9e, 0x72, 0x5f, 0x50, 0x89, 0xc7,
	0x63, 0xa6, 0x7f, 0xb6, 0x53, 0x9f, 0x9f, 0x40, 0x3a, 0x9d, 0x61, 0x8c, 0x60, 0xb5, 0x9f, 0x76,
	0x35, 0x3f, 0x85, 0x6c, 0x3e, 0x00, 0x1e, 0xf9, 0xe4, 0x9e, 0x18, 0x3f, 0x5e, 0x77, 0xdd, 0xa3,
	0x5e, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x31, 0x1e, 0x56, 0xb6, 0xe2, 0x01, 0x00, 0x00,
}
