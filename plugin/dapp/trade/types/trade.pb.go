// Code generated by protoc-gen-go. DO NOT EDIT.
// source: executorTrade.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	executorTrade.proto

It has these top-level messages:
	Trade
	TradeForSell
	TradeForBuy
	TradeForRevokeSell
	TradeForBuyLimit
	TradeForSellMarket
	TradeForRevokeBuy
	SellOrder
	BuyLimitOrder
	ReceiptBuyBase
	ReceiptSellBase
	ReceiptTradeBuyMarket
	ReceiptTradeBuyLimit
	ReceiptTradeBuyRevoke
	ReceiptTradeSell
	ReceiptSellMarket
	ReceiptTradeRevoke
	ReqAddrTokens
	ReqTokenSellOrder
	ReqTokenBuyOrder
	ReplyBuyOrder
	ReplySellOrder
	ReplySellOrders
	ReplyBuyOrders
	ReplyTradeOrder
	ReplyTradeOrders
	ReqSellToken
	ReqRevokeSell
	ReqBuyToken
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// trade 交易部分
//
type Trade struct {
	// Types that are valid to be assigned to Value:
	//	*Trade_Tokensell
	//	*Trade_Tokenbuy
	//	*Trade_Tokenrevokesell
	//	*Trade_Tokenbuylimit
	//	*Trade_Tokensellmarket
	//	*Trade_Tokenrevokebuy
	Value isTrade_Value `protobuf_oneof:"value"`
	Ty    int32         `protobuf:"varint,4,opt,name=ty" json:"ty,omitempty"`
}

func (m *Trade) Reset()                    { *m = Trade{} }
func (m *Trade) String() string            { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()               {}
func (*Trade) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isTrade_Value interface {
	isTrade_Value()
}

type Trade_Tokensell struct {
	Tokensell *TradeForSell `protobuf:"bytes,1,opt,name=tokensell,oneof"`
}
type Trade_Tokenbuy struct {
	Tokenbuy *TradeForBuy `protobuf:"bytes,2,opt,name=tokenbuy,oneof"`
}
type Trade_Tokenrevokesell struct {
	Tokenrevokesell *TradeForRevokeSell `protobuf:"bytes,3,opt,name=tokenrevokesell,oneof"`
}
type Trade_Tokenbuylimit struct {
	Tokenbuylimit *TradeForBuyLimit `protobuf:"bytes,5,opt,name=tokenbuylimit,oneof"`
}
type Trade_Tokensellmarket struct {
	Tokensellmarket *TradeForSellMarket `protobuf:"bytes,6,opt,name=tokensellmarket,oneof"`
}
type Trade_Tokenrevokebuy struct {
	Tokenrevokebuy *TradeForRevokeBuy `protobuf:"bytes,7,opt,name=tokenrevokebuy,oneof"`
}

func (*Trade_Tokensell) isTrade_Value()       {}
func (*Trade_Tokenbuy) isTrade_Value()        {}
func (*Trade_Tokenrevokesell) isTrade_Value() {}
func (*Trade_Tokenbuylimit) isTrade_Value()   {}
func (*Trade_Tokensellmarket) isTrade_Value() {}
func (*Trade_Tokenrevokebuy) isTrade_Value()  {}

func (m *Trade) GetValue() isTrade_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Trade) GetTokensell() *TradeForSell {
	if x, ok := m.GetValue().(*Trade_Tokensell); ok {
		return x.Tokensell
	}
	return nil
}

func (m *Trade) GetTokenbuy() *TradeForBuy {
	if x, ok := m.GetValue().(*Trade_Tokenbuy); ok {
		return x.Tokenbuy
	}
	return nil
}

func (m *Trade) GetTokenrevokesell() *TradeForRevokeSell {
	if x, ok := m.GetValue().(*Trade_Tokenrevokesell); ok {
		return x.Tokenrevokesell
	}
	return nil
}

func (m *Trade) GetTokenbuylimit() *TradeForBuyLimit {
	if x, ok := m.GetValue().(*Trade_Tokenbuylimit); ok {
		return x.Tokenbuylimit
	}
	return nil
}

func (m *Trade) GetTokensellmarket() *TradeForSellMarket {
	if x, ok := m.GetValue().(*Trade_Tokensellmarket); ok {
		return x.Tokensellmarket
	}
	return nil
}

func (m *Trade) GetTokenrevokebuy() *TradeForRevokeBuy {
	if x, ok := m.GetValue().(*Trade_Tokenrevokebuy); ok {
		return x.Tokenrevokebuy
	}
	return nil
}

func (m *Trade) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Trade) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Trade_OneofMarshaler, _Trade_OneofUnmarshaler, _Trade_OneofSizer, []interface{}{
		(*Trade_Tokensell)(nil),
		(*Trade_Tokenbuy)(nil),
		(*Trade_Tokenrevokesell)(nil),
		(*Trade_Tokenbuylimit)(nil),
		(*Trade_Tokensellmarket)(nil),
		(*Trade_Tokenrevokebuy)(nil),
	}
}

func _Trade_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Trade)
	// value
	switch x := m.Value.(type) {
	case *Trade_Tokensell:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tokensell); err != nil {
			return err
		}
	case *Trade_Tokenbuy:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tokenbuy); err != nil {
			return err
		}
	case *Trade_Tokenrevokesell:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tokenrevokesell); err != nil {
			return err
		}
	case *Trade_Tokenbuylimit:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tokenbuylimit); err != nil {
			return err
		}
	case *Trade_Tokensellmarket:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tokensellmarket); err != nil {
			return err
		}
	case *Trade_Tokenrevokebuy:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tokenrevokebuy); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Trade.Value has unexpected type %T", x)
	}
	return nil
}

func _Trade_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Trade)
	switch tag {
	case 1: // value.tokensell
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TradeForSell)
		err := b.DecodeMessage(msg)
		m.Value = &Trade_Tokensell{msg}
		return true, err
	case 2: // value.tokenbuy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TradeForBuy)
		err := b.DecodeMessage(msg)
		m.Value = &Trade_Tokenbuy{msg}
		return true, err
	case 3: // value.tokenrevokesell
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TradeForRevokeSell)
		err := b.DecodeMessage(msg)
		m.Value = &Trade_Tokenrevokesell{msg}
		return true, err
	case 5: // value.tokenbuylimit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TradeForBuyLimit)
		err := b.DecodeMessage(msg)
		m.Value = &Trade_Tokenbuylimit{msg}
		return true, err
	case 6: // value.tokensellmarket
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TradeForSellMarket)
		err := b.DecodeMessage(msg)
		m.Value = &Trade_Tokensellmarket{msg}
		return true, err
	case 7: // value.tokenrevokebuy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TradeForRevokeBuy)
		err := b.DecodeMessage(msg)
		m.Value = &Trade_Tokenrevokebuy{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Trade_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Trade)
	// value
	switch x := m.Value.(type) {
	case *Trade_Tokensell:
		s := proto.Size(x.Tokensell)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Trade_Tokenbuy:
		s := proto.Size(x.Tokenbuy)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Trade_Tokenrevokesell:
		s := proto.Size(x.Tokenrevokesell)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Trade_Tokenbuylimit:
		s := proto.Size(x.Tokenbuylimit)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Trade_Tokensellmarket:
		s := proto.Size(x.Tokensellmarket)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Trade_Tokenrevokebuy:
		s := proto.Size(x.Tokenrevokebuy)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// 创建众筹交易,确定一手交易的token的数量，单价以及总共有多少手token可以进行众筹
type TradeForSell struct {
	TokenSymbol string `protobuf:"bytes,1,opt,name=tokenSymbol" json:"tokenSymbol,omitempty"`
	// 每一手出售的token的数量
	AmountPerBoardlot int64 `protobuf:"varint,2,opt,name=amountPerBoardlot" json:"amountPerBoardlot,omitempty"`
	// 起卖手数,必须达到这个门槛才允许进行交易
	MinBoardlot int64 `protobuf:"varint,3,opt,name=minBoardlot" json:"minBoardlot,omitempty"`
	// 每一手token的价格
	PricePerBoardlot int64 `protobuf:"varint,4,opt,name=pricePerBoardlot" json:"pricePerBoardlot,omitempty"`
	TotalBoardlot    int64 `protobuf:"varint,5,opt,name=totalBoardlot" json:"totalBoardlot,omitempty"`
	// 此次出售的起始时间，如果非众筹则可以忽略此时间
	Starttime int64 `protobuf:"varint,6,opt,name=starttime" json:"starttime,omitempty"`
	Stoptime  int64 `protobuf:"varint,7,opt,name=stoptime" json:"stoptime,omitempty"`
	Crowdfund bool  `protobuf:"varint,8,opt,name=crowdfund" json:"crowdfund,omitempty"`
}

func (m *TradeForSell) Reset()                    { *m = TradeForSell{} }
func (m *TradeForSell) String() string            { return proto.CompactTextString(m) }
func (*TradeForSell) ProtoMessage()               {}
func (*TradeForSell) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TradeForSell) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *TradeForSell) GetAmountPerBoardlot() int64 {
	if m != nil {
		return m.AmountPerBoardlot
	}
	return 0
}

func (m *TradeForSell) GetMinBoardlot() int64 {
	if m != nil {
		return m.MinBoardlot
	}
	return 0
}

func (m *TradeForSell) GetPricePerBoardlot() int64 {
	if m != nil {
		return m.PricePerBoardlot
	}
	return 0
}

func (m *TradeForSell) GetTotalBoardlot() int64 {
	if m != nil {
		return m.TotalBoardlot
	}
	return 0
}

func (m *TradeForSell) GetStarttime() int64 {
	if m != nil {
		return m.Starttime
	}
	return 0
}

func (m *TradeForSell) GetStoptime() int64 {
	if m != nil {
		return m.Stoptime
	}
	return 0
}

func (m *TradeForSell) GetCrowdfund() bool {
	if m != nil {
		return m.Crowdfund
	}
	return false
}

// 购买者发起交易用来购买token持有者之前挂单出售的token
// 其中的hash为token出售者发起出售交易的hash
type TradeForBuy struct {
	SellID      string `protobuf:"bytes,1,opt,name=sellID" json:"sellID,omitempty"`
	BoardlotCnt int64  `protobuf:"varint,2,opt,name=boardlotCnt" json:"boardlotCnt,omitempty"`
}

func (m *TradeForBuy) Reset()                    { *m = TradeForBuy{} }
func (m *TradeForBuy) String() string            { return proto.CompactTextString(m) }
func (*TradeForBuy) ProtoMessage()               {}
func (*TradeForBuy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TradeForBuy) GetSellID() string {
	if m != nil {
		return m.SellID
	}
	return ""
}

func (m *TradeForBuy) GetBoardlotCnt() int64 {
	if m != nil {
		return m.BoardlotCnt
	}
	return 0
}

// 允许token的持有者撤销之前未成交出售token的挂单
type TradeForRevokeSell struct {
	SellID string `protobuf:"bytes,1,opt,name=sellID" json:"sellID,omitempty"`
}

func (m *TradeForRevokeSell) Reset()                    { *m = TradeForRevokeSell{} }
func (m *TradeForRevokeSell) String() string            { return proto.CompactTextString(m) }
func (*TradeForRevokeSell) ProtoMessage()               {}
func (*TradeForRevokeSell) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TradeForRevokeSell) GetSellID() string {
	if m != nil {
		return m.SellID
	}
	return ""
}

// 限价买单构造请求
type TradeForBuyLimit struct {
	TokenSymbol       string `protobuf:"bytes,1,opt,name=tokenSymbol" json:"tokenSymbol,omitempty"`
	AmountPerBoardlot int64  `protobuf:"varint,2,opt,name=amountPerBoardlot" json:"amountPerBoardlot,omitempty"`
	MinBoardlot       int64  `protobuf:"varint,3,opt,name=minBoardlot" json:"minBoardlot,omitempty"`
	PricePerBoardlot  int64  `protobuf:"varint,4,opt,name=pricePerBoardlot" json:"pricePerBoardlot,omitempty"`
	TotalBoardlot     int64  `protobuf:"varint,5,opt,name=totalBoardlot" json:"totalBoardlot,omitempty"`
}

func (m *TradeForBuyLimit) Reset()                    { *m = TradeForBuyLimit{} }
func (m *TradeForBuyLimit) String() string            { return proto.CompactTextString(m) }
func (*TradeForBuyLimit) ProtoMessage()               {}
func (*TradeForBuyLimit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TradeForBuyLimit) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *TradeForBuyLimit) GetAmountPerBoardlot() int64 {
	if m != nil {
		return m.AmountPerBoardlot
	}
	return 0
}

func (m *TradeForBuyLimit) GetMinBoardlot() int64 {
	if m != nil {
		return m.MinBoardlot
	}
	return 0
}

func (m *TradeForBuyLimit) GetPricePerBoardlot() int64 {
	if m != nil {
		return m.PricePerBoardlot
	}
	return 0
}

func (m *TradeForBuyLimit) GetTotalBoardlot() int64 {
	if m != nil {
		return m.TotalBoardlot
	}
	return 0
}

// 现价卖单
type TradeForSellMarket struct {
	BuyID       string `protobuf:"bytes,1,opt,name=buyID" json:"buyID,omitempty"`
	BoardlotCnt int64  `protobuf:"varint,2,opt,name=boardlotCnt" json:"boardlotCnt,omitempty"`
}

func (m *TradeForSellMarket) Reset()                    { *m = TradeForSellMarket{} }
func (m *TradeForSellMarket) String() string            { return proto.CompactTextString(m) }
func (*TradeForSellMarket) ProtoMessage()               {}
func (*TradeForSellMarket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TradeForSellMarket) GetBuyID() string {
	if m != nil {
		return m.BuyID
	}
	return ""
}

func (m *TradeForSellMarket) GetBoardlotCnt() int64 {
	if m != nil {
		return m.BoardlotCnt
	}
	return 0
}

// 撤销买单
type TradeForRevokeBuy struct {
	BuyID string `protobuf:"bytes,1,opt,name=buyID" json:"buyID,omitempty"`
}

func (m *TradeForRevokeBuy) Reset()                    { *m = TradeForRevokeBuy{} }
func (m *TradeForRevokeBuy) String() string            { return proto.CompactTextString(m) }
func (*TradeForRevokeBuy) ProtoMessage()               {}
func (*TradeForRevokeBuy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TradeForRevokeBuy) GetBuyID() string {
	if m != nil {
		return m.BuyID
	}
	return ""
}

// 数据库部分
type SellOrder struct {
	TokenSymbol string `protobuf:"bytes,1,opt,name=tokenSymbol" json:"tokenSymbol,omitempty"`
	Address     string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	// 每一手出售的token的数量
	AmountPerBoardlot int64 `protobuf:"varint,3,opt,name=amountPerBoardlot" json:"amountPerBoardlot,omitempty"`
	MinBoardlot       int64 `protobuf:"varint,4,opt,name=minBoardlot" json:"minBoardlot,omitempty"`
	// 每一手token的价格
	PricePerBoardlot int64 `protobuf:"varint,5,opt,name=pricePerBoardlot" json:"pricePerBoardlot,omitempty"`
	TotalBoardlot    int64 `protobuf:"varint,6,opt,name=totalBoardlot" json:"totalBoardlot,omitempty"`
	SoldBoardlot     int64 `protobuf:"varint,7,opt,name=soldBoardlot" json:"soldBoardlot,omitempty"`
	// 此次出售的起始时间，如果非众筹则可以忽略此时间
	Starttime int64 `protobuf:"varint,8,opt,name=starttime" json:"starttime,omitempty"`
	Stoptime  int64 `protobuf:"varint,9,opt,name=stoptime" json:"stoptime,omitempty"`
	Crowdfund bool  `protobuf:"varint,10,opt,name=crowdfund" json:"crowdfund,omitempty"`
	// 此处使用tx的hash来指定
	SellID string `protobuf:"bytes,11,opt,name=sellID" json:"sellID,omitempty"`
	Status int32  `protobuf:"varint,12,opt,name=status" json:"status,omitempty"`
	Height int64  `protobuf:"varint,13,opt,name=height" json:"height,omitempty"`
}

func (m *SellOrder) Reset()                    { *m = SellOrder{} }
func (m *SellOrder) String() string            { return proto.CompactTextString(m) }
func (*SellOrder) ProtoMessage()               {}
func (*SellOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SellOrder) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *SellOrder) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SellOrder) GetAmountPerBoardlot() int64 {
	if m != nil {
		return m.AmountPerBoardlot
	}
	return 0
}

func (m *SellOrder) GetMinBoardlot() int64 {
	if m != nil {
		return m.MinBoardlot
	}
	return 0
}

func (m *SellOrder) GetPricePerBoardlot() int64 {
	if m != nil {
		return m.PricePerBoardlot
	}
	return 0
}

func (m *SellOrder) GetTotalBoardlot() int64 {
	if m != nil {
		return m.TotalBoardlot
	}
	return 0
}

func (m *SellOrder) GetSoldBoardlot() int64 {
	if m != nil {
		return m.SoldBoardlot
	}
	return 0
}

func (m *SellOrder) GetStarttime() int64 {
	if m != nil {
		return m.Starttime
	}
	return 0
}

func (m *SellOrder) GetStoptime() int64 {
	if m != nil {
		return m.Stoptime
	}
	return 0
}

func (m *SellOrder) GetCrowdfund() bool {
	if m != nil {
		return m.Crowdfund
	}
	return false
}

func (m *SellOrder) GetSellID() string {
	if m != nil {
		return m.SellID
	}
	return ""
}

func (m *SellOrder) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SellOrder) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// 限价买单数据库记录
type BuyLimitOrder struct {
	TokenSymbol       string `protobuf:"bytes,1,opt,name=tokenSymbol" json:"tokenSymbol,omitempty"`
	Address           string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	AmountPerBoardlot int64  `protobuf:"varint,3,opt,name=amountPerBoardlot" json:"amountPerBoardlot,omitempty"`
	MinBoardlot       int64  `protobuf:"varint,4,opt,name=minBoardlot" json:"minBoardlot,omitempty"`
	PricePerBoardlot  int64  `protobuf:"varint,5,opt,name=pricePerBoardlot" json:"pricePerBoardlot,omitempty"`
	TotalBoardlot     int64  `protobuf:"varint,6,opt,name=totalBoardlot" json:"totalBoardlot,omitempty"`
	BoughtBoardlot    int64  `protobuf:"varint,7,opt,name=boughtBoardlot" json:"boughtBoardlot,omitempty"`
	BuyID             string `protobuf:"bytes,8,opt,name=buyID" json:"buyID,omitempty"`
	Status            int32  `protobuf:"varint,9,opt,name=status" json:"status,omitempty"`
	Height            int64  `protobuf:"varint,10,opt,name=height" json:"height,omitempty"`
}

func (m *BuyLimitOrder) Reset()                    { *m = BuyLimitOrder{} }
func (m *BuyLimitOrder) String() string            { return proto.CompactTextString(m) }
func (*BuyLimitOrder) ProtoMessage()               {}
func (*BuyLimitOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BuyLimitOrder) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *BuyLimitOrder) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BuyLimitOrder) GetAmountPerBoardlot() int64 {
	if m != nil {
		return m.AmountPerBoardlot
	}
	return 0
}

func (m *BuyLimitOrder) GetMinBoardlot() int64 {
	if m != nil {
		return m.MinBoardlot
	}
	return 0
}

func (m *BuyLimitOrder) GetPricePerBoardlot() int64 {
	if m != nil {
		return m.PricePerBoardlot
	}
	return 0
}

func (m *BuyLimitOrder) GetTotalBoardlot() int64 {
	if m != nil {
		return m.TotalBoardlot
	}
	return 0
}

func (m *BuyLimitOrder) GetBoughtBoardlot() int64 {
	if m != nil {
		return m.BoughtBoardlot
	}
	return 0
}

func (m *BuyLimitOrder) GetBuyID() string {
	if m != nil {
		return m.BuyID
	}
	return ""
}

func (m *BuyLimitOrder) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *BuyLimitOrder) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// 执行器日志部分
type ReceiptBuyBase struct {
	TokenSymbol       string `protobuf:"bytes,1,opt,name=tokenSymbol" json:"tokenSymbol,omitempty"`
	Owner             string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	AmountPerBoardlot string `protobuf:"bytes,3,opt,name=amountPerBoardlot" json:"amountPerBoardlot,omitempty"`
	MinBoardlot       int64  `protobuf:"varint,4,opt,name=minBoardlot" json:"minBoardlot,omitempty"`
	PricePerBoardlot  string `protobuf:"bytes,5,opt,name=pricePerBoardlot" json:"pricePerBoardlot,omitempty"`
	TotalBoardlot     int64  `protobuf:"varint,6,opt,name=totalBoardlot" json:"totalBoardlot,omitempty"`
	BoughtBoardlot    int64  `protobuf:"varint,7,opt,name=boughtBoardlot" json:"boughtBoardlot,omitempty"`
	BuyID             string `protobuf:"bytes,8,opt,name=buyID" json:"buyID,omitempty"`
	Status            string `protobuf:"bytes,9,opt,name=status" json:"status,omitempty"`
	SellID            string `protobuf:"bytes,10,opt,name=sellID" json:"sellID,omitempty"`
	TxHash            string `protobuf:"bytes,11,opt,name=txHash" json:"txHash,omitempty"`
	Height            int64  `protobuf:"varint,12,opt,name=height" json:"height,omitempty"`
}

func (m *ReceiptBuyBase) Reset()                    { *m = ReceiptBuyBase{} }
func (m *ReceiptBuyBase) String() string            { return proto.CompactTextString(m) }
func (*ReceiptBuyBase) ProtoMessage()               {}
func (*ReceiptBuyBase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReceiptBuyBase) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *ReceiptBuyBase) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ReceiptBuyBase) GetAmountPerBoardlot() string {
	if m != nil {
		return m.AmountPerBoardlot
	}
	return ""
}

func (m *ReceiptBuyBase) GetMinBoardlot() int64 {
	if m != nil {
		return m.MinBoardlot
	}
	return 0
}

func (m *ReceiptBuyBase) GetPricePerBoardlot() string {
	if m != nil {
		return m.PricePerBoardlot
	}
	return ""
}

func (m *ReceiptBuyBase) GetTotalBoardlot() int64 {
	if m != nil {
		return m.TotalBoardlot
	}
	return 0
}

func (m *ReceiptBuyBase) GetBoughtBoardlot() int64 {
	if m != nil {
		return m.BoughtBoardlot
	}
	return 0
}

func (m *ReceiptBuyBase) GetBuyID() string {
	if m != nil {
		return m.BuyID
	}
	return ""
}

func (m *ReceiptBuyBase) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ReceiptBuyBase) GetSellID() string {
	if m != nil {
		return m.SellID
	}
	return ""
}

func (m *ReceiptBuyBase) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *ReceiptBuyBase) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ReceiptSellBase struct {
	TokenSymbol string `protobuf:"bytes,1,opt,name=tokenSymbol" json:"tokenSymbol,omitempty"`
	Owner       string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	// 每一手出售的token的数量
	AmountPerBoardlot string `protobuf:"bytes,3,opt,name=amountPerBoardlot" json:"amountPerBoardlot,omitempty"`
	MinBoardlot       int64  `protobuf:"varint,4,opt,name=minBoardlot" json:"minBoardlot,omitempty"`
	// 每一手token的价格
	PricePerBoardlot string `protobuf:"bytes,5,opt,name=pricePerBoardlot" json:"pricePerBoardlot,omitempty"`
	TotalBoardlot    int64  `protobuf:"varint,6,opt,name=totalBoardlot" json:"totalBoardlot,omitempty"`
	SoldBoardlot     int64  `protobuf:"varint,7,opt,name=soldBoardlot" json:"soldBoardlot,omitempty"`
	// 此次出售的起始时间，如果非众筹则可以忽略此时间
	Starttime int64 `protobuf:"varint,8,opt,name=starttime" json:"starttime,omitempty"`
	Stoptime  int64 `protobuf:"varint,9,opt,name=stoptime" json:"stoptime,omitempty"`
	Crowdfund bool  `protobuf:"varint,10,opt,name=crowdfund" json:"crowdfund,omitempty"`
	// 此处使用tx的hash来指定
	SellID string `protobuf:"bytes,11,opt,name=sellID" json:"sellID,omitempty"`
	Status string `protobuf:"bytes,12,opt,name=status" json:"status,omitempty"`
	// buyid
	BuyID  string `protobuf:"bytes,13,opt,name=buyID" json:"buyID,omitempty"`
	TxHash string `protobuf:"bytes,14,opt,name=txHash" json:"txHash,omitempty"`
	Height int64  `protobuf:"varint,15,opt,name=height" json:"height,omitempty"`
}

func (m *ReceiptSellBase) Reset()                    { *m = ReceiptSellBase{} }
func (m *ReceiptSellBase) String() string            { return proto.CompactTextString(m) }
func (*ReceiptSellBase) ProtoMessage()               {}
func (*ReceiptSellBase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ReceiptSellBase) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *ReceiptSellBase) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ReceiptSellBase) GetAmountPerBoardlot() string {
	if m != nil {
		return m.AmountPerBoardlot
	}
	return ""
}

func (m *ReceiptSellBase) GetMinBoardlot() int64 {
	if m != nil {
		return m.MinBoardlot
	}
	return 0
}

func (m *ReceiptSellBase) GetPricePerBoardlot() string {
	if m != nil {
		return m.PricePerBoardlot
	}
	return ""
}

func (m *ReceiptSellBase) GetTotalBoardlot() int64 {
	if m != nil {
		return m.TotalBoardlot
	}
	return 0
}

func (m *ReceiptSellBase) GetSoldBoardlot() int64 {
	if m != nil {
		return m.SoldBoardlot
	}
	return 0
}

func (m *ReceiptSellBase) GetStarttime() int64 {
	if m != nil {
		return m.Starttime
	}
	return 0
}

func (m *ReceiptSellBase) GetStoptime() int64 {
	if m != nil {
		return m.Stoptime
	}
	return 0
}

func (m *ReceiptSellBase) GetCrowdfund() bool {
	if m != nil {
		return m.Crowdfund
	}
	return false
}

func (m *ReceiptSellBase) GetSellID() string {
	if m != nil {
		return m.SellID
	}
	return ""
}

func (m *ReceiptSellBase) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ReceiptSellBase) GetBuyID() string {
	if m != nil {
		return m.BuyID
	}
	return ""
}

func (m *ReceiptSellBase) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *ReceiptSellBase) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ReceiptTradeBuyMarket struct {
	Base *ReceiptBuyBase `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *ReceiptTradeBuyMarket) Reset()                    { *m = ReceiptTradeBuyMarket{} }
func (m *ReceiptTradeBuyMarket) String() string            { return proto.CompactTextString(m) }
func (*ReceiptTradeBuyMarket) ProtoMessage()               {}
func (*ReceiptTradeBuyMarket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ReceiptTradeBuyMarket) GetBase() *ReceiptBuyBase {
	if m != nil {
		return m.Base
	}
	return nil
}

type ReceiptTradeBuyLimit struct {
	Base *ReceiptBuyBase `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *ReceiptTradeBuyLimit) Reset()                    { *m = ReceiptTradeBuyLimit{} }
func (m *ReceiptTradeBuyLimit) String() string            { return proto.CompactTextString(m) }
func (*ReceiptTradeBuyLimit) ProtoMessage()               {}
func (*ReceiptTradeBuyLimit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ReceiptTradeBuyLimit) GetBase() *ReceiptBuyBase {
	if m != nil {
		return m.Base
	}
	return nil
}

type ReceiptTradeBuyRevoke struct {
	Base *ReceiptBuyBase `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *ReceiptTradeBuyRevoke) Reset()                    { *m = ReceiptTradeBuyRevoke{} }
func (m *ReceiptTradeBuyRevoke) String() string            { return proto.CompactTextString(m) }
func (*ReceiptTradeBuyRevoke) ProtoMessage()               {}
func (*ReceiptTradeBuyRevoke) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ReceiptTradeBuyRevoke) GetBase() *ReceiptBuyBase {
	if m != nil {
		return m.Base
	}
	return nil
}

type ReceiptTradeSell struct {
	Base *ReceiptSellBase `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *ReceiptTradeSell) Reset()                    { *m = ReceiptTradeSell{} }
func (m *ReceiptTradeSell) String() string            { return proto.CompactTextString(m) }
func (*ReceiptTradeSell) ProtoMessage()               {}
func (*ReceiptTradeSell) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ReceiptTradeSell) GetBase() *ReceiptSellBase {
	if m != nil {
		return m.Base
	}
	return nil
}

type ReceiptSellMarket struct {
	Base *ReceiptSellBase `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *ReceiptSellMarket) Reset()                    { *m = ReceiptSellMarket{} }
func (m *ReceiptSellMarket) String() string            { return proto.CompactTextString(m) }
func (*ReceiptSellMarket) ProtoMessage()               {}
func (*ReceiptSellMarket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ReceiptSellMarket) GetBase() *ReceiptSellBase {
	if m != nil {
		return m.Base
	}
	return nil
}

type ReceiptTradeRevoke struct {
	Base *ReceiptSellBase `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *ReceiptTradeRevoke) Reset()                    { *m = ReceiptTradeRevoke{} }
func (m *ReceiptTradeRevoke) String() string            { return proto.CompactTextString(m) }
func (*ReceiptTradeRevoke) ProtoMessage()               {}
func (*ReceiptTradeRevoke) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ReceiptTradeRevoke) GetBase() *ReceiptSellBase {
	if m != nil {
		return m.Base
	}
	return nil
}

type ReqAddrTokens struct {
	Addr      string   `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Status    int32    `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Token     []string `protobuf:"bytes,3,rep,name=token" json:"token,omitempty"`
	Direction int32    `protobuf:"varint,4,opt,name=direction" json:"direction,omitempty"`
	Count     int32    `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	FromKey   string   `protobuf:"bytes,6,opt,name=fromKey" json:"fromKey,omitempty"`
}

func (m *ReqAddrTokens) Reset()                    { *m = ReqAddrTokens{} }
func (m *ReqAddrTokens) String() string            { return proto.CompactTextString(m) }
func (*ReqAddrTokens) ProtoMessage()               {}
func (*ReqAddrTokens) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ReqAddrTokens) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReqAddrTokens) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReqAddrTokens) GetToken() []string {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *ReqAddrTokens) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *ReqAddrTokens) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqAddrTokens) GetFromKey() string {
	if m != nil {
		return m.FromKey
	}
	return ""
}

// 获取Token未完成卖单的交易列表
// 	 fromKey : 第一次传参为空，获取卖单单价最低的列表。 当要获得下一页时， 传当前页最后一个；当要获得上一页时， 传当前页第一个。
// 	 count :获取交易列表的个数。
// 	 direction :查找方式；0，上一页；1，下一页。  越靠后的也单价越贵
type ReqTokenSellOrder struct {
	TokenSymbol string `protobuf:"bytes,1,opt,name=tokenSymbol" json:"tokenSymbol,omitempty"`
	FromKey     string `protobuf:"bytes,2,opt,name=fromKey" json:"fromKey,omitempty"`
	Count       int32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Direction   int32  `protobuf:"varint,4,opt,name=direction" json:"direction,omitempty"`
	Status      int32  `protobuf:"varint,5,opt,name=status" json:"status,omitempty"`
}

func (m *ReqTokenSellOrder) Reset()                    { *m = ReqTokenSellOrder{} }
func (m *ReqTokenSellOrder) String() string            { return proto.CompactTextString(m) }
func (*ReqTokenSellOrder) ProtoMessage()               {}
func (*ReqTokenSellOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ReqTokenSellOrder) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *ReqTokenSellOrder) GetFromKey() string {
	if m != nil {
		return m.FromKey
	}
	return ""
}

func (m *ReqTokenSellOrder) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqTokenSellOrder) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *ReqTokenSellOrder) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type ReqTokenBuyOrder struct {
	TokenSymbol string `protobuf:"bytes,1,opt,name=tokenSymbol" json:"tokenSymbol,omitempty"`
	FromKey     string `protobuf:"bytes,2,opt,name=fromKey" json:"fromKey,omitempty"`
	Count       int32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Direction   int32  `protobuf:"varint,4,opt,name=direction" json:"direction,omitempty"`
	Status      int32  `protobuf:"varint,5,opt,name=status" json:"status,omitempty"`
}

func (m *ReqTokenBuyOrder) Reset()                    { *m = ReqTokenBuyOrder{} }
func (m *ReqTokenBuyOrder) String() string            { return proto.CompactTextString(m) }
func (*ReqTokenBuyOrder) ProtoMessage()               {}
func (*ReqTokenBuyOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ReqTokenBuyOrder) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *ReqTokenBuyOrder) GetFromKey() string {
	if m != nil {
		return m.FromKey
	}
	return ""
}

func (m *ReqTokenBuyOrder) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqTokenBuyOrder) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *ReqTokenBuyOrder) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type ReplyBuyOrder struct {
	TokenSymbol       string `protobuf:"bytes,1,opt,name=tokenSymbol" json:"tokenSymbol,omitempty"`
	Owner             string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	AmountPerBoardlot int64  `protobuf:"varint,3,opt,name=amountPerBoardlot" json:"amountPerBoardlot,omitempty"`
	MinBoardlot       int64  `protobuf:"varint,4,opt,name=minBoardlot" json:"minBoardlot,omitempty"`
	PricePerBoardlot  int64  `protobuf:"varint,5,opt,name=pricePerBoardlot" json:"pricePerBoardlot,omitempty"`
	TotalBoardlot     int64  `protobuf:"varint,6,opt,name=totalBoardlot" json:"totalBoardlot,omitempty"`
	BoughtBoardlot    int64  `protobuf:"varint,7,opt,name=boughtBoardlot" json:"boughtBoardlot,omitempty"`
	BuyID             string `protobuf:"bytes,8,opt,name=buyID" json:"buyID,omitempty"`
	Status            int32  `protobuf:"varint,9,opt,name=status" json:"status,omitempty"`
	SellID            string `protobuf:"bytes,10,opt,name=sellID" json:"sellID,omitempty"`
	TxHash            string `protobuf:"bytes,11,opt,name=txHash" json:"txHash,omitempty"`
	Height            int64  `protobuf:"varint,12,opt,name=height" json:"height,omitempty"`
	Key               string `protobuf:"bytes,13,opt,name=key" json:"key,omitempty"`
}

func (m *ReplyBuyOrder) Reset()                    { *m = ReplyBuyOrder{} }
func (m *ReplyBuyOrder) String() string            { return proto.CompactTextString(m) }
func (*ReplyBuyOrder) ProtoMessage()               {}
func (*ReplyBuyOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ReplyBuyOrder) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *ReplyBuyOrder) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ReplyBuyOrder) GetAmountPerBoardlot() int64 {
	if m != nil {
		return m.AmountPerBoardlot
	}
	return 0
}

func (m *ReplyBuyOrder) GetMinBoardlot() int64 {
	if m != nil {
		return m.MinBoardlot
	}
	return 0
}

func (m *ReplyBuyOrder) GetPricePerBoardlot() int64 {
	if m != nil {
		return m.PricePerBoardlot
	}
	return 0
}

func (m *ReplyBuyOrder) GetTotalBoardlot() int64 {
	if m != nil {
		return m.TotalBoardlot
	}
	return 0
}

func (m *ReplyBuyOrder) GetBoughtBoardlot() int64 {
	if m != nil {
		return m.BoughtBoardlot
	}
	return 0
}

func (m *ReplyBuyOrder) GetBuyID() string {
	if m != nil {
		return m.BuyID
	}
	return ""
}

func (m *ReplyBuyOrder) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReplyBuyOrder) GetSellID() string {
	if m != nil {
		return m.SellID
	}
	return ""
}

func (m *ReplyBuyOrder) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *ReplyBuyOrder) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ReplyBuyOrder) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type ReplySellOrder struct {
	TokenSymbol       string `protobuf:"bytes,1,opt,name=tokenSymbol" json:"tokenSymbol,omitempty"`
	Owner             string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	AmountPerBoardlot int64  `protobuf:"varint,3,opt,name=amountPerBoardlot" json:"amountPerBoardlot,omitempty"`
	MinBoardlot       int64  `protobuf:"varint,4,opt,name=minBoardlot" json:"minBoardlot,omitempty"`
	PricePerBoardlot  int64  `protobuf:"varint,5,opt,name=pricePerBoardlot" json:"pricePerBoardlot,omitempty"`
	TotalBoardlot     int64  `protobuf:"varint,6,opt,name=totalBoardlot" json:"totalBoardlot,omitempty"`
	SoldBoardlot      int64  `protobuf:"varint,7,opt,name=soldBoardlot" json:"soldBoardlot,omitempty"`
	BuyID             string `protobuf:"bytes,8,opt,name=buyID" json:"buyID,omitempty"`
	Status            int32  `protobuf:"varint,9,opt,name=status" json:"status,omitempty"`
	SellID            string `protobuf:"bytes,10,opt,name=sellID" json:"sellID,omitempty"`
	TxHash            string `protobuf:"bytes,11,opt,name=txHash" json:"txHash,omitempty"`
	Height            int64  `protobuf:"varint,12,opt,name=height" json:"height,omitempty"`
	Key               string `protobuf:"bytes,13,opt,name=key" json:"key,omitempty"`
}

func (m *ReplySellOrder) Reset()                    { *m = ReplySellOrder{} }
func (m *ReplySellOrder) String() string            { return proto.CompactTextString(m) }
func (*ReplySellOrder) ProtoMessage()               {}
func (*ReplySellOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ReplySellOrder) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *ReplySellOrder) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ReplySellOrder) GetAmountPerBoardlot() int64 {
	if m != nil {
		return m.AmountPerBoardlot
	}
	return 0
}

func (m *ReplySellOrder) GetMinBoardlot() int64 {
	if m != nil {
		return m.MinBoardlot
	}
	return 0
}

func (m *ReplySellOrder) GetPricePerBoardlot() int64 {
	if m != nil {
		return m.PricePerBoardlot
	}
	return 0
}

func (m *ReplySellOrder) GetTotalBoardlot() int64 {
	if m != nil {
		return m.TotalBoardlot
	}
	return 0
}

func (m *ReplySellOrder) GetSoldBoardlot() int64 {
	if m != nil {
		return m.SoldBoardlot
	}
	return 0
}

func (m *ReplySellOrder) GetBuyID() string {
	if m != nil {
		return m.BuyID
	}
	return ""
}

func (m *ReplySellOrder) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReplySellOrder) GetSellID() string {
	if m != nil {
		return m.SellID
	}
	return ""
}

func (m *ReplySellOrder) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *ReplySellOrder) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ReplySellOrder) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type ReplySellOrders struct {
	SellOrders []*ReplySellOrder `protobuf:"bytes,1,rep,name=sellOrders" json:"sellOrders,omitempty"`
}

func (m *ReplySellOrders) Reset()                    { *m = ReplySellOrders{} }
func (m *ReplySellOrders) String() string            { return proto.CompactTextString(m) }
func (*ReplySellOrders) ProtoMessage()               {}
func (*ReplySellOrders) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ReplySellOrders) GetSellOrders() []*ReplySellOrder {
	if m != nil {
		return m.SellOrders
	}
	return nil
}

type ReplyBuyOrders struct {
	BuyOrders []*ReplyBuyOrder `protobuf:"bytes,1,rep,name=buyOrders" json:"buyOrders,omitempty"`
}

func (m *ReplyBuyOrders) Reset()                    { *m = ReplyBuyOrders{} }
func (m *ReplyBuyOrders) String() string            { return proto.CompactTextString(m) }
func (*ReplyBuyOrders) ProtoMessage()               {}
func (*ReplyBuyOrders) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ReplyBuyOrders) GetBuyOrders() []*ReplyBuyOrder {
	if m != nil {
		return m.BuyOrders
	}
	return nil
}

type ReplyTradeOrder struct {
	TokenSymbol       string `protobuf:"bytes,1,opt,name=tokenSymbol" json:"tokenSymbol,omitempty"`
	Owner             string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	AmountPerBoardlot int64  `protobuf:"varint,3,opt,name=amountPerBoardlot" json:"amountPerBoardlot,omitempty"`
	MinBoardlot       int64  `protobuf:"varint,4,opt,name=minBoardlot" json:"minBoardlot,omitempty"`
	PricePerBoardlot  int64  `protobuf:"varint,5,opt,name=pricePerBoardlot" json:"pricePerBoardlot,omitempty"`
	TotalBoardlot     int64  `protobuf:"varint,6,opt,name=totalBoardlot" json:"totalBoardlot,omitempty"`
	TradedBoardlot    int64  `protobuf:"varint,7,opt,name=tradedBoardlot" json:"tradedBoardlot,omitempty"`
	BuyID             string `protobuf:"bytes,8,opt,name=buyID" json:"buyID,omitempty"`
	Status            int32  `protobuf:"varint,9,opt,name=status" json:"status,omitempty"`
	SellID            string `protobuf:"bytes,10,opt,name=sellID" json:"sellID,omitempty"`
	TxHash            string `protobuf:"bytes,11,opt,name=txHash" json:"txHash,omitempty"`
	Height            int64  `protobuf:"varint,12,opt,name=height" json:"height,omitempty"`
	Key               string `protobuf:"bytes,13,opt,name=key" json:"key,omitempty"`
	BlockTime         int64  `protobuf:"varint,14,opt,name=blockTime" json:"blockTime,omitempty"`
	IsSellOrder       bool   `protobuf:"varint,15,opt,name=isSellOrder" json:"isSellOrder,omitempty"`
}

func (m *ReplyTradeOrder) Reset()                    { *m = ReplyTradeOrder{} }
func (m *ReplyTradeOrder) String() string            { return proto.CompactTextString(m) }
func (*ReplyTradeOrder) ProtoMessage()               {}
func (*ReplyTradeOrder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ReplyTradeOrder) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *ReplyTradeOrder) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ReplyTradeOrder) GetAmountPerBoardlot() int64 {
	if m != nil {
		return m.AmountPerBoardlot
	}
	return 0
}

func (m *ReplyTradeOrder) GetMinBoardlot() int64 {
	if m != nil {
		return m.MinBoardlot
	}
	return 0
}

func (m *ReplyTradeOrder) GetPricePerBoardlot() int64 {
	if m != nil {
		return m.PricePerBoardlot
	}
	return 0
}

func (m *ReplyTradeOrder) GetTotalBoardlot() int64 {
	if m != nil {
		return m.TotalBoardlot
	}
	return 0
}

func (m *ReplyTradeOrder) GetTradedBoardlot() int64 {
	if m != nil {
		return m.TradedBoardlot
	}
	return 0
}

func (m *ReplyTradeOrder) GetBuyID() string {
	if m != nil {
		return m.BuyID
	}
	return ""
}

func (m *ReplyTradeOrder) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReplyTradeOrder) GetSellID() string {
	if m != nil {
		return m.SellID
	}
	return ""
}

func (m *ReplyTradeOrder) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *ReplyTradeOrder) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ReplyTradeOrder) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ReplyTradeOrder) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *ReplyTradeOrder) GetIsSellOrder() bool {
	if m != nil {
		return m.IsSellOrder
	}
	return false
}

type ReplyTradeOrders struct {
	Orders []*ReplyTradeOrder `protobuf:"bytes,1,rep,name=orders" json:"orders,omitempty"`
}

func (m *ReplyTradeOrders) Reset()                    { *m = ReplyTradeOrders{} }
func (m *ReplyTradeOrders) String() string            { return proto.CompactTextString(m) }
func (*ReplyTradeOrders) ProtoMessage()               {}
func (*ReplyTradeOrders) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ReplyTradeOrders) GetOrders() []*ReplyTradeOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

type ReqSellToken struct {
	Sell  *TradeForSell `protobuf:"bytes,1,opt,name=sell" json:"sell,omitempty"`
	Owner string        `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
}

func (m *ReqSellToken) Reset()                    { *m = ReqSellToken{} }
func (m *ReqSellToken) String() string            { return proto.CompactTextString(m) }
func (*ReqSellToken) ProtoMessage()               {}
func (*ReqSellToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ReqSellToken) GetSell() *TradeForSell {
	if m != nil {
		return m.Sell
	}
	return nil
}

func (m *ReqSellToken) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type ReqRevokeSell struct {
	Revoke *TradeForRevokeSell `protobuf:"bytes,1,opt,name=revoke" json:"revoke,omitempty"`
	Owner  string              `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
}

func (m *ReqRevokeSell) Reset()                    { *m = ReqRevokeSell{} }
func (m *ReqRevokeSell) String() string            { return proto.CompactTextString(m) }
func (*ReqRevokeSell) ProtoMessage()               {}
func (*ReqRevokeSell) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ReqRevokeSell) GetRevoke() *TradeForRevokeSell {
	if m != nil {
		return m.Revoke
	}
	return nil
}

func (m *ReqRevokeSell) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type ReqBuyToken struct {
	Buy   *TradeForBuy `protobuf:"bytes,1,opt,name=buy" json:"buy,omitempty"`
	Buyer string       `protobuf:"bytes,2,opt,name=buyer" json:"buyer,omitempty"`
}

func (m *ReqBuyToken) Reset()                    { *m = ReqBuyToken{} }
func (m *ReqBuyToken) String() string            { return proto.CompactTextString(m) }
func (*ReqBuyToken) ProtoMessage()               {}
func (*ReqBuyToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ReqBuyToken) GetBuy() *TradeForBuy {
	if m != nil {
		return m.Buy
	}
	return nil
}

func (m *ReqBuyToken) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func init() {
	proto.RegisterType((*Trade)(nil), "types.Trade")
	proto.RegisterType((*TradeForSell)(nil), "types.TradeForSell")
	proto.RegisterType((*TradeForBuy)(nil), "types.TradeForBuy")
	proto.RegisterType((*TradeForRevokeSell)(nil), "types.TradeForRevokeSell")
	proto.RegisterType((*TradeForBuyLimit)(nil), "types.TradeForBuyLimit")
	proto.RegisterType((*TradeForSellMarket)(nil), "types.TradeForSellMarket")
	proto.RegisterType((*TradeForRevokeBuy)(nil), "types.TradeForRevokeBuy")
	proto.RegisterType((*SellOrder)(nil), "types.SellOrder")
	proto.RegisterType((*BuyLimitOrder)(nil), "types.BuyLimitOrder")
	proto.RegisterType((*ReceiptBuyBase)(nil), "types.ReceiptBuyBase")
	proto.RegisterType((*ReceiptSellBase)(nil), "types.ReceiptSellBase")
	proto.RegisterType((*ReceiptTradeBuyMarket)(nil), "types.ReceiptTradeBuyMarket")
	proto.RegisterType((*ReceiptTradeBuyLimit)(nil), "types.ReceiptTradeBuyLimit")
	proto.RegisterType((*ReceiptTradeBuyRevoke)(nil), "types.ReceiptTradeBuyRevoke")
	proto.RegisterType((*ReceiptTradeSell)(nil), "types.ReceiptTradeSell")
	proto.RegisterType((*ReceiptSellMarket)(nil), "types.ReceiptSellMarket")
	proto.RegisterType((*ReceiptTradeRevoke)(nil), "types.ReceiptTradeRevoke")
	proto.RegisterType((*ReqAddrTokens)(nil), "types.ReqAddrTokens")
	proto.RegisterType((*ReqTokenSellOrder)(nil), "types.ReqTokenSellOrder")
	proto.RegisterType((*ReqTokenBuyOrder)(nil), "types.ReqTokenBuyOrder")
	proto.RegisterType((*ReplyBuyOrder)(nil), "types.ReplyBuyOrder")
	proto.RegisterType((*ReplySellOrder)(nil), "types.ReplySellOrder")
	proto.RegisterType((*ReplySellOrders)(nil), "types.ReplySellOrders")
	proto.RegisterType((*ReplyBuyOrders)(nil), "types.ReplyBuyOrders")
	proto.RegisterType((*ReplyTradeOrder)(nil), "types.ReplyTradeOrder")
	proto.RegisterType((*ReplyTradeOrders)(nil), "types.ReplyTradeOrders")
	proto.RegisterType((*ReqSellToken)(nil), "types.ReqSellToken")
	proto.RegisterType((*ReqRevokeSell)(nil), "types.ReqRevokeSell")
	proto.RegisterType((*ReqBuyToken)(nil), "types.ReqBuyToken")
}

func init() { proto.RegisterFile("executorTrade.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1103 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0xc1, 0x6e, 0xdb, 0x46,
	0x10, 0xb5, 0x44, 0x51, 0x16, 0xc7, 0xb6, 0x6c, 0x6f, 0x14, 0x97, 0x2d, 0x7a, 0x10, 0x88, 0xa0,
	0x75, 0x82, 0xc0, 0x68, 0x13, 0xf4, 0xda, 0x34, 0x6c, 0xda, 0x2a, 0x68, 0x82, 0x16, 0x1b, 0x1f,
	0x7a, 0x25, 0xc5, 0x4d, 0x4c, 0x88, 0xd2, 0xca, 0xe4, 0x32, 0x09, 0xff, 0xa0, 0x5f, 0x50, 0xa0,
	0xe9, 0xa1, 0xf7, 0x02, 0xfd, 0x9d, 0x5e, 0x82, 0xfe, 0x4b, 0xb1, 0xc3, 0x25, 0xb9, 0xa4, 0x24,
	0x57, 0x02, 0x72, 0x50, 0x9c, 0x1b, 0x67, 0x76, 0x66, 0x76, 0xf8, 0xde, 0xcc, 0xee, 0x60, 0xe1,
	0x06, 0x7b, 0xcd, 0xc6, 0xa9, 0xe0, 0xf1, 0x79, 0xec, 0x05, 0xec, 0x6c, 0x1e, 0x73, 0xc1, 0x89,
	0x29, 0xb2, 0x39, 0x4b, 0x9c, 0x37, 0x06, 0x98, 0xa8, 0x26, 0xf7, 0xc1, 0x12, 0x7c, 0xc2, 0x66,
	0x09, 0x8b, 0x22, 0xbb, 0x35, 0x6c, 0x9d, 0xee, 0xdd, 0xbb, 0x71, 0x86, 0x46, 0x67, 0x68, 0xf0,
	0x3d, 0x8f, 0x9f, 0xb1, 0x28, 0x1a, 0xed, 0xd0, 0xca, 0x8e, 0x7c, 0x01, 0x3d, 0x14, 0xfc, 0x34,
	0xb3, 0xdb, 0xe8, 0x43, 0x1a, 0x3e, 0x6e, 0x9a, 0x8d, 0x76, 0x68, 0x69, 0x45, 0xbe, 0x83, 0x43,
	0xfc, 0x8e, 0xd9, 0x4b, 0x3e, 0x61, 0xb8, 0x99, 0x81, 0x8e, 0x1f, 0x37, 0x1c, 0x29, 0x1a, 0xa8,
	0x2d, 0x9b, 0x3e, 0xe4, 0x01, 0x1c, 0x14, 0x21, 0xa3, 0x70, 0x1a, 0x0a, 0xdb, 0xc4, 0x20, 0x1f,
	0x2d, 0xee, 0xfe, 0x44, 0x2e, 0x8f, 0x76, 0x68, 0xdd, 0xbe, 0xcc, 0x43, 0x46, 0x9b, 0x7a, 0xf1,
	0x84, 0x09, 0xbb, 0xbb, 0x34, 0x0f, 0x99, 0xc1, 0x53, 0x34, 0x28, 0xf3, 0xa8, 0x7c, 0x88, 0x0b,
	0x7d, 0x2d, 0x35, 0x09, 0xc3, 0x2e, 0x46, 0xb1, 0x97, 0xfe, 0x4d, 0x0e, 0x46, 0xc3, 0x83, 0xf4,
	0xa1, 0x2d, 0x32, 0xbb, 0x33, 0x6c, 0x9d, 0x9a, 0xb4, 0x2d, 0x32, 0x77, 0x17, 0xcc, 0x97, 0x5e,
	0x94, 0x32, 0xe7, 0xaf, 0x36, 0xec, 0xeb, 0x69, 0x90, 0x21, 0xec, 0xa1, 0xef, 0xb3, 0x6c, 0xea,
	0xf3, 0x9c, 0x25, 0x8b, 0xea, 0x2a, 0x72, 0x17, 0x8e, 0xbd, 0x29, 0x4f, 0x67, 0xe2, 0x67, 0x16,
	0xbb, 0xdc, 0x8b, 0x83, 0x88, 0x0b, 0x64, 0xc6, 0xa0, 0x8b, 0x0b, 0x32, 0xde, 0x34, 0x9c, 0x95,
	0x76, 0x06, 0xda, 0xe9, 0x2a, 0x72, 0x07, 0x8e, 0xe6, 0x71, 0x38, 0x66, 0x7a, 0xb8, 0x0e, 0x9a,
	0x2d, 0xe8, 0xc9, 0x2d, 0xc9, 0x89, 0xf0, 0xa2, 0xd2, 0xd0, 0x44, 0xc3, 0xba, 0x92, 0x7c, 0x0a,
	0x56, 0x22, 0xbc, 0x58, 0x88, 0x70, 0xca, 0x10, 0x72, 0x83, 0x56, 0x0a, 0xf2, 0x09, 0xf4, 0x12,
	0xc1, 0xe7, 0xb8, 0xb8, 0x8b, 0x8b, 0xa5, 0x2c, 0x3d, 0xc7, 0x31, 0x7f, 0x15, 0x3c, 0x4f, 0x67,
	0x81, 0xdd, 0x1b, 0xb6, 0x4e, 0x7b, 0xb4, 0x52, 0x38, 0x3f, 0xc0, 0x9e, 0xc6, 0x3a, 0x39, 0x81,
	0xae, 0xa4, 0xe9, 0xf1, 0x23, 0x85, 0x92, 0x92, 0xe4, 0x2f, 0xfb, 0x2a, 0x95, 0x6f, 0x67, 0x05,
	0x34, 0xba, 0xca, 0xb9, 0x0b, 0x64, 0xb1, 0x06, 0x57, 0xc5, 0x73, 0xfe, 0x69, 0xc1, 0x51, 0xb3,
	0xda, 0xae, 0x03, 0x4f, 0xce, 0x93, 0x0a, 0x86, 0xaa, 0x05, 0xc8, 0x00, 0x4c, 0x3f, 0xcd, 0x4a,
	0x14, 0x72, 0x61, 0x0d, 0x50, 0x6f, 0xc3, 0xf1, 0x42, 0x2b, 0x2c, 0x0f, 0xe6, 0xfc, 0x6d, 0x80,
	0x25, 0x77, 0xfc, 0x29, 0x0e, 0x58, 0xbc, 0x06, 0x94, 0x36, 0xec, 0x7a, 0x41, 0x10, 0xb3, 0x24,
	0xc1, 0x8d, 0x2d, 0x5a, 0x88, 0xcb, 0x41, 0x36, 0xd6, 0x04, 0xb9, 0xb3, 0x1e, 0xc8, 0xe6, 0xba,
	0x20, 0x77, 0x97, 0x35, 0x83, 0x03, 0xfb, 0x09, 0x8f, 0x82, 0xd2, 0x28, 0x2f, 0xf9, 0x9a, 0xae,
	0xde, 0x30, 0xbd, 0xab, 0x1a, 0xc6, 0xba, 0xaa, 0x61, 0xa0, 0xd1, 0x30, 0x5a, 0x45, 0xef, 0xd5,
	0x3a, 0x44, 0xea, 0x85, 0x27, 0xd2, 0xc4, 0xde, 0xc7, 0x23, 0x49, 0x49, 0x52, 0x7f, 0xc1, 0xc2,
	0x17, 0x17, 0xc2, 0x3e, 0xc0, 0x7d, 0x94, 0xe4, 0xbc, 0x6d, 0xc3, 0x41, 0x51, 0xf9, 0x1f, 0x02,
	0x67, 0x9f, 0x41, 0xdf, 0xe7, 0xe9, 0x8b, 0x0b, 0xd1, 0x60, 0xad, 0xa1, 0xad, 0xaa, 0xbb, 0xa7,
	0xb7, 0x4a, 0x85, 0xae, 0xb5, 0x02, 0x5d, 0xa8, 0xa1, 0xfb, 0xab, 0x01, 0x7d, 0xca, 0xc6, 0x2c,
	0x9c, 0x0b, 0x37, 0xcd, 0x5c, 0x2f, 0x61, 0x6b, 0xc0, 0x3b, 0x00, 0x93, 0xbf, 0x9a, 0xb1, 0x58,
	0x81, 0x9b, 0x0b, 0xab, 0xa1, 0xb5, 0xde, 0x2d, 0xb4, 0xd6, 0x56, 0x40, 0x6b, 0xe9, 0xd0, 0xaa,
	0x42, 0x87, 0x66, 0xa1, 0x8b, 0xd7, 0x23, 0x2f, 0xb9, 0x28, 0x1a, 0x20, 0x97, 0x34, 0x2a, 0xf6,
	0x6b, 0x54, 0xfc, 0x6b, 0xc0, 0xa1, 0xa2, 0x42, 0x9e, 0x4f, 0xd7, 0x9c, 0x8b, 0xed, 0x3f, 0x9a,
	0x2a, 0x86, 0xcb, 0x7a, 0x38, 0x68, 0xd4, 0x83, 0xe2, 0xb7, 0xbf, 0x82, 0xdf, 0xc3, 0x1a, 0xbf,
	0x2e, 0xdc, 0x54, 0xf4, 0xe2, 0x55, 0xe5, 0xa6, 0x99, 0xba, 0xf4, 0x6e, 0x43, 0xc7, 0xf7, 0x12,
	0xa6, 0xa6, 0xe2, 0x9b, 0x6a, 0xb4, 0xab, 0x77, 0x25, 0x45, 0x13, 0xe7, 0x21, 0x0c, 0x1a, 0x31,
	0xf2, 0x89, 0x60, 0x83, 0x10, 0x8b, 0x69, 0xe4, 0x37, 0xe6, 0x26, 0x31, 0xbe, 0x86, 0x23, 0x3d,
	0x06, 0x4e, 0x30, 0x77, 0x6a, 0xee, 0x27, 0x75, 0xf7, 0xa2, 0xa0, 0x95, 0xff, 0x03, 0x38, 0xd6,
	0x16, 0x14, 0x0c, 0x9b, 0x04, 0xf8, 0x06, 0x88, 0x9e, 0x80, 0xfa, 0x83, 0x4d, 0x22, 0xfc, 0xd9,
	0x82, 0x03, 0xca, 0x2e, 0x1f, 0x06, 0x41, 0x7c, 0x8e, 0x43, 0x37, 0x21, 0xd0, 0x91, 0xb7, 0x84,
	0x6a, 0x32, 0xfc, 0xd6, 0x2a, 0xa2, 0x5d, 0x3b, 0x4e, 0x07, 0x60, 0x62, 0x13, 0xda, 0xc6, 0xd0,
	0x90, 0x15, 0x81, 0x82, 0xac, 0xba, 0x20, 0x8c, 0xd9, 0x58, 0x84, 0x7c, 0xa6, 0x06, 0xee, 0x4a,
	0x21, 0x7d, 0xc6, 0xb2, 0xf3, 0xb0, 0x71, 0x4c, 0x9a, 0x0b, 0xf2, 0xaa, 0x7a, 0x1e, 0xf3, 0xe9,
	0x8f, 0x2c, 0xc3, 0x3e, 0xb1, 0x68, 0x21, 0x3a, 0x7f, 0xb4, 0x24, 0x4a, 0x97, 0x98, 0xdd, 0x86,
	0x03, 0x4b, 0x11, 0xb1, 0x5d, 0x8b, 0x58, 0x65, 0x60, 0xe8, 0x19, 0x5c, 0x9d, 0x75, 0x85, 0x80,
	0xa9, 0x23, 0xe0, 0xbc, 0x69, 0xc9, 0x1a, 0xc8, 0xb3, 0x73, 0xd3, 0x6c, 0xbb, 0x92, 0xfb, 0xdd,
	0x90, 0xe4, 0xce, 0xa3, 0x6c, 0x83, 0xcc, 0x36, 0x3c, 0x48, 0xaf, 0xff, 0xbc, 0xf0, 0x2e, 0x2e,
	0x35, 0x72, 0x04, 0xc6, 0x84, 0x65, 0xea, 0xe0, 0x94, 0x9f, 0xce, 0x6f, 0x38, 0x71, 0xcc, 0xa3,
	0x6c, 0x93, 0x9a, 0x7e, 0x5f, 0xc9, 0x59, 0xe7, 0x96, 0xdb, 0x16, 0x62, 0x46, 0x72, 0xfc, 0xd0,
	0x79, 0x49, 0xc8, 0x57, 0x00, 0x49, 0x29, 0xd9, 0xad, 0xa1, 0x51, 0xbb, 0x18, 0x74, 0x5b, 0xaa,
	0x19, 0x3a, 0x8f, 0x14, 0xc3, 0x45, 0xf7, 0x25, 0xe4, 0x1e, 0x58, 0x7e, 0x21, 0xa8, 0x38, 0x03,
	0x3d, 0x4e, 0x61, 0x49, 0x2b, 0x33, 0xe7, 0xad, 0xa1, 0x12, 0xc2, 0x23, 0xfe, 0x03, 0x68, 0x63,
	0x21, 0xff, 0xb3, 0x59, 0x2b, 0x0d, 0xed, 0xb6, 0x54, 0x8b, 0x3c, 0x98, 0xfd, 0x88, 0x8f, 0x27,
	0xe7, 0x72, 0xfc, 0xea, 0xe7, 0xb3, 0x59, 0xa9, 0x90, 0x08, 0x86, 0x49, 0x59, 0x1c, 0x38, 0x08,
	0xf5, 0xa8, 0xae, 0x72, 0x5c, 0x79, 0x7d, 0xd4, 0xc8, 0x4d, 0xc8, 0x19, 0x74, 0xb9, 0x5e, 0x22,
	0x27, 0x7a, 0x89, 0x54, 0x86, 0x54, 0x59, 0x39, 0x4f, 0x61, 0x9f, 0xb2, 0x4b, 0x19, 0x13, 0xaf,
	0x21, 0xf2, 0x39, 0x74, 0xfe, 0xe7, 0x79, 0x91, 0xa2, 0xc1, 0xf2, 0x22, 0x71, 0x7e, 0xc1, 0x89,
	0x40, 0x7b, 0x94, 0xf9, 0x12, 0xba, 0xf9, 0x33, 0x9a, 0x8a, 0xb8, 0xfa, 0x0d, 0x91, 0x2a, 0xc3,
	0x15, 0x91, 0x1f, 0xc3, 0x1e, 0x65, 0x97, 0x6e, 0x9a, 0xe5, 0x79, 0xde, 0x02, 0xc3, 0x4f, 0x33,
	0x15, 0x74, 0xc9, 0x8b, 0x26, 0x95, 0xcb, 0x8a, 0xe9, 0x2a, 0x14, 0x0a, 0x7e, 0x17, 0xdf, 0x57,
	0xef, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0xee, 0x81, 0xbe, 0x52, 0x76, 0x15, 0x00, 0x00,
}
