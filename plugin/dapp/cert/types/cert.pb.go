// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cert.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	cert.proto

It has these top-level messages:
	Cert
	CertAction
	CertNew
	CertUpdate
	CertNormal
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Cert struct {
	CertId     []byte `protobuf:"bytes,1,opt,name=certId,proto3" json:"certId,omitempty"`
	CreateTime int64  `protobuf:"varint,2,opt,name=createTime" json:"createTime,omitempty"`
	Key        string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Value      []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Cert) Reset()                    { *m = Cert{} }
func (m *Cert) String() string            { return proto.CompactTextString(m) }
func (*Cert) ProtoMessage()               {}
func (*Cert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Cert) GetCertId() []byte {
	if m != nil {
		return m.CertId
	}
	return nil
}

func (m *Cert) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Cert) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Cert) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type CertAction struct {
	// Types that are valid to be assigned to Value:
	//	*CertAction_New
	//	*CertAction_Update
	//	*CertAction_Normal
	Value isCertAction_Value `protobuf_oneof:"value"`
	Ty    int32              `protobuf:"varint,4,opt,name=ty" json:"ty,omitempty"`
}

func (m *CertAction) Reset()                    { *m = CertAction{} }
func (m *CertAction) String() string            { return proto.CompactTextString(m) }
func (*CertAction) ProtoMessage()               {}
func (*CertAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isCertAction_Value interface {
	isCertAction_Value()
}

type CertAction_New struct {
	New *CertNew `protobuf:"bytes,1,opt,name=new,oneof"`
}
type CertAction_Update struct {
	Update *CertUpdate `protobuf:"bytes,2,opt,name=update,oneof"`
}
type CertAction_Normal struct {
	Normal *CertNormal `protobuf:"bytes,3,opt,name=normal,oneof"`
}

func (*CertAction_New) isCertAction_Value()    {}
func (*CertAction_Update) isCertAction_Value() {}
func (*CertAction_Normal) isCertAction_Value() {}

func (m *CertAction) GetValue() isCertAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CertAction) GetNew() *CertNew {
	if x, ok := m.GetValue().(*CertAction_New); ok {
		return x.New
	}
	return nil
}

func (m *CertAction) GetUpdate() *CertUpdate {
	if x, ok := m.GetValue().(*CertAction_Update); ok {
		return x.Update
	}
	return nil
}

func (m *CertAction) GetNormal() *CertNormal {
	if x, ok := m.GetValue().(*CertAction_Normal); ok {
		return x.Normal
	}
	return nil
}

func (m *CertAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CertAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CertAction_OneofMarshaler, _CertAction_OneofUnmarshaler, _CertAction_OneofSizer, []interface{}{
		(*CertAction_New)(nil),
		(*CertAction_Update)(nil),
		(*CertAction_Normal)(nil),
	}
}

func _CertAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CertAction)
	// value
	switch x := m.Value.(type) {
	case *CertAction_New:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.New); err != nil {
			return err
		}
	case *CertAction_Update:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Update); err != nil {
			return err
		}
	case *CertAction_Normal:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Normal); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CertAction.Value has unexpected type %T", x)
	}
	return nil
}

func _CertAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CertAction)
	switch tag {
	case 1: // value.new
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CertNew)
		err := b.DecodeMessage(msg)
		m.Value = &CertAction_New{msg}
		return true, err
	case 2: // value.update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CertUpdate)
		err := b.DecodeMessage(msg)
		m.Value = &CertAction_Update{msg}
		return true, err
	case 3: // value.normal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CertNormal)
		err := b.DecodeMessage(msg)
		m.Value = &CertAction_Normal{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CertAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CertAction)
	// value
	switch x := m.Value.(type) {
	case *CertAction_New:
		s := proto.Size(x.New)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CertAction_Update:
		s := proto.Size(x.Update)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CertAction_Normal:
		s := proto.Size(x.Normal)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CertNew struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CertNew) Reset()                    { *m = CertNew{} }
func (m *CertNew) String() string            { return proto.CompactTextString(m) }
func (*CertNew) ProtoMessage()               {}
func (*CertNew) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CertNew) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CertNew) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type CertUpdate struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CertUpdate) Reset()                    { *m = CertUpdate{} }
func (m *CertUpdate) String() string            { return proto.CompactTextString(m) }
func (*CertUpdate) ProtoMessage()               {}
func (*CertUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CertUpdate) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CertUpdate) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type CertNormal struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CertNormal) Reset()                    { *m = CertNormal{} }
func (m *CertNormal) String() string            { return proto.CompactTextString(m) }
func (*CertNormal) ProtoMessage()               {}
func (*CertNormal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CertNormal) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CertNormal) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*Cert)(nil), "types.Cert")
	proto.RegisterType((*CertAction)(nil), "types.CertAction")
	proto.RegisterType((*CertNew)(nil), "types.CertNew")
	proto.RegisterType((*CertUpdate)(nil), "types.CertUpdate")
	proto.RegisterType((*CertNormal)(nil), "types.CertNormal")
}

func init() { proto.RegisterFile("cert.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xbb, 0x49, 0x93, 0xe2, 0x54, 0x8a, 0x0e, 0x22, 0x39, 0x49, 0xc8, 0x29, 0x20, 0x04,
	0xac, 0xbe, 0x80, 0x7a, 0xa9, 0x97, 0x1e, 0x16, 0x7d, 0x80, 0x98, 0x8e, 0x50, 0x6c, 0x93, 0xb0,
	0x4e, 0x0d, 0xfb, 0x3c, 0xbe, 0xa8, 0xec, 0xec, 0x0a, 0x11, 0x3c, 0xd8, 0xdb, 0xce, 0xfe, 0xff,
	0xec, 0xff, 0xfd, 0x2c, 0x40, 0x43, 0x86, 0xab, 0xde, 0x74, 0xdc, 0x61, 0xc2, 0xb6, 0xa7, 0x8f,
	0xe2, 0x0d, 0xa6, 0x8f, 0x64, 0x18, 0x2f, 0x21, 0x75, 0xe2, 0xd3, 0x26, 0x53, 0xb9, 0x2a, 0x4f,
	0x75, 0x98, 0xf0, 0x0a, 0xa0, 0x31, 0x54, 0x33, 0x3d, 0x6f, 0xf7, 0x94, 0x45, 0xb9, 0x2a, 0x63,
	0x3d, 0xba, 0xc1, 0x33, 0x88, 0xdf, 0xc9, 0x66, 0x71, 0xae, 0xca, 0x13, 0xed, 0x8e, 0x78, 0x01,
	0xc9, 0x67, 0xbd, 0x3b, 0x50, 0x36, 0x95, 0x87, 0xfc, 0x50, 0x7c, 0x29, 0x00, 0x17, 0x74, 0xdf,
	0xf0, 0xb6, 0x6b, 0xb1, 0x80, 0xb8, 0xa5, 0x41, 0xb2, 0xe6, 0xcb, 0x45, 0x25, 0x2c, 0x95, 0xd3,
	0xd7, 0x34, 0xac, 0x26, 0xda, 0x89, 0x78, 0x0d, 0xe9, 0xa1, 0xdf, 0xd4, 0xec, 0x63, 0xe7, 0xcb,
	0xf3, 0x91, 0xed, 0x45, 0x84, 0xd5, 0x44, 0x07, 0x8b, 0x33, 0xb7, 0x9d, 0xd9, 0xd7, 0x3b, 0x41,
	0xf9, 0x6d, 0x5e, 0x8b, 0xe0, 0xcc, 0xde, 0x82, 0x0b, 0x88, 0xd8, 0x0a, 0x5f, 0xa2, 0x23, 0xb6,
	0x0f, 0xb3, 0x80, 0x5c, 0xdc, 0xc0, 0x2c, 0x40, 0xfc, 0x14, 0x53, 0x7f, 0x14, 0x8b, 0xc6, 0xc5,
	0xee, 0x7c, 0x2f, 0x0f, 0x74, 0xec, 0x96, 0x27, 0xfb, 0xef, 0xd6, 0x6b, 0x2a, 0x5f, 0x77, 0xfb,
	0x1d, 0x00, 0x00, 0xff, 0xff, 0x37, 0xca, 0x0a, 0x23, 0xc8, 0x01, 0x00, 0x00,
}
