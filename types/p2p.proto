syntax = "proto3";

import "transaction.proto";
import "common.proto";
import "blockchain.proto";

package types;

service p2pgservice {
	//广播交易
	rpc BroadCastTx (P2PTx) returns (Reply) {
	}
	
	rpc BroadCastBlock (P2PBlock) returns (Reply) {
	}
	
	//PING
	rpc Ping (P2PPing) returns (P2PPong) {
	}
	
	//获取地址
	rpc GetAddr (P2PGetAddr) returns (P2PAddr) {
	}
	
	//版本
	rpc Version (P2PVersion) returns (P2PVerAck) {
	}
	
	rpc Version2 (P2PVersion) returns (P2PVersion) {
	}
	
	//获取区块，最高200
	rpc GetBlocks (P2PGetBlocks) returns (P2PInv) {
	}
	
	//
	rpc GetMemPool (P2PGetMempool) returns (P2PInv) {
	}
	
	//获取数据
	rpc GetData (P2PGetData) returns (stream InvDatas) {
	}
	
	//获取头部
	rpc GetHeaders (P2PGetHeaders) returns (P2PHeaders) {
	}
	
	//获取 peerinfo
	rpc GetPeerInfo (P2PGetPeerInfo) returns (P2PPeerInfo) {
	}
	
	rpc RemotePeerAddr (P2PGetAddr) returns (P2PExternalInfo) {
	}
	
	rpc ServerStreamRead(stream BroadCastData) returns (ReqNil){
	}
	
	rpc ServerStreamSend(P2PPing) returns (stream BroadCastData){
	}
	
}


message P2PGetPeerInfo {
	int32 version = 1;
}

message P2PPeerInfo {
	string addr = 1;
	int32 port = 2;
	string name = 3;
	int32 mempoolSize = 4;
	Header header = 5;
}

message P2PVersion {
	int32 version = 1;
	int64 service = 2;
	int64 timestamp = 3;
	string addrRecv = 4;
	string addrFrom = 5;
	int64 nonce = 6;
	string userAgent = 7;
	int64 startHeight = 8;
}

message P2PVerAck {
	int32 version = 1;
	int64 service = 2;
	int64 nonce = 3;
}

message P2PPing {
	int64 nonce = 1;
	string addr = 2;
	int32 port = 3;
	Signature sign = 4;
}

message P2PPong {
	int64 nonce = 1;
}

message P2PGetAddr {
	int64 nonce = 1;
}

message P2PAddr {
	int64 nonce = 1;
	repeated string addrlist = 2;
	
}

message P2PExternalInfo {
	string addr = 1;
	bool isoutside = 2;
}

message P2PGetBlocks {
	int32 version = 1;
	int64 startHeight = 2;
	int64 endHeight = 3;
}

message P2PGetMempool {
	int32 version = 1;
}

message P2PInv {
	repeated Inventory invs = 1;
	
}

//ty=MSG_TX MSG_BLOCK
message Inventory {
	int32 ty = 1;
	bytes hash = 2;
	int64 height = 3;
}

message P2PGetData {
	int32 version = 1;
	repeated Inventory invs = 2;
}

message P2PTx {
	Transaction tx = 1;
}

message P2PBlock {
	Block block = 1;
}

message BroadCastData {
	oneof value {
		P2PTx tx = 1;
		P2PBlock block = 2;
		P2PPing ping =3;
	}
}

message P2PGetHeaders {
	int32 version = 1;
	int64 startHeight = 2;
	int64 endHeight = 3;
}

message P2PHeaders {
	repeated Header headers = 1;
}

message InvData {
	oneof value {
		Transaction tx = 1;
		Block block = 2;
	}
	int32 ty = 3;
}

message InvDatas {
	repeated InvData items = 1;
}


message Peer {
	string addr = 1;
	int32 port = 2;
	string name = 3;
	bool self = 4;
	int32 mempoolSize = 5;
	Header header = 6;
}

message PeerList {
	repeated Peer peers = 1;
}
