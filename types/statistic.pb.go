// Code generated by protoc-gen-go. DO NOT EDIT.
// source: statistic.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 手续费
type TotalFee struct {
	Fee     int64 `protobuf:"varint,1,opt,name=fee" json:"fee,omitempty"`
	TxCount int64 `protobuf:"varint,2,opt,name=txCount" json:"txCount,omitempty"`
}

func (m *TotalFee) Reset()                    { *m = TotalFee{} }
func (m *TotalFee) String() string            { return proto.CompactTextString(m) }
func (*TotalFee) ProtoMessage()               {}
func (*TotalFee) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *TotalFee) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *TotalFee) GetTxCount() int64 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

// 查询symbol代币总额
type ReqGetTotalCoins struct {
	Symbol    string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	StateHash []byte `protobuf:"bytes,2,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	StartKey  []byte `protobuf:"bytes,3,opt,name=startKey,proto3" json:"startKey,omitempty"`
	Count     int64  `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (m *ReqGetTotalCoins) Reset()                    { *m = ReqGetTotalCoins{} }
func (m *ReqGetTotalCoins) String() string            { return proto.CompactTextString(m) }
func (*ReqGetTotalCoins) ProtoMessage()               {}
func (*ReqGetTotalCoins) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *ReqGetTotalCoins) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ReqGetTotalCoins) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *ReqGetTotalCoins) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *ReqGetTotalCoins) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// 查询symbol代币总额应答
type ReplyGetTotalCoins struct {
	Count   int64  `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Num     int64  `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	Amount  int64  `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	NextKey []byte `protobuf:"bytes,4,opt,name=nextKey,proto3" json:"nextKey,omitempty"`
}

func (m *ReplyGetTotalCoins) Reset()                    { *m = ReplyGetTotalCoins{} }
func (m *ReplyGetTotalCoins) String() string            { return proto.CompactTextString(m) }
func (*ReplyGetTotalCoins) ProtoMessage()               {}
func (*ReplyGetTotalCoins) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *ReplyGetTotalCoins) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReplyGetTotalCoins) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *ReplyGetTotalCoins) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ReplyGetTotalCoins) GetNextKey() []byte {
	if m != nil {
		return m.NextKey
	}
	return nil
}

// 迭代查询symbol代币总额
type IterateRangeByStateHash struct {
	StateHash []byte `protobuf:"bytes,1,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Start     []byte `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End       []byte `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	Count     int64  `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (m *IterateRangeByStateHash) Reset()                    { *m = IterateRangeByStateHash{} }
func (m *IterateRangeByStateHash) String() string            { return proto.CompactTextString(m) }
func (*IterateRangeByStateHash) ProtoMessage()               {}
func (*IterateRangeByStateHash) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{3} }

func (m *IterateRangeByStateHash) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *IterateRangeByStateHash) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *IterateRangeByStateHash) GetEnd() []byte {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *IterateRangeByStateHash) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type TicketStatistic struct {
	// 当前在挖的ticket
	CurrentOpenCount int64 `protobuf:"varint,1,opt,name=currentOpenCount" json:"currentOpenCount,omitempty"`
	// 一共挖到的ticket
	TotalMinerCount int64 `protobuf:"varint,2,opt,name=totalMinerCount" json:"totalMinerCount,omitempty"`
	// 一共取消的ticket
	TotalCancleCount int64 `protobuf:"varint,3,opt,name=totalCancleCount" json:"totalCancleCount,omitempty"`
}

func (m *TicketStatistic) Reset()                    { *m = TicketStatistic{} }
func (m *TicketStatistic) String() string            { return proto.CompactTextString(m) }
func (*TicketStatistic) ProtoMessage()               {}
func (*TicketStatistic) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{4} }

func (m *TicketStatistic) GetCurrentOpenCount() int64 {
	if m != nil {
		return m.CurrentOpenCount
	}
	return 0
}

func (m *TicketStatistic) GetTotalMinerCount() int64 {
	if m != nil {
		return m.TotalMinerCount
	}
	return 0
}

func (m *TicketStatistic) GetTotalCancleCount() int64 {
	if m != nil {
		return m.TotalCancleCount
	}
	return 0
}

type TicketMinerInfo struct {
	TicketId string `protobuf:"bytes,1,opt,name=ticketId" json:"ticketId,omitempty"`
	// 1 -> 可挖矿 2 -> 已挖成功 3-> 已关闭
	Status     int32 `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	PrevStatus int32 `protobuf:"varint,3,opt,name=prevStatus" json:"prevStatus,omitempty"`
	// genesis 创建的私钥比较特殊
	IsGenesis bool `protobuf:"varint,4,opt,name=isGenesis" json:"isGenesis,omitempty"`
	// 创建ticket时间
	CreateTime int64 `protobuf:"varint,5,opt,name=createTime" json:"createTime,omitempty"`
	// ticket挖矿时间
	MinerTime int64 `protobuf:"varint,6,opt,name=minerTime" json:"minerTime,omitempty"`
	// 关闭ticket时间
	CloseTime int64 `protobuf:"varint,7,opt,name=closeTime" json:"closeTime,omitempty"`
	// 挖到的币的数目
	MinerValue   int64  `protobuf:"varint,8,opt,name=minerValue" json:"minerValue,omitempty"`
	MinerAddress string `protobuf:"bytes,9,opt,name=minerAddress" json:"minerAddress,omitempty"`
}

func (m *TicketMinerInfo) Reset()                    { *m = TicketMinerInfo{} }
func (m *TicketMinerInfo) String() string            { return proto.CompactTextString(m) }
func (*TicketMinerInfo) ProtoMessage()               {}
func (*TicketMinerInfo) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{5} }

func (m *TicketMinerInfo) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

func (m *TicketMinerInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *TicketMinerInfo) GetPrevStatus() int32 {
	if m != nil {
		return m.PrevStatus
	}
	return 0
}

func (m *TicketMinerInfo) GetIsGenesis() bool {
	if m != nil {
		return m.IsGenesis
	}
	return false
}

func (m *TicketMinerInfo) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *TicketMinerInfo) GetMinerTime() int64 {
	if m != nil {
		return m.MinerTime
	}
	return 0
}

func (m *TicketMinerInfo) GetCloseTime() int64 {
	if m != nil {
		return m.CloseTime
	}
	return 0
}

func (m *TicketMinerInfo) GetMinerValue() int64 {
	if m != nil {
		return m.MinerValue
	}
	return 0
}

func (m *TicketMinerInfo) GetMinerAddress() string {
	if m != nil {
		return m.MinerAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*TotalFee)(nil), "types.TotalFee")
	proto.RegisterType((*ReqGetTotalCoins)(nil), "types.ReqGetTotalCoins")
	proto.RegisterType((*ReplyGetTotalCoins)(nil), "types.ReplyGetTotalCoins")
	proto.RegisterType((*IterateRangeByStateHash)(nil), "types.IterateRangeByStateHash")
	proto.RegisterType((*TicketStatistic)(nil), "types.TicketStatistic")
	proto.RegisterType((*TicketMinerInfo)(nil), "types.TicketMinerInfo")
}

func init() { proto.RegisterFile("statistic.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x4d, 0x8b, 0xd4, 0x40,
	0x10, 0x25, 0x9b, 0xcd, 0xec, 0x4c, 0xb1, 0x30, 0x43, 0xb3, 0x68, 0x10, 0x11, 0xc9, 0x69, 0xf1,
	0xe0, 0x45, 0xf0, 0xae, 0x01, 0xd7, 0x41, 0x44, 0xc8, 0x0c, 0xde, 0x7b, 0x33, 0xb5, 0xda, 0x98,
	0x74, 0xc7, 0xee, 0x8a, 0x6c, 0xfc, 0x1b, 0xfe, 0x04, 0xff, 0xa8, 0x54, 0x25, 0x93, 0x64, 0x76,
	0xf1, 0xd6, 0xef, 0xd5, 0xd7, 0x7b, 0x55, 0x09, 0xac, 0x03, 0x69, 0x32, 0x81, 0x4c, 0xf9, 0xba,
	0xf1, 0x8e, 0x9c, 0x4a, 0xa8, 0x6b, 0x30, 0x64, 0x6f, 0x61, 0xb9, 0x77, 0xa4, 0xab, 0x0f, 0x88,
	0x6a, 0x03, 0xf1, 0x1d, 0x62, 0x1a, 0xbd, 0x8c, 0xae, 0xe3, 0x82, 0x9f, 0x2a, 0x85, 0x0b, 0xba,
	0xcf, 0x5d, 0x6b, 0x29, 0x3d, 0x13, 0xf6, 0x08, 0xb3, 0xdf, 0xb0, 0x29, 0xf0, 0xe7, 0x0d, 0x92,
	0x54, 0xe7, 0xce, 0xd8, 0xa0, 0x9e, 0xc0, 0x22, 0x74, 0xf5, 0xad, 0xab, 0xa4, 0xc5, 0xaa, 0x18,
	0x90, 0x7a, 0x0e, 0x2b, 0x9e, 0x8e, 0x1f, 0x75, 0xf8, 0x2e, 0x7d, 0x2e, 0x8b, 0x89, 0x50, 0xcf,
	0x60, 0x19, 0x48, 0x7b, 0xfa, 0x84, 0x5d, 0x1a, 0x4b, 0x70, 0xc4, 0xea, 0x0a, 0x92, 0x52, 0xa6,
	0x9f, 0xcb, 0xf4, 0x1e, 0x64, 0x16, 0x54, 0x81, 0x4d, 0xd5, 0x9d, 0x4e, 0x1f, 0x73, 0xa3, 0x59,
	0x2e, 0x7b, 0xb2, 0x6d, 0x3d, 0xa8, 0xe7, 0x27, 0xab, 0xd4, 0xb5, 0x24, 0xc6, 0x42, 0x0e, 0x88,
	0xbd, 0x5a, 0xbc, 0x17, 0x19, 0xe7, 0x22, 0xe3, 0x08, 0xb3, 0x16, 0x9e, 0x6e, 0x09, 0xbd, 0x26,
	0x2c, 0xb4, 0xfd, 0x86, 0xef, 0xbb, 0xdd, 0x28, 0xfe, 0xc4, 0x5a, 0xf4, 0xd0, 0xda, 0x15, 0x24,
	0x62, 0x65, 0x30, 0xdd, 0x03, 0x96, 0x84, 0xf6, 0x30, 0x78, 0xe5, 0xe7, 0x7f, 0x6c, 0xfe, 0x89,
	0x60, 0xbd, 0x37, 0xe5, 0x0f, 0xa4, 0xdd, 0xf1, 0x76, 0xea, 0x15, 0x6c, 0xca, 0xd6, 0x7b, 0xb4,
	0xf4, 0xa5, 0x41, 0x9b, 0xcf, 0xfc, 0x3e, 0xe2, 0xd5, 0x35, 0xac, 0x89, 0xd7, 0xf3, 0xd9, 0x58,
	0xf4, 0xf3, 0x23, 0x3e, 0xa4, 0xb9, 0xab, 0x50, 0xb9, 0xb6, 0x65, 0x85, 0xf9, 0x6c, 0x39, 0x8f,
	0xf8, 0xec, 0xef, 0xd9, 0x51, 0x95, 0x34, 0xd8, 0xda, 0x3b, 0xc7, 0x27, 0x24, 0xa1, 0xb6, 0x87,
	0xe1, 0xf4, 0x23, 0x96, 0x8f, 0x82, 0x34, 0xb5, 0x41, 0x86, 0x27, 0xc5, 0x80, 0xd4, 0x0b, 0x80,
	0xc6, 0xe3, 0xaf, 0x5d, 0x1f, 0x8b, 0x25, 0x36, 0x63, 0x78, 0xb3, 0x26, 0xdc, 0xa0, 0xc5, 0x60,
	0x82, 0xec, 0x65, 0x59, 0x4c, 0x04, 0x57, 0x97, 0x1e, 0x35, 0xe1, 0xde, 0xd4, 0x98, 0x26, 0xa2,
	0x75, 0xc6, 0x70, 0x75, 0xcd, 0xf2, 0x24, 0xbc, 0x90, 0xf0, 0x44, 0x70, 0xb4, 0xac, 0x5c, 0xe8,
	0x8b, 0x2f, 0xfa, 0xe8, 0x48, 0x70, 0x6f, 0x49, 0xfd, 0xaa, 0xab, 0x16, 0xd3, 0x65, 0xdf, 0x7b,
	0x62, 0x54, 0x06, 0x97, 0x82, 0xde, 0x1d, 0x0e, 0x1e, 0x43, 0x48, 0x57, 0xe2, 0xf8, 0x84, 0xbb,
	0x5d, 0xc8, 0x4f, 0xf6, 0xe6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8b, 0xfe, 0xb9, 0xea, 0x77,
	0x03, 0x00, 0x00,
}
