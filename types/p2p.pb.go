// Code generated by protoc-gen-go. DO NOT EDIT.
// source: p2p.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type P2P struct {
	SeedPort     int32    `protobuf:"varint,1,opt,name=seedPort" json:"seedPort,omitempty"`
	DbPath       string   `protobuf:"bytes,2,opt,name=dbPath" json:"dbPath,omitempty"`
	GrpcLogFile  string   `protobuf:"bytes,3,opt,name=grpcLogFile" json:"grpcLogFile,omitempty"`
	IsSeed       bool     `protobuf:"varint,4,opt,name=isSeed" json:"isSeed,omitempty"`
	Seeds        []string `protobuf:"bytes,5,rep,name=seeds" json:"seeds,omitempty"`
	Enable       bool     `protobuf:"varint,6,opt,name=enable" json:"enable,omitempty"`
	MsgCacheSize int32    `protobuf:"varint,7,opt,name=msgCacheSize" json:"msgCacheSize,omitempty"`
	Version      int32    `protobuf:"varint,8,opt,name=version" json:"version,omitempty"`
	VerMix       int32    `protobuf:"varint,9,opt,name=verMix" json:"verMix,omitempty"`
	VerMax       int32    `protobuf:"varint,10,opt,name=verMax" json:"verMax,omitempty"`
}

func (m *P2P) Reset()                    { *m = P2P{} }
func (m *P2P) String() string            { return proto.CompactTextString(m) }
func (*P2P) ProtoMessage()               {}
func (*P2P) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *P2P) GetSeedPort() int32 {
	if m != nil {
		return m.SeedPort
	}
	return 0
}

func (m *P2P) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *P2P) GetGrpcLogFile() string {
	if m != nil {
		return m.GrpcLogFile
	}
	return ""
}

func (m *P2P) GetIsSeed() bool {
	if m != nil {
		return m.IsSeed
	}
	return false
}

func (m *P2P) GetSeeds() []string {
	if m != nil {
		return m.Seeds
	}
	return nil
}

func (m *P2P) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *P2P) GetMsgCacheSize() int32 {
	if m != nil {
		return m.MsgCacheSize
	}
	return 0
}

func (m *P2P) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2P) GetVerMix() int32 {
	if m != nil {
		return m.VerMix
	}
	return 0
}

func (m *P2P) GetVerMax() int32 {
	if m != nil {
		return m.VerMax
	}
	return 0
}

type P2PGetPeerInfo struct {
	Version int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
}

func (m *P2PGetPeerInfo) Reset()                    { *m = P2PGetPeerInfo{} }
func (m *P2PGetPeerInfo) String() string            { return proto.CompactTextString(m) }
func (*P2PGetPeerInfo) ProtoMessage()               {}
func (*P2PGetPeerInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *P2PGetPeerInfo) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type P2PPeerInfo struct {
	Addr        string  `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Port        int32   `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Name        string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	MempoolSize int32   `protobuf:"varint,4,opt,name=mempoolSize" json:"mempoolSize,omitempty"`
	Header      *Header `protobuf:"bytes,5,opt,name=header" json:"header,omitempty"`
}

func (m *P2PPeerInfo) Reset()                    { *m = P2PPeerInfo{} }
func (m *P2PPeerInfo) String() string            { return proto.CompactTextString(m) }
func (*P2PPeerInfo) ProtoMessage()               {}
func (*P2PPeerInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *P2PPeerInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *P2PPeerInfo) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *P2PPeerInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *P2PPeerInfo) GetMempoolSize() int32 {
	if m != nil {
		return m.MempoolSize
	}
	return 0
}

func (m *P2PPeerInfo) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type P2PVersion struct {
	Version     int32  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Service     int64  `protobuf:"varint,2,opt,name=service" json:"service,omitempty"`
	Timestamp   int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	AddrRecv    string `protobuf:"bytes,4,opt,name=addrRecv" json:"addrRecv,omitempty"`
	AddrFrom    string `protobuf:"bytes,5,opt,name=addrFrom" json:"addrFrom,omitempty"`
	Nonce       int64  `protobuf:"varint,6,opt,name=nonce" json:"nonce,omitempty"`
	UserAgent   string `protobuf:"bytes,7,opt,name=userAgent" json:"userAgent,omitempty"`
	StartHeight int64  `protobuf:"varint,8,opt,name=startHeight" json:"startHeight,omitempty"`
}

func (m *P2PVersion) Reset()                    { *m = P2PVersion{} }
func (m *P2PVersion) String() string            { return proto.CompactTextString(m) }
func (*P2PVersion) ProtoMessage()               {}
func (*P2PVersion) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *P2PVersion) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2PVersion) GetService() int64 {
	if m != nil {
		return m.Service
	}
	return 0
}

func (m *P2PVersion) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *P2PVersion) GetAddrRecv() string {
	if m != nil {
		return m.AddrRecv
	}
	return ""
}

func (m *P2PVersion) GetAddrFrom() string {
	if m != nil {
		return m.AddrFrom
	}
	return ""
}

func (m *P2PVersion) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *P2PVersion) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *P2PVersion) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

type P2PVerAck struct {
	Version int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Service int64 `protobuf:"varint,2,opt,name=service" json:"service,omitempty"`
	Nonce   int64 `protobuf:"varint,3,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *P2PVerAck) Reset()                    { *m = P2PVerAck{} }
func (m *P2PVerAck) String() string            { return proto.CompactTextString(m) }
func (*P2PVerAck) ProtoMessage()               {}
func (*P2PVerAck) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *P2PVerAck) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2PVerAck) GetService() int64 {
	if m != nil {
		return m.Service
	}
	return 0
}

func (m *P2PVerAck) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type P2PPing struct {
	Nonce int64      `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	Addr  string     `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Port  int32      `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	Sign  *Signature `protobuf:"bytes,4,opt,name=sign" json:"sign,omitempty"`
}

func (m *P2PPing) Reset()                    { *m = P2PPing{} }
func (m *P2PPing) String() string            { return proto.CompactTextString(m) }
func (*P2PPing) ProtoMessage()               {}
func (*P2PPing) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *P2PPing) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *P2PPing) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *P2PPing) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *P2PPing) GetSign() *Signature {
	if m != nil {
		return m.Sign
	}
	return nil
}

type P2PPong struct {
	Nonce int64 `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *P2PPong) Reset()                    { *m = P2PPong{} }
func (m *P2PPong) String() string            { return proto.CompactTextString(m) }
func (*P2PPong) ProtoMessage()               {}
func (*P2PPong) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *P2PPong) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type P2PGetAddr struct {
	Nonce int64 `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *P2PGetAddr) Reset()                    { *m = P2PGetAddr{} }
func (m *P2PGetAddr) String() string            { return proto.CompactTextString(m) }
func (*P2PGetAddr) ProtoMessage()               {}
func (*P2PGetAddr) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *P2PGetAddr) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type P2PAddr struct {
	Nonce    int64    `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	Addrlist []string `protobuf:"bytes,2,rep,name=addrlist" json:"addrlist,omitempty"`
}

func (m *P2PAddr) Reset()                    { *m = P2PAddr{} }
func (m *P2PAddr) String() string            { return proto.CompactTextString(m) }
func (*P2PAddr) ProtoMessage()               {}
func (*P2PAddr) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *P2PAddr) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *P2PAddr) GetAddrlist() []string {
	if m != nil {
		return m.Addrlist
	}
	return nil
}

type P2PExternalInfo struct {
	Addr      string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Isoutside bool   `protobuf:"varint,2,opt,name=isoutside" json:"isoutside,omitempty"`
}

func (m *P2PExternalInfo) Reset()                    { *m = P2PExternalInfo{} }
func (m *P2PExternalInfo) String() string            { return proto.CompactTextString(m) }
func (*P2PExternalInfo) ProtoMessage()               {}
func (*P2PExternalInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *P2PExternalInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *P2PExternalInfo) GetIsoutside() bool {
	if m != nil {
		return m.Isoutside
	}
	return false
}

type P2PGetBlocks struct {
	Version     int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	StartHeight int64 `protobuf:"varint,2,opt,name=startHeight" json:"startHeight,omitempty"`
	EndHeight   int64 `protobuf:"varint,3,opt,name=endHeight" json:"endHeight,omitempty"`
}

func (m *P2PGetBlocks) Reset()                    { *m = P2PGetBlocks{} }
func (m *P2PGetBlocks) String() string            { return proto.CompactTextString(m) }
func (*P2PGetBlocks) ProtoMessage()               {}
func (*P2PGetBlocks) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *P2PGetBlocks) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2PGetBlocks) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *P2PGetBlocks) GetEndHeight() int64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

type P2PGetMempool struct {
	Version int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
}

func (m *P2PGetMempool) Reset()                    { *m = P2PGetMempool{} }
func (m *P2PGetMempool) String() string            { return proto.CompactTextString(m) }
func (*P2PGetMempool) ProtoMessage()               {}
func (*P2PGetMempool) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *P2PGetMempool) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type P2PInv struct {
	Invs []*Inventory `protobuf:"bytes,1,rep,name=invs" json:"invs,omitempty"`
}

func (m *P2PInv) Reset()                    { *m = P2PInv{} }
func (m *P2PInv) String() string            { return proto.CompactTextString(m) }
func (*P2PInv) ProtoMessage()               {}
func (*P2PInv) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *P2PInv) GetInvs() []*Inventory {
	if m != nil {
		return m.Invs
	}
	return nil
}

// ty=MSG_TX MSG_BLOCK
type Inventory struct {
	Ty     int32  `protobuf:"varint,1,opt,name=ty" json:"ty,omitempty"`
	Hash   []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Height int64  `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
}

func (m *Inventory) Reset()                    { *m = Inventory{} }
func (m *Inventory) String() string            { return proto.CompactTextString(m) }
func (*Inventory) ProtoMessage()               {}
func (*Inventory) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *Inventory) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *Inventory) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Inventory) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type P2PGetData struct {
	Version int32        `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Invs    []*Inventory `protobuf:"bytes,2,rep,name=invs" json:"invs,omitempty"`
}

func (m *P2PGetData) Reset()                    { *m = P2PGetData{} }
func (m *P2PGetData) String() string            { return proto.CompactTextString(m) }
func (*P2PGetData) ProtoMessage()               {}
func (*P2PGetData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *P2PGetData) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2PGetData) GetInvs() []*Inventory {
	if m != nil {
		return m.Invs
	}
	return nil
}

type P2PTx struct {
	Tx *Transaction `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
}

func (m *P2PTx) Reset()                    { *m = P2PTx{} }
func (m *P2PTx) String() string            { return proto.CompactTextString(m) }
func (*P2PTx) ProtoMessage()               {}
func (*P2PTx) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *P2PTx) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

type P2PBlock struct {
	Block *Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
}

func (m *P2PBlock) Reset()                    { *m = P2PBlock{} }
func (m *P2PBlock) String() string            { return proto.CompactTextString(m) }
func (*P2PBlock) ProtoMessage()               {}
func (*P2PBlock) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *P2PBlock) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type BroadCastData struct {
	// Types that are valid to be assigned to Value:
	//	*BroadCastData_Tx
	//	*BroadCastData_Block
	Value isBroadCastData_Value `protobuf_oneof:"value"`
}

func (m *BroadCastData) Reset()                    { *m = BroadCastData{} }
func (m *BroadCastData) String() string            { return proto.CompactTextString(m) }
func (*BroadCastData) ProtoMessage()               {}
func (*BroadCastData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

type isBroadCastData_Value interface {
	isBroadCastData_Value()
}

type BroadCastData_Tx struct {
	Tx *P2PTx `protobuf:"bytes,1,opt,name=tx,oneof"`
}
type BroadCastData_Block struct {
	Block *P2PBlock `protobuf:"bytes,2,opt,name=block,oneof"`
}

func (*BroadCastData_Tx) isBroadCastData_Value()    {}
func (*BroadCastData_Block) isBroadCastData_Value() {}

func (m *BroadCastData) GetValue() isBroadCastData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BroadCastData) GetTx() *P2PTx {
	if x, ok := m.GetValue().(*BroadCastData_Tx); ok {
		return x.Tx
	}
	return nil
}

func (m *BroadCastData) GetBlock() *P2PBlock {
	if x, ok := m.GetValue().(*BroadCastData_Block); ok {
		return x.Block
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BroadCastData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BroadCastData_OneofMarshaler, _BroadCastData_OneofUnmarshaler, _BroadCastData_OneofSizer, []interface{}{
		(*BroadCastData_Tx)(nil),
		(*BroadCastData_Block)(nil),
	}
}

func _BroadCastData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BroadCastData)
	// value
	switch x := m.Value.(type) {
	case *BroadCastData_Tx:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tx); err != nil {
			return err
		}
	case *BroadCastData_Block:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BroadCastData.Value has unexpected type %T", x)
	}
	return nil
}

func _BroadCastData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BroadCastData)
	switch tag {
	case 1: // value.tx
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(P2PTx)
		err := b.DecodeMessage(msg)
		m.Value = &BroadCastData_Tx{msg}
		return true, err
	case 2: // value.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(P2PBlock)
		err := b.DecodeMessage(msg)
		m.Value = &BroadCastData_Block{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BroadCastData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BroadCastData)
	// value
	switch x := m.Value.(type) {
	case *BroadCastData_Tx:
		s := proto.Size(x.Tx)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BroadCastData_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type P2PGetHeaders struct {
	Version     int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	StartHeight int64 `protobuf:"varint,2,opt,name=startHeight" json:"startHeight,omitempty"`
	EndHeight   int64 `protobuf:"varint,3,opt,name=endHeight" json:"endHeight,omitempty"`
}

func (m *P2PGetHeaders) Reset()                    { *m = P2PGetHeaders{} }
func (m *P2PGetHeaders) String() string            { return proto.CompactTextString(m) }
func (*P2PGetHeaders) ProtoMessage()               {}
func (*P2PGetHeaders) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *P2PGetHeaders) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2PGetHeaders) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *P2PGetHeaders) GetEndHeight() int64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

type P2PHeaders struct {
	Headers []*Header `protobuf:"bytes,1,rep,name=headers" json:"headers,omitempty"`
}

func (m *P2PHeaders) Reset()                    { *m = P2PHeaders{} }
func (m *P2PHeaders) String() string            { return proto.CompactTextString(m) }
func (*P2PHeaders) ProtoMessage()               {}
func (*P2PHeaders) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *P2PHeaders) GetHeaders() []*Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

type InvData struct {
	// Types that are valid to be assigned to Value:
	//	*InvData_Tx
	//	*InvData_Block
	Value isInvData_Value `protobuf_oneof:"value"`
	Ty    int32           `protobuf:"varint,3,opt,name=ty" json:"ty,omitempty"`
}

func (m *InvData) Reset()                    { *m = InvData{} }
func (m *InvData) String() string            { return proto.CompactTextString(m) }
func (*InvData) ProtoMessage()               {}
func (*InvData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

type isInvData_Value interface {
	isInvData_Value()
}

type InvData_Tx struct {
	Tx *Transaction `protobuf:"bytes,1,opt,name=tx,oneof"`
}
type InvData_Block struct {
	Block *Block `protobuf:"bytes,2,opt,name=block,oneof"`
}

func (*InvData_Tx) isInvData_Value()    {}
func (*InvData_Block) isInvData_Value() {}

func (m *InvData) GetValue() isInvData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *InvData) GetTx() *Transaction {
	if x, ok := m.GetValue().(*InvData_Tx); ok {
		return x.Tx
	}
	return nil
}

func (m *InvData) GetBlock() *Block {
	if x, ok := m.GetValue().(*InvData_Block); ok {
		return x.Block
	}
	return nil
}

func (m *InvData) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InvData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InvData_OneofMarshaler, _InvData_OneofUnmarshaler, _InvData_OneofSizer, []interface{}{
		(*InvData_Tx)(nil),
		(*InvData_Block)(nil),
	}
}

func _InvData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InvData)
	// value
	switch x := m.Value.(type) {
	case *InvData_Tx:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tx); err != nil {
			return err
		}
	case *InvData_Block:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InvData.Value has unexpected type %T", x)
	}
	return nil
}

func _InvData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InvData)
	switch tag {
	case 1: // value.tx
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction)
		err := b.DecodeMessage(msg)
		m.Value = &InvData_Tx{msg}
		return true, err
	case 2: // value.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Block)
		err := b.DecodeMessage(msg)
		m.Value = &InvData_Block{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InvData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InvData)
	// value
	switch x := m.Value.(type) {
	case *InvData_Tx:
		s := proto.Size(x.Tx)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InvData_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type InvDatas struct {
	Items []*InvData `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *InvDatas) Reset()                    { *m = InvDatas{} }
func (m *InvDatas) String() string            { return proto.CompactTextString(m) }
func (*InvDatas) ProtoMessage()               {}
func (*InvDatas) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21} }

func (m *InvDatas) GetItems() []*InvData {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*P2P)(nil), "types.P2P")
	proto.RegisterType((*P2PGetPeerInfo)(nil), "types.P2PGetPeerInfo")
	proto.RegisterType((*P2PPeerInfo)(nil), "types.P2PPeerInfo")
	proto.RegisterType((*P2PVersion)(nil), "types.P2PVersion")
	proto.RegisterType((*P2PVerAck)(nil), "types.P2PVerAck")
	proto.RegisterType((*P2PPing)(nil), "types.P2PPing")
	proto.RegisterType((*P2PPong)(nil), "types.P2PPong")
	proto.RegisterType((*P2PGetAddr)(nil), "types.P2PGetAddr")
	proto.RegisterType((*P2PAddr)(nil), "types.P2PAddr")
	proto.RegisterType((*P2PExternalInfo)(nil), "types.P2PExternalInfo")
	proto.RegisterType((*P2PGetBlocks)(nil), "types.P2PGetBlocks")
	proto.RegisterType((*P2PGetMempool)(nil), "types.P2PGetMempool")
	proto.RegisterType((*P2PInv)(nil), "types.P2PInv")
	proto.RegisterType((*Inventory)(nil), "types.Inventory")
	proto.RegisterType((*P2PGetData)(nil), "types.P2PGetData")
	proto.RegisterType((*P2PTx)(nil), "types.P2PTx")
	proto.RegisterType((*P2PBlock)(nil), "types.P2PBlock")
	proto.RegisterType((*BroadCastData)(nil), "types.BroadCastData")
	proto.RegisterType((*P2PGetHeaders)(nil), "types.P2PGetHeaders")
	proto.RegisterType((*P2PHeaders)(nil), "types.P2PHeaders")
	proto.RegisterType((*InvData)(nil), "types.InvData")
	proto.RegisterType((*InvDatas)(nil), "types.InvDatas")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for P2Pgservice service

type P2PgserviceClient interface {
	// 广播交易
	BroadCastTx(ctx context.Context, in *P2PTx, opts ...grpc.CallOption) (*Reply, error)
	BroadCastBlock(ctx context.Context, in *P2PBlock, opts ...grpc.CallOption) (*Reply, error)
	// PING
	Ping(ctx context.Context, in *P2PPing, opts ...grpc.CallOption) (*P2PPong, error)
	// 获取地址
	GetAddr(ctx context.Context, in *P2PGetAddr, opts ...grpc.CallOption) (*P2PAddr, error)
	// 版本
	Version(ctx context.Context, in *P2PVersion, opts ...grpc.CallOption) (*P2PVerAck, error)
	Version2(ctx context.Context, in *P2PVersion, opts ...grpc.CallOption) (*P2PVersion, error)
	// 获取区块，最高200
	GetBlocks(ctx context.Context, in *P2PGetBlocks, opts ...grpc.CallOption) (*P2PInv, error)
	//
	GetMemPool(ctx context.Context, in *P2PGetMempool, opts ...grpc.CallOption) (*P2PInv, error)
	// 获取数据
	GetData(ctx context.Context, in *P2PGetData, opts ...grpc.CallOption) (P2Pgservice_GetDataClient, error)
	// 获取头部
	GetHeaders(ctx context.Context, in *P2PGetHeaders, opts ...grpc.CallOption) (*P2PHeaders, error)
	// 获取 peerinfo
	GetPeerInfo(ctx context.Context, in *P2PGetPeerInfo, opts ...grpc.CallOption) (*P2PPeerInfo, error)
	RouteChat(ctx context.Context, opts ...grpc.CallOption) (P2Pgservice_RouteChatClient, error)
	RemotePeerAddr(ctx context.Context, in *P2PGetAddr, opts ...grpc.CallOption) (*P2PExternalInfo, error)
}

type p2PgserviceClient struct {
	cc *grpc.ClientConn
}

func NewP2PgserviceClient(cc *grpc.ClientConn) P2PgserviceClient {
	return &p2PgserviceClient{cc}
}

func (c *p2PgserviceClient) BroadCastTx(ctx context.Context, in *P2PTx, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.p2pgservice/BroadCastTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) BroadCastBlock(ctx context.Context, in *P2PBlock, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.p2pgservice/BroadCastBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) Ping(ctx context.Context, in *P2PPing, opts ...grpc.CallOption) (*P2PPong, error) {
	out := new(P2PPong)
	err := grpc.Invoke(ctx, "/types.p2pgservice/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) GetAddr(ctx context.Context, in *P2PGetAddr, opts ...grpc.CallOption) (*P2PAddr, error) {
	out := new(P2PAddr)
	err := grpc.Invoke(ctx, "/types.p2pgservice/GetAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) Version(ctx context.Context, in *P2PVersion, opts ...grpc.CallOption) (*P2PVerAck, error) {
	out := new(P2PVerAck)
	err := grpc.Invoke(ctx, "/types.p2pgservice/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) Version2(ctx context.Context, in *P2PVersion, opts ...grpc.CallOption) (*P2PVersion, error) {
	out := new(P2PVersion)
	err := grpc.Invoke(ctx, "/types.p2pgservice/Version2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) GetBlocks(ctx context.Context, in *P2PGetBlocks, opts ...grpc.CallOption) (*P2PInv, error) {
	out := new(P2PInv)
	err := grpc.Invoke(ctx, "/types.p2pgservice/GetBlocks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) GetMemPool(ctx context.Context, in *P2PGetMempool, opts ...grpc.CallOption) (*P2PInv, error) {
	out := new(P2PInv)
	err := grpc.Invoke(ctx, "/types.p2pgservice/GetMemPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) GetData(ctx context.Context, in *P2PGetData, opts ...grpc.CallOption) (P2Pgservice_GetDataClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_P2Pgservice_serviceDesc.Streams[0], c.cc, "/types.p2pgservice/GetData", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PgserviceGetDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type P2Pgservice_GetDataClient interface {
	Recv() (*InvDatas, error)
	grpc.ClientStream
}

type p2PgserviceGetDataClient struct {
	grpc.ClientStream
}

func (x *p2PgserviceGetDataClient) Recv() (*InvDatas, error) {
	m := new(InvDatas)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *p2PgserviceClient) GetHeaders(ctx context.Context, in *P2PGetHeaders, opts ...grpc.CallOption) (*P2PHeaders, error) {
	out := new(P2PHeaders)
	err := grpc.Invoke(ctx, "/types.p2pgservice/GetHeaders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) GetPeerInfo(ctx context.Context, in *P2PGetPeerInfo, opts ...grpc.CallOption) (*P2PPeerInfo, error) {
	out := new(P2PPeerInfo)
	err := grpc.Invoke(ctx, "/types.p2pgservice/GetPeerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (P2Pgservice_RouteChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_P2Pgservice_serviceDesc.Streams[1], c.cc, "/types.p2pgservice/RouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PgserviceRouteChatClient{stream}
	return x, nil
}

type P2Pgservice_RouteChatClient interface {
	Send(*BroadCastData) error
	Recv() (*BroadCastData, error)
	grpc.ClientStream
}

type p2PgserviceRouteChatClient struct {
	grpc.ClientStream
}

func (x *p2PgserviceRouteChatClient) Send(m *BroadCastData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *p2PgserviceRouteChatClient) Recv() (*BroadCastData, error) {
	m := new(BroadCastData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *p2PgserviceClient) RemotePeerAddr(ctx context.Context, in *P2PGetAddr, opts ...grpc.CallOption) (*P2PExternalInfo, error) {
	out := new(P2PExternalInfo)
	err := grpc.Invoke(ctx, "/types.p2pgservice/RemotePeerAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for P2Pgservice service

type P2PgserviceServer interface {
	// 广播交易
	BroadCastTx(context.Context, *P2PTx) (*Reply, error)
	BroadCastBlock(context.Context, *P2PBlock) (*Reply, error)
	// PING
	Ping(context.Context, *P2PPing) (*P2PPong, error)
	// 获取地址
	GetAddr(context.Context, *P2PGetAddr) (*P2PAddr, error)
	// 版本
	Version(context.Context, *P2PVersion) (*P2PVerAck, error)
	Version2(context.Context, *P2PVersion) (*P2PVersion, error)
	// 获取区块，最高200
	GetBlocks(context.Context, *P2PGetBlocks) (*P2PInv, error)
	//
	GetMemPool(context.Context, *P2PGetMempool) (*P2PInv, error)
	// 获取数据
	GetData(*P2PGetData, P2Pgservice_GetDataServer) error
	// 获取头部
	GetHeaders(context.Context, *P2PGetHeaders) (*P2PHeaders, error)
	// 获取 peerinfo
	GetPeerInfo(context.Context, *P2PGetPeerInfo) (*P2PPeerInfo, error)
	RouteChat(P2Pgservice_RouteChatServer) error
	RemotePeerAddr(context.Context, *P2PGetAddr) (*P2PExternalInfo, error)
}

func RegisterP2PgserviceServer(s *grpc.Server, srv P2PgserviceServer) {
	s.RegisterService(&_P2Pgservice_serviceDesc, srv)
}

func _P2Pgservice_BroadCastTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).BroadCastTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/BroadCastTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).BroadCastTx(ctx, req.(*P2PTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_BroadCastBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).BroadCastBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/BroadCastBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).BroadCastBlock(ctx, req.(*P2PBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PPing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).Ping(ctx, req.(*P2PPing))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_GetAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).GetAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/GetAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).GetAddr(ctx, req.(*P2PGetAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).Version(ctx, req.(*P2PVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_Version2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).Version2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/Version2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).Version2(ctx, req.(*P2PVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetBlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).GetBlocks(ctx, req.(*P2PGetBlocks))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_GetMemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetMempool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).GetMemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/GetMemPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).GetMemPool(ctx, req.(*P2PGetMempool))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(P2PGetData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(P2PgserviceServer).GetData(m, &p2PgserviceGetDataServer{stream})
}

type P2Pgservice_GetDataServer interface {
	Send(*InvDatas) error
	grpc.ServerStream
}

type p2PgserviceGetDataServer struct {
	grpc.ServerStream
}

func (x *p2PgserviceGetDataServer) Send(m *InvDatas) error {
	return x.ServerStream.SendMsg(m)
}

func _P2Pgservice_GetHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetHeaders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).GetHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/GetHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).GetHeaders(ctx, req.(*P2PGetHeaders))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_GetPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetPeerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).GetPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/GetPeerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).GetPeerInfo(ctx, req.(*P2PGetPeerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(P2PgserviceServer).RouteChat(&p2PgserviceRouteChatServer{stream})
}

type P2Pgservice_RouteChatServer interface {
	Send(*BroadCastData) error
	Recv() (*BroadCastData, error)
	grpc.ServerStream
}

type p2PgserviceRouteChatServer struct {
	grpc.ServerStream
}

func (x *p2PgserviceRouteChatServer) Send(m *BroadCastData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *p2PgserviceRouteChatServer) Recv() (*BroadCastData, error) {
	m := new(BroadCastData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _P2Pgservice_RemotePeerAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).RemotePeerAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/RemotePeerAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).RemotePeerAddr(ctx, req.(*P2PGetAddr))
	}
	return interceptor(ctx, in, info, handler)
}

var _P2Pgservice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.p2pgservice",
	HandlerType: (*P2PgserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadCastTx",
			Handler:    _P2Pgservice_BroadCastTx_Handler,
		},
		{
			MethodName: "BroadCastBlock",
			Handler:    _P2Pgservice_BroadCastBlock_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _P2Pgservice_Ping_Handler,
		},
		{
			MethodName: "GetAddr",
			Handler:    _P2Pgservice_GetAddr_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _P2Pgservice_Version_Handler,
		},
		{
			MethodName: "Version2",
			Handler:    _P2Pgservice_Version2_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _P2Pgservice_GetBlocks_Handler,
		},
		{
			MethodName: "GetMemPool",
			Handler:    _P2Pgservice_GetMemPool_Handler,
		},
		{
			MethodName: "GetHeaders",
			Handler:    _P2Pgservice_GetHeaders_Handler,
		},
		{
			MethodName: "GetPeerInfo",
			Handler:    _P2Pgservice_GetPeerInfo_Handler,
		},
		{
			MethodName: "RemotePeerAddr",
			Handler:    _P2Pgservice_RemotePeerAddr_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetData",
			Handler:       _P2Pgservice_GetData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RouteChat",
			Handler:       _P2Pgservice_RouteChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "p2p.proto",
}

func init() { proto.RegisterFile("p2p.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1056 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xeb, 0x6a, 0xe3, 0x46,
	0x14, 0xd6, 0x25, 0x8e, 0xad, 0xe3, 0xc4, 0xc9, 0x4e, 0xb7, 0x8b, 0x30, 0x4b, 0x6b, 0x86, 0x94,
	0x75, 0xbb, 0x60, 0xb2, 0x5a, 0x4a, 0xa1, 0x65, 0x7f, 0x24, 0x69, 0x37, 0x09, 0xec, 0x82, 0x98,
	0xa4, 0xfd, 0x3f, 0x91, 0xa7, 0xb6, 0x88, 0x35, 0x12, 0xd2, 0xc4, 0x38, 0x7d, 0x89, 0x42, 0x5f,
	0xa7, 0xaf, 0xd4, 0x87, 0x28, 0x73, 0xd3, 0x25, 0x17, 0xff, 0x28, 0xf4, 0xdf, 0x9c, 0xef, 0xdc,
	0xcf, 0x77, 0x74, 0x6c, 0x08, 0x8a, 0xa8, 0x98, 0x15, 0x65, 0x2e, 0x72, 0xd4, 0x13, 0xf7, 0x05,
	0xab, 0xc6, 0x2f, 0x44, 0x49, 0x79, 0x45, 0x13, 0x91, 0xe6, 0x5c, 0x6b, 0xc6, 0x7b, 0x49, 0x9e,
	0x65, 0xb5, 0x74, 0x78, 0xb3, 0xca, 0x93, 0xdb, 0x64, 0x49, 0x53, 0x83, 0xe0, 0x3f, 0x3d, 0xf0,
	0xe3, 0x28, 0x46, 0x63, 0x18, 0x54, 0x8c, 0xcd, 0xe3, 0xbc, 0x14, 0xa1, 0x3b, 0x71, 0xa7, 0x3d,
	0x52, 0xcb, 0xe8, 0x15, 0xec, 0xce, 0x6f, 0x62, 0x2a, 0x96, 0xa1, 0x37, 0x71, 0xa7, 0x01, 0x31,
	0x12, 0x9a, 0xc0, 0x70, 0x51, 0x16, 0xc9, 0xa7, 0x7c, 0xf1, 0x31, 0x5d, 0xb1, 0xd0, 0x57, 0xca,
	0x36, 0x24, 0x3d, 0xd3, 0xea, 0x8a, 0xb1, 0x79, 0xb8, 0x33, 0x71, 0xa7, 0x03, 0x62, 0x24, 0xf4,
	0x12, 0x7a, 0x32, 0x7a, 0x15, 0xf6, 0x26, 0xfe, 0x34, 0x20, 0x5a, 0x90, 0xd6, 0x8c, 0xd3, 0x9b,
	0x15, 0x0b, 0x77, 0xb5, 0xb5, 0x96, 0x10, 0x86, 0xbd, 0xac, 0x5a, 0x9c, 0xd1, 0x64, 0xc9, 0xae,
	0xd2, 0x3f, 0x58, 0xd8, 0x57, 0xf5, 0x75, 0x30, 0x14, 0x42, 0x7f, 0xcd, 0xca, 0x2a, 0xcd, 0x79,
	0x38, 0x50, 0x6a, 0x2b, 0xca, 0xa8, 0x6b, 0x56, 0x7e, 0x4e, 0x37, 0x61, 0xa0, 0x14, 0x46, 0xb2,
	0x38, 0xdd, 0x84, 0xd0, 0xe0, 0x74, 0x83, 0xbf, 0x83, 0x51, 0x1c, 0xc5, 0xe7, 0x4c, 0xc4, 0x8c,
	0x95, 0x97, 0xfc, 0xf7, 0xbc, 0x1d, 0xdb, 0xed, 0xc4, 0xc6, 0x7f, 0xb9, 0x30, 0x8c, 0xa3, 0xb8,
	0xb6, 0x44, 0xb0, 0x43, 0xe7, 0xf3, 0x52, 0x99, 0x05, 0x44, 0xbd, 0x25, 0x56, 0xc8, 0xa9, 0x7a,
	0xca, 0x55, 0xbd, 0x25, 0xc6, 0x69, 0x66, 0x47, 0xa6, 0xde, 0x72, 0x9a, 0x19, 0xcb, 0x8a, 0x3c,
	0x5f, 0xa9, 0x26, 0x77, 0x94, 0x79, 0x1b, 0x42, 0xdf, 0xc0, 0xee, 0x92, 0xd1, 0x39, 0x2b, 0xc3,
	0xde, 0xc4, 0x9d, 0x0e, 0xa3, 0xfd, 0x99, 0xa2, 0x7d, 0x76, 0xa1, 0x40, 0x62, 0x94, 0xf8, 0x1f,
	0x17, 0x20, 0x8e, 0xe2, 0xdf, 0x4c, 0xff, 0xcf, 0x56, 0x2f, 0x35, 0x15, 0x2b, 0xd7, 0x69, 0xc2,
	0x54, 0x71, 0x3e, 0xb1, 0x22, 0x7a, 0x0d, 0x81, 0x48, 0x33, 0x56, 0x09, 0x9a, 0x15, 0xaa, 0x48,
	0x9f, 0x34, 0x80, 0xdc, 0x15, 0xd9, 0x19, 0x61, 0xc9, 0x5a, 0x95, 0x19, 0x90, 0x5a, 0xb6, 0xba,
	0x8f, 0x65, 0x9e, 0xa9, 0x2a, 0x8d, 0x4e, 0xca, 0x92, 0x75, 0x9e, 0xf3, 0x44, 0xd3, 0xeb, 0x13,
	0x2d, 0xc8, 0x5c, 0x77, 0x15, 0x2b, 0x4f, 0x16, 0x8c, 0x0b, 0x45, 0x6d, 0x40, 0x1a, 0x40, 0x4e,
	0xa5, 0x12, 0xb4, 0x14, 0x17, 0x2c, 0x5d, 0x2c, 0x85, 0xe2, 0xd6, 0x27, 0x6d, 0x08, 0xff, 0x0a,
	0x81, 0xee, 0xf6, 0x24, 0xb9, 0xfd, 0x4f, 0xcd, 0xd6, 0x65, 0xf9, 0xad, 0xb2, 0x70, 0x06, 0x7d,
	0xc9, 0x6c, 0xca, 0x17, 0x8d, 0x81, 0xdb, 0xae, 0xdb, 0x72, 0xed, 0x3d, 0xc1, 0xb5, 0xdf, 0xe2,
	0xfa, 0x08, 0x76, 0xaa, 0x74, 0xc1, 0xd5, 0xa4, 0x86, 0xd1, 0xa1, 0xe1, 0xec, 0x2a, 0x5d, 0x70,
	0x2a, 0xee, 0x4a, 0x46, 0x94, 0x16, 0x7f, 0xad, 0xd3, 0xe5, 0xcf, 0xa5, 0xc3, 0x58, 0x91, 0x7a,
	0xce, 0xc4, 0x89, 0x4c, 0xf4, 0xb4, 0xcd, 0x4f, 0x2a, 0xc8, 0xf3, 0x06, 0x96, 0x9d, 0x55, 0x5a,
	0xc9, 0x7d, 0xf4, 0x2d, 0x3b, 0x52, 0xc6, 0x67, 0x70, 0x10, 0x47, 0xf1, 0x2f, 0x1b, 0xc1, 0x4a,
	0x4e, 0x57, 0xcf, 0xae, 0xf3, 0x6b, 0x08, 0xd2, 0x2a, 0xbf, 0x13, 0x55, 0x3a, 0xd7, 0x93, 0x1c,
	0x90, 0x06, 0xc0, 0x4b, 0xd8, 0xd3, 0x55, 0x9e, 0xca, 0x43, 0x53, 0x6d, 0xe1, 0xe3, 0x01, 0xb1,
	0xde, 0x23, 0x62, 0x65, 0x26, 0xc6, 0xe7, 0x46, 0x6f, 0x96, 0xb0, 0x06, 0xf0, 0xb7, 0xb0, 0xaf,
	0x33, 0x7d, 0xd6, 0x5f, 0xc8, 0x96, 0xaf, 0x74, 0x06, 0xbb, 0x71, 0x14, 0x5f, 0xf2, 0xb5, 0xe4,
	0x22, 0xe5, 0xeb, 0x2a, 0x74, 0x27, 0x7e, 0x8b, 0x8b, 0x4b, 0xbe, 0x66, 0x5c, 0xe4, 0xe5, 0x3d,
	0x51, 0x5a, 0x7c, 0x0e, 0x41, 0x0d, 0xa1, 0x11, 0x78, 0xe2, 0xde, 0x44, 0xf4, 0xc4, 0xbd, 0x9c,
	0xc9, 0x92, 0x56, 0xfa, 0x14, 0xee, 0x11, 0xf5, 0x96, 0xa7, 0x64, 0xd9, 0x2e, 0xd3, 0x48, 0xf8,
	0x93, 0xe5, 0xec, 0x67, 0x2a, 0xe8, 0x96, 0x59, 0xd8, 0xb2, 0xbc, 0xad, 0x65, 0xbd, 0x85, 0x5e,
	0x1c, 0xc5, 0xd7, 0x1b, 0x84, 0xc1, 0x13, 0x1b, 0x15, 0x63, 0x18, 0x21, 0x63, 0x7c, 0xdd, 0x5c,
	0x7e, 0xe2, 0x89, 0x0d, 0x9e, 0xc1, 0x20, 0x8e, 0x62, 0xc5, 0x02, 0xc2, 0xd0, 0x53, 0x77, 0xdf,
	0xb8, 0xec, 0x19, 0x17, 0xa5, 0x24, 0x5a, 0x85, 0x29, 0xec, 0x9f, 0x96, 0x39, 0x9d, 0x9f, 0xd1,
	0x4a, 0x57, 0xfb, 0x55, 0x2b, 0x89, 0xf5, 0x50, 0xe9, 0x2f, 0x1c, 0x99, 0x00, 0xbd, 0xb1, 0x41,
	0x3d, 0x65, 0x72, 0xd0, 0x98, 0xa8, 0xb8, 0x17, 0x8e, 0x89, 0x7c, 0xda, 0x87, 0xde, 0x9a, 0xae,
	0xee, 0x18, 0x4e, 0x2d, 0x63, 0xfa, 0x5e, 0xfd, 0x9f, 0xcb, 0xf1, 0xbd, 0x1a, 0xbc, 0xcd, 0xf3,
	0x06, 0xfa, 0xfa, 0x34, 0x5a, 0xe2, 0x1f, 0x1c, 0x4e, 0xab, 0xc5, 0x1c, 0xfa, 0x97, 0x7c, 0xad,
	0xda, 0x3f, 0xda, 0x3e, 0x63, 0x33, 0x84, 0xa3, 0xee, 0x10, 0x3a, 0x93, 0xad, 0x27, 0x60, 0x56,
	0xc8, 0xb7, 0x2b, 0xd4, 0x4c, 0xe4, 0x18, 0x06, 0x26, 0x5f, 0x25, 0x43, 0xa5, 0x82, 0x65, 0xb6,
	0xc4, 0x51, 0xb3, 0x04, 0x52, 0x4f, 0xb4, 0x32, 0xfa, 0xbb, 0x07, 0xc3, 0x22, 0x2a, 0x16, 0xf6,
	0x76, 0xbd, 0x85, 0x61, 0x4d, 0xdb, 0xf5, 0x06, 0x75, 0x88, 0x1a, 0x5b, 0x89, 0xb0, 0x62, 0x75,
	0x8f, 0x1d, 0xf4, 0x0e, 0x46, 0xb5, 0xb1, 0xde, 0x8c, 0x87, 0xac, 0x3d, 0x72, 0x99, 0xc2, 0x8e,
	0x3a, 0x81, 0xa3, 0xc6, 0x50, 0xca, 0xe3, 0xb6, 0x9c, 0xf3, 0x05, 0x76, 0xd0, 0x0c, 0xfa, 0xf6,
	0x38, 0xbd, 0x68, 0x94, 0x06, 0x6a, 0xdb, 0x4b, 0x19, 0x3b, 0xe8, 0x18, 0xfa, 0xf6, 0x17, 0xaa,
	0x65, 0x6f, 0xa0, 0xf1, 0x61, 0x07, 0x3a, 0x49, 0x6e, 0xb1, 0x83, 0x22, 0x18, 0x18, 0x75, 0xf4,
	0x94, 0xcb, 0x63, 0x48, 0xb5, 0x1c, 0x34, 0xc7, 0xe8, 0x8b, 0x4e, 0x5d, 0x1a, 0x1c, 0xef, 0x37,
	0xe0, 0x25, 0x5f, 0x63, 0x07, 0xbd, 0x07, 0xd0, 0x57, 0x25, 0x96, 0x57, 0xe5, 0x65, 0xc7, 0xc7,
	0xdc, 0x9a, 0xc7, 0x4e, 0xef, 0x54, 0xf7, 0x6a, 0x73, 0xba, 0xdd, 0x4b, 0x68, 0x7c, 0xd0, 0x25,
	0xb3, 0xc2, 0xce, 0xb1, 0x8b, 0x7e, 0x50, 0x79, 0xec, 0x8e, 0x76, 0xf3, 0x18, 0xb4, 0xdd, 0x93,
	0x81, 0xb0, 0x83, 0x7e, 0x84, 0x61, 0xfb, 0xdf, 0xc9, 0x97, 0x1d, 0x4f, 0x0b, 0x8f, 0x51, 0x8b,
	0x21, 0x83, 0x61, 0x07, 0x7d, 0x80, 0x80, 0xe4, 0x77, 0x82, 0x9d, 0x2d, 0xa9, 0xa8, 0x73, 0x76,
	0x3e, 0xfc, 0xf1, 0x93, 0x28, 0x76, 0xa6, 0xee, 0xb1, 0x8b, 0x3e, 0xc0, 0x88, 0xb0, 0x2c, 0x17,
	0x4c, 0x86, 0x7c, 0x8e, 0xeb, 0x57, 0x0d, 0xd4, 0xfe, 0x35, 0xc1, 0xce, 0xcd, 0xae, 0xfa, 0xcf,
	0xf9, 0xfe, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x31, 0x67, 0x31, 0xba, 0x0a, 0x00, 0x00,
}
