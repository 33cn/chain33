// Copyright Fuzamei Corp. 2018 All Rights Reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: p2p.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// *
// 请求获取远程节点的节点信息
type P2PGetPeerInfo struct {
	// / p2p版本
	Version int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
}

func (m *P2PGetPeerInfo) Reset()                    { *m = P2PGetPeerInfo{} }
func (m *P2PGetPeerInfo) String() string            { return proto.CompactTextString(m) }
func (*P2PGetPeerInfo) ProtoMessage()               {}
func (*P2PGetPeerInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *P2PGetPeerInfo) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// *
// 节点信息
type P2PPeerInfo struct {
	// /节点的IP地址
	Addr string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	// /节点的外网端口
	Port int32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	// /节点的名称
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// / mempool 的大小
	MempoolSize int32 `protobuf:"varint,4,opt,name=mempoolSize" json:"mempoolSize,omitempty"`
	// /节点当前高度头部数据
	Header *Header `protobuf:"bytes,5,opt,name=header" json:"header,omitempty"`
}

func (m *P2PPeerInfo) Reset()                    { *m = P2PPeerInfo{} }
func (m *P2PPeerInfo) String() string            { return proto.CompactTextString(m) }
func (*P2PPeerInfo) ProtoMessage()               {}
func (*P2PPeerInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *P2PPeerInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *P2PPeerInfo) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *P2PPeerInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *P2PPeerInfo) GetMempoolSize() int32 {
	if m != nil {
		return m.MempoolSize
	}
	return 0
}

func (m *P2PPeerInfo) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

// *
// p2p节点间发送版本数据结构
type P2PVersion struct {
	// /当前版本
	Version int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// /服务类型
	Service int64 `protobuf:"varint,2,opt,name=service" json:"service,omitempty"`
	// /时间戳
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	// /数据包的目的地址
	AddrRecv string `protobuf:"bytes,4,opt,name=addrRecv" json:"addrRecv,omitempty"`
	// /数据发送的源地址
	AddrFrom string `protobuf:"bytes,5,opt,name=addrFrom" json:"addrFrom,omitempty"`
	// /随机数
	Nonce int64 `protobuf:"varint,6,opt,name=nonce" json:"nonce,omitempty"`
	// /用户代理
	UserAgent string `protobuf:"bytes,7,opt,name=userAgent" json:"userAgent,omitempty"`
	// /当前节点的高度
	StartHeight int64 `protobuf:"varint,8,opt,name=startHeight" json:"startHeight,omitempty"`
}

func (m *P2PVersion) Reset()                    { *m = P2PVersion{} }
func (m *P2PVersion) String() string            { return proto.CompactTextString(m) }
func (*P2PVersion) ProtoMessage()               {}
func (*P2PVersion) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *P2PVersion) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2PVersion) GetService() int64 {
	if m != nil {
		return m.Service
	}
	return 0
}

func (m *P2PVersion) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *P2PVersion) GetAddrRecv() string {
	if m != nil {
		return m.AddrRecv
	}
	return ""
}

func (m *P2PVersion) GetAddrFrom() string {
	if m != nil {
		return m.AddrFrom
	}
	return ""
}

func (m *P2PVersion) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *P2PVersion) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *P2PVersion) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

// *
// P2P 版本返回
type P2PVerAck struct {
	Version int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Service int64 `protobuf:"varint,2,opt,name=service" json:"service,omitempty"`
	Nonce   int64 `protobuf:"varint,3,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *P2PVerAck) Reset()                    { *m = P2PVerAck{} }
func (m *P2PVerAck) String() string            { return proto.CompactTextString(m) }
func (*P2PVerAck) ProtoMessage()               {}
func (*P2PVerAck) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *P2PVerAck) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2PVerAck) GetService() int64 {
	if m != nil {
		return m.Service
	}
	return 0
}

func (m *P2PVerAck) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// *
// P2P 心跳包
type P2PPing struct {
	// /随机数
	Nonce int64 `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	// /节点的外网地址
	Addr string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	// /节点的外网端口
	Port int32 `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	// 签名
	Sign *Signature `protobuf:"bytes,4,opt,name=sign" json:"sign,omitempty"`
}

func (m *P2PPing) Reset()                    { *m = P2PPing{} }
func (m *P2PPing) String() string            { return proto.CompactTextString(m) }
func (*P2PPing) ProtoMessage()               {}
func (*P2PPing) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *P2PPing) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *P2PPing) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *P2PPing) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *P2PPing) GetSign() *Signature {
	if m != nil {
		return m.Sign
	}
	return nil
}

// *
// 心跳返回包
type P2PPong struct {
	Nonce int64 `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *P2PPong) Reset()                    { *m = P2PPong{} }
func (m *P2PPong) String() string            { return proto.CompactTextString(m) }
func (*P2PPong) ProtoMessage()               {}
func (*P2PPong) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *P2PPong) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// *
// 获取对方节点所连接的其他节点地址的请求包
type P2PGetAddr struct {
	Nonce int64 `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *P2PGetAddr) Reset()                    { *m = P2PGetAddr{} }
func (m *P2PGetAddr) String() string            { return proto.CompactTextString(m) }
func (*P2PGetAddr) ProtoMessage()               {}
func (*P2PGetAddr) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *P2PGetAddr) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// *
// 返回请求地址列表的社保
type P2PAddr struct {
	Nonce int64 `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	// /对方节点返回的其他节点信息
	Addrlist []string `protobuf:"bytes,2,rep,name=addrlist" json:"addrlist,omitempty"`
}

func (m *P2PAddr) Reset()                    { *m = P2PAddr{} }
func (m *P2PAddr) String() string            { return proto.CompactTextString(m) }
func (*P2PAddr) ProtoMessage()               {}
func (*P2PAddr) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *P2PAddr) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *P2PAddr) GetAddrlist() []string {
	if m != nil {
		return m.Addrlist
	}
	return nil
}

type P2PAddrList struct {
	Nonce    int64          `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	Peerinfo []*P2PPeerInfo `protobuf:"bytes,2,rep,name=peerinfo" json:"peerinfo,omitempty"`
}

func (m *P2PAddrList) Reset()                    { *m = P2PAddrList{} }
func (m *P2PAddrList) String() string            { return proto.CompactTextString(m) }
func (*P2PAddrList) ProtoMessage()               {}
func (*P2PAddrList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *P2PAddrList) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *P2PAddrList) GetPeerinfo() []*P2PPeerInfo {
	if m != nil {
		return m.Peerinfo
	}
	return nil
}

// *
// 节点外网信息
type P2PExternalInfo struct {
	// /节点的外网地址
	Addr string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	// 节点是否在外网
	Isoutside bool `protobuf:"varint,2,opt,name=isoutside" json:"isoutside,omitempty"`
}

func (m *P2PExternalInfo) Reset()                    { *m = P2PExternalInfo{} }
func (m *P2PExternalInfo) String() string            { return proto.CompactTextString(m) }
func (*P2PExternalInfo) ProtoMessage()               {}
func (*P2PExternalInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *P2PExternalInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *P2PExternalInfo) GetIsoutside() bool {
	if m != nil {
		return m.Isoutside
	}
	return false
}

// *
// 获取区间区块
type P2PGetBlocks struct {
	Version     int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	StartHeight int64 `protobuf:"varint,2,opt,name=startHeight" json:"startHeight,omitempty"`
	EndHeight   int64 `protobuf:"varint,3,opt,name=endHeight" json:"endHeight,omitempty"`
}

func (m *P2PGetBlocks) Reset()                    { *m = P2PGetBlocks{} }
func (m *P2PGetBlocks) String() string            { return proto.CompactTextString(m) }
func (*P2PGetBlocks) ProtoMessage()               {}
func (*P2PGetBlocks) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *P2PGetBlocks) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2PGetBlocks) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *P2PGetBlocks) GetEndHeight() int64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

// *
// 获取mempool
type P2PGetMempool struct {
	Version int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
}

func (m *P2PGetMempool) Reset()                    { *m = P2PGetMempool{} }
func (m *P2PGetMempool) String() string            { return proto.CompactTextString(m) }
func (*P2PGetMempool) ProtoMessage()               {}
func (*P2PGetMempool) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *P2PGetMempool) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type P2PInv struct {
	Invs []*Inventory `protobuf:"bytes,1,rep,name=invs" json:"invs,omitempty"`
}

func (m *P2PInv) Reset()                    { *m = P2PInv{} }
func (m *P2PInv) String() string            { return proto.CompactTextString(m) }
func (*P2PInv) ProtoMessage()               {}
func (*P2PInv) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *P2PInv) GetInvs() []*Inventory {
	if m != nil {
		return m.Invs
	}
	return nil
}

// ty=MSG_TX MSG_BLOCK
type Inventory struct {
	// 类型，数据类型，MSG_TX MSG_BLOCK
	Ty int32 `protobuf:"varint,1,opt,name=ty" json:"ty,omitempty"`
	// /哈希
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// 高度
	Height int64 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
}

func (m *Inventory) Reset()                    { *m = Inventory{} }
func (m *Inventory) String() string            { return proto.CompactTextString(m) }
func (*Inventory) ProtoMessage()               {}
func (*Inventory) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *Inventory) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *Inventory) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Inventory) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// *
// 通过invs 下载数据
type P2PGetData struct {
	// / p2p版本
	Version int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// / invs 数组
	Invs []*Inventory `protobuf:"bytes,2,rep,name=invs" json:"invs,omitempty"`
}

func (m *P2PGetData) Reset()                    { *m = P2PGetData{} }
func (m *P2PGetData) String() string            { return proto.CompactTextString(m) }
func (*P2PGetData) ProtoMessage()               {}
func (*P2PGetData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *P2PGetData) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2PGetData) GetInvs() []*Inventory {
	if m != nil {
		return m.Invs
	}
	return nil
}

// *
// p2p 发送交易协议
type P2PTx struct {
	Tx *Transaction `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
}

func (m *P2PTx) Reset()                    { *m = P2PTx{} }
func (m *P2PTx) String() string            { return proto.CompactTextString(m) }
func (*P2PTx) ProtoMessage()               {}
func (*P2PTx) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *P2PTx) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

// *
// p2p 发送区块协议
type P2PBlock struct {
	Block *Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
}

func (m *P2PBlock) Reset()                    { *m = P2PBlock{} }
func (m *P2PBlock) String() string            { return proto.CompactTextString(m) }
func (*P2PBlock) ProtoMessage()               {}
func (*P2PBlock) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *P2PBlock) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

// *
// p2p 协议和软件版本
type Versions struct {
	P2Pversion  int32  `protobuf:"varint,1,opt,name=p2pversion" json:"p2pversion,omitempty"`
	Softversion string `protobuf:"bytes,2,opt,name=softversion" json:"softversion,omitempty"`
	Peername    string `protobuf:"bytes,3,opt,name=peername" json:"peername,omitempty"`
}

func (m *Versions) Reset()                    { *m = Versions{} }
func (m *Versions) String() string            { return proto.CompactTextString(m) }
func (*Versions) ProtoMessage()               {}
func (*Versions) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

func (m *Versions) GetP2Pversion() int32 {
	if m != nil {
		return m.P2Pversion
	}
	return 0
}

func (m *Versions) GetSoftversion() string {
	if m != nil {
		return m.Softversion
	}
	return ""
}

func (m *Versions) GetPeername() string {
	if m != nil {
		return m.Peername
	}
	return ""
}

// *
// p2p 广播数据协议
type BroadCastData struct {
	// Types that are valid to be assigned to Value:
	//	*BroadCastData_Tx
	//	*BroadCastData_Block
	//	*BroadCastData_Ping
	//	*BroadCastData_Version
	Value isBroadCastData_Value `protobuf_oneof:"value"`
}

func (m *BroadCastData) Reset()                    { *m = BroadCastData{} }
func (m *BroadCastData) String() string            { return proto.CompactTextString(m) }
func (*BroadCastData) ProtoMessage()               {}
func (*BroadCastData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

type isBroadCastData_Value interface {
	isBroadCastData_Value()
}

type BroadCastData_Tx struct {
	Tx *P2PTx `protobuf:"bytes,1,opt,name=tx,oneof"`
}
type BroadCastData_Block struct {
	Block *P2PBlock `protobuf:"bytes,2,opt,name=block,oneof"`
}
type BroadCastData_Ping struct {
	Ping *P2PPing `protobuf:"bytes,3,opt,name=ping,oneof"`
}
type BroadCastData_Version struct {
	Version *Versions `protobuf:"bytes,4,opt,name=version,oneof"`
}

func (*BroadCastData_Tx) isBroadCastData_Value()      {}
func (*BroadCastData_Block) isBroadCastData_Value()   {}
func (*BroadCastData_Ping) isBroadCastData_Value()    {}
func (*BroadCastData_Version) isBroadCastData_Value() {}

func (m *BroadCastData) GetValue() isBroadCastData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BroadCastData) GetTx() *P2PTx {
	if x, ok := m.GetValue().(*BroadCastData_Tx); ok {
		return x.Tx
	}
	return nil
}

func (m *BroadCastData) GetBlock() *P2PBlock {
	if x, ok := m.GetValue().(*BroadCastData_Block); ok {
		return x.Block
	}
	return nil
}

func (m *BroadCastData) GetPing() *P2PPing {
	if x, ok := m.GetValue().(*BroadCastData_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *BroadCastData) GetVersion() *Versions {
	if x, ok := m.GetValue().(*BroadCastData_Version); ok {
		return x.Version
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BroadCastData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BroadCastData_OneofMarshaler, _BroadCastData_OneofUnmarshaler, _BroadCastData_OneofSizer, []interface{}{
		(*BroadCastData_Tx)(nil),
		(*BroadCastData_Block)(nil),
		(*BroadCastData_Ping)(nil),
		(*BroadCastData_Version)(nil),
	}
}

func _BroadCastData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BroadCastData)
	// value
	switch x := m.Value.(type) {
	case *BroadCastData_Tx:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tx); err != nil {
			return err
		}
	case *BroadCastData_Block:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case *BroadCastData_Ping:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ping); err != nil {
			return err
		}
	case *BroadCastData_Version:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Version); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BroadCastData.Value has unexpected type %T", x)
	}
	return nil
}

func _BroadCastData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BroadCastData)
	switch tag {
	case 1: // value.tx
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(P2PTx)
		err := b.DecodeMessage(msg)
		m.Value = &BroadCastData_Tx{msg}
		return true, err
	case 2: // value.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(P2PBlock)
		err := b.DecodeMessage(msg)
		m.Value = &BroadCastData_Block{msg}
		return true, err
	case 3: // value.ping
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(P2PPing)
		err := b.DecodeMessage(msg)
		m.Value = &BroadCastData_Ping{msg}
		return true, err
	case 4: // value.version
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Versions)
		err := b.DecodeMessage(msg)
		m.Value = &BroadCastData_Version{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BroadCastData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BroadCastData)
	// value
	switch x := m.Value.(type) {
	case *BroadCastData_Tx:
		s := proto.Size(x.Tx)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BroadCastData_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BroadCastData_Ping:
		s := proto.Size(x.Ping)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BroadCastData_Version:
		s := proto.Size(x.Version)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// *
// p2p 获取区块区间头部信息协议
type P2PGetHeaders struct {
	Version     int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	StartHeight int64 `protobuf:"varint,2,opt,name=startHeight" json:"startHeight,omitempty"`
	EndHeight   int64 `protobuf:"varint,3,opt,name=endHeight" json:"endHeight,omitempty"`
}

func (m *P2PGetHeaders) Reset()                    { *m = P2PGetHeaders{} }
func (m *P2PGetHeaders) String() string            { return proto.CompactTextString(m) }
func (*P2PGetHeaders) ProtoMessage()               {}
func (*P2PGetHeaders) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *P2PGetHeaders) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2PGetHeaders) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *P2PGetHeaders) GetEndHeight() int64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

// *
// p2p 区块头传输协议
type P2PHeaders struct {
	Headers []*Header `protobuf:"bytes,1,rep,name=headers" json:"headers,omitempty"`
}

func (m *P2PHeaders) Reset()                    { *m = P2PHeaders{} }
func (m *P2PHeaders) String() string            { return proto.CompactTextString(m) }
func (*P2PHeaders) ProtoMessage()               {}
func (*P2PHeaders) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

func (m *P2PHeaders) GetHeaders() []*Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

// *
// inv 请求协议
type InvData struct {
	// Types that are valid to be assigned to Value:
	//	*InvData_Tx
	//	*InvData_Block
	Value isInvData_Value `protobuf_oneof:"value"`
	Ty    int32           `protobuf:"varint,3,opt,name=ty" json:"ty,omitempty"`
}

func (m *InvData) Reset()                    { *m = InvData{} }
func (m *InvData) String() string            { return proto.CompactTextString(m) }
func (*InvData) ProtoMessage()               {}
func (*InvData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21} }

type isInvData_Value interface {
	isInvData_Value()
}

type InvData_Tx struct {
	Tx *Transaction `protobuf:"bytes,1,opt,name=tx,oneof"`
}
type InvData_Block struct {
	Block *Block `protobuf:"bytes,2,opt,name=block,oneof"`
}

func (*InvData_Tx) isInvData_Value()    {}
func (*InvData_Block) isInvData_Value() {}

func (m *InvData) GetValue() isInvData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *InvData) GetTx() *Transaction {
	if x, ok := m.GetValue().(*InvData_Tx); ok {
		return x.Tx
	}
	return nil
}

func (m *InvData) GetBlock() *Block {
	if x, ok := m.GetValue().(*InvData_Block); ok {
		return x.Block
	}
	return nil
}

func (m *InvData) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InvData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InvData_OneofMarshaler, _InvData_OneofUnmarshaler, _InvData_OneofSizer, []interface{}{
		(*InvData_Tx)(nil),
		(*InvData_Block)(nil),
	}
}

func _InvData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InvData)
	// value
	switch x := m.Value.(type) {
	case *InvData_Tx:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tx); err != nil {
			return err
		}
	case *InvData_Block:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InvData.Value has unexpected type %T", x)
	}
	return nil
}

func _InvData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InvData)
	switch tag {
	case 1: // value.tx
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction)
		err := b.DecodeMessage(msg)
		m.Value = &InvData_Tx{msg}
		return true, err
	case 2: // value.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Block)
		err := b.DecodeMessage(msg)
		m.Value = &InvData_Block{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InvData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InvData)
	// value
	switch x := m.Value.(type) {
	case *InvData_Tx:
		s := proto.Size(x.Tx)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InvData_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// *
// inv 返回数据
type InvDatas struct {
	Items []*InvData `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *InvDatas) Reset()                    { *m = InvDatas{} }
func (m *InvDatas) String() string            { return proto.CompactTextString(m) }
func (*InvDatas) ProtoMessage()               {}
func (*InvDatas) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{22} }

func (m *InvDatas) GetItems() []*InvData {
	if m != nil {
		return m.Items
	}
	return nil
}

// *
// peer 信息
type Peer struct {
	Addr        string  `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Port        int32   `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Name        string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Self        bool    `protobuf:"varint,4,opt,name=self" json:"self,omitempty"`
	MempoolSize int32   `protobuf:"varint,5,opt,name=mempoolSize" json:"mempoolSize,omitempty"`
	Header      *Header `protobuf:"bytes,6,opt,name=header" json:"header,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{23} }

func (m *Peer) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Peer) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Peer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Peer) GetSelf() bool {
	if m != nil {
		return m.Self
	}
	return false
}

func (m *Peer) GetMempoolSize() int32 {
	if m != nil {
		return m.MempoolSize
	}
	return 0
}

func (m *Peer) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

// *
// peer 列表
type PeerList struct {
	Peers []*Peer `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *PeerList) Reset()                    { *m = PeerList{} }
func (m *PeerList) String() string            { return proto.CompactTextString(m) }
func (*PeerList) ProtoMessage()               {}
func (*PeerList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{24} }

func (m *PeerList) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

// *
// 当前节点的网络信息
type NodeNetInfo struct {
	Externaladdr string `protobuf:"bytes,1,opt,name=externaladdr" json:"externaladdr,omitempty"`
	Localaddr    string `protobuf:"bytes,2,opt,name=localaddr" json:"localaddr,omitempty"`
	Service      bool   `protobuf:"varint,3,opt,name=service" json:"service,omitempty"`
	Outbounds    int32  `protobuf:"varint,4,opt,name=outbounds" json:"outbounds,omitempty"`
	Inbounds     int32  `protobuf:"varint,5,opt,name=inbounds" json:"inbounds,omitempty"`
}

func (m *NodeNetInfo) Reset()                    { *m = NodeNetInfo{} }
func (m *NodeNetInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeNetInfo) ProtoMessage()               {}
func (*NodeNetInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{25} }

func (m *NodeNetInfo) GetExternaladdr() string {
	if m != nil {
		return m.Externaladdr
	}
	return ""
}

func (m *NodeNetInfo) GetLocaladdr() string {
	if m != nil {
		return m.Localaddr
	}
	return ""
}

func (m *NodeNetInfo) GetService() bool {
	if m != nil {
		return m.Service
	}
	return false
}

func (m *NodeNetInfo) GetOutbounds() int32 {
	if m != nil {
		return m.Outbounds
	}
	return 0
}

func (m *NodeNetInfo) GetInbounds() int32 {
	if m != nil {
		return m.Inbounds
	}
	return 0
}

type PeersReply struct {
	Peers []*PeersInfo `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *PeersReply) Reset()                    { *m = PeersReply{} }
func (m *PeersReply) String() string            { return proto.CompactTextString(m) }
func (*PeersReply) ProtoMessage()               {}
func (*PeersReply) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{26} }

func (m *PeersReply) GetPeers() []*PeersInfo {
	if m != nil {
		return m.Peers
	}
	return nil
}

type PeersInfo struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ip          string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Port        int32  `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	Softversion string `protobuf:"bytes,4,opt,name=softversion" json:"softversion,omitempty"`
	P2Pversion  int32  `protobuf:"varint,5,opt,name=p2pversion" json:"p2pversion,omitempty"`
}

func (m *PeersInfo) Reset()                    { *m = PeersInfo{} }
func (m *PeersInfo) String() string            { return proto.CompactTextString(m) }
func (*PeersInfo) ProtoMessage()               {}
func (*PeersInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{27} }

func (m *PeersInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PeersInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PeersInfo) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *PeersInfo) GetSoftversion() string {
	if m != nil {
		return m.Softversion
	}
	return ""
}

func (m *PeersInfo) GetP2Pversion() int32 {
	if m != nil {
		return m.P2Pversion
	}
	return 0
}

func init() {
	proto.RegisterType((*P2PGetPeerInfo)(nil), "types.P2PGetPeerInfo")
	proto.RegisterType((*P2PPeerInfo)(nil), "types.P2PPeerInfo")
	proto.RegisterType((*P2PVersion)(nil), "types.P2PVersion")
	proto.RegisterType((*P2PVerAck)(nil), "types.P2PVerAck")
	proto.RegisterType((*P2PPing)(nil), "types.P2PPing")
	proto.RegisterType((*P2PPong)(nil), "types.P2PPong")
	proto.RegisterType((*P2PGetAddr)(nil), "types.P2PGetAddr")
	proto.RegisterType((*P2PAddr)(nil), "types.P2PAddr")
	proto.RegisterType((*P2PAddrList)(nil), "types.P2PAddrList")
	proto.RegisterType((*P2PExternalInfo)(nil), "types.P2PExternalInfo")
	proto.RegisterType((*P2PGetBlocks)(nil), "types.P2PGetBlocks")
	proto.RegisterType((*P2PGetMempool)(nil), "types.P2PGetMempool")
	proto.RegisterType((*P2PInv)(nil), "types.P2PInv")
	proto.RegisterType((*Inventory)(nil), "types.Inventory")
	proto.RegisterType((*P2PGetData)(nil), "types.P2PGetData")
	proto.RegisterType((*P2PTx)(nil), "types.P2PTx")
	proto.RegisterType((*P2PBlock)(nil), "types.P2PBlock")
	proto.RegisterType((*Versions)(nil), "types.Versions")
	proto.RegisterType((*BroadCastData)(nil), "types.BroadCastData")
	proto.RegisterType((*P2PGetHeaders)(nil), "types.P2PGetHeaders")
	proto.RegisterType((*P2PHeaders)(nil), "types.P2PHeaders")
	proto.RegisterType((*InvData)(nil), "types.InvData")
	proto.RegisterType((*InvDatas)(nil), "types.InvDatas")
	proto.RegisterType((*Peer)(nil), "types.Peer")
	proto.RegisterType((*PeerList)(nil), "types.PeerList")
	proto.RegisterType((*NodeNetInfo)(nil), "types.NodeNetInfo")
	proto.RegisterType((*PeersReply)(nil), "types.PeersReply")
	proto.RegisterType((*PeersInfo)(nil), "types.PeersInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for P2Pgservice service

type P2PgserviceClient interface {
	// 广播交易
	BroadCastTx(ctx context.Context, in *P2PTx, opts ...grpc.CallOption) (*Reply, error)
	// 广播区块
	BroadCastBlock(ctx context.Context, in *P2PBlock, opts ...grpc.CallOption) (*Reply, error)
	// PING
	Ping(ctx context.Context, in *P2PPing, opts ...grpc.CallOption) (*P2PPong, error)
	// 获取地址
	GetAddr(ctx context.Context, in *P2PGetAddr, opts ...grpc.CallOption) (*P2PAddr, error)
	GetAddrList(ctx context.Context, in *P2PGetAddr, opts ...grpc.CallOption) (*P2PAddrList, error)
	// 版本
	Version(ctx context.Context, in *P2PVersion, opts ...grpc.CallOption) (*P2PVerAck, error)
	// 获取p2p协议的版本号
	Version2(ctx context.Context, in *P2PVersion, opts ...grpc.CallOption) (*P2PVersion, error)
	// 获取软件的版本号
	SoftVersion(ctx context.Context, in *P2PPing, opts ...grpc.CallOption) (*Reply, error)
	// 获取区块，最高200
	GetBlocks(ctx context.Context, in *P2PGetBlocks, opts ...grpc.CallOption) (*P2PInv, error)
	// 获取mempool
	GetMemPool(ctx context.Context, in *P2PGetMempool, opts ...grpc.CallOption) (*P2PInv, error)
	// 获取数据
	GetData(ctx context.Context, in *P2PGetData, opts ...grpc.CallOption) (P2Pgservice_GetDataClient, error)
	// 获取头部
	GetHeaders(ctx context.Context, in *P2PGetHeaders, opts ...grpc.CallOption) (*P2PHeaders, error)
	// 获取 peerinfo
	GetPeerInfo(ctx context.Context, in *P2PGetPeerInfo, opts ...grpc.CallOption) (*P2PPeerInfo, error)
	// grpc server 读客户端发送来的数据
	ServerStreamRead(ctx context.Context, opts ...grpc.CallOption) (P2Pgservice_ServerStreamReadClient, error)
	// grpc server 发送数据给客户端
	ServerStreamSend(ctx context.Context, in *P2PPing, opts ...grpc.CallOption) (P2Pgservice_ServerStreamSendClient, error)
	// grpc 收集inpeers
	CollectInPeers(ctx context.Context, in *P2PPing, opts ...grpc.CallOption) (*PeerList, error)
	CollectInPeers2(ctx context.Context, in *P2PPing, opts ...grpc.CallOption) (*PeersReply, error)
}

type p2PgserviceClient struct {
	cc *grpc.ClientConn
}

func NewP2PgserviceClient(cc *grpc.ClientConn) P2PgserviceClient {
	return &p2PgserviceClient{cc}
}

func (c *p2PgserviceClient) BroadCastTx(ctx context.Context, in *P2PTx, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.p2pgservice/BroadCastTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) BroadCastBlock(ctx context.Context, in *P2PBlock, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.p2pgservice/BroadCastBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) Ping(ctx context.Context, in *P2PPing, opts ...grpc.CallOption) (*P2PPong, error) {
	out := new(P2PPong)
	err := grpc.Invoke(ctx, "/types.p2pgservice/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) GetAddr(ctx context.Context, in *P2PGetAddr, opts ...grpc.CallOption) (*P2PAddr, error) {
	out := new(P2PAddr)
	err := grpc.Invoke(ctx, "/types.p2pgservice/GetAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) GetAddrList(ctx context.Context, in *P2PGetAddr, opts ...grpc.CallOption) (*P2PAddrList, error) {
	out := new(P2PAddrList)
	err := grpc.Invoke(ctx, "/types.p2pgservice/GetAddrList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) Version(ctx context.Context, in *P2PVersion, opts ...grpc.CallOption) (*P2PVerAck, error) {
	out := new(P2PVerAck)
	err := grpc.Invoke(ctx, "/types.p2pgservice/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) Version2(ctx context.Context, in *P2PVersion, opts ...grpc.CallOption) (*P2PVersion, error) {
	out := new(P2PVersion)
	err := grpc.Invoke(ctx, "/types.p2pgservice/Version2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) SoftVersion(ctx context.Context, in *P2PPing, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.p2pgservice/SoftVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) GetBlocks(ctx context.Context, in *P2PGetBlocks, opts ...grpc.CallOption) (*P2PInv, error) {
	out := new(P2PInv)
	err := grpc.Invoke(ctx, "/types.p2pgservice/GetBlocks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) GetMemPool(ctx context.Context, in *P2PGetMempool, opts ...grpc.CallOption) (*P2PInv, error) {
	out := new(P2PInv)
	err := grpc.Invoke(ctx, "/types.p2pgservice/GetMemPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) GetData(ctx context.Context, in *P2PGetData, opts ...grpc.CallOption) (P2Pgservice_GetDataClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_P2Pgservice_serviceDesc.Streams[0], c.cc, "/types.p2pgservice/GetData", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PgserviceGetDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type P2Pgservice_GetDataClient interface {
	Recv() (*InvDatas, error)
	grpc.ClientStream
}

type p2PgserviceGetDataClient struct {
	grpc.ClientStream
}

func (x *p2PgserviceGetDataClient) Recv() (*InvDatas, error) {
	m := new(InvDatas)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *p2PgserviceClient) GetHeaders(ctx context.Context, in *P2PGetHeaders, opts ...grpc.CallOption) (*P2PHeaders, error) {
	out := new(P2PHeaders)
	err := grpc.Invoke(ctx, "/types.p2pgservice/GetHeaders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) GetPeerInfo(ctx context.Context, in *P2PGetPeerInfo, opts ...grpc.CallOption) (*P2PPeerInfo, error) {
	out := new(P2PPeerInfo)
	err := grpc.Invoke(ctx, "/types.p2pgservice/GetPeerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) ServerStreamRead(ctx context.Context, opts ...grpc.CallOption) (P2Pgservice_ServerStreamReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_P2Pgservice_serviceDesc.Streams[1], c.cc, "/types.p2pgservice/ServerStreamRead", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PgserviceServerStreamReadClient{stream}
	return x, nil
}

type P2Pgservice_ServerStreamReadClient interface {
	Send(*BroadCastData) error
	CloseAndRecv() (*ReqNil, error)
	grpc.ClientStream
}

type p2PgserviceServerStreamReadClient struct {
	grpc.ClientStream
}

func (x *p2PgserviceServerStreamReadClient) Send(m *BroadCastData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *p2PgserviceServerStreamReadClient) CloseAndRecv() (*ReqNil, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReqNil)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *p2PgserviceClient) ServerStreamSend(ctx context.Context, in *P2PPing, opts ...grpc.CallOption) (P2Pgservice_ServerStreamSendClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_P2Pgservice_serviceDesc.Streams[2], c.cc, "/types.p2pgservice/ServerStreamSend", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PgserviceServerStreamSendClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type P2Pgservice_ServerStreamSendClient interface {
	Recv() (*BroadCastData, error)
	grpc.ClientStream
}

type p2PgserviceServerStreamSendClient struct {
	grpc.ClientStream
}

func (x *p2PgserviceServerStreamSendClient) Recv() (*BroadCastData, error) {
	m := new(BroadCastData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *p2PgserviceClient) CollectInPeers(ctx context.Context, in *P2PPing, opts ...grpc.CallOption) (*PeerList, error) {
	out := new(PeerList)
	err := grpc.Invoke(ctx, "/types.p2pgservice/CollectInPeers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) CollectInPeers2(ctx context.Context, in *P2PPing, opts ...grpc.CallOption) (*PeersReply, error) {
	out := new(PeersReply)
	err := grpc.Invoke(ctx, "/types.p2pgservice/CollectInPeers2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for P2Pgservice service

type P2PgserviceServer interface {
	// 广播交易
	BroadCastTx(context.Context, *P2PTx) (*Reply, error)
	// 广播区块
	BroadCastBlock(context.Context, *P2PBlock) (*Reply, error)
	// PING
	Ping(context.Context, *P2PPing) (*P2PPong, error)
	// 获取地址
	GetAddr(context.Context, *P2PGetAddr) (*P2PAddr, error)
	GetAddrList(context.Context, *P2PGetAddr) (*P2PAddrList, error)
	// 版本
	Version(context.Context, *P2PVersion) (*P2PVerAck, error)
	// 获取p2p协议的版本号
	Version2(context.Context, *P2PVersion) (*P2PVersion, error)
	// 获取软件的版本号
	SoftVersion(context.Context, *P2PPing) (*Reply, error)
	// 获取区块，最高200
	GetBlocks(context.Context, *P2PGetBlocks) (*P2PInv, error)
	// 获取mempool
	GetMemPool(context.Context, *P2PGetMempool) (*P2PInv, error)
	// 获取数据
	GetData(*P2PGetData, P2Pgservice_GetDataServer) error
	// 获取头部
	GetHeaders(context.Context, *P2PGetHeaders) (*P2PHeaders, error)
	// 获取 peerinfo
	GetPeerInfo(context.Context, *P2PGetPeerInfo) (*P2PPeerInfo, error)
	// grpc server 读客户端发送来的数据
	ServerStreamRead(P2Pgservice_ServerStreamReadServer) error
	// grpc server 发送数据给客户端
	ServerStreamSend(*P2PPing, P2Pgservice_ServerStreamSendServer) error
	// grpc 收集inpeers
	CollectInPeers(context.Context, *P2PPing) (*PeerList, error)
	CollectInPeers2(context.Context, *P2PPing) (*PeersReply, error)
}

func RegisterP2PgserviceServer(s *grpc.Server, srv P2PgserviceServer) {
	s.RegisterService(&_P2Pgservice_serviceDesc, srv)
}

func _P2Pgservice_BroadCastTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).BroadCastTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/BroadCastTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).BroadCastTx(ctx, req.(*P2PTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_BroadCastBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).BroadCastBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/BroadCastBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).BroadCastBlock(ctx, req.(*P2PBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PPing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).Ping(ctx, req.(*P2PPing))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_GetAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).GetAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/GetAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).GetAddr(ctx, req.(*P2PGetAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_GetAddrList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).GetAddrList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/GetAddrList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).GetAddrList(ctx, req.(*P2PGetAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).Version(ctx, req.(*P2PVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_Version2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).Version2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/Version2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).Version2(ctx, req.(*P2PVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_SoftVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PPing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).SoftVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/SoftVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).SoftVersion(ctx, req.(*P2PPing))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetBlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).GetBlocks(ctx, req.(*P2PGetBlocks))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_GetMemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetMempool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).GetMemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/GetMemPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).GetMemPool(ctx, req.(*P2PGetMempool))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(P2PGetData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(P2PgserviceServer).GetData(m, &p2PgserviceGetDataServer{stream})
}

type P2Pgservice_GetDataServer interface {
	Send(*InvDatas) error
	grpc.ServerStream
}

type p2PgserviceGetDataServer struct {
	grpc.ServerStream
}

func (x *p2PgserviceGetDataServer) Send(m *InvDatas) error {
	return x.ServerStream.SendMsg(m)
}

func _P2Pgservice_GetHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetHeaders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).GetHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/GetHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).GetHeaders(ctx, req.(*P2PGetHeaders))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_GetPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetPeerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).GetPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/GetPeerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).GetPeerInfo(ctx, req.(*P2PGetPeerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_ServerStreamRead_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(P2PgserviceServer).ServerStreamRead(&p2PgserviceServerStreamReadServer{stream})
}

type P2Pgservice_ServerStreamReadServer interface {
	SendAndClose(*ReqNil) error
	Recv() (*BroadCastData, error)
	grpc.ServerStream
}

type p2PgserviceServerStreamReadServer struct {
	grpc.ServerStream
}

func (x *p2PgserviceServerStreamReadServer) SendAndClose(m *ReqNil) error {
	return x.ServerStream.SendMsg(m)
}

func (x *p2PgserviceServerStreamReadServer) Recv() (*BroadCastData, error) {
	m := new(BroadCastData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _P2Pgservice_ServerStreamSend_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(P2PPing)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(P2PgserviceServer).ServerStreamSend(m, &p2PgserviceServerStreamSendServer{stream})
}

type P2Pgservice_ServerStreamSendServer interface {
	Send(*BroadCastData) error
	grpc.ServerStream
}

type p2PgserviceServerStreamSendServer struct {
	grpc.ServerStream
}

func (x *p2PgserviceServerStreamSendServer) Send(m *BroadCastData) error {
	return x.ServerStream.SendMsg(m)
}

func _P2Pgservice_CollectInPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PPing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).CollectInPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/CollectInPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).CollectInPeers(ctx, req.(*P2PPing))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_CollectInPeers2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PPing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).CollectInPeers2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/CollectInPeers2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).CollectInPeers2(ctx, req.(*P2PPing))
	}
	return interceptor(ctx, in, info, handler)
}

var _P2Pgservice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.p2pgservice",
	HandlerType: (*P2PgserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadCastTx",
			Handler:    _P2Pgservice_BroadCastTx_Handler,
		},
		{
			MethodName: "BroadCastBlock",
			Handler:    _P2Pgservice_BroadCastBlock_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _P2Pgservice_Ping_Handler,
		},
		{
			MethodName: "GetAddr",
			Handler:    _P2Pgservice_GetAddr_Handler,
		},
		{
			MethodName: "GetAddrList",
			Handler:    _P2Pgservice_GetAddrList_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _P2Pgservice_Version_Handler,
		},
		{
			MethodName: "Version2",
			Handler:    _P2Pgservice_Version2_Handler,
		},
		{
			MethodName: "SoftVersion",
			Handler:    _P2Pgservice_SoftVersion_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _P2Pgservice_GetBlocks_Handler,
		},
		{
			MethodName: "GetMemPool",
			Handler:    _P2Pgservice_GetMemPool_Handler,
		},
		{
			MethodName: "GetHeaders",
			Handler:    _P2Pgservice_GetHeaders_Handler,
		},
		{
			MethodName: "GetPeerInfo",
			Handler:    _P2Pgservice_GetPeerInfo_Handler,
		},
		{
			MethodName: "CollectInPeers",
			Handler:    _P2Pgservice_CollectInPeers_Handler,
		},
		{
			MethodName: "CollectInPeers2",
			Handler:    _P2Pgservice_CollectInPeers2_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetData",
			Handler:       _P2Pgservice_GetData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ServerStreamRead",
			Handler:       _P2Pgservice_ServerStreamRead_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamSend",
			Handler:       _P2Pgservice_ServerStreamSend_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "p2p.proto",
}

func init() { proto.RegisterFile("p2p.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcd, 0x72, 0x1b, 0xc5,
	0x13, 0xdf, 0xd5, 0x87, 0x25, 0xb5, 0x6c, 0xd9, 0x99, 0x7f, 0xfe, 0x94, 0x4a, 0x95, 0x0a, 0x61,
	0xca, 0x10, 0x43, 0x2a, 0x22, 0x59, 0x41, 0xa8, 0x22, 0x5c, 0xec, 0x00, 0xb1, 0xab, 0x42, 0x6a,
	0x6b, 0x65, 0x38, 0x70, 0x5b, 0x4b, 0x63, 0x69, 0x2a, 0xab, 0x99, 0x65, 0x77, 0xac, 0x92, 0xb9,
	0x73, 0xe3, 0xc4, 0x0b, 0x70, 0xe0, 0x15, 0x78, 0x2c, 0x1e, 0x82, 0x9a, 0xde, 0x99, 0xfd, 0x90,
	0x64, 0x1d, 0xa0, 0x38, 0x79, 0xfb, 0xd7, 0xdd, 0xd3, 0xdf, 0xdd, 0x32, 0x74, 0x62, 0x2f, 0x1e,
	0xc6, 0x89, 0x54, 0x92, 0x34, 0xd5, 0x6d, 0xcc, 0xd2, 0xc1, 0x3d, 0x95, 0x84, 0x22, 0x0d, 0x27,
	0x8a, 0x4b, 0x91, 0x71, 0x06, 0xfb, 0x13, 0xb9, 0x58, 0xe4, 0xd4, 0xd1, 0x55, 0x24, 0x27, 0xef,
	0x26, 0xf3, 0x90, 0x1b, 0x84, 0x7e, 0x02, 0x3d, 0xdf, 0xf3, 0x5f, 0x33, 0xe5, 0x33, 0x96, 0x5c,
	0x88, 0x6b, 0x49, 0xfa, 0xd0, 0x5a, 0xb2, 0x24, 0xe5, 0x52, 0xf4, 0xdd, 0x47, 0xee, 0x49, 0x33,
	0xb0, 0x24, 0xfd, 0xcd, 0x85, 0xae, 0xef, 0xf9, 0xb9, 0x24, 0x81, 0x46, 0x38, 0x9d, 0x26, 0x28,
	0xd6, 0x09, 0xf0, 0x5b, 0x63, 0xb1, 0x4c, 0x54, 0xbf, 0x86, 0xaa, 0xf8, 0xad, 0x31, 0x11, 0x2e,
	0x58, 0xbf, 0x9e, 0xc9, 0xe9, 0x6f, 0xf2, 0x08, 0xba, 0x0b, 0xb6, 0x88, 0xa5, 0x8c, 0xc6, 0xfc,
	0x67, 0xd6, 0x6f, 0xa0, 0x78, 0x19, 0x22, 0x1f, 0xc2, 0xde, 0x9c, 0x85, 0x53, 0x96, 0xf4, 0x9b,
	0x8f, 0xdc, 0x93, 0xae, 0x77, 0x30, 0xc4, 0x20, 0x87, 0xe7, 0x08, 0x06, 0x86, 0x49, 0xff, 0x72,
	0x01, 0x7c, 0xcf, 0xff, 0x21, 0xf3, 0xf1, 0x6e, 0xef, 0x35, 0x27, 0x65, 0xc9, 0x92, 0x4f, 0x18,
	0x3a, 0x57, 0x0f, 0x2c, 0x49, 0x1e, 0x40, 0x47, 0xf1, 0x05, 0x4b, 0x55, 0xb8, 0x88, 0xd1, 0xc9,
	0x7a, 0x50, 0x00, 0x64, 0x00, 0x6d, 0x1d, 0x59, 0xc0, 0x26, 0x4b, 0x74, 0xb3, 0x13, 0xe4, 0xb4,
	0xe5, 0x7d, 0x9b, 0xc8, 0x05, 0x7a, 0x69, 0x78, 0x9a, 0x26, 0xf7, 0xa1, 0x29, 0xa4, 0x98, 0xb0,
	0xfe, 0x1e, 0xbe, 0x98, 0x11, 0xda, 0xd6, 0x4d, 0xca, 0x92, 0xd3, 0x19, 0x13, 0xaa, 0xdf, 0x42,
	0x95, 0x02, 0xd0, 0x59, 0x49, 0x55, 0x98, 0xa8, 0x73, 0xc6, 0x67, 0x73, 0xd5, 0x6f, 0xa3, 0x66,
	0x19, 0xa2, 0xdf, 0x43, 0x27, 0x8b, 0xf6, 0x74, 0xf2, 0xee, 0x1f, 0x05, 0x9b, 0xbb, 0x55, 0x2f,
	0xb9, 0x45, 0x17, 0xd0, 0xd2, 0x95, 0xe5, 0x62, 0x56, 0x08, 0xb8, 0x65, 0xbf, 0x6d, 0xad, 0x6b,
	0x5b, 0x6a, 0x5d, 0x2f, 0xd5, 0xfa, 0x18, 0x1a, 0x29, 0x9f, 0x09, 0xcc, 0x54, 0xd7, 0x3b, 0x32,
	0x35, 0x1b, 0xf3, 0x99, 0x08, 0xd5, 0x4d, 0xc2, 0x02, 0xe4, 0xd2, 0xf7, 0x33, 0x73, 0xf2, 0x2e,
	0x73, 0x94, 0x62, 0x51, 0x5f, 0x33, 0x75, 0xaa, 0x0d, 0x6d, 0x97, 0x79, 0x89, 0x8f, 0xdc, 0x2d,
	0x60, 0xab, 0x13, 0xf1, 0x54, 0xf7, 0x63, 0xdd, 0x56, 0x47, 0xd3, 0x74, 0x8c, 0xad, 0xac, 0x95,
	0xdf, 0xf0, 0x54, 0xdd, 0xf1, 0xc0, 0x10, 0xda, 0x31, 0x63, 0x09, 0x17, 0xd7, 0x12, 0x1f, 0xe8,
	0x7a, 0xc4, 0x04, 0x54, 0x1a, 0x83, 0x20, 0x97, 0xa1, 0xaf, 0xe0, 0xd0, 0xf7, 0xfc, 0x6f, 0x56,
	0x8a, 0x25, 0x22, 0x8c, 0xee, 0x9c, 0x91, 0x07, 0xd0, 0xe1, 0xa9, 0xbc, 0x51, 0x29, 0x9f, 0x66,
	0xe5, 0x69, 0x07, 0x05, 0x40, 0xe7, 0xb0, 0x9f, 0x85, 0x7e, 0xa6, 0x67, 0x35, 0xdd, 0x51, 0xe4,
	0xb5, 0x6e, 0xa9, 0x6d, 0x74, 0x8b, 0xb6, 0xc4, 0xc4, 0xd4, 0xf0, 0x4d, 0x67, 0xe7, 0x00, 0xfd,
	0x18, 0x0e, 0x32, 0x4b, 0xdf, 0x65, 0x63, 0xb7, 0x63, 0xf4, 0x87, 0xb0, 0xe7, 0x7b, 0xfe, 0x85,
	0x58, 0xea, 0x02, 0x73, 0xb1, 0x4c, 0xfb, 0x2e, 0xe6, 0xc3, 0x16, 0xf8, 0x42, 0x2c, 0x99, 0x50,
	0x32, 0xb9, 0x0d, 0x90, 0x4b, 0x5f, 0x43, 0x27, 0x87, 0x48, 0x0f, 0x6a, 0xea, 0xd6, 0xbc, 0x58,
	0x53, 0xb7, 0x3a, 0x27, 0xf3, 0x30, 0x9d, 0xa3, 0xc3, 0xfb, 0x01, 0x7e, 0x93, 0xf7, 0xf4, 0xb4,
	0x97, 0xdc, 0x34, 0x14, 0x7d, 0x63, 0x1b, 0xe1, 0xeb, 0x50, 0x85, 0x3b, 0x72, 0x61, 0xdd, 0xaa,
	0xed, 0x74, 0xeb, 0x09, 0x34, 0x7d, 0xcf, 0xbf, 0x5c, 0x11, 0x0a, 0x35, 0xb5, 0xc2, 0x37, 0x8a,
	0x9a, 0x5e, 0x16, 0xcb, 0x33, 0xa8, 0xa9, 0x15, 0x1d, 0x42, 0xdb, 0xf7, 0x7c, 0xac, 0x02, 0xa1,
	0xd0, 0xc4, 0xd5, 0x69, 0x54, 0xf6, 0x8d, 0x0a, 0x32, 0x83, 0x8c, 0x45, 0xe7, 0xd0, 0x36, 0x5b,
	0x28, 0x25, 0x0f, 0x01, 0x62, 0x2f, 0xae, 0xfa, 0x5a, 0x42, 0xb0, 0x74, 0xf2, 0x5a, 0x59, 0x81,
	0x6c, 0xaa, 0xca, 0x90, 0x6e, 0x5e, 0xdd, 0x57, 0xa5, 0xc5, 0x99, 0xd3, 0xf4, 0x4f, 0x17, 0x0e,
	0xce, 0x12, 0x19, 0x4e, 0x5f, 0x85, 0x69, 0x96, 0x98, 0x87, 0xa5, 0x78, 0xf6, 0x8b, 0x1e, 0xbd,
	0x5c, 0x9d, 0x3b, 0x3a, 0x16, 0xf2, 0xd8, 0xfa, 0x5f, 0x43, 0x91, 0xc3, 0x42, 0x04, 0x43, 0x38,
	0x77, 0x4c, 0x10, 0x3a, 0x8f, 0x31, 0x17, 0x33, 0x34, 0xd9, 0xf5, 0x7a, 0xa5, 0x76, 0xe7, 0x62,
	0x76, 0xee, 0x04, 0xc8, 0x25, 0x4f, 0x8a, 0x3a, 0x34, 0x2a, 0x0f, 0xda, 0x04, 0x9c, 0x3b, 0x79,
	0x69, 0xce, 0x5a, 0xd0, 0x5c, 0x86, 0xd1, 0x0d, 0xa3, 0xdc, 0xf6, 0x5b, 0xb6, 0xc2, 0xff, 0xcb,
	0xd6, 0xfe, 0x1c, 0xdb, 0xc6, 0xda, 0x79, 0x0c, 0xad, 0xec, 0x5a, 0xd8, 0xb6, 0x5d, 0xbb, 0x25,
	0x96, 0x4b, 0x05, 0xb4, 0x2e, 0xc4, 0x12, 0x33, 0x7a, 0xbc, 0xbb, 0x43, 0x4c, 0x5e, 0x8f, 0xab,
	0x79, 0xad, 0xf4, 0x45, 0x91, 0xd4, 0x6c, 0x00, 0xea, 0x76, 0x00, 0x8a, 0x8c, 0x3c, 0x83, 0xb6,
	0xb1, 0x97, 0xea, 0xa7, 0xb8, 0x62, 0x0b, 0xeb, 0x62, 0xaf, 0x68, 0x61, 0xcd, 0x0f, 0x32, 0x26,
	0xfd, 0xdd, 0x85, 0x86, 0xde, 0x3c, 0xff, 0xea, 0xf8, 0x12, 0x68, 0xa4, 0x2c, 0xba, 0xc6, 0xda,
	0xb5, 0x03, 0xfc, 0x5e, 0x3f, 0xc8, 0xcd, 0x5d, 0x07, 0x79, 0x6f, 0xd7, 0x41, 0x7e, 0x0a, 0x6d,
	0xed, 0x20, 0xae, 0xd5, 0x0f, 0xa0, 0xa9, 0x9b, 0xd6, 0xc6, 0xd4, 0xb5, 0xed, 0xc4, 0x58, 0x12,
	0x64, 0x1c, 0xfa, 0x87, 0x0b, 0xdd, 0xb7, 0x72, 0xca, 0xde, 0x32, 0x85, 0x0b, 0x93, 0xc2, 0x3e,
	0x33, 0x0b, 0xb4, 0x14, 0x5f, 0x05, 0xd3, 0xb5, 0x8f, 0xe4, 0xc4, 0x08, 0x64, 0xb3, 0x53, 0x00,
	0xe5, 0xdb, 0x57, 0xc7, 0x00, 0xcb, 0x87, 0x5e, 0xde, 0xa8, 0x2b, 0x79, 0x23, 0xa6, 0xa9, 0xf9,
	0xc9, 0x51, 0x00, 0x7a, 0xe2, 0xb8, 0x30, 0xcc, 0x2c, 0xfc, 0x9c, 0xa6, 0x9f, 0x01, 0x68, 0xa7,
	0xd3, 0x80, 0xc5, 0xd1, 0x2d, 0xf9, 0xa8, 0x1a, 0xd6, 0x51, 0x29, 0xac, 0x14, 0x4f, 0x82, 0x89,
	0xed, 0x17, 0x17, 0x3a, 0x39, 0x98, 0x57, 0xc2, 0x2d, 0x55, 0xa2, 0x07, 0x35, 0x1e, 0x9b, 0x10,
	0x6a, 0x3c, 0xde, 0x7a, 0x52, 0xd7, 0x76, 0x45, 0x63, 0x73, 0x57, 0x54, 0xb7, 0x4d, 0x73, 0x7d,
	0xdb, 0x78, 0xbf, 0xb6, 0xa0, 0x1b, 0x7b, 0xf1, 0xcc, 0xe6, 0xe1, 0x09, 0x74, 0xf3, 0xf5, 0x71,
	0xb9, 0x22, 0x95, 0x85, 0x31, 0xb0, 0x14, 0x86, 0x4a, 0x1d, 0xf2, 0x1c, 0x7a, 0xb9, 0x70, 0xb6,
	0x0c, 0xd7, 0xb7, 0xc7, 0x86, 0xca, 0x09, 0x34, 0xf0, 0xa7, 0xc4, 0xda, 0xfa, 0x18, 0x94, 0x69,
	0x29, 0x66, 0xd4, 0x21, 0x43, 0x68, 0xd9, 0x23, 0x7f, 0xaf, 0x60, 0x1a, 0xa8, 0x2c, 0xaf, 0x69,
	0xea, 0x90, 0x17, 0xd0, 0x35, 0x4c, 0xec, 0xaf, 0x2d, 0x3a, 0xa4, 0xaa, 0xa3, 0xc5, 0xa8, 0x43,
	0x9e, 0x41, 0xcb, 0xfe, 0x42, 0x2c, 0xe9, 0x18, 0x68, 0x70, 0x54, 0x81, 0x4e, 0x27, 0xef, 0xa8,
	0x43, 0xbc, 0x7c, 0x9b, 0x7b, 0xdb, 0x54, 0x36, 0x21, 0xea, 0x90, 0xa7, 0xd0, 0x1d, 0xcb, 0x6b,
	0x65, 0x2d, 0xad, 0x87, 0xbf, 0x99, 0xd9, 0x4e, 0x71, 0xe6, 0xff, 0x57, 0x09, 0x25, 0x03, 0x07,
	0x07, 0x05, 0x78, 0x21, 0x96, 0xd4, 0x21, 0x23, 0x80, 0xec, 0x5e, 0xfb, 0xfa, 0x5e, 0xdf, 0xaf,
	0xe8, 0x98, 0x2b, 0xbe, 0xa9, 0xf4, 0x1c, 0x93, 0x8c, 0x5b, 0xad, 0x9a, 0x30, 0x0d, 0x0d, 0x0e,
	0xab, 0x8b, 0x26, 0xa5, 0xce, 0x33, 0x97, 0x7c, 0x81, 0x76, 0xec, 0xfe, 0xac, 0xda, 0x31, 0x68,
	0x39, 0x05, 0x06, 0xa2, 0x0e, 0xf9, 0x12, 0x0b, 0x94, 0xff, 0x8b, 0xf0, 0xff, 0x8a, 0xa6, 0x85,
	0x07, 0x5b, 0x7e, 0x46, 0x51, 0x87, 0xbc, 0x84, 0xa3, 0x31, 0x4b, 0x96, 0x2c, 0x19, 0xab, 0x84,
	0x85, 0x8b, 0x80, 0x85, 0xd3, 0xdc, 0x74, 0xe5, 0xdc, 0xe5, 0x21, 0x06, 0xec, 0xa7, 0xb7, 0x3c,
	0xa2, 0xce, 0x89, 0x4b, 0xbe, 0xaa, 0x2a, 0x8f, 0x99, 0x98, 0x6e, 0x14, 0x60, 0xeb, 0x63, 0x18,
	0xef, 0x08, 0x7a, 0xaf, 0x64, 0x14, 0xb1, 0x89, 0xba, 0x10, 0x38, 0xb1, 0x1b, 0xba, 0x87, 0xa5,
	0x21, 0x37, 0x4d, 0xf5, 0x02, 0x0e, 0xab, 0x4a, 0xde, 0x86, 0xd6, 0xbd, 0xf2, 0x6a, 0x30, 0x75,
	0x3f, 0x3b, 0xfe, 0x91, 0xce, 0xb8, 0x8a, 0xc2, 0xab, 0xe1, 0x68, 0x34, 0x9c, 0x88, 0x4f, 0xf1,
	0xff, 0xb1, 0xd1, 0x28, 0xff, 0x8b, 0x2a, 0x57, 0x7b, 0xf8, 0x0f, 0xda, 0xe8, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x76, 0xd5, 0xf8, 0xe8, 0xe7, 0x0d, 0x00, 0x00,
}
