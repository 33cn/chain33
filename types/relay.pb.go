// Code generated by protoc-gen-go. DO NOT EDIT.
// source: relay.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RelayOrderStatus int32

const (
	RelayOrderStatus_init       RelayOrderStatus = 0
	RelayOrderStatus_pending    RelayOrderStatus = 1
	RelayOrderStatus_locking    RelayOrderStatus = 2
	RelayOrderStatus_confirming RelayOrderStatus = 3
	RelayOrderStatus_finished   RelayOrderStatus = 4
	RelayOrderStatus_canceled   RelayOrderStatus = 5
	RelayOrderStatus_timeout    RelayOrderStatus = 6
)

var RelayOrderStatus_name = map[int32]string{
	0: "init",
	1: "pending",
	2: "locking",
	3: "confirming",
	4: "finished",
	5: "canceled",
	6: "timeout",
}
var RelayOrderStatus_value = map[string]int32{
	"init":       0,
	"pending":    1,
	"locking":    2,
	"confirming": 3,
	"finished":   4,
	"canceled":   5,
	"timeout":    6,
}

func (x RelayOrderStatus) String() string {
	return proto.EnumName(RelayOrderStatus_name, int32(x))
}
func (RelayOrderStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

type RelayAction struct {
	// Types that are valid to be assigned to Value:
	//	*RelayAction_Create
	//	*RelayAction_Accept
	//	*RelayAction_Revoke
	//	*RelayAction_ConfirmTx
	//	*RelayAction_Verify
	//	*RelayAction_VerifyCli
	//	*RelayAction_BtcHeaders
	Value isRelayAction_Value `protobuf_oneof:"value"`
	Ty    int32               `protobuf:"varint,10,opt,name=ty" json:"ty,omitempty"`
}

func (m *RelayAction) Reset()                    { *m = RelayAction{} }
func (m *RelayAction) String() string            { return proto.CompactTextString(m) }
func (*RelayAction) ProtoMessage()               {}
func (*RelayAction) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

type isRelayAction_Value interface {
	isRelayAction_Value()
}

type RelayAction_Create struct {
	Create *RelayCreate `protobuf:"bytes,1,opt,name=create,oneof"`
}
type RelayAction_Accept struct {
	Accept *RelayAccept `protobuf:"bytes,2,opt,name=accept,oneof"`
}
type RelayAction_Revoke struct {
	Revoke *RelayRevoke `protobuf:"bytes,3,opt,name=revoke,oneof"`
}
type RelayAction_ConfirmTx struct {
	ConfirmTx *RelayConfirmTx `protobuf:"bytes,4,opt,name=confirmTx,oneof"`
}
type RelayAction_Verify struct {
	Verify *RelayVerify `protobuf:"bytes,5,opt,name=verify,oneof"`
}
type RelayAction_VerifyCli struct {
	VerifyCli *RelayVerifyCli `protobuf:"bytes,6,opt,name=verifyCli,oneof"`
}
type RelayAction_BtcHeaders struct {
	BtcHeaders *BtcHeaders `protobuf:"bytes,7,opt,name=btcHeaders,oneof"`
}

func (*RelayAction_Create) isRelayAction_Value()     {}
func (*RelayAction_Accept) isRelayAction_Value()     {}
func (*RelayAction_Revoke) isRelayAction_Value()     {}
func (*RelayAction_ConfirmTx) isRelayAction_Value()  {}
func (*RelayAction_Verify) isRelayAction_Value()     {}
func (*RelayAction_VerifyCli) isRelayAction_Value()  {}
func (*RelayAction_BtcHeaders) isRelayAction_Value() {}

func (m *RelayAction) GetValue() isRelayAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RelayAction) GetCreate() *RelayCreate {
	if x, ok := m.GetValue().(*RelayAction_Create); ok {
		return x.Create
	}
	return nil
}

func (m *RelayAction) GetAccept() *RelayAccept {
	if x, ok := m.GetValue().(*RelayAction_Accept); ok {
		return x.Accept
	}
	return nil
}

func (m *RelayAction) GetRevoke() *RelayRevoke {
	if x, ok := m.GetValue().(*RelayAction_Revoke); ok {
		return x.Revoke
	}
	return nil
}

func (m *RelayAction) GetConfirmTx() *RelayConfirmTx {
	if x, ok := m.GetValue().(*RelayAction_ConfirmTx); ok {
		return x.ConfirmTx
	}
	return nil
}

func (m *RelayAction) GetVerify() *RelayVerify {
	if x, ok := m.GetValue().(*RelayAction_Verify); ok {
		return x.Verify
	}
	return nil
}

func (m *RelayAction) GetVerifyCli() *RelayVerifyCli {
	if x, ok := m.GetValue().(*RelayAction_VerifyCli); ok {
		return x.VerifyCli
	}
	return nil
}

func (m *RelayAction) GetBtcHeaders() *BtcHeaders {
	if x, ok := m.GetValue().(*RelayAction_BtcHeaders); ok {
		return x.BtcHeaders
	}
	return nil
}

func (m *RelayAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RelayAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RelayAction_OneofMarshaler, _RelayAction_OneofUnmarshaler, _RelayAction_OneofSizer, []interface{}{
		(*RelayAction_Create)(nil),
		(*RelayAction_Accept)(nil),
		(*RelayAction_Revoke)(nil),
		(*RelayAction_ConfirmTx)(nil),
		(*RelayAction_Verify)(nil),
		(*RelayAction_VerifyCli)(nil),
		(*RelayAction_BtcHeaders)(nil),
	}
}

func _RelayAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RelayAction)
	// value
	switch x := m.Value.(type) {
	case *RelayAction_Create:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Create); err != nil {
			return err
		}
	case *RelayAction_Accept:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Accept); err != nil {
			return err
		}
	case *RelayAction_Revoke:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Revoke); err != nil {
			return err
		}
	case *RelayAction_ConfirmTx:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConfirmTx); err != nil {
			return err
		}
	case *RelayAction_Verify:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Verify); err != nil {
			return err
		}
	case *RelayAction_VerifyCli:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VerifyCli); err != nil {
			return err
		}
	case *RelayAction_BtcHeaders:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BtcHeaders); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RelayAction.Value has unexpected type %T", x)
	}
	return nil
}

func _RelayAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RelayAction)
	switch tag {
	case 1: // value.create
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelayCreate)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_Create{msg}
		return true, err
	case 2: // value.accept
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelayAccept)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_Accept{msg}
		return true, err
	case 3: // value.revoke
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelayRevoke)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_Revoke{msg}
		return true, err
	case 4: // value.confirmTx
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelayConfirmTx)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_ConfirmTx{msg}
		return true, err
	case 5: // value.verify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelayVerify)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_Verify{msg}
		return true, err
	case 6: // value.verifyCli
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelayVerifyCli)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_VerifyCli{msg}
		return true, err
	case 7: // value.btcHeaders
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BtcHeaders)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_BtcHeaders{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RelayAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RelayAction)
	// value
	switch x := m.Value.(type) {
	case *RelayAction_Create:
		s := proto.Size(x.Create)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RelayAction_Accept:
		s := proto.Size(x.Accept)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RelayAction_Revoke:
		s := proto.Size(x.Revoke)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RelayAction_ConfirmTx:
		s := proto.Size(x.ConfirmTx)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RelayAction_Verify:
		s := proto.Size(x.Verify)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RelayAction_VerifyCli:
		s := proto.Size(x.VerifyCli)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RelayAction_BtcHeaders:
		s := proto.Size(x.BtcHeaders)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RelayCreate struct {
	Operation uint32 `protobuf:"varint,1,opt,name=operation" json:"operation,omitempty"`
	Coin      string `protobuf:"bytes,2,opt,name=coin" json:"coin,omitempty"`
	Amount    uint64 `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	Addr      string `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
	BtyAmount uint64 `protobuf:"varint,5,opt,name=btyAmount" json:"btyAmount,omitempty"`
}

func (m *RelayCreate) Reset()                    { *m = RelayCreate{} }
func (m *RelayCreate) String() string            { return proto.CompactTextString(m) }
func (*RelayCreate) ProtoMessage()               {}
func (*RelayCreate) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *RelayCreate) GetOperation() uint32 {
	if m != nil {
		return m.Operation
	}
	return 0
}

func (m *RelayCreate) GetCoin() string {
	if m != nil {
		return m.Coin
	}
	return ""
}

func (m *RelayCreate) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *RelayCreate) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *RelayCreate) GetBtyAmount() uint64 {
	if m != nil {
		return m.BtyAmount
	}
	return 0
}

type RelayOrder struct {
	Id            string           `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status        RelayOrderStatus `protobuf:"varint,2,opt,name=status,enum=types.RelayOrderStatus" json:"status,omitempty"`
	PreStatus     RelayOrderStatus `protobuf:"varint,3,opt,name=preStatus,enum=types.RelayOrderStatus" json:"preStatus,omitempty"`
	Amount        uint64           `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
	CreaterAddr   string           `protobuf:"bytes,5,opt,name=createrAddr" json:"createrAddr,omitempty"`
	CoinOperation uint32           `protobuf:"varint,6,opt,name=coinOperation" json:"coinOperation,omitempty"`
	Coin          string           `protobuf:"bytes,7,opt,name=coin" json:"coin,omitempty"`
	CoinAmount    uint64           `protobuf:"varint,8,opt,name=coinAmount" json:"coinAmount,omitempty"`
	CoinAddr      string           `protobuf:"bytes,9,opt,name=coinAddr" json:"coinAddr,omitempty"`
	CoinTxHash    string           `protobuf:"bytes,10,opt,name=coinTxHash" json:"coinTxHash,omitempty"`
	CreateTime    int64            `protobuf:"varint,11,opt,name=createTime" json:"createTime,omitempty"`
	AcceptAddr    string           `protobuf:"bytes,12,opt,name=acceptAddr" json:"acceptAddr,omitempty"`
	AcceptTime    int64            `protobuf:"varint,13,opt,name=acceptTime" json:"acceptTime,omitempty"`
	ConfirmTime   int64            `protobuf:"varint,14,opt,name=confirmTime" json:"confirmTime,omitempty"`
	FinishTime    int64            `protobuf:"varint,15,opt,name=finishTime" json:"finishTime,omitempty"`
	FinishTxHash  string           `protobuf:"bytes,16,opt,name=finishTxHash" json:"finishTxHash,omitempty"`
	Height        int64            `protobuf:"varint,17,opt,name=height" json:"height,omitempty"`
}

func (m *RelayOrder) Reset()                    { *m = RelayOrder{} }
func (m *RelayOrder) String() string            { return proto.CompactTextString(m) }
func (*RelayOrder) ProtoMessage()               {}
func (*RelayOrder) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *RelayOrder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RelayOrder) GetStatus() RelayOrderStatus {
	if m != nil {
		return m.Status
	}
	return RelayOrderStatus_init
}

func (m *RelayOrder) GetPreStatus() RelayOrderStatus {
	if m != nil {
		return m.PreStatus
	}
	return RelayOrderStatus_init
}

func (m *RelayOrder) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *RelayOrder) GetCreaterAddr() string {
	if m != nil {
		return m.CreaterAddr
	}
	return ""
}

func (m *RelayOrder) GetCoinOperation() uint32 {
	if m != nil {
		return m.CoinOperation
	}
	return 0
}

func (m *RelayOrder) GetCoin() string {
	if m != nil {
		return m.Coin
	}
	return ""
}

func (m *RelayOrder) GetCoinAmount() uint64 {
	if m != nil {
		return m.CoinAmount
	}
	return 0
}

func (m *RelayOrder) GetCoinAddr() string {
	if m != nil {
		return m.CoinAddr
	}
	return ""
}

func (m *RelayOrder) GetCoinTxHash() string {
	if m != nil {
		return m.CoinTxHash
	}
	return ""
}

func (m *RelayOrder) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *RelayOrder) GetAcceptAddr() string {
	if m != nil {
		return m.AcceptAddr
	}
	return ""
}

func (m *RelayOrder) GetAcceptTime() int64 {
	if m != nil {
		return m.AcceptTime
	}
	return 0
}

func (m *RelayOrder) GetConfirmTime() int64 {
	if m != nil {
		return m.ConfirmTime
	}
	return 0
}

func (m *RelayOrder) GetFinishTime() int64 {
	if m != nil {
		return m.FinishTime
	}
	return 0
}

func (m *RelayOrder) GetFinishTxHash() string {
	if m != nil {
		return m.FinishTxHash
	}
	return ""
}

func (m *RelayOrder) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type RelayAccept struct {
	OrderId  string `protobuf:"bytes,1,opt,name=orderId" json:"orderId,omitempty"`
	CoinAddr string `protobuf:"bytes,2,opt,name=coinAddr" json:"coinAddr,omitempty"`
}

func (m *RelayAccept) Reset()                    { *m = RelayAccept{} }
func (m *RelayAccept) String() string            { return proto.CompactTextString(m) }
func (*RelayAccept) ProtoMessage()               {}
func (*RelayAccept) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *RelayAccept) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *RelayAccept) GetCoinAddr() string {
	if m != nil {
		return m.CoinAddr
	}
	return ""
}

type RelayRevoke struct {
	OrderId string `protobuf:"bytes,1,opt,name=orderId" json:"orderId,omitempty"`
	Target  uint32 `protobuf:"varint,2,opt,name=target" json:"target,omitempty"`
	Action  uint32 `protobuf:"varint,3,opt,name=action" json:"action,omitempty"`
}

func (m *RelayRevoke) Reset()                    { *m = RelayRevoke{} }
func (m *RelayRevoke) String() string            { return proto.CompactTextString(m) }
func (*RelayRevoke) ProtoMessage()               {}
func (*RelayRevoke) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

func (m *RelayRevoke) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *RelayRevoke) GetTarget() uint32 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *RelayRevoke) GetAction() uint32 {
	if m != nil {
		return m.Action
	}
	return 0
}

// 客户只用交易hash提交， 验证需要的其他信息由relayd提供
type RelayConfirmTx struct {
	OrderId string `protobuf:"bytes,1,opt,name=orderId" json:"orderId,omitempty"`
	TxHash  string `protobuf:"bytes,2,opt,name=txHash" json:"txHash,omitempty"`
}

func (m *RelayConfirmTx) Reset()                    { *m = RelayConfirmTx{} }
func (m *RelayConfirmTx) String() string            { return proto.CompactTextString(m) }
func (*RelayConfirmTx) ProtoMessage()               {}
func (*RelayConfirmTx) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{5} }

func (m *RelayConfirmTx) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *RelayConfirmTx) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

// relayd提供验证信息
type RelayVerify struct {
	OrderId string          `protobuf:"bytes,1,opt,name=orderId" json:"orderId,omitempty"`
	Tx      *BtcTransaction `protobuf:"bytes,2,opt,name=tx" json:"tx,omitempty"`
	Spv     *BtcSpv         `protobuf:"bytes,3,opt,name=spv" json:"spv,omitempty"`
}

func (m *RelayVerify) Reset()                    { *m = RelayVerify{} }
func (m *RelayVerify) String() string            { return proto.CompactTextString(m) }
func (*RelayVerify) ProtoMessage()               {}
func (*RelayVerify) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{6} }

func (m *RelayVerify) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *RelayVerify) GetTx() *BtcTransaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *RelayVerify) GetSpv() *BtcSpv {
	if m != nil {
		return m.Spv
	}
	return nil
}

type RelayVerifyCli struct {
	OrderId    string `protobuf:"bytes,1,opt,name=orderId" json:"orderId,omitempty"`
	RawTx      string `protobuf:"bytes,2,opt,name=rawTx" json:"rawTx,omitempty"`
	TxIndex    uint32 `protobuf:"varint,3,opt,name=txIndex" json:"txIndex,omitempty"`
	MerkBranch string `protobuf:"bytes,4,opt,name=merkBranch" json:"merkBranch,omitempty"`
	BlockHash  string `protobuf:"bytes,5,opt,name=blockHash" json:"blockHash,omitempty"`
}

func (m *RelayVerifyCli) Reset()                    { *m = RelayVerifyCli{} }
func (m *RelayVerifyCli) String() string            { return proto.CompactTextString(m) }
func (*RelayVerifyCli) ProtoMessage()               {}
func (*RelayVerifyCli) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{7} }

func (m *RelayVerifyCli) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *RelayVerifyCli) GetRawTx() string {
	if m != nil {
		return m.RawTx
	}
	return ""
}

func (m *RelayVerifyCli) GetTxIndex() uint32 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

func (m *RelayVerifyCli) GetMerkBranch() string {
	if m != nil {
		return m.MerkBranch
	}
	return ""
}

func (m *RelayVerifyCli) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

type BtcHeader struct {
	Hash          string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Confirmations uint64 `protobuf:"varint,2,opt,name=confirmations" json:"confirmations,omitempty"`
	Height        uint64 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Version       uint32 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	MerkleRoot    string `protobuf:"bytes,5,opt,name=merkleRoot" json:"merkleRoot,omitempty"`
	Time          int64  `protobuf:"varint,6,opt,name=time" json:"time,omitempty"`
	Nonce         int64  `protobuf:"varint,7,opt,name=nonce" json:"nonce,omitempty"`
	Bits          int64  `protobuf:"varint,8,opt,name=bits" json:"bits,omitempty"`
	Difficulty    int64  `protobuf:"varint,9,opt,name=difficulty" json:"difficulty,omitempty"`
	PreviousHash  string `protobuf:"bytes,10,opt,name=previousHash" json:"previousHash,omitempty"`
	NextHash      string `protobuf:"bytes,11,opt,name=nextHash" json:"nextHash,omitempty"`
	IsReset       bool   `protobuf:"varint,12,opt,name=isReset" json:"isReset,omitempty"`
}

func (m *BtcHeader) Reset()                    { *m = BtcHeader{} }
func (m *BtcHeader) String() string            { return proto.CompactTextString(m) }
func (*BtcHeader) ProtoMessage()               {}
func (*BtcHeader) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{8} }

func (m *BtcHeader) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BtcHeader) GetConfirmations() uint64 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *BtcHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BtcHeader) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BtcHeader) GetMerkleRoot() string {
	if m != nil {
		return m.MerkleRoot
	}
	return ""
}

func (m *BtcHeader) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BtcHeader) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BtcHeader) GetBits() int64 {
	if m != nil {
		return m.Bits
	}
	return 0
}

func (m *BtcHeader) GetDifficulty() int64 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

func (m *BtcHeader) GetPreviousHash() string {
	if m != nil {
		return m.PreviousHash
	}
	return ""
}

func (m *BtcHeader) GetNextHash() string {
	if m != nil {
		return m.NextHash
	}
	return ""
}

func (m *BtcHeader) GetIsReset() bool {
	if m != nil {
		return m.IsReset
	}
	return false
}

type BtcHeaders struct {
	BtcHeader []*BtcHeader `protobuf:"bytes,1,rep,name=btcHeader" json:"btcHeader,omitempty"`
}

func (m *BtcHeaders) Reset()                    { *m = BtcHeaders{} }
func (m *BtcHeaders) String() string            { return proto.CompactTextString(m) }
func (*BtcHeaders) ProtoMessage()               {}
func (*BtcHeaders) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{9} }

func (m *BtcHeaders) GetBtcHeader() []*BtcHeader {
	if m != nil {
		return m.BtcHeader
	}
	return nil
}

type BtcTransaction struct {
	Hash          string  `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	BlockHeight   uint64  `protobuf:"varint,2,opt,name=blockHeight" json:"blockHeight,omitempty"`
	Vin           []*Vin  `protobuf:"bytes,3,rep,name=vin" json:"vin,omitempty"`
	Vout          []*Vout `protobuf:"bytes,4,rep,name=vout" json:"vout,omitempty"`
	Time          int64   `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
	Confirmations uint64  `protobuf:"varint,6,opt,name=confirmations" json:"confirmations,omitempty"`
}

func (m *BtcTransaction) Reset()                    { *m = BtcTransaction{} }
func (m *BtcTransaction) String() string            { return proto.CompactTextString(m) }
func (*BtcTransaction) ProtoMessage()               {}
func (*BtcTransaction) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{10} }

func (m *BtcTransaction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BtcTransaction) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *BtcTransaction) GetVin() []*Vin {
	if m != nil {
		return m.Vin
	}
	return nil
}

func (m *BtcTransaction) GetVout() []*Vout {
	if m != nil {
		return m.Vout
	}
	return nil
}

func (m *BtcTransaction) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BtcTransaction) GetConfirmations() uint64 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

type Vin struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Value   uint64 `protobuf:"varint,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *Vin) Reset()                    { *m = Vin{} }
func (m *Vin) String() string            { return proto.CompactTextString(m) }
func (*Vin) ProtoMessage()               {}
func (*Vin) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{11} }

func (m *Vin) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Vin) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Vout struct {
	Coinbase bool   `protobuf:"varint,1,opt,name=coinbase" json:"coinbase,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Value    uint64 `protobuf:"varint,3,opt,name=Value" json:"Value,omitempty"`
}

func (m *Vout) Reset()                    { *m = Vout{} }
func (m *Vout) String() string            { return proto.CompactTextString(m) }
func (*Vout) ProtoMessage()               {}
func (*Vout) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{12} }

func (m *Vout) GetCoinbase() bool {
	if m != nil {
		return m.Coinbase
	}
	return false
}

func (m *Vout) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Vout) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type BtcSpv struct {
	Hash        string   `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Time        int64    `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Height      uint64   `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	BlockHash   string   `protobuf:"bytes,4,opt,name=blockHash" json:"blockHash,omitempty"`
	TxIndex     uint32   `protobuf:"varint,5,opt,name=txIndex" json:"txIndex,omitempty"`
	BranchProof [][]byte `protobuf:"bytes,6,rep,name=branchProof,proto3" json:"branchProof,omitempty"`
}

func (m *BtcSpv) Reset()                    { *m = BtcSpv{} }
func (m *BtcSpv) String() string            { return proto.CompactTextString(m) }
func (*BtcSpv) ProtoMessage()               {}
func (*BtcSpv) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{13} }

func (m *BtcSpv) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BtcSpv) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BtcSpv) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BtcSpv) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *BtcSpv) GetTxIndex() uint32 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

func (m *BtcSpv) GetBranchProof() [][]byte {
	if m != nil {
		return m.BranchProof
	}
	return nil
}

type ReceiptRelayRcvBTCHeaders struct {
	Base *BtcHeader `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *ReceiptRelayRcvBTCHeaders) Reset()                    { *m = ReceiptRelayRcvBTCHeaders{} }
func (m *ReceiptRelayRcvBTCHeaders) String() string            { return proto.CompactTextString(m) }
func (*ReceiptRelayRcvBTCHeaders) ProtoMessage()               {}
func (*ReceiptRelayRcvBTCHeaders) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{14} }

func (m *ReceiptRelayRcvBTCHeaders) GetBase() *BtcHeader {
	if m != nil {
		return m.Base
	}
	return nil
}

type ReceiptRelayLog struct {
	Base *RelayOrder `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *ReceiptRelayLog) Reset()                    { *m = ReceiptRelayLog{} }
func (m *ReceiptRelayLog) String() string            { return proto.CompactTextString(m) }
func (*ReceiptRelayLog) ProtoMessage()               {}
func (*ReceiptRelayLog) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{15} }

func (m *ReceiptRelayLog) GetBase() *RelayOrder {
	if m != nil {
		return m.Base
	}
	return nil
}

type ReqRelayAddrCoins struct {
	Addr       string           `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Status     RelayOrderStatus `protobuf:"varint,2,opt,name=status,enum=types.RelayOrderStatus" json:"status,omitempty"`
	Coins      []string         `protobuf:"bytes,3,rep,name=coins" json:"coins,omitempty"`
	PageNumber int32            `protobuf:"varint,4,opt,name=pageNumber" json:"pageNumber,omitempty"`
	PageSize   int32            `protobuf:"varint,5,opt,name=pageSize" json:"pageSize,omitempty"`
}

func (m *ReqRelayAddrCoins) Reset()                    { *m = ReqRelayAddrCoins{} }
func (m *ReqRelayAddrCoins) String() string            { return proto.CompactTextString(m) }
func (*ReqRelayAddrCoins) ProtoMessage()               {}
func (*ReqRelayAddrCoins) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{16} }

func (m *ReqRelayAddrCoins) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReqRelayAddrCoins) GetStatus() RelayOrderStatus {
	if m != nil {
		return m.Status
	}
	return RelayOrderStatus_init
}

func (m *ReqRelayAddrCoins) GetCoins() []string {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *ReqRelayAddrCoins) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *ReqRelayAddrCoins) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ReplyRelayOrders struct {
	Relayorders []*RelayOrder `protobuf:"bytes,1,rep,name=relayorders" json:"relayorders,omitempty"`
}

func (m *ReplyRelayOrders) Reset()                    { *m = ReplyRelayOrders{} }
func (m *ReplyRelayOrders) String() string            { return proto.CompactTextString(m) }
func (*ReplyRelayOrders) ProtoMessage()               {}
func (*ReplyRelayOrders) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{17} }

func (m *ReplyRelayOrders) GetRelayorders() []*RelayOrder {
	if m != nil {
		return m.Relayorders
	}
	return nil
}

type QueryRelayOrderParam struct {
	Status  RelayOrderStatus `protobuf:"varint,1,opt,name=status,enum=types.RelayOrderStatus" json:"status,omitempty"`
	OrderId string           `protobuf:"bytes,2,opt,name=orderId" json:"orderId,omitempty"`
}

func (m *QueryRelayOrderParam) Reset()                    { *m = QueryRelayOrderParam{} }
func (m *QueryRelayOrderParam) String() string            { return proto.CompactTextString(m) }
func (*QueryRelayOrderParam) ProtoMessage()               {}
func (*QueryRelayOrderParam) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{18} }

func (m *QueryRelayOrderParam) GetStatus() RelayOrderStatus {
	if m != nil {
		return m.Status
	}
	return RelayOrderStatus_init
}

func (m *QueryRelayOrderParam) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type QueryRelayOrderResult struct {
	Orders []*RelayOrder `protobuf:"bytes,1,rep,name=orders" json:"orders,omitempty"`
}

func (m *QueryRelayOrderResult) Reset()                    { *m = QueryRelayOrderResult{} }
func (m *QueryRelayOrderResult) String() string            { return proto.CompactTextString(m) }
func (*QueryRelayOrderResult) ProtoMessage()               {}
func (*QueryRelayOrderResult) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{19} }

func (m *QueryRelayOrderResult) GetOrders() []*RelayOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

type ReqRelayBtcHeaderHeightList struct {
	ReqHeight int64 `protobuf:"varint,1,opt,name=reqHeight" json:"reqHeight,omitempty"`
	Counts    int32 `protobuf:"varint,2,opt,name=counts" json:"counts,omitempty"`
	Direction int32 `protobuf:"varint,3,opt,name=direction" json:"direction,omitempty"`
}

func (m *ReqRelayBtcHeaderHeightList) Reset()                    { *m = ReqRelayBtcHeaderHeightList{} }
func (m *ReqRelayBtcHeaderHeightList) String() string            { return proto.CompactTextString(m) }
func (*ReqRelayBtcHeaderHeightList) ProtoMessage()               {}
func (*ReqRelayBtcHeaderHeightList) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{20} }

func (m *ReqRelayBtcHeaderHeightList) GetReqHeight() int64 {
	if m != nil {
		return m.ReqHeight
	}
	return 0
}

func (m *ReqRelayBtcHeaderHeightList) GetCounts() int32 {
	if m != nil {
		return m.Counts
	}
	return 0
}

func (m *ReqRelayBtcHeaderHeightList) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

type ReplyRelayBtcHeadHeightList struct {
	Heights []int64 `protobuf:"varint,1,rep,packed,name=heights" json:"heights,omitempty"`
}

func (m *ReplyRelayBtcHeadHeightList) Reset()                    { *m = ReplyRelayBtcHeadHeightList{} }
func (m *ReplyRelayBtcHeadHeightList) String() string            { return proto.CompactTextString(m) }
func (*ReplyRelayBtcHeadHeightList) ProtoMessage()               {}
func (*ReplyRelayBtcHeadHeightList) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{21} }

func (m *ReplyRelayBtcHeadHeightList) GetHeights() []int64 {
	if m != nil {
		return m.Heights
	}
	return nil
}

type ReqRelayQryBTCHeadHeight struct {
	BaseHeight int64 `protobuf:"varint,1,opt,name=baseHeight" json:"baseHeight,omitempty"`
}

func (m *ReqRelayQryBTCHeadHeight) Reset()                    { *m = ReqRelayQryBTCHeadHeight{} }
func (m *ReqRelayQryBTCHeadHeight) String() string            { return proto.CompactTextString(m) }
func (*ReqRelayQryBTCHeadHeight) ProtoMessage()               {}
func (*ReqRelayQryBTCHeadHeight) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{22} }

func (m *ReqRelayQryBTCHeadHeight) GetBaseHeight() int64 {
	if m != nil {
		return m.BaseHeight
	}
	return 0
}

type ReplayRelayQryBTCHeadHeight struct {
	CurHeight  int64 `protobuf:"varint,1,opt,name=curHeight" json:"curHeight,omitempty"`
	BaseHeight int64 `protobuf:"varint,2,opt,name=baseHeight" json:"baseHeight,omitempty"`
}

func (m *ReplayRelayQryBTCHeadHeight) Reset()                    { *m = ReplayRelayQryBTCHeadHeight{} }
func (m *ReplayRelayQryBTCHeadHeight) String() string            { return proto.CompactTextString(m) }
func (*ReplayRelayQryBTCHeadHeight) ProtoMessage()               {}
func (*ReplayRelayQryBTCHeadHeight) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{23} }

func (m *ReplayRelayQryBTCHeadHeight) GetCurHeight() int64 {
	if m != nil {
		return m.CurHeight
	}
	return 0
}

func (m *ReplayRelayQryBTCHeadHeight) GetBaseHeight() int64 {
	if m != nil {
		return m.BaseHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*RelayAction)(nil), "types.RelayAction")
	proto.RegisterType((*RelayCreate)(nil), "types.RelayCreate")
	proto.RegisterType((*RelayOrder)(nil), "types.RelayOrder")
	proto.RegisterType((*RelayAccept)(nil), "types.RelayAccept")
	proto.RegisterType((*RelayRevoke)(nil), "types.RelayRevoke")
	proto.RegisterType((*RelayConfirmTx)(nil), "types.RelayConfirmTx")
	proto.RegisterType((*RelayVerify)(nil), "types.RelayVerify")
	proto.RegisterType((*RelayVerifyCli)(nil), "types.RelayVerifyCli")
	proto.RegisterType((*BtcHeader)(nil), "types.BtcHeader")
	proto.RegisterType((*BtcHeaders)(nil), "types.BtcHeaders")
	proto.RegisterType((*BtcTransaction)(nil), "types.BtcTransaction")
	proto.RegisterType((*Vin)(nil), "types.Vin")
	proto.RegisterType((*Vout)(nil), "types.Vout")
	proto.RegisterType((*BtcSpv)(nil), "types.BtcSpv")
	proto.RegisterType((*ReceiptRelayRcvBTCHeaders)(nil), "types.ReceiptRelayRcvBTCHeaders")
	proto.RegisterType((*ReceiptRelayLog)(nil), "types.ReceiptRelayLog")
	proto.RegisterType((*ReqRelayAddrCoins)(nil), "types.ReqRelayAddrCoins")
	proto.RegisterType((*ReplyRelayOrders)(nil), "types.ReplyRelayOrders")
	proto.RegisterType((*QueryRelayOrderParam)(nil), "types.QueryRelayOrderParam")
	proto.RegisterType((*QueryRelayOrderResult)(nil), "types.QueryRelayOrderResult")
	proto.RegisterType((*ReqRelayBtcHeaderHeightList)(nil), "types.ReqRelayBtcHeaderHeightList")
	proto.RegisterType((*ReplyRelayBtcHeadHeightList)(nil), "types.ReplyRelayBtcHeadHeightList")
	proto.RegisterType((*ReqRelayQryBTCHeadHeight)(nil), "types.ReqRelayQryBTCHeadHeight")
	proto.RegisterType((*ReplayRelayQryBTCHeadHeight)(nil), "types.ReplayRelayQryBTCHeadHeight")
	proto.RegisterEnum("types.RelayOrderStatus", RelayOrderStatus_name, RelayOrderStatus_value)
}

func init() { proto.RegisterFile("relay.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 1333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xcd, 0x6e, 0x1c, 0xc5,
	0x13, 0xf7, 0x7c, 0xda, 0x5b, 0x6b, 0x3b, 0xeb, 0x56, 0x92, 0xff, 0xfc, 0x21, 0x4a, 0x56, 0xa3,
	0x44, 0x32, 0x08, 0x19, 0x29, 0x51, 0x04, 0x42, 0x5c, 0x6c, 0x1f, 0x70, 0xa4, 0x88, 0x24, 0x1d,
	0xcb, 0x1c, 0x38, 0x8d, 0x67, 0xda, 0x76, 0x2b, 0xeb, 0x99, 0x4d, 0x4f, 0xcf, 0xb2, 0xcb, 0x8d,
	0x23, 0x6f, 0xc0, 0x99, 0x23, 0x47, 0x5e, 0x80, 0x47, 0xe0, 0x95, 0x50, 0x55, 0xf7, 0xcc, 0xf4,
	0xd8, 0x8e, 0x03, 0xa7, 0x9d, 0xaa, 0xfa, 0xd5, 0x47, 0xd7, 0x57, 0xf7, 0xc2, 0x58, 0x89, 0x59,
	0xb6, 0xda, 0x9b, 0xab, 0x4a, 0x57, 0x2c, 0xd2, 0xab, 0xb9, 0xa8, 0xd3, 0x5f, 0x02, 0x18, 0x73,
	0x64, 0xef, 0xe7, 0x5a, 0x56, 0x25, 0xfb, 0x02, 0xe2, 0x5c, 0x89, 0x4c, 0x8b, 0xc4, 0x9b, 0x7a,
	0xbb, 0xe3, 0xa7, 0x6c, 0x8f, 0x70, 0x7b, 0x84, 0x39, 0x24, 0xc9, 0xd1, 0x1a, 0xb7, 0x18, 0x44,
	0x67, 0x79, 0x2e, 0xe6, 0x3a, 0xf1, 0xaf, 0xa3, 0xf7, 0x49, 0x82, 0x68, 0x83, 0x41, 0xb4, 0x12,
	0x8b, 0xea, 0x9d, 0x48, 0x82, 0xeb, 0x68, 0x4e, 0x12, 0x44, 0x1b, 0x0c, 0x7b, 0x0e, 0xa3, 0xbc,
	0x2a, 0xcf, 0xa4, 0xba, 0x3c, 0x5e, 0x26, 0x21, 0x29, 0xdc, 0x1b, 0x04, 0xd3, 0x0a, 0x8f, 0xd6,
	0x78, 0x8f, 0x44, 0x27, 0x0b, 0xa1, 0xe4, 0xd9, 0x2a, 0x89, 0xae, 0x3b, 0x39, 0x21, 0x09, 0x3a,
	0x31, 0x18, 0x74, 0x62, 0xbe, 0x0e, 0x67, 0x32, 0x89, 0xaf, 0x3b, 0x39, 0x69, 0x85, 0xe8, 0xa4,
	0x43, 0xb2, 0x67, 0x00, 0xa7, 0x3a, 0x3f, 0x12, 0x59, 0x21, 0x54, 0x9d, 0xac, 0x93, 0xde, 0x8e,
	0xd5, 0x3b, 0xe8, 0x04, 0x47, 0x6b, 0xdc, 0x81, 0xb1, 0x6d, 0xf0, 0xf5, 0x2a, 0x81, 0xa9, 0xb7,
	0x1b, 0x71, 0x5f, 0xaf, 0x0e, 0xd6, 0x21, 0x5a, 0x64, 0xb3, 0x46, 0xa4, 0xbf, 0x7a, 0xb6, 0x06,
	0x26, 0xbf, 0xec, 0x01, 0x8c, 0xaa, 0xb9, 0x50, 0x19, 0x16, 0x84, 0xca, 0xb0, 0xc5, 0x7b, 0x06,
	0x63, 0x10, 0xe6, 0x95, 0x2c, 0x29, 0xe3, 0x23, 0x4e, 0xdf, 0xec, 0x3e, 0xc4, 0xd9, 0x65, 0xd5,
	0x94, 0x9a, 0x32, 0x1b, 0x72, 0x4b, 0x21, 0x36, 0x2b, 0x0a, 0x45, 0xe9, 0x1b, 0x71, 0xfa, 0x46,
	0xeb, 0xa7, 0x7a, 0xb5, 0x6f, 0xe0, 0x11, 0xc1, 0x7b, 0x46, 0xfa, 0x67, 0x08, 0x40, 0xb1, 0xbc,
	0x52, 0x85, 0x50, 0x18, 0xb3, 0x2c, 0x28, 0x86, 0x11, 0xf7, 0x65, 0xc1, 0xbe, 0x84, 0xb8, 0xd6,
	0x99, 0x6e, 0x6a, 0x72, 0xbf, 0xfd, 0xf4, 0x7f, 0x6e, 0xb2, 0x48, 0xe5, 0x2d, 0x89, 0xb9, 0x85,
	0x61, 0x82, 0xe7, 0x4a, 0x18, 0x26, 0x05, 0x77, 0x8b, 0x4e, 0x8f, 0x74, 0x0e, 0x14, 0x0e, 0x0e,
	0x34, 0x85, 0xb1, 0x69, 0x3d, 0xb5, 0x8f, 0xe7, 0x8a, 0x28, 0x30, 0x97, 0xc5, 0x1e, 0xc3, 0x16,
	0xa6, 0xe4, 0x55, 0x97, 0xc0, 0x98, 0x12, 0x38, 0x64, 0x76, 0x49, 0x5c, 0x77, 0x92, 0xf8, 0x10,
	0x00, 0x7f, 0x6d, 0x66, 0x36, 0xc8, 0xaf, 0xc3, 0x61, 0x9f, 0xc0, 0x06, 0x51, 0xe8, 0x78, 0x44,
	0x7a, 0x1d, 0xdd, 0xea, 0x1e, 0x2f, 0x8f, 0xb2, 0xfa, 0x82, 0x6a, 0x3c, 0xe2, 0x0e, 0x87, 0xe4,
	0x14, 0xe4, 0xb1, 0xbc, 0x14, 0xc9, 0x78, 0xea, 0xed, 0x06, 0xdc, 0xe1, 0xa0, 0xdc, 0x0c, 0x09,
	0x59, 0xdf, 0x34, 0xfa, 0x3d, 0xa7, 0x97, 0x93, 0xfe, 0x96, 0xd1, 0xef, 0x39, 0x94, 0x17, 0x3b,
	0x02, 0x08, 0xd8, 0x26, 0x80, 0xcb, 0x42, 0x0b, 0x67, 0xb2, 0x94, 0xf5, 0x05, 0x01, 0xee, 0x18,
	0x0b, 0x3d, 0x87, 0xa5, 0xb0, 0x69, 0x29, 0x73, 0x86, 0x09, 0xc5, 0x30, 0xe0, 0x61, 0x55, 0x2e,
	0x84, 0x3c, 0xbf, 0xd0, 0xc9, 0x0e, 0xe9, 0x5b, 0x2a, 0x3d, 0xec, 0x76, 0x08, 0xcd, 0x79, 0x02,
	0xeb, 0x15, 0x96, 0xf5, 0x45, 0xdb, 0x39, 0x2d, 0x39, 0x48, 0xa1, 0x3f, 0x4c, 0x61, 0xfa, 0x83,
	0x35, 0x62, 0x16, 0xc1, 0x2d, 0x46, 0xee, 0x43, 0xac, 0x33, 0x75, 0x2e, 0xcc, 0xd2, 0xd9, 0xe2,
	0x96, 0xa2, 0x9e, 0xa1, 0x25, 0x46, 0x7d, 0xb6, 0xc5, 0x2d, 0x95, 0x1e, 0xc0, 0xf6, 0x70, 0x61,
	0x7c, 0xc4, 0xb6, 0x39, 0xbf, 0x09, 0xcf, 0x52, 0x69, 0x65, 0x83, 0x33, 0xfb, 0xe0, 0x16, 0x03,
	0x4f, 0xc0, 0xd7, 0x4b, 0xbb, 0x0d, 0xef, 0xf5, 0x1b, 0xe1, 0x58, 0x65, 0x65, 0x6d, 0xe2, 0xe1,
	0xbe, 0x5e, 0xb2, 0x47, 0x10, 0xd4, 0xf3, 0x85, 0xdd, 0x83, 0x5b, 0x3d, 0xee, 0xed, 0x7c, 0xc1,
	0x51, 0x92, 0xfe, 0xe6, 0xd9, 0xa8, 0xbb, 0x0d, 0x74, 0x8b, 0xd3, 0xbb, 0x10, 0xa9, 0xec, 0xa7,
	0xe3, 0xa5, 0x0d, 0xda, 0x10, 0x88, 0xd7, 0xcb, 0x17, 0x65, 0x21, 0x96, 0x36, 0x21, 0x2d, 0x89,
	0xbd, 0x70, 0x29, 0xd4, 0xbb, 0x03, 0x95, 0x95, 0xf9, 0x85, 0x5d, 0x0e, 0x0e, 0x87, 0x56, 0xc4,
	0xac, 0xca, 0xdf, 0x51, 0x22, 0xcc, 0x8c, 0xf5, 0x8c, 0xf4, 0x6f, 0x1f, 0x46, 0xdd, 0x92, 0xc3,
	0x49, 0xba, 0x40, 0x98, 0x09, 0x89, 0xbe, 0xcd, 0x0c, 0x52, 0xb2, 0x69, 0xda, 0xcc, 0xb2, 0x08,
	0xf9, 0x90, 0xe9, 0x74, 0x93, 0x5d, 0x5a, 0x86, 0xc2, 0xb8, 0x17, 0x42, 0xd5, 0x58, 0xc8, 0xd0,
	0xc4, 0x6d, 0xc9, 0x36, 0xee, 0x99, 0xe0, 0x55, 0xa5, 0x6d, 0x60, 0x0e, 0x07, 0x63, 0xd1, 0xd8,
	0xdd, 0x31, 0x75, 0x27, 0x7d, 0x63, 0x6e, 0xca, 0xaa, 0xcc, 0x05, 0x8d, 0x7a, 0xc0, 0x0d, 0x81,
	0xc8, 0x53, 0xa9, 0x6b, 0x9a, 0xf2, 0x80, 0xd3, 0x37, 0x5a, 0x2f, 0xe4, 0xd9, 0x99, 0xcc, 0x9b,
	0x99, 0x5e, 0xd1, 0x84, 0x07, 0xdc, 0xe1, 0xe0, 0x84, 0xcc, 0x95, 0x58, 0xc8, 0xaa, 0xa9, 0x9d,
	0x29, 0x1f, 0xf0, 0xb0, 0xc1, 0x4b, 0xb1, 0xd4, 0x24, 0x1f, 0x9b, 0x06, 0x6f, 0x69, 0x3c, 0x97,
	0xac, 0xb9, 0xa8, 0x85, 0xa6, 0x01, 0xdf, 0xe0, 0x2d, 0x99, 0x7e, 0x0b, 0xd0, 0xdf, 0x1a, 0x6c,
	0x0f, 0x17, 0xb4, 0xa5, 0x12, 0x6f, 0x1a, 0xec, 0x8e, 0x9f, 0x4e, 0xae, 0xde, 0x2d, 0xbc, 0x87,
	0xa4, 0x7f, 0x79, 0xb0, 0x3d, 0x6c, 0xb1, 0x1b, 0x8b, 0x32, 0x85, 0xb1, 0xa9, 0xa1, 0xc9, 0xb9,
	0x29, 0x89, 0xcb, 0x62, 0x0f, 0x20, 0x58, 0x48, 0x9c, 0x1e, 0x74, 0x09, 0xd6, 0xe5, 0x89, 0x2c,
	0x39, 0xb2, 0xd9, 0x23, 0x08, 0x17, 0x55, 0x83, 0x0b, 0x19, 0xc5, 0xe3, 0x56, 0x5c, 0x35, 0x9a,
	0x93, 0xa0, 0xcb, 0x7e, 0xe4, 0x64, 0xff, 0x5a, 0x27, 0xc4, 0x37, 0x74, 0x42, 0xfa, 0x1c, 0x82,
	0x13, 0x59, 0x62, 0x82, 0xf0, 0x86, 0x12, 0x75, 0xdd, 0x36, 0xb8, 0x25, 0xb1, 0x88, 0x27, 0x78,
	0x55, 0xda, 0xa8, 0x0d, 0x91, 0x72, 0x08, 0xd1, 0x7d, 0xbb, 0x55, 0x4e, 0xb3, 0xda, 0xbc, 0x5a,
	0x36, 0x78, 0x47, 0xbb, 0x36, 0xfd, 0x0f, 0xd8, 0x0c, 0x5c, 0x9b, 0xbf, 0x7b, 0x10, 0x9b, 0x39,
	0xbc, 0x31, 0x89, 0xed, 0x19, 0x7d, 0xe7, 0x8c, 0x1f, 0xea, 0xe3, 0xc1, 0x14, 0x85, 0x57, 0xa6,
	0xc8, 0x9d, 0xce, 0x68, 0x38, 0x9d, 0x58, 0x28, 0x9a, 0xc3, 0xd7, 0xaa, 0xaa, 0xce, 0x92, 0x78,
	0x1a, 0xec, 0x6e, 0x72, 0x97, 0x95, 0xee, 0xc3, 0xff, 0xb9, 0xc8, 0x85, 0x9c, 0x6b, 0xb3, 0x31,
	0xf3, 0xc5, 0xc1, 0xf1, 0x61, 0xdb, 0x3e, 0x8f, 0x21, 0xec, 0x32, 0x71, 0x53, 0xe7, 0x90, 0x34,
	0xfd, 0x1a, 0xee, 0xb8, 0x26, 0x5e, 0x56, 0xe7, 0xec, 0xc9, 0x40, 0x71, 0xe7, 0xda, 0x2d, 0x6d,
	0x35, 0xff, 0xf0, 0x60, 0x87, 0x8b, 0xf7, 0x66, 0xe1, 0x17, 0x85, 0x3a, 0xac, 0x64, 0x59, 0x77,
	0x2f, 0x0d, 0xcf, 0x79, 0x69, 0xfc, 0xe7, 0xc7, 0xc2, 0x5d, 0x88, 0xb0, 0x70, 0x35, 0xb5, 0xe0,
	0x88, 0x1b, 0x02, 0xe7, 0x72, 0x9e, 0x9d, 0x8b, 0xef, 0x9b, 0xcb, 0x53, 0x61, 0x9e, 0x32, 0x11,
	0x77, 0x38, 0x58, 0x7e, 0xa4, 0xde, 0xca, 0x9f, 0x4d, 0xef, 0x45, 0xbc, 0xa3, 0xd3, 0xef, 0x60,
	0xc2, 0xc5, 0x7c, 0xb6, 0xea, 0x5d, 0xd6, 0xec, 0x99, 0x7d, 0x08, 0xd3, 0xf6, 0xac, 0xed, 0x84,
	0xdd, 0x70, 0x5c, 0x17, 0x95, 0x66, 0x70, 0xf7, 0x4d, 0x23, 0x94, 0x63, 0xe8, 0x75, 0xa6, 0xb2,
	0x4b, 0xe7, 0x8c, 0xde, 0xbf, 0x3b, 0xa3, 0xb3, 0xc5, 0xfd, 0xc1, 0x16, 0x4f, 0x0f, 0xe0, 0xde,
	0x15, 0x17, 0x5c, 0xd4, 0xcd, 0x4c, 0xb3, 0xcf, 0x20, 0xfe, 0x58, 0xac, 0x16, 0x90, 0xbe, 0x87,
	0x4f, 0xdb, 0xda, 0x74, 0x15, 0x37, 0xd3, 0xfd, 0x52, 0xd6, 0xd4, 0x92, 0x4a, 0xbc, 0xb7, 0x1b,
	0xc0, 0xa3, 0x1e, 0xee, 0x19, 0xd8, 0xc8, 0x39, 0xbe, 0x74, 0x4c, 0xbd, 0x22, 0x6e, 0x29, 0xd4,
	0x2a, 0xa4, 0x12, 0xfd, 0xdd, 0x1a, 0xf1, 0x9e, 0x91, 0x7e, 0x85, 0x2e, 0xdb, 0x14, 0x5b, 0xa7,
	0x8e, 0xcb, 0x04, 0xd6, 0xcd, 0x3c, 0x98, 0xe8, 0x03, 0xde, 0x92, 0xe9, 0x37, 0x90, 0xb4, 0xb1,
	0xbe, 0x51, 0x2b, 0xdb, 0xc1, 0x36, 0x94, 0x87, 0x00, 0xd8, 0x6c, 0x83, 0x48, 0x1d, 0x4e, 0xfa,
	0xa3, 0x71, 0x9a, 0xad, 0x6e, 0x56, 0x7f, 0x00, 0xa3, 0xbc, 0x51, 0xc3, 0x73, 0x76, 0x8c, 0x2b,
	0xc6, 0xfd, 0xab, 0xc6, 0x3f, 0xaf, 0xb0, 0x69, 0x86, 0xe5, 0x63, 0x1b, 0x10, 0xca, 0x52, 0xea,
	0xc9, 0x1a, 0x1b, 0xc3, 0xfa, 0x5c, 0x94, 0x85, 0x2c, 0xcf, 0x27, 0x1e, 0x12, 0x38, 0xd1, 0x48,
	0xf8, 0x6c, 0x1b, 0x1f, 0x81, 0xb4, 0xd7, 0x90, 0x0e, 0xd8, 0x26, 0x6c, 0x98, 0xe7, 0x93, 0x28,
	0x26, 0x21, 0x52, 0x79, 0x56, 0xe6, 0x62, 0x26, 0x8a, 0x49, 0x84, 0x8a, 0xb8, 0x3c, 0xaa, 0x46,
	0x4f, 0xe2, 0xd3, 0x98, 0xfe, 0x92, 0x3d, 0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0xab, 0x36, 0x97,
	0xf6, 0xa1, 0x0d, 0x00, 0x00,
}
