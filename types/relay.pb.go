// Code generated by protoc-gen-go. DO NOT EDIT.
// source: relay.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RelayOrderStatus int32

const (
	RelayOrderStatus_unknown    RelayOrderStatus = 0
	RelayOrderStatus_pending    RelayOrderStatus = 1
	RelayOrderStatus_locking    RelayOrderStatus = 2
	RelayOrderStatus_confirming RelayOrderStatus = 3
	RelayOrderStatus_finished   RelayOrderStatus = 4
	RelayOrderStatus_canceled   RelayOrderStatus = 5
	RelayOrderStatus_timeout    RelayOrderStatus = 6
)

var RelayOrderStatus_name = map[int32]string{
	0: "unknown",
	1: "pending",
	2: "locking",
	3: "confirming",
	4: "finished",
	5: "canceled",
	6: "timeout",
}
var RelayOrderStatus_value = map[string]int32{
	"unknown":    0,
	"pending":    1,
	"locking":    2,
	"confirming": 3,
	"finished":   4,
	"canceled":   5,
	"timeout":    6,
}

func (x RelayOrderStatus) String() string {
	return proto.EnumName(RelayOrderStatus_name, int32(x))
}
func (RelayOrderStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type RelayAction struct {
	// Types that are valid to be assigned to Value:
	//	*RelayAction_Rsell
	//	*RelayAction_Rrevokesell
	//	*RelayAction_Rbuy
	//	*RelayAction_Rrevokebuy
	//	*RelayAction_Rverifybtc
	Value isRelayAction_Value `protobuf_oneof:"value"`
	Ty    int32               `protobuf:"varint,10,opt,name=ty" json:"ty,omitempty"`
}

func (m *RelayAction) Reset()                    { *m = RelayAction{} }
func (m *RelayAction) String() string            { return proto.CompactTextString(m) }
func (*RelayAction) ProtoMessage()               {}
func (*RelayAction) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type isRelayAction_Value interface {
	isRelayAction_Value()
}

type RelayAction_Rsell struct {
	Rsell *RelaySell `protobuf:"bytes,1,opt,name=rsell,oneof"`
}
type RelayAction_Rrevokesell struct {
	Rrevokesell *RelayRevokeSell `protobuf:"bytes,2,opt,name=rrevokesell,oneof"`
}
type RelayAction_Rbuy struct {
	Rbuy *RelayBuy `protobuf:"bytes,3,opt,name=rbuy,oneof"`
}
type RelayAction_Rrevokebuy struct {
	Rrevokebuy *RelayRevokeBuy `protobuf:"bytes,4,opt,name=rrevokebuy,oneof"`
}
type RelayAction_Rverifybtc struct {
	Rverifybtc *RelayVerifyBTC `protobuf:"bytes,5,opt,name=rverifybtc,oneof"`
}

func (*RelayAction_Rsell) isRelayAction_Value()       {}
func (*RelayAction_Rrevokesell) isRelayAction_Value() {}
func (*RelayAction_Rbuy) isRelayAction_Value()        {}
func (*RelayAction_Rrevokebuy) isRelayAction_Value()  {}
func (*RelayAction_Rverifybtc) isRelayAction_Value()  {}

func (m *RelayAction) GetValue() isRelayAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RelayAction) GetRsell() *RelaySell {
	if x, ok := m.GetValue().(*RelayAction_Rsell); ok {
		return x.Rsell
	}
	return nil
}

func (m *RelayAction) GetRrevokesell() *RelayRevokeSell {
	if x, ok := m.GetValue().(*RelayAction_Rrevokesell); ok {
		return x.Rrevokesell
	}
	return nil
}

func (m *RelayAction) GetRbuy() *RelayBuy {
	if x, ok := m.GetValue().(*RelayAction_Rbuy); ok {
		return x.Rbuy
	}
	return nil
}

func (m *RelayAction) GetRrevokebuy() *RelayRevokeBuy {
	if x, ok := m.GetValue().(*RelayAction_Rrevokebuy); ok {
		return x.Rrevokebuy
	}
	return nil
}

func (m *RelayAction) GetRverifybtc() *RelayVerifyBTC {
	if x, ok := m.GetValue().(*RelayAction_Rverifybtc); ok {
		return x.Rverifybtc
	}
	return nil
}

func (m *RelayAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RelayAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RelayAction_OneofMarshaler, _RelayAction_OneofUnmarshaler, _RelayAction_OneofSizer, []interface{}{
		(*RelayAction_Rsell)(nil),
		(*RelayAction_Rrevokesell)(nil),
		(*RelayAction_Rbuy)(nil),
		(*RelayAction_Rrevokebuy)(nil),
		(*RelayAction_Rverifybtc)(nil),
	}
}

func _RelayAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RelayAction)
	// value
	switch x := m.Value.(type) {
	case *RelayAction_Rsell:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rsell); err != nil {
			return err
		}
	case *RelayAction_Rrevokesell:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rrevokesell); err != nil {
			return err
		}
	case *RelayAction_Rbuy:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rbuy); err != nil {
			return err
		}
	case *RelayAction_Rrevokebuy:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rrevokebuy); err != nil {
			return err
		}
	case *RelayAction_Rverifybtc:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rverifybtc); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RelayAction.Value has unexpected type %T", x)
	}
	return nil
}

func _RelayAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RelayAction)
	switch tag {
	case 1: // value.rsell
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelaySell)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_Rsell{msg}
		return true, err
	case 2: // value.rrevokesell
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelayRevokeSell)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_Rrevokesell{msg}
		return true, err
	case 3: // value.rbuy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelayBuy)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_Rbuy{msg}
		return true, err
	case 4: // value.rrevokebuy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelayRevokeBuy)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_Rrevokebuy{msg}
		return true, err
	case 5: // value.rverifybtc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelayVerifyBTC)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_Rverifybtc{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RelayAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RelayAction)
	// value
	switch x := m.Value.(type) {
	case *RelayAction_Rsell:
		s := proto.Size(x.Rsell)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RelayAction_Rrevokesell:
		s := proto.Size(x.Rrevokesell)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RelayAction_Rbuy:
		s := proto.Size(x.Rbuy)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RelayAction_Rrevokebuy:
		s := proto.Size(x.Rrevokebuy)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RelayAction_Rverifybtc:
		s := proto.Size(x.Rverifybtc)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RelaySell struct {
	Sellamount int64 `protobuf:"varint,1,opt,name=sellamount" json:"sellamount,omitempty"`
	// string selladdr          	= 2；   //自身帐号，如果自己是外链账户，需要填
	// string  selltoken		   	= 3; //卖的token  当前缺省是BTY
	Exchgcoin     string `protobuf:"bytes,4,opt,name=exchgcoin" json:"exchgcoin,omitempty"`
	Exchgamount   int64  `protobuf:"varint,5,opt,name=exchgamount" json:"exchgamount,omitempty"`
	Exchgaddr     string `protobuf:"bytes,6,opt,name=exchgaddr" json:"exchgaddr,omitempty"`
	Waitbtcblocks int32  `protobuf:"varint,7,opt,name=waitbtcblocks" json:"waitbtcblocks,omitempty"`
}

func (m *RelaySell) Reset()                    { *m = RelaySell{} }
func (m *RelaySell) String() string            { return proto.CompactTextString(m) }
func (*RelaySell) ProtoMessage()               {}
func (*RelaySell) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *RelaySell) GetSellamount() int64 {
	if m != nil {
		return m.Sellamount
	}
	return 0
}

func (m *RelaySell) GetExchgcoin() string {
	if m != nil {
		return m.Exchgcoin
	}
	return ""
}

func (m *RelaySell) GetExchgamount() int64 {
	if m != nil {
		return m.Exchgamount
	}
	return 0
}

func (m *RelaySell) GetExchgaddr() string {
	if m != nil {
		return m.Exchgaddr
	}
	return ""
}

func (m *RelaySell) GetWaitbtcblocks() int32 {
	if m != nil {
		return m.Waitbtcblocks
	}
	return 0
}

type RelayOrder struct {
	Orderid    string `protobuf:"bytes,1,opt,name=orderid" json:"orderid,omitempty"`
	Status     int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Sellamount int64  `protobuf:"varint,3,opt,name=sellamount" json:"sellamount,omitempty"`
	// string selltoken          = 4;
	Selladdr        string `protobuf:"bytes,5,opt,name=selladdr" json:"selladdr,omitempty"`
	Exchgcoin       string `protobuf:"bytes,6,opt,name=exchgcoin" json:"exchgcoin,omitempty"`
	Exchgamount     int64  `protobuf:"varint,7,opt,name=exchgamount" json:"exchgamount,omitempty"`
	Exchgaddr       string `protobuf:"bytes,8,opt,name=exchgaddr" json:"exchgaddr,omitempty"`
	Waitcoinblocks  int32  `protobuf:"varint,9,opt,name=waitcoinblocks" json:"waitcoinblocks,omitempty"`
	Createtime      int64  `protobuf:"varint,10,opt,name=createtime" json:"createtime,omitempty"`
	Buyeraddr       string `protobuf:"bytes,11,opt,name=buyeraddr" json:"buyeraddr,omitempty"`
	Buyertime       int64  `protobuf:"varint,12,opt,name=buyertime" json:"buyertime,omitempty"`
	Buyercoinblknum int32  `protobuf:"varint,13,opt,name=buyercoinblknum" json:"buyercoinblknum,omitempty"`
	Finishtime      int64  `protobuf:"varint,14,opt,name=finishtime" json:"finishtime,omitempty"`
	Height          int64  `protobuf:"varint,15,opt,name=height" json:"height,omitempty"`
}

func (m *RelayOrder) Reset()                    { *m = RelayOrder{} }
func (m *RelayOrder) String() string            { return proto.CompactTextString(m) }
func (*RelayOrder) ProtoMessage()               {}
func (*RelayOrder) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *RelayOrder) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *RelayOrder) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RelayOrder) GetSellamount() int64 {
	if m != nil {
		return m.Sellamount
	}
	return 0
}

func (m *RelayOrder) GetSelladdr() string {
	if m != nil {
		return m.Selladdr
	}
	return ""
}

func (m *RelayOrder) GetExchgcoin() string {
	if m != nil {
		return m.Exchgcoin
	}
	return ""
}

func (m *RelayOrder) GetExchgamount() int64 {
	if m != nil {
		return m.Exchgamount
	}
	return 0
}

func (m *RelayOrder) GetExchgaddr() string {
	if m != nil {
		return m.Exchgaddr
	}
	return ""
}

func (m *RelayOrder) GetWaitcoinblocks() int32 {
	if m != nil {
		return m.Waitcoinblocks
	}
	return 0
}

func (m *RelayOrder) GetCreatetime() int64 {
	if m != nil {
		return m.Createtime
	}
	return 0
}

func (m *RelayOrder) GetBuyeraddr() string {
	if m != nil {
		return m.Buyeraddr
	}
	return ""
}

func (m *RelayOrder) GetBuyertime() int64 {
	if m != nil {
		return m.Buyertime
	}
	return 0
}

func (m *RelayOrder) GetBuyercoinblknum() int32 {
	if m != nil {
		return m.Buyercoinblknum
	}
	return 0
}

func (m *RelayOrder) GetFinishtime() int64 {
	if m != nil {
		return m.Finishtime
	}
	return 0
}

func (m *RelayOrder) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type RelayBuy struct {
	Orderid string `protobuf:"bytes,1,opt,name=orderid" json:"orderid,omitempty"`
}

func (m *RelayBuy) Reset()                    { *m = RelayBuy{} }
func (m *RelayBuy) String() string            { return proto.CompactTextString(m) }
func (*RelayBuy) ProtoMessage()               {}
func (*RelayBuy) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *RelayBuy) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

// 允许token的持有者撤销之前未成交出售token的挂单
type RelayRevokeSell struct {
	Orderid string `protobuf:"bytes,1,opt,name=orderid" json:"orderid,omitempty"`
}

func (m *RelayRevokeSell) Reset()                    { *m = RelayRevokeSell{} }
func (m *RelayRevokeSell) String() string            { return proto.CompactTextString(m) }
func (*RelayRevokeSell) ProtoMessage()               {}
func (*RelayRevokeSell) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *RelayRevokeSell) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

// 允许token的持有者撤销之前未成交出售token的挂单
type RelayRevokeBuy struct {
	Orderid string `protobuf:"bytes,1,opt,name=orderid" json:"orderid,omitempty"`
}

func (m *RelayRevokeBuy) Reset()                    { *m = RelayRevokeBuy{} }
func (m *RelayRevokeBuy) String() string            { return proto.CompactTextString(m) }
func (*RelayRevokeBuy) ProtoMessage()               {}
func (*RelayRevokeBuy) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *RelayRevokeBuy) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

type RelayVerifyBTC struct {
	Orderid   string `protobuf:"bytes,1,opt,name=orderid" json:"orderid,omitempty"`
	Rawtx     string `protobuf:"bytes,2,opt,name=rawtx" json:"rawtx,omitempty"`
	Txindex   uint32 `protobuf:"varint,3,opt,name=txindex" json:"txindex,omitempty"`
	Sibling   string `protobuf:"bytes,4,opt,name=sibling" json:"sibling,omitempty"`
	Blockhash string `protobuf:"bytes,5,opt,name=blockhash" json:"blockhash,omitempty"`
}

func (m *RelayVerifyBTC) Reset()                    { *m = RelayVerifyBTC{} }
func (m *RelayVerifyBTC) String() string            { return proto.CompactTextString(m) }
func (*RelayVerifyBTC) ProtoMessage()               {}
func (*RelayVerifyBTC) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

func (m *RelayVerifyBTC) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *RelayVerifyBTC) GetRawtx() string {
	if m != nil {
		return m.Rawtx
	}
	return ""
}

func (m *RelayVerifyBTC) GetTxindex() uint32 {
	if m != nil {
		return m.Txindex
	}
	return 0
}

func (m *RelayVerifyBTC) GetSibling() string {
	if m != nil {
		return m.Sibling
	}
	return ""
}

func (m *RelayVerifyBTC) GetBlockhash() string {
	if m != nil {
		return m.Blockhash
	}
	return ""
}

type ReceiptRelayBase struct {
	Orderid    string `protobuf:"bytes,1,opt,name=orderid" json:"orderid,omitempty"`
	Status     string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Owner      string `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
	Sellamount int64  `protobuf:"varint,4,opt,name=sellamount" json:"sellamount,omitempty"`
	// string selltoken			= 5;
	Exchgcoin         string `protobuf:"bytes,6,opt,name=exchgcoin" json:"exchgcoin,omitempty"`
	Exchgamount       int64  `protobuf:"varint,7,opt,name=exchgamount" json:"exchgamount,omitempty"`
	Exchgaddr         string `protobuf:"bytes,8,opt,name=exchgaddr" json:"exchgaddr,omitempty"`
	Waitcoinblocks    int32  `protobuf:"varint,9,opt,name=waitcoinblocks" json:"waitcoinblocks,omitempty"`
	Createtime        int64  `protobuf:"varint,10,opt,name=createtime" json:"createtime,omitempty"`
	Buyeraddr         string `protobuf:"bytes,11,opt,name=buyeraddr" json:"buyeraddr,omitempty"`
	Buyertime         int64  `protobuf:"varint,12,opt,name=buyertime" json:"buyertime,omitempty"`
	Buyercoinblocknum int32  `protobuf:"varint,13,opt,name=buyercoinblocknum" json:"buyercoinblocknum,omitempty"`
	Finishtime        int64  `protobuf:"varint,14,opt,name=finishtime" json:"finishtime,omitempty"`
}

func (m *ReceiptRelayBase) Reset()                    { *m = ReceiptRelayBase{} }
func (m *ReceiptRelayBase) String() string            { return proto.CompactTextString(m) }
func (*ReceiptRelayBase) ProtoMessage()               {}
func (*ReceiptRelayBase) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

func (m *ReceiptRelayBase) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *ReceiptRelayBase) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ReceiptRelayBase) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ReceiptRelayBase) GetSellamount() int64 {
	if m != nil {
		return m.Sellamount
	}
	return 0
}

func (m *ReceiptRelayBase) GetExchgcoin() string {
	if m != nil {
		return m.Exchgcoin
	}
	return ""
}

func (m *ReceiptRelayBase) GetExchgamount() int64 {
	if m != nil {
		return m.Exchgamount
	}
	return 0
}

func (m *ReceiptRelayBase) GetExchgaddr() string {
	if m != nil {
		return m.Exchgaddr
	}
	return ""
}

func (m *ReceiptRelayBase) GetWaitcoinblocks() int32 {
	if m != nil {
		return m.Waitcoinblocks
	}
	return 0
}

func (m *ReceiptRelayBase) GetCreatetime() int64 {
	if m != nil {
		return m.Createtime
	}
	return 0
}

func (m *ReceiptRelayBase) GetBuyeraddr() string {
	if m != nil {
		return m.Buyeraddr
	}
	return ""
}

func (m *ReceiptRelayBase) GetBuyertime() int64 {
	if m != nil {
		return m.Buyertime
	}
	return 0
}

func (m *ReceiptRelayBase) GetBuyercoinblocknum() int32 {
	if m != nil {
		return m.Buyercoinblocknum
	}
	return 0
}

func (m *ReceiptRelayBase) GetFinishtime() int64 {
	if m != nil {
		return m.Finishtime
	}
	return 0
}

type ReceiptRelaySell struct {
	Base *ReceiptRelayBase `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *ReceiptRelaySell) Reset()                    { *m = ReceiptRelaySell{} }
func (m *ReceiptRelaySell) String() string            { return proto.CompactTextString(m) }
func (*ReceiptRelaySell) ProtoMessage()               {}
func (*ReceiptRelaySell) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{8} }

func (m *ReceiptRelaySell) GetBase() *ReceiptRelayBase {
	if m != nil {
		return m.Base
	}
	return nil
}

type ReceiptRelayBuy struct {
	Orderid     string `protobuf:"bytes,1,opt,name=orderid" json:"orderid,omitempty"`
	Buyeraddr   string `protobuf:"bytes,2,opt,name=buyeraddr" json:"buyeraddr,omitempty"`
	Buyamount   int64  `protobuf:"varint,3,opt,name=buyamount" json:"buyamount,omitempty"`
	Exchgcoin   string `protobuf:"bytes,4,opt,name=exchgcoin" json:"exchgcoin,omitempty"`
	Exchgamount int64  `protobuf:"varint,5,opt,name=exchgamount" json:"exchgamount,omitempty"`
	Exchgaddr   string `protobuf:"bytes,6,opt,name=exchgaddr" json:"exchgaddr,omitempty"`
	Buytxhash   string `protobuf:"bytes,7,opt,name=buytxhash" json:"buytxhash,omitempty"`
}

func (m *ReceiptRelayBuy) Reset()                    { *m = ReceiptRelayBuy{} }
func (m *ReceiptRelayBuy) String() string            { return proto.CompactTextString(m) }
func (*ReceiptRelayBuy) ProtoMessage()               {}
func (*ReceiptRelayBuy) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{9} }

func (m *ReceiptRelayBuy) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *ReceiptRelayBuy) GetBuyeraddr() string {
	if m != nil {
		return m.Buyeraddr
	}
	return ""
}

func (m *ReceiptRelayBuy) GetBuyamount() int64 {
	if m != nil {
		return m.Buyamount
	}
	return 0
}

func (m *ReceiptRelayBuy) GetExchgcoin() string {
	if m != nil {
		return m.Exchgcoin
	}
	return ""
}

func (m *ReceiptRelayBuy) GetExchgamount() int64 {
	if m != nil {
		return m.Exchgamount
	}
	return 0
}

func (m *ReceiptRelayBuy) GetExchgaddr() string {
	if m != nil {
		return m.Exchgaddr
	}
	return ""
}

func (m *ReceiptRelayBuy) GetBuytxhash() string {
	if m != nil {
		return m.Buytxhash
	}
	return ""
}

type ReceiptRelayRevoke struct {
	Base *ReceiptRelayBase `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *ReceiptRelayRevoke) Reset()                    { *m = ReceiptRelayRevoke{} }
func (m *ReceiptRelayRevoke) String() string            { return proto.CompactTextString(m) }
func (*ReceiptRelayRevoke) ProtoMessage()               {}
func (*ReceiptRelayRevoke) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{10} }

func (m *ReceiptRelayRevoke) GetBase() *ReceiptRelayBase {
	if m != nil {
		return m.Base
	}
	return nil
}

type ReceiptRelayVerify struct {
	Base *ReceiptRelayBase `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *ReceiptRelayVerify) Reset()                    { *m = ReceiptRelayVerify{} }
func (m *ReceiptRelayVerify) String() string            { return proto.CompactTextString(m) }
func (*ReceiptRelayVerify) ProtoMessage()               {}
func (*ReceiptRelayVerify) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{11} }

func (m *ReceiptRelayVerify) GetBase() *ReceiptRelayBase {
	if m != nil {
		return m.Base
	}
	return nil
}

type QueryRelayOrderParam struct {
	Status  RelayOrderStatus `protobuf:"varint,1,opt,name=status,enum=types.RelayOrderStatus" json:"status,omitempty"`
	Orderid string           `protobuf:"bytes,2,opt,name=orderid" json:"orderid,omitempty"`
}

func (m *QueryRelayOrderParam) Reset()                    { *m = QueryRelayOrderParam{} }
func (m *QueryRelayOrderParam) String() string            { return proto.CompactTextString(m) }
func (*QueryRelayOrderParam) ProtoMessage()               {}
func (*QueryRelayOrderParam) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{12} }

func (m *QueryRelayOrderParam) GetStatus() RelayOrderStatus {
	if m != nil {
		return m.Status
	}
	return RelayOrderStatus_unknown
}

func (m *QueryRelayOrderParam) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

type QueryRelayOrderResult struct {
	Orders []*RelayOrder `protobuf:"bytes,1,rep,name=orders" json:"orders,omitempty"`
}

func (m *QueryRelayOrderResult) Reset()                    { *m = QueryRelayOrderResult{} }
func (m *QueryRelayOrderResult) String() string            { return proto.CompactTextString(m) }
func (*QueryRelayOrderResult) ProtoMessage()               {}
func (*QueryRelayOrderResult) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{13} }

func (m *QueryRelayOrderResult) GetOrders() []*RelayOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

func init() {
	proto.RegisterType((*RelayAction)(nil), "types.RelayAction")
	proto.RegisterType((*RelaySell)(nil), "types.RelaySell")
	proto.RegisterType((*RelayOrder)(nil), "types.RelayOrder")
	proto.RegisterType((*RelayBuy)(nil), "types.RelayBuy")
	proto.RegisterType((*RelayRevokeSell)(nil), "types.RelayRevokeSell")
	proto.RegisterType((*RelayRevokeBuy)(nil), "types.RelayRevokeBuy")
	proto.RegisterType((*RelayVerifyBTC)(nil), "types.RelayVerifyBTC")
	proto.RegisterType((*ReceiptRelayBase)(nil), "types.ReceiptRelayBase")
	proto.RegisterType((*ReceiptRelaySell)(nil), "types.ReceiptRelaySell")
	proto.RegisterType((*ReceiptRelayBuy)(nil), "types.ReceiptRelayBuy")
	proto.RegisterType((*ReceiptRelayRevoke)(nil), "types.ReceiptRelayRevoke")
	proto.RegisterType((*ReceiptRelayVerify)(nil), "types.ReceiptRelayVerify")
	proto.RegisterType((*QueryRelayOrderParam)(nil), "types.QueryRelayOrderParam")
	proto.RegisterType((*QueryRelayOrderResult)(nil), "types.QueryRelayOrderResult")
	proto.RegisterEnum("types.RelayOrderStatus", RelayOrderStatus_name, RelayOrderStatus_value)
}

func init() { proto.RegisterFile("relay.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 783 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xb6, 0x44, 0x51, 0x12, 0x87, 0xb6, 0x24, 0x2f, 0x6c, 0x97, 0x28, 0x8a, 0xc2, 0x20, 0xdc,
	0x42, 0xb5, 0x0b, 0x17, 0x70, 0x0f, 0x05, 0x7a, 0x29, 0xac, 0x5e, 0x7c, 0x4b, 0xb2, 0x0e, 0x72,
	0xe7, 0xcf, 0x5a, 0x5a, 0x88, 0x5a, 0x0a, 0xcb, 0xa5, 0x25, 0xbe, 0x46, 0xde, 0x21, 0x97, 0x5c,
	0xf2, 0x06, 0x79, 0x99, 0xbc, 0x48, 0xb0, 0x43, 0x8a, 0x22, 0xa9, 0x44, 0x8e, 0x0f, 0xb9, 0xe4,
	0xa6, 0x6f, 0xe6, 0x9b, 0x9d, 0x9f, 0xfd, 0x66, 0x29, 0xb0, 0x25, 0x8b, 0xbc, 0xec, 0x7a, 0x29,
	0x63, 0x15, 0x13, 0x53, 0x65, 0x4b, 0x96, 0xb8, 0xef, 0xda, 0x60, 0x53, 0x6d, 0xbe, 0x0d, 0x14,
	0x8f, 0x05, 0x19, 0x83, 0x29, 0x13, 0x16, 0x45, 0x4e, 0xeb, 0xbc, 0x35, 0xb6, 0x6f, 0x46, 0xd7,
	0x48, 0xbb, 0x46, 0xca, 0x3d, 0x8b, 0xa2, 0xbb, 0x03, 0x9a, 0x13, 0xc8, 0xbf, 0x60, 0x4b, 0xc9,
	0x1e, 0xe3, 0x39, 0x43, 0x7e, 0x1b, 0xf9, 0x67, 0x55, 0x3e, 0x45, 0x6f, 0x11, 0x55, 0x25, 0x93,
	0xdf, 0xa0, 0x23, 0xfd, 0x34, 0x73, 0x0c, 0x0c, 0x1a, 0x56, 0x83, 0x26, 0x69, 0x76, 0x77, 0x40,
	0xd1, 0x4d, 0xfe, 0x01, 0x28, 0xa2, 0x34, 0xb9, 0x83, 0xe4, 0xd3, 0xdd, 0x0c, 0x79, 0x48, 0x85,
	0x8a, 0x81, 0x8f, 0x4c, 0xf2, 0x87, 0xcc, 0x57, 0x81, 0x63, 0xee, 0x06, 0xbe, 0x41, 0xe7, 0xe4,
	0xf5, 0xff, 0x18, 0x58, 0x52, 0xc9, 0x00, 0xda, 0x2a, 0x73, 0xe0, 0xbc, 0x35, 0x36, 0x69, 0x5b,
	0x65, 0x93, 0x1e, 0x98, 0x8f, 0x5e, 0x94, 0x32, 0xf7, 0x43, 0x0b, 0xac, 0x72, 0x08, 0xe4, 0x57,
	0x00, 0xdd, 0x87, 0xb7, 0x88, 0x53, 0xa1, 0x70, 0x54, 0x06, 0xad, 0x58, 0xc8, 0x2f, 0x60, 0xb1,
	0x75, 0x30, 0x9b, 0x06, 0x31, 0x17, 0x58, 0xb7, 0x45, 0xb7, 0x06, 0x72, 0x0e, 0x36, 0x82, 0x22,
	0xdc, 0xc4, 0xf0, 0xaa, 0xa9, 0x8c, 0xf7, 0xc2, 0x50, 0x3a, 0xdd, 0x4a, 0xbc, 0x36, 0x90, 0x0b,
	0x38, 0x5a, 0x79, 0x5c, 0xf9, 0x2a, 0xf0, 0xa3, 0x38, 0x98, 0x27, 0x4e, 0x0f, 0xeb, 0xad, 0x1b,
	0xdd, 0x8f, 0x06, 0x00, 0x56, 0xfc, 0x42, 0x86, 0x4c, 0x12, 0x07, 0x7a, 0xb1, 0xfe, 0xc1, 0x43,
	0xac, 0xd7, 0xa2, 0x1b, 0x48, 0xce, 0xa0, 0x9b, 0x28, 0x4f, 0xa5, 0x09, 0xde, 0xa1, 0x49, 0x0b,
	0xd4, 0x68, 0xd2, 0xd8, 0x69, 0xf2, 0x67, 0xe8, 0x23, 0xd2, 0x35, 0x9a, 0x78, 0x64, 0x89, 0xeb,
	0x03, 0xe8, 0x3e, 0x31, 0x80, 0xde, 0x13, 0x03, 0xe8, 0x37, 0x07, 0xf0, 0x3b, 0x0c, 0x74, 0xaf,
	0xfa, 0xac, 0x62, 0x02, 0x16, 0x56, 0xde, 0xb0, 0xea, 0x0e, 0x02, 0xc9, 0x3c, 0xc5, 0x14, 0x5f,
	0x30, 0xbc, 0x55, 0x83, 0x56, 0x2c, 0x3a, 0x8b, 0x9f, 0x66, 0x4c, 0x62, 0x16, 0x3b, 0xcf, 0x52,
	0x1a, 0x4a, 0x2f, 0x06, 0x1f, 0x62, 0xf0, 0xd6, 0x40, 0xc6, 0x30, 0x44, 0x90, 0xa7, 0x9b, 0x8b,
	0x74, 0xe1, 0x1c, 0x61, 0x11, 0x4d, 0xb3, 0xae, 0xe2, 0x81, 0x0b, 0x9e, 0xcc, 0xf0, 0xa0, 0x41,
	0x5e, 0xc5, 0xd6, 0xa2, 0xe7, 0x3f, 0x63, 0x7c, 0x3a, 0x53, 0xce, 0x10, 0x7d, 0x05, 0x72, 0x2f,
	0xa0, 0xbf, 0xd9, 0x88, 0xaf, 0xdf, 0x9e, 0x7b, 0x05, 0xc3, 0xc6, 0xb2, 0xed, 0x21, 0x5f, 0xc2,
	0xa0, 0xbe, 0x37, 0x7b, 0xb8, 0x6f, 0x5b, 0x05, 0xb9, 0xdc, 0x95, 0x3d, 0x1a, 0x3a, 0x01, 0x53,
	0x7a, 0x2b, 0xb5, 0x46, 0x09, 0x59, 0x34, 0x07, 0x9a, 0xaf, 0xd6, 0x5c, 0x84, 0x6c, 0x8d, 0xf2,
	0x39, 0xa2, 0x1b, 0xa8, 0x3d, 0x09, 0xf7, 0x23, 0x2e, 0xa6, 0xc5, 0x7a, 0x6c, 0x20, 0x4e, 0x5d,
	0xdf, 0xde, 0xcc, 0x4b, 0x66, 0x85, 0xac, 0xb6, 0x06, 0xf7, 0xbd, 0x01, 0x23, 0xca, 0x02, 0xc6,
	0x97, 0x2a, 0x9f, 0x8d, 0x97, 0xb0, 0x6f, 0x96, 0xb6, 0x55, 0x4a, 0xfb, 0x04, 0xcc, 0x78, 0x25,
	0x98, 0xc4, 0xb2, 0x2c, 0x9a, 0x83, 0x86, 0xe0, 0x3b, 0xfb, 0xb7, 0xfa, 0x87, 0x14, 0xf5, 0x9f,
	0x70, 0x5c, 0x51, 0x6f, 0x1c, 0x54, 0x64, 0xbd, 0xeb, 0x78, 0x4a, 0xd8, 0xee, 0x7f, 0xf5, 0xbb,
	0x42, 0x6d, 0x5e, 0x41, 0xc7, 0xf7, 0x12, 0x56, 0x7c, 0x5e, 0x7e, 0x2a, 0xdf, 0xe4, 0xfa, 0x95,
	0x52, 0x24, 0xb9, 0x9f, 0x5a, 0x5a, 0xdc, 0x15, 0xd7, 0x3e, 0xc1, 0xd6, 0x1b, 0x6f, 0x7f, 0xb9,
	0xf1, 0xda, 0x63, 0xb6, 0x35, 0x7c, 0xe7, 0x07, 0x3b, 0xcf, 0xad, 0xd6, 0xa8, 0xe9, 0x5e, 0x59,
	0x59, 0x6e, 0x70, 0x6f, 0x81, 0x54, 0x9b, 0xcc, 0x77, 0xf3, 0x79, 0x83, 0x6a, 0x1c, 0x91, 0x6f,
	0xec, 0xf3, 0x8e, 0xf0, 0xe0, 0xe4, 0x55, 0xca, 0x64, 0xb6, 0xfd, 0x64, 0xbc, 0xf4, 0xa4, 0xb7,
	0x20, 0x7f, 0x95, 0x2b, 0xa4, 0x8f, 0x19, 0x54, 0x8e, 0xd9, 0xf0, 0xee, 0xd1, 0x5d, 0xee, 0x56,
	0xe5, 0x82, 0xda, 0xf5, 0x17, 0x65, 0x02, 0xa7, 0x8d, 0x14, 0x94, 0x25, 0x69, 0xa4, 0xc8, 0x1f,
	0xd0, 0x45, 0x8e, 0xce, 0x61, 0x8c, 0xed, 0x9b, 0xe3, 0x9d, 0x1c, 0xb4, 0x20, 0x5c, 0x4a, 0xad,
	0xa9, 0x7a, 0x66, 0x62, 0x43, 0x2f, 0x15, 0x73, 0x11, 0xaf, 0xc4, 0xe8, 0x40, 0x83, 0x25, 0x13,
	0x21, 0x17, 0xd3, 0x51, 0x4b, 0x03, 0x2d, 0x56, 0x0d, 0xda, 0x64, 0x00, 0x10, 0xc4, 0xe2, 0x81,
	0xcb, 0x85, 0xc6, 0x06, 0x39, 0x84, 0x7e, 0x2e, 0x56, 0x16, 0x8e, 0x3a, 0x1a, 0x05, 0x9e, 0x08,
	0x58, 0xc4, 0xc2, 0x91, 0xa9, 0x03, 0xb5, 0x84, 0xe3, 0x54, 0x8d, 0xba, 0x7e, 0x17, 0xff, 0x31,
	0xfd, 0xfd, 0x39, 0x00, 0x00, 0xff, 0xff, 0x55, 0xcf, 0x61, 0xa8, 0x40, 0x09, 0x00, 0x00,
}
