// Code generated by protoc-gen-go. DO NOT EDIT.
// source: relay.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RelayOrderStatus int32

const (
	RelayOrderStatus_unknown    RelayOrderStatus = 0
	RelayOrderStatus_pending    RelayOrderStatus = 1
	RelayOrderStatus_locking    RelayOrderStatus = 2
	RelayOrderStatus_confirming RelayOrderStatus = 3
	RelayOrderStatus_finished   RelayOrderStatus = 4
	RelayOrderStatus_canceled   RelayOrderStatus = 5
	RelayOrderStatus_timeout    RelayOrderStatus = 6
)

var RelayOrderStatus_name = map[int32]string{
	0: "unknown",
	1: "pending",
	2: "locking",
	3: "confirming",
	4: "finished",
	5: "canceled",
	6: "timeout",
}
var RelayOrderStatus_value = map[string]int32{
	"unknown":    0,
	"pending":    1,
	"locking":    2,
	"confirming": 3,
	"finished":   4,
	"canceled":   5,
	"timeout":    6,
}

func (x RelayOrderStatus) String() string {
	return proto.EnumName(RelayOrderStatus_name, int32(x))
}
func (RelayOrderStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type RelayAction struct {
	// Types that are valid to be assigned to Value:
	//	*RelayAction_Rsell
	//	*RelayAction_Rrevokesell
	//	*RelayAction_Rbuy
	//	*RelayAction_Rrevokebuy
	//	*RelayAction_Rconfirmtx
	//	*RelayAction_Rverify
	//	*RelayAction_Rverifybtc
	Value isRelayAction_Value `protobuf_oneof:"value"`
	Ty    int32               `protobuf:"varint,10,opt,name=ty" json:"ty,omitempty"`
}

func (m *RelayAction) Reset()                    { *m = RelayAction{} }
func (m *RelayAction) String() string            { return proto.CompactTextString(m) }
func (*RelayAction) ProtoMessage()               {}
func (*RelayAction) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type isRelayAction_Value interface {
	isRelayAction_Value()
}

type RelayAction_Rsell struct {
	Rsell *RelaySell `protobuf:"bytes,1,opt,name=rsell,oneof"`
}
type RelayAction_Rrevokesell struct {
	Rrevokesell *RelayRevokeSell `protobuf:"bytes,2,opt,name=rrevokesell,oneof"`
}
type RelayAction_Rbuy struct {
	Rbuy *RelayBuy `protobuf:"bytes,3,opt,name=rbuy,oneof"`
}
type RelayAction_Rrevokebuy struct {
	Rrevokebuy *RelayRevokeBuy `protobuf:"bytes,4,opt,name=rrevokebuy,oneof"`
}
type RelayAction_Rconfirmtx struct {
	Rconfirmtx *RelayConfirmTx `protobuf:"bytes,5,opt,name=rconfirmtx,oneof"`
}
type RelayAction_Rverify struct {
	Rverify *RelayVerify `protobuf:"bytes,6,opt,name=rverify,oneof"`
}
type RelayAction_Rverifybtc struct {
	Rverifybtc *RelayVerifyBTC `protobuf:"bytes,7,opt,name=rverifybtc,oneof"`
}

func (*RelayAction_Rsell) isRelayAction_Value()       {}
func (*RelayAction_Rrevokesell) isRelayAction_Value() {}
func (*RelayAction_Rbuy) isRelayAction_Value()        {}
func (*RelayAction_Rrevokebuy) isRelayAction_Value()  {}
func (*RelayAction_Rconfirmtx) isRelayAction_Value()  {}
func (*RelayAction_Rverify) isRelayAction_Value()     {}
func (*RelayAction_Rverifybtc) isRelayAction_Value()  {}

func (m *RelayAction) GetValue() isRelayAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RelayAction) GetRsell() *RelaySell {
	if x, ok := m.GetValue().(*RelayAction_Rsell); ok {
		return x.Rsell
	}
	return nil
}

func (m *RelayAction) GetRrevokesell() *RelayRevokeSell {
	if x, ok := m.GetValue().(*RelayAction_Rrevokesell); ok {
		return x.Rrevokesell
	}
	return nil
}

func (m *RelayAction) GetRbuy() *RelayBuy {
	if x, ok := m.GetValue().(*RelayAction_Rbuy); ok {
		return x.Rbuy
	}
	return nil
}

func (m *RelayAction) GetRrevokebuy() *RelayRevokeBuy {
	if x, ok := m.GetValue().(*RelayAction_Rrevokebuy); ok {
		return x.Rrevokebuy
	}
	return nil
}

func (m *RelayAction) GetRconfirmtx() *RelayConfirmTx {
	if x, ok := m.GetValue().(*RelayAction_Rconfirmtx); ok {
		return x.Rconfirmtx
	}
	return nil
}

func (m *RelayAction) GetRverify() *RelayVerify {
	if x, ok := m.GetValue().(*RelayAction_Rverify); ok {
		return x.Rverify
	}
	return nil
}

func (m *RelayAction) GetRverifybtc() *RelayVerifyBTC {
	if x, ok := m.GetValue().(*RelayAction_Rverifybtc); ok {
		return x.Rverifybtc
	}
	return nil
}

func (m *RelayAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RelayAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RelayAction_OneofMarshaler, _RelayAction_OneofUnmarshaler, _RelayAction_OneofSizer, []interface{}{
		(*RelayAction_Rsell)(nil),
		(*RelayAction_Rrevokesell)(nil),
		(*RelayAction_Rbuy)(nil),
		(*RelayAction_Rrevokebuy)(nil),
		(*RelayAction_Rconfirmtx)(nil),
		(*RelayAction_Rverify)(nil),
		(*RelayAction_Rverifybtc)(nil),
	}
}

func _RelayAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RelayAction)
	// value
	switch x := m.Value.(type) {
	case *RelayAction_Rsell:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rsell); err != nil {
			return err
		}
	case *RelayAction_Rrevokesell:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rrevokesell); err != nil {
			return err
		}
	case *RelayAction_Rbuy:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rbuy); err != nil {
			return err
		}
	case *RelayAction_Rrevokebuy:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rrevokebuy); err != nil {
			return err
		}
	case *RelayAction_Rconfirmtx:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rconfirmtx); err != nil {
			return err
		}
	case *RelayAction_Rverify:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rverify); err != nil {
			return err
		}
	case *RelayAction_Rverifybtc:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rverifybtc); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RelayAction.Value has unexpected type %T", x)
	}
	return nil
}

func _RelayAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RelayAction)
	switch tag {
	case 1: // value.rsell
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelaySell)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_Rsell{msg}
		return true, err
	case 2: // value.rrevokesell
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelayRevokeSell)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_Rrevokesell{msg}
		return true, err
	case 3: // value.rbuy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelayBuy)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_Rbuy{msg}
		return true, err
	case 4: // value.rrevokebuy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelayRevokeBuy)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_Rrevokebuy{msg}
		return true, err
	case 5: // value.rconfirmtx
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelayConfirmTx)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_Rconfirmtx{msg}
		return true, err
	case 6: // value.rverify
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelayVerify)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_Rverify{msg}
		return true, err
	case 7: // value.rverifybtc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelayVerifyBTC)
		err := b.DecodeMessage(msg)
		m.Value = &RelayAction_Rverifybtc{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RelayAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RelayAction)
	// value
	switch x := m.Value.(type) {
	case *RelayAction_Rsell:
		s := proto.Size(x.Rsell)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RelayAction_Rrevokesell:
		s := proto.Size(x.Rrevokesell)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RelayAction_Rbuy:
		s := proto.Size(x.Rbuy)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RelayAction_Rrevokebuy:
		s := proto.Size(x.Rrevokebuy)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RelayAction_Rconfirmtx:
		s := proto.Size(x.Rconfirmtx)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RelayAction_Rverify:
		s := proto.Size(x.Rverify)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RelayAction_Rverifybtc:
		s := proto.Size(x.Rverifybtc)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RelaySell struct {
	Sellamount int64 `protobuf:"varint,1,opt,name=sellamount" json:"sellamount,omitempty"`
	// string selladdr          	= 2；   //自身帐号，如果自己是外链账户，需要填
	// string  selltoken		   	= 3;    //卖的token  当前缺省是BTY
	Exchgcoin      string `protobuf:"bytes,4,opt,name=exchgcoin" json:"exchgcoin,omitempty"`
	Exchgamount    int64  `protobuf:"varint,5,opt,name=exchgamount" json:"exchgamount,omitempty"`
	Exchgaddr      string `protobuf:"bytes,6,opt,name=exchgaddr" json:"exchgaddr,omitempty"`
	Waitcoinblocks int32  `protobuf:"varint,7,opt,name=waitcoinblocks" json:"waitcoinblocks,omitempty"`
}

func (m *RelaySell) Reset()                    { *m = RelaySell{} }
func (m *RelaySell) String() string            { return proto.CompactTextString(m) }
func (*RelaySell) ProtoMessage()               {}
func (*RelaySell) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *RelaySell) GetSellamount() int64 {
	if m != nil {
		return m.Sellamount
	}
	return 0
}

func (m *RelaySell) GetExchgcoin() string {
	if m != nil {
		return m.Exchgcoin
	}
	return ""
}

func (m *RelaySell) GetExchgamount() int64 {
	if m != nil {
		return m.Exchgamount
	}
	return 0
}

func (m *RelaySell) GetExchgaddr() string {
	if m != nil {
		return m.Exchgaddr
	}
	return ""
}

func (m *RelaySell) GetWaitcoinblocks() int32 {
	if m != nil {
		return m.Waitcoinblocks
	}
	return 0
}

type RelayOrder struct {
	Orderid    string           `protobuf:"bytes,1,opt,name=orderid" json:"orderid,omitempty"`
	Status     RelayOrderStatus `protobuf:"varint,2,opt,name=status,enum=types.RelayOrderStatus" json:"status,omitempty"`
	Sellamount int64            `protobuf:"varint,3,opt,name=sellamount" json:"sellamount,omitempty"`
	// string selltoken          = 4;
	Selladdr       string `protobuf:"bytes,5,opt,name=selladdr" json:"selladdr,omitempty"`
	Exchgcoin      string `protobuf:"bytes,6,opt,name=exchgcoin" json:"exchgcoin,omitempty"`
	Exchgamount    int64  `protobuf:"varint,7,opt,name=exchgamount" json:"exchgamount,omitempty"`
	Exchgaddr      string `protobuf:"bytes,8,opt,name=exchgaddr" json:"exchgaddr,omitempty"`
	Exchgtxhash    string `protobuf:"bytes,9,opt,name=exchgtxhash" json:"exchgtxhash,omitempty"`
	Waitcoinblocks int32  `protobuf:"varint,10,opt,name=waitcoinblocks" json:"waitcoinblocks,omitempty"`
	Createtime     int64  `protobuf:"varint,11,opt,name=createtime" json:"createtime,omitempty"`
	Buyeraddr      string `protobuf:"bytes,12,opt,name=buyeraddr" json:"buyeraddr,omitempty"`
	// string buytxhash          = 13;
	Buytime         int64 `protobuf:"varint,14,opt,name=buytime" json:"buytime,omitempty"`
	Buyercoinheight int64 `protobuf:"varint,15,opt,name=buyercoinheight" json:"buyercoinheight,omitempty"`
	Confirmtime     int64 `protobuf:"varint,16,opt,name=confirmtime" json:"confirmtime,omitempty"`
	// int32  lockingtime        = 17;    //buyer交易验证不通过时候 订单重新锁定时间
	// int32  lockingtimes       = 18;    //buyer 提交coin交易hash待验证的次数，如果超过3次未验证通过 则seller随时可以收回（unlock）交易
	Finishtime   int64  `protobuf:"varint,19,opt,name=finishtime" json:"finishtime,omitempty"`
	Finishresult string `protobuf:"bytes,20,opt,name=finishresult" json:"finishresult,omitempty"`
	Height       int64  `protobuf:"varint,21,opt,name=height" json:"height,omitempty"`
}

func (m *RelayOrder) Reset()                    { *m = RelayOrder{} }
func (m *RelayOrder) String() string            { return proto.CompactTextString(m) }
func (*RelayOrder) ProtoMessage()               {}
func (*RelayOrder) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *RelayOrder) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *RelayOrder) GetStatus() RelayOrderStatus {
	if m != nil {
		return m.Status
	}
	return RelayOrderStatus_unknown
}

func (m *RelayOrder) GetSellamount() int64 {
	if m != nil {
		return m.Sellamount
	}
	return 0
}

func (m *RelayOrder) GetSelladdr() string {
	if m != nil {
		return m.Selladdr
	}
	return ""
}

func (m *RelayOrder) GetExchgcoin() string {
	if m != nil {
		return m.Exchgcoin
	}
	return ""
}

func (m *RelayOrder) GetExchgamount() int64 {
	if m != nil {
		return m.Exchgamount
	}
	return 0
}

func (m *RelayOrder) GetExchgaddr() string {
	if m != nil {
		return m.Exchgaddr
	}
	return ""
}

func (m *RelayOrder) GetExchgtxhash() string {
	if m != nil {
		return m.Exchgtxhash
	}
	return ""
}

func (m *RelayOrder) GetWaitcoinblocks() int32 {
	if m != nil {
		return m.Waitcoinblocks
	}
	return 0
}

func (m *RelayOrder) GetCreatetime() int64 {
	if m != nil {
		return m.Createtime
	}
	return 0
}

func (m *RelayOrder) GetBuyeraddr() string {
	if m != nil {
		return m.Buyeraddr
	}
	return ""
}

func (m *RelayOrder) GetBuytime() int64 {
	if m != nil {
		return m.Buytime
	}
	return 0
}

func (m *RelayOrder) GetBuyercoinheight() int64 {
	if m != nil {
		return m.Buyercoinheight
	}
	return 0
}

func (m *RelayOrder) GetConfirmtime() int64 {
	if m != nil {
		return m.Confirmtime
	}
	return 0
}

func (m *RelayOrder) GetFinishtime() int64 {
	if m != nil {
		return m.Finishtime
	}
	return 0
}

func (m *RelayOrder) GetFinishresult() string {
	if m != nil {
		return m.Finishresult
	}
	return ""
}

func (m *RelayOrder) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type RelayBuy struct {
	Orderid string `protobuf:"bytes,1,opt,name=orderid" json:"orderid,omitempty"`
}

func (m *RelayBuy) Reset()                    { *m = RelayBuy{} }
func (m *RelayBuy) String() string            { return proto.CompactTextString(m) }
func (*RelayBuy) ProtoMessage()               {}
func (*RelayBuy) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *RelayBuy) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

// 允许撤销卖单
type RelayRevokeSell struct {
	Orderid string `protobuf:"bytes,1,opt,name=orderid" json:"orderid,omitempty"`
}

func (m *RelayRevokeSell) Reset()                    { *m = RelayRevokeSell{} }
func (m *RelayRevokeSell) String() string            { return proto.CompactTextString(m) }
func (*RelayRevokeSell) ProtoMessage()               {}
func (*RelayRevokeSell) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *RelayRevokeSell) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

// 允许撤销买单
type RelayRevokeBuy struct {
	Orderid string `protobuf:"bytes,1,opt,name=orderid" json:"orderid,omitempty"`
}

func (m *RelayRevokeBuy) Reset()                    { *m = RelayRevokeBuy{} }
func (m *RelayRevokeBuy) String() string            { return proto.CompactTextString(m) }
func (*RelayRevokeBuy) ProtoMessage()               {}
func (*RelayRevokeBuy) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *RelayRevokeBuy) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

// 客户只用交易hash提交， 验证需要的其他信息由relayd提供
type RelayConfirmTx struct {
	Orderid string `protobuf:"bytes,1,opt,name=orderid" json:"orderid,omitempty"`
	Txhash  string `protobuf:"bytes,2,opt,name=txhash" json:"txhash,omitempty"`
}

func (m *RelayConfirmTx) Reset()                    { *m = RelayConfirmTx{} }
func (m *RelayConfirmTx) String() string            { return proto.CompactTextString(m) }
func (*RelayConfirmTx) ProtoMessage()               {}
func (*RelayConfirmTx) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

func (m *RelayConfirmTx) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *RelayConfirmTx) GetTxhash() string {
	if m != nil {
		return m.Txhash
	}
	return ""
}

// relayd提供验证信息
type RelayVerify struct {
	Orderid string          `protobuf:"bytes,1,opt,name=orderid" json:"orderid,omitempty"`
	Tx      *BtcTransaction `protobuf:"bytes,2,opt,name=tx" json:"tx,omitempty"`
	Spv     *BtcSpv         `protobuf:"bytes,3,opt,name=spv" json:"spv,omitempty"`
}

func (m *RelayVerify) Reset()                    { *m = RelayVerify{} }
func (m *RelayVerify) String() string            { return proto.CompactTextString(m) }
func (*RelayVerify) ProtoMessage()               {}
func (*RelayVerify) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

func (m *RelayVerify) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *RelayVerify) GetTx() *BtcTransaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *RelayVerify) GetSpv() *BtcSpv {
	if m != nil {
		return m.Spv
	}
	return nil
}

// 客户自己提供原始交易信息来验证
type RelayVerifyBTC struct {
	Orderid    string `protobuf:"bytes,1,opt,name=orderid" json:"orderid,omitempty"`
	Rawtx      string `protobuf:"bytes,2,opt,name=rawtx" json:"rawtx,omitempty"`
	Txindex    uint32 `protobuf:"varint,3,opt,name=txindex" json:"txindex,omitempty"`
	Merkbranch string `protobuf:"bytes,4,opt,name=merkbranch" json:"merkbranch,omitempty"`
	Blockhash  string `protobuf:"bytes,5,opt,name=blockhash" json:"blockhash,omitempty"`
}

func (m *RelayVerifyBTC) Reset()                    { *m = RelayVerifyBTC{} }
func (m *RelayVerifyBTC) String() string            { return proto.CompactTextString(m) }
func (*RelayVerifyBTC) ProtoMessage()               {}
func (*RelayVerifyBTC) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{8} }

func (m *RelayVerifyBTC) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *RelayVerifyBTC) GetRawtx() string {
	if m != nil {
		return m.Rawtx
	}
	return ""
}

func (m *RelayVerifyBTC) GetTxindex() uint32 {
	if m != nil {
		return m.Txindex
	}
	return 0
}

func (m *RelayVerifyBTC) GetMerkbranch() string {
	if m != nil {
		return m.Merkbranch
	}
	return ""
}

func (m *RelayVerifyBTC) GetBlockhash() string {
	if m != nil {
		return m.Blockhash
	}
	return ""
}

type BtcHeader struct {
	Hash          string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Confirmations uint64 `protobuf:"varint,2,opt,name=confirmations" json:"confirmations,omitempty"`
	Height        uint64 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	MerkleRoot    string `protobuf:"bytes,4,opt,name=merkleRoot" json:"merkleRoot,omitempty"`
	Time          int64  `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
	Nonce         int64  `protobuf:"varint,6,opt,name=nonce" json:"nonce,omitempty"`
	Bits          int64  `protobuf:"varint,7,opt,name=bits" json:"bits,omitempty"`
	Difficulty    int64  `protobuf:"varint,8,opt,name=difficulty" json:"difficulty,omitempty"`
	PreviousHash  string `protobuf:"bytes,9,opt,name=previousHash" json:"previousHash,omitempty"`
	NextHash      string `protobuf:"bytes,10,opt,name=nextHash" json:"nextHash,omitempty"`
}

func (m *BtcHeader) Reset()                    { *m = BtcHeader{} }
func (m *BtcHeader) String() string            { return proto.CompactTextString(m) }
func (*BtcHeader) ProtoMessage()               {}
func (*BtcHeader) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{9} }

func (m *BtcHeader) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BtcHeader) GetConfirmations() uint64 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *BtcHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BtcHeader) GetMerkleRoot() string {
	if m != nil {
		return m.MerkleRoot
	}
	return ""
}

func (m *BtcHeader) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BtcHeader) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BtcHeader) GetBits() int64 {
	if m != nil {
		return m.Bits
	}
	return 0
}

func (m *BtcHeader) GetDifficulty() int64 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

func (m *BtcHeader) GetPreviousHash() string {
	if m != nil {
		return m.PreviousHash
	}
	return ""
}

func (m *BtcHeader) GetNextHash() string {
	if m != nil {
		return m.NextHash
	}
	return ""
}

type BtcTransaction struct {
	Hash          string  `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	BlockHeight   uint64  `protobuf:"varint,2,opt,name=blockHeight" json:"blockHeight,omitempty"`
	Vin           []*Vin  `protobuf:"bytes,3,rep,name=vin" json:"vin,omitempty"`
	Vout          []*Vout `protobuf:"bytes,4,rep,name=vout" json:"vout,omitempty"`
	Time          int64   `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
	Confirmations uint64  `protobuf:"varint,6,opt,name=confirmations" json:"confirmations,omitempty"`
}

func (m *BtcTransaction) Reset()                    { *m = BtcTransaction{} }
func (m *BtcTransaction) String() string            { return proto.CompactTextString(m) }
func (*BtcTransaction) ProtoMessage()               {}
func (*BtcTransaction) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{10} }

func (m *BtcTransaction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BtcTransaction) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *BtcTransaction) GetVin() []*Vin {
	if m != nil {
		return m.Vin
	}
	return nil
}

func (m *BtcTransaction) GetVout() []*Vout {
	if m != nil {
		return m.Vout
	}
	return nil
}

func (m *BtcTransaction) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BtcTransaction) GetConfirmations() uint64 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

type Vin struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Value   uint64 `protobuf:"varint,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *Vin) Reset()                    { *m = Vin{} }
func (m *Vin) String() string            { return proto.CompactTextString(m) }
func (*Vin) ProtoMessage()               {}
func (*Vin) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{11} }

func (m *Vin) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Vin) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Vout struct {
	Coinbase bool   `protobuf:"varint,1,opt,name=coinbase" json:"coinbase,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Value    uint64 `protobuf:"varint,3,opt,name=Value" json:"Value,omitempty"`
}

func (m *Vout) Reset()                    { *m = Vout{} }
func (m *Vout) String() string            { return proto.CompactTextString(m) }
func (*Vout) ProtoMessage()               {}
func (*Vout) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{12} }

func (m *Vout) GetCoinbase() bool {
	if m != nil {
		return m.Coinbase
	}
	return false
}

func (m *Vout) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Vout) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type BtcSpv struct {
	Hash        string   `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Time        int64    `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Height      uint64   `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	BlockHash   string   `protobuf:"bytes,4,opt,name=blockHash" json:"blockHash,omitempty"`
	TxIndex     uint64   `protobuf:"varint,5,opt,name=txIndex" json:"txIndex,omitempty"`
	BranchProof [][]byte `protobuf:"bytes,6,rep,name=branchProof,proto3" json:"branchProof,omitempty"`
}

func (m *BtcSpv) Reset()                    { *m = BtcSpv{} }
func (m *BtcSpv) String() string            { return proto.CompactTextString(m) }
func (*BtcSpv) ProtoMessage()               {}
func (*BtcSpv) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{13} }

func (m *BtcSpv) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BtcSpv) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BtcSpv) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BtcSpv) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *BtcSpv) GetTxIndex() uint64 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

func (m *BtcSpv) GetBranchProof() [][]byte {
	if m != nil {
		return m.BranchProof
	}
	return nil
}

type ReceiptRelayBase struct {
	Orderid    string           `protobuf:"bytes,1,opt,name=orderid" json:"orderid,omitempty"`
	Status     RelayOrderStatus `protobuf:"varint,2,opt,name=status,enum=types.RelayOrderStatus" json:"status,omitempty"`
	Owner      string           `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
	Sellamount int64            `protobuf:"varint,4,opt,name=sellamount" json:"sellamount,omitempty"`
	// string selltoken			= 5;
	Exchgcoin      string `protobuf:"bytes,6,opt,name=exchgcoin" json:"exchgcoin,omitempty"`
	Exchgamount    int64  `protobuf:"varint,7,opt,name=exchgamount" json:"exchgamount,omitempty"`
	Exchgaddr      string `protobuf:"bytes,8,opt,name=exchgaddr" json:"exchgaddr,omitempty"`
	Exchgtxhash    string `protobuf:"bytes,9,opt,name=exchgtxhash" json:"exchgtxhash,omitempty"`
	Waitcoinblocks int32  `protobuf:"varint,10,opt,name=waitcoinblocks" json:"waitcoinblocks,omitempty"`
	Createtime     int64  `protobuf:"varint,11,opt,name=createtime" json:"createtime,omitempty"`
	Buyeraddr      string `protobuf:"bytes,12,opt,name=buyeraddr" json:"buyeraddr,omitempty"`
	Buyertime      int64  `protobuf:"varint,13,opt,name=buyertime" json:"buyertime,omitempty"`
	Finishtime     int64  `protobuf:"varint,14,opt,name=finishtime" json:"finishtime,omitempty"`
	Finishresult   string `protobuf:"bytes,15,opt,name=finishresult" json:"finishresult,omitempty"`
}

func (m *ReceiptRelayBase) Reset()                    { *m = ReceiptRelayBase{} }
func (m *ReceiptRelayBase) String() string            { return proto.CompactTextString(m) }
func (*ReceiptRelayBase) ProtoMessage()               {}
func (*ReceiptRelayBase) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{14} }

func (m *ReceiptRelayBase) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *ReceiptRelayBase) GetStatus() RelayOrderStatus {
	if m != nil {
		return m.Status
	}
	return RelayOrderStatus_unknown
}

func (m *ReceiptRelayBase) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ReceiptRelayBase) GetSellamount() int64 {
	if m != nil {
		return m.Sellamount
	}
	return 0
}

func (m *ReceiptRelayBase) GetExchgcoin() string {
	if m != nil {
		return m.Exchgcoin
	}
	return ""
}

func (m *ReceiptRelayBase) GetExchgamount() int64 {
	if m != nil {
		return m.Exchgamount
	}
	return 0
}

func (m *ReceiptRelayBase) GetExchgaddr() string {
	if m != nil {
		return m.Exchgaddr
	}
	return ""
}

func (m *ReceiptRelayBase) GetExchgtxhash() string {
	if m != nil {
		return m.Exchgtxhash
	}
	return ""
}

func (m *ReceiptRelayBase) GetWaitcoinblocks() int32 {
	if m != nil {
		return m.Waitcoinblocks
	}
	return 0
}

func (m *ReceiptRelayBase) GetCreatetime() int64 {
	if m != nil {
		return m.Createtime
	}
	return 0
}

func (m *ReceiptRelayBase) GetBuyeraddr() string {
	if m != nil {
		return m.Buyeraddr
	}
	return ""
}

func (m *ReceiptRelayBase) GetBuyertime() int64 {
	if m != nil {
		return m.Buyertime
	}
	return 0
}

func (m *ReceiptRelayBase) GetFinishtime() int64 {
	if m != nil {
		return m.Finishtime
	}
	return 0
}

func (m *ReceiptRelayBase) GetFinishresult() string {
	if m != nil {
		return m.Finishresult
	}
	return ""
}

type ReceiptRelaySell struct {
	Base *ReceiptRelayBase `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *ReceiptRelaySell) Reset()                    { *m = ReceiptRelaySell{} }
func (m *ReceiptRelaySell) String() string            { return proto.CompactTextString(m) }
func (*ReceiptRelaySell) ProtoMessage()               {}
func (*ReceiptRelaySell) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{15} }

func (m *ReceiptRelaySell) GetBase() *ReceiptRelayBase {
	if m != nil {
		return m.Base
	}
	return nil
}

type ReceiptRelayBuy struct {
	Orderid     string           `protobuf:"bytes,1,opt,name=orderid" json:"orderid,omitempty"`
	Status      RelayOrderStatus `protobuf:"varint,2,opt,name=status,enum=types.RelayOrderStatus" json:"status,omitempty"`
	Buyeraddr   string           `protobuf:"bytes,3,opt,name=buyeraddr" json:"buyeraddr,omitempty"`
	Buyamount   int64            `protobuf:"varint,4,opt,name=buyamount" json:"buyamount,omitempty"`
	Buytxhash   string           `protobuf:"bytes,5,opt,name=buytxhash" json:"buytxhash,omitempty"`
	Exchgcoin   string           `protobuf:"bytes,6,opt,name=exchgcoin" json:"exchgcoin,omitempty"`
	Exchgamount int64            `protobuf:"varint,7,opt,name=exchgamount" json:"exchgamount,omitempty"`
	Exchgaddr   string           `protobuf:"bytes,8,opt,name=exchgaddr" json:"exchgaddr,omitempty"`
	Exchgtxhash string           `protobuf:"bytes,9,opt,name=exchgtxhash" json:"exchgtxhash,omitempty"`
}

func (m *ReceiptRelayBuy) Reset()                    { *m = ReceiptRelayBuy{} }
func (m *ReceiptRelayBuy) String() string            { return proto.CompactTextString(m) }
func (*ReceiptRelayBuy) ProtoMessage()               {}
func (*ReceiptRelayBuy) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{16} }

func (m *ReceiptRelayBuy) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *ReceiptRelayBuy) GetStatus() RelayOrderStatus {
	if m != nil {
		return m.Status
	}
	return RelayOrderStatus_unknown
}

func (m *ReceiptRelayBuy) GetBuyeraddr() string {
	if m != nil {
		return m.Buyeraddr
	}
	return ""
}

func (m *ReceiptRelayBuy) GetBuyamount() int64 {
	if m != nil {
		return m.Buyamount
	}
	return 0
}

func (m *ReceiptRelayBuy) GetBuytxhash() string {
	if m != nil {
		return m.Buytxhash
	}
	return ""
}

func (m *ReceiptRelayBuy) GetExchgcoin() string {
	if m != nil {
		return m.Exchgcoin
	}
	return ""
}

func (m *ReceiptRelayBuy) GetExchgamount() int64 {
	if m != nil {
		return m.Exchgamount
	}
	return 0
}

func (m *ReceiptRelayBuy) GetExchgaddr() string {
	if m != nil {
		return m.Exchgaddr
	}
	return ""
}

func (m *ReceiptRelayBuy) GetExchgtxhash() string {
	if m != nil {
		return m.Exchgtxhash
	}
	return ""
}

type ReceiptRelayRevoke struct {
	Base *ReceiptRelayBase `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *ReceiptRelayRevoke) Reset()                    { *m = ReceiptRelayRevoke{} }
func (m *ReceiptRelayRevoke) String() string            { return proto.CompactTextString(m) }
func (*ReceiptRelayRevoke) ProtoMessage()               {}
func (*ReceiptRelayRevoke) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{17} }

func (m *ReceiptRelayRevoke) GetBase() *ReceiptRelayBase {
	if m != nil {
		return m.Base
	}
	return nil
}

type ReceiptRelayConfirm struct {
	Base *ReceiptRelayBuy `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *ReceiptRelayConfirm) Reset()                    { *m = ReceiptRelayConfirm{} }
func (m *ReceiptRelayConfirm) String() string            { return proto.CompactTextString(m) }
func (*ReceiptRelayConfirm) ProtoMessage()               {}
func (*ReceiptRelayConfirm) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{18} }

func (m *ReceiptRelayConfirm) GetBase() *ReceiptRelayBuy {
	if m != nil {
		return m.Base
	}
	return nil
}

type ReceiptRelayVerify struct {
	Base *ReceiptRelayBase `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *ReceiptRelayVerify) Reset()                    { *m = ReceiptRelayVerify{} }
func (m *ReceiptRelayVerify) String() string            { return proto.CompactTextString(m) }
func (*ReceiptRelayVerify) ProtoMessage()               {}
func (*ReceiptRelayVerify) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{19} }

func (m *ReceiptRelayVerify) GetBase() *ReceiptRelayBase {
	if m != nil {
		return m.Base
	}
	return nil
}

type ReqRelayAddrCoins struct {
	Addr       string           `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Status     RelayOrderStatus `protobuf:"varint,2,opt,name=status,enum=types.RelayOrderStatus" json:"status,omitempty"`
	Coins      []string         `protobuf:"bytes,3,rep,name=coins" json:"coins,omitempty"`
	PageNumber int32            `protobuf:"varint,4,opt,name=pageNumber" json:"pageNumber,omitempty"`
	PageSize   int32            `protobuf:"varint,5,opt,name=pageSize" json:"pageSize,omitempty"`
}

func (m *ReqRelayAddrCoins) Reset()                    { *m = ReqRelayAddrCoins{} }
func (m *ReqRelayAddrCoins) String() string            { return proto.CompactTextString(m) }
func (*ReqRelayAddrCoins) ProtoMessage()               {}
func (*ReqRelayAddrCoins) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{20} }

func (m *ReqRelayAddrCoins) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReqRelayAddrCoins) GetStatus() RelayOrderStatus {
	if m != nil {
		return m.Status
	}
	return RelayOrderStatus_unknown
}

func (m *ReqRelayAddrCoins) GetCoins() []string {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *ReqRelayAddrCoins) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *ReqRelayAddrCoins) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type ReplyRelayOrders struct {
	Relayorders []*RelayOrder `protobuf:"bytes,1,rep,name=relayorders" json:"relayorders,omitempty"`
}

func (m *ReplyRelayOrders) Reset()                    { *m = ReplyRelayOrders{} }
func (m *ReplyRelayOrders) String() string            { return proto.CompactTextString(m) }
func (*ReplyRelayOrders) ProtoMessage()               {}
func (*ReplyRelayOrders) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{21} }

func (m *ReplyRelayOrders) GetRelayorders() []*RelayOrder {
	if m != nil {
		return m.Relayorders
	}
	return nil
}

type QueryRelayOrderParam struct {
	Status  RelayOrderStatus `protobuf:"varint,1,opt,name=status,enum=types.RelayOrderStatus" json:"status,omitempty"`
	Orderid string           `protobuf:"bytes,2,opt,name=orderid" json:"orderid,omitempty"`
}

func (m *QueryRelayOrderParam) Reset()                    { *m = QueryRelayOrderParam{} }
func (m *QueryRelayOrderParam) String() string            { return proto.CompactTextString(m) }
func (*QueryRelayOrderParam) ProtoMessage()               {}
func (*QueryRelayOrderParam) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{22} }

func (m *QueryRelayOrderParam) GetStatus() RelayOrderStatus {
	if m != nil {
		return m.Status
	}
	return RelayOrderStatus_unknown
}

func (m *QueryRelayOrderParam) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

type QueryRelayOrderResult struct {
	Orders []*RelayOrder `protobuf:"bytes,1,rep,name=orders" json:"orders,omitempty"`
}

func (m *QueryRelayOrderResult) Reset()                    { *m = QueryRelayOrderResult{} }
func (m *QueryRelayOrderResult) String() string            { return proto.CompactTextString(m) }
func (*QueryRelayOrderResult) ProtoMessage()               {}
func (*QueryRelayOrderResult) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{23} }

func (m *QueryRelayOrderResult) GetOrders() []*RelayOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

func init() {
	proto.RegisterType((*RelayAction)(nil), "types.RelayAction")
	proto.RegisterType((*RelaySell)(nil), "types.RelaySell")
	proto.RegisterType((*RelayOrder)(nil), "types.RelayOrder")
	proto.RegisterType((*RelayBuy)(nil), "types.RelayBuy")
	proto.RegisterType((*RelayRevokeSell)(nil), "types.RelayRevokeSell")
	proto.RegisterType((*RelayRevokeBuy)(nil), "types.RelayRevokeBuy")
	proto.RegisterType((*RelayConfirmTx)(nil), "types.RelayConfirmTx")
	proto.RegisterType((*RelayVerify)(nil), "types.RelayVerify")
	proto.RegisterType((*RelayVerifyBTC)(nil), "types.RelayVerifyBTC")
	proto.RegisterType((*BtcHeader)(nil), "types.BtcHeader")
	proto.RegisterType((*BtcTransaction)(nil), "types.BtcTransaction")
	proto.RegisterType((*Vin)(nil), "types.Vin")
	proto.RegisterType((*Vout)(nil), "types.Vout")
	proto.RegisterType((*BtcSpv)(nil), "types.BtcSpv")
	proto.RegisterType((*ReceiptRelayBase)(nil), "types.ReceiptRelayBase")
	proto.RegisterType((*ReceiptRelaySell)(nil), "types.ReceiptRelaySell")
	proto.RegisterType((*ReceiptRelayBuy)(nil), "types.ReceiptRelayBuy")
	proto.RegisterType((*ReceiptRelayRevoke)(nil), "types.ReceiptRelayRevoke")
	proto.RegisterType((*ReceiptRelayConfirm)(nil), "types.ReceiptRelayConfirm")
	proto.RegisterType((*ReceiptRelayVerify)(nil), "types.ReceiptRelayVerify")
	proto.RegisterType((*ReqRelayAddrCoins)(nil), "types.ReqRelayAddrCoins")
	proto.RegisterType((*ReplyRelayOrders)(nil), "types.ReplyRelayOrders")
	proto.RegisterType((*QueryRelayOrderParam)(nil), "types.QueryRelayOrderParam")
	proto.RegisterType((*QueryRelayOrderResult)(nil), "types.QueryRelayOrderResult")
	proto.RegisterEnum("types.RelayOrderStatus", RelayOrderStatus_name, RelayOrderStatus_value)
}

func init() { proto.RegisterFile("relay.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 1286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x57, 0xc1, 0x6e, 0xdb, 0x46,
	0x13, 0xb6, 0x48, 0x51, 0xb6, 0x46, 0xb6, 0xac, 0x6c, 0x1c, 0xff, 0xc4, 0x8f, 0xa0, 0x31, 0x88,
	0xa4, 0x70, 0x13, 0xc0, 0x05, 0x12, 0x14, 0x05, 0x7a, 0x29, 0xe2, 0x1c, 0xea, 0x5e, 0xda, 0x74,
	0x1d, 0xf8, 0x4e, 0x51, 0x2b, 0x8b, 0x30, 0x45, 0xaa, 0xcb, 0xa5, 0x2c, 0xf6, 0x21, 0x7a, 0x2e,
	0xd0, 0x5b, 0x8f, 0xbd, 0xf5, 0xd2, 0x4b, 0x0f, 0x7d, 0x90, 0xbe, 0x4c, 0x31, 0xb3, 0x4b, 0x6a,
	0x29, 0x29, 0x72, 0x5d, 0x14, 0x28, 0xd0, 0x9b, 0x66, 0xe6, 0x9b, 0xdd, 0x99, 0x6f, 0x66, 0x67,
	0x28, 0xe8, 0x49, 0x91, 0x84, 0xe5, 0xd9, 0x4c, 0x66, 0x2a, 0x63, 0x9e, 0x2a, 0x67, 0x22, 0x0f,
	0xbe, 0x77, 0xa1, 0xc7, 0x51, 0xfd, 0x3a, 0x52, 0x71, 0x96, 0xb2, 0x53, 0xf0, 0x64, 0x2e, 0x92,
	0xc4, 0x6f, 0x9d, 0xb4, 0x4e, 0x7b, 0x2f, 0x07, 0x67, 0x04, 0x3b, 0x23, 0xc8, 0xa5, 0x48, 0x92,
	0x8b, 0x1d, 0xae, 0x01, 0xec, 0x33, 0xe8, 0x49, 0x29, 0xe6, 0xd9, 0x8d, 0x20, 0xbc, 0x43, 0xf8,
	0x63, 0x1b, 0xcf, 0xc9, 0x6a, 0xbc, 0x6c, 0x30, 0x7b, 0x06, 0x6d, 0x39, 0x2c, 0x4a, 0xdf, 0x25,
	0xa7, 0x43, 0xdb, 0xe9, 0xbc, 0x28, 0x2f, 0x76, 0x38, 0x99, 0xd9, 0xa7, 0x00, 0xc6, 0x0b, 0xc1,
	0x6d, 0x02, 0x3f, 0x5a, 0xbf, 0x41, 0xbb, 0x58, 0x50, 0x72, 0x8c, 0xb2, 0x74, 0x1c, 0xcb, 0xa9,
	0x5a, 0xf8, 0xde, 0xba, 0xe3, 0x1b, 0x6d, 0x7c, 0xb7, 0x20, 0xc7, 0x1a, 0xca, 0xce, 0x60, 0x57,
	0xce, 0x85, 0x8c, 0xc7, 0xa5, 0xdf, 0x21, 0x2f, 0x66, 0x7b, 0x5d, 0x91, 0xe5, 0x62, 0x87, 0x57,
	0x20, 0xba, 0x48, 0xff, 0x1c, 0xaa, 0xc8, 0xdf, 0x5d, 0xbf, 0x48, 0xbb, 0x9c, 0xbf, 0x7b, 0x43,
	0x17, 0xd5, 0x50, 0xd6, 0x07, 0x47, 0x95, 0x3e, 0x9c, 0xb4, 0x4e, 0x3d, 0xee, 0xa8, 0xf2, 0x7c,
	0x17, 0xbc, 0x79, 0x98, 0x14, 0x22, 0xf8, 0xa5, 0x05, 0xdd, 0x9a, 0x6d, 0xf6, 0x01, 0x00, 0x12,
	0x16, 0x4e, 0xb3, 0x22, 0x55, 0x54, 0x13, 0x97, 0x5b, 0x1a, 0xf6, 0x18, 0xba, 0x62, 0x11, 0x4d,
	0xae, 0xa3, 0x2c, 0x4e, 0x89, 0xa0, 0x2e, 0x5f, 0x2a, 0xd8, 0x09, 0xf4, 0x48, 0x30, 0xee, 0x1e,
	0xb9, 0xdb, 0xaa, 0xda, 0x3f, 0x1c, 0x8d, 0x24, 0x65, 0x5c, 0xf9, 0xa3, 0x82, 0x7d, 0x08, 0xfd,
	0xdb, 0x30, 0x56, 0x78, 0xd6, 0x30, 0xc9, 0xa2, 0x9b, 0x9c, 0x32, 0xf4, 0xf8, 0x8a, 0x36, 0xf8,
	0xad, 0x0d, 0x40, 0x31, 0x7f, 0x2d, 0x47, 0x42, 0x32, 0x1f, 0x76, 0x33, 0xfc, 0x11, 0x8f, 0x28,
	0xe2, 0x2e, 0xaf, 0x44, 0xf6, 0x31, 0x74, 0x72, 0x15, 0xaa, 0x22, 0xa7, 0x76, 0xe9, 0xbf, 0xfc,
	0x9f, 0x4d, 0x15, 0x39, 0x5f, 0x92, 0x99, 0x1b, 0xd8, 0x4a, 0xfe, 0xee, 0x5a, 0xfe, 0xff, 0x87,
	0x3d, 0x92, 0x30, 0x7c, 0x8f, 0xee, 0xaa, 0xe5, 0x26, 0x37, 0x9d, 0x3b, 0xb8, 0xd9, 0xbd, 0x83,
	0x9b, 0xbd, 0x55, 0x6e, 0x2a, 0x7f, 0xb5, 0x98, 0x84, 0xf9, 0xc4, 0xef, 0x92, 0xdd, 0x56, 0x6d,
	0x60, 0x0f, 0x36, 0xb1, 0x87, 0x39, 0x46, 0x52, 0x84, 0x4a, 0xa8, 0x78, 0x2a, 0xfc, 0x9e, 0xce,
	0x71, 0xa9, 0xc1, 0x38, 0x86, 0x45, 0x29, 0x24, 0xc5, 0xb1, 0xaf, 0xe3, 0xa8, 0x15, 0x48, 0xf6,
	0xb0, 0x28, 0xc9, 0xb5, 0x4f, 0xae, 0x95, 0xc8, 0x4e, 0xe1, 0x90, 0x60, 0x78, 0xd5, 0x44, 0xc4,
	0xd7, 0x13, 0xe5, 0x1f, 0x12, 0x62, 0x55, 0x8d, 0xb9, 0x54, 0x4f, 0x00, 0xcf, 0x19, 0x68, 0x2e,
	0x2c, 0x15, 0xc6, 0x38, 0x8e, 0xd3, 0x38, 0x9f, 0x10, 0xe0, 0xa1, 0x8e, 0x71, 0xa9, 0x61, 0x01,
	0xec, 0x6b, 0x49, 0x8a, 0xbc, 0x48, 0x94, 0x7f, 0x44, 0x61, 0x36, 0x74, 0xec, 0x18, 0x3a, 0x26,
	0x8c, 0x47, 0xe4, 0x6f, 0xa4, 0xe0, 0x29, 0xec, 0x55, 0x2f, 0xff, 0xfd, 0xad, 0x13, 0xbc, 0x80,
	0xc3, 0x95, 0xa1, 0xb2, 0x05, 0xfc, 0x1c, 0xfa, 0xcd, 0xf9, 0xb0, 0x05, 0x7b, 0x6e, 0xb0, 0xf5,
	0x48, 0xd8, 0xd2, 0xbf, 0xc7, 0xd0, 0x31, 0xf5, 0x76, 0xc8, 0x60, 0xa4, 0x20, 0x33, 0x43, 0x54,
	0xbf, 0xf6, 0x2d, 0x07, 0x3c, 0x03, 0x47, 0x2d, 0xcc, 0xac, 0xac, 0xe6, 0xc4, 0xb9, 0x8a, 0xde,
	0xc9, 0x30, 0xcd, 0x43, 0x9a, 0xc0, 0xdc, 0x51, 0x0b, 0xf6, 0x04, 0xdc, 0x7c, 0x36, 0x37, 0xe3,
	0xf1, 0x60, 0x89, 0xbb, 0x9c, 0xcd, 0x39, 0x5a, 0x82, 0x1f, 0x5a, 0x26, 0xea, 0x7a, 0xbe, 0x6c,
	0xb9, 0xf4, 0x08, 0x3c, 0x19, 0xde, 0x9a, 0x7b, 0xbb, 0x5c, 0x0b, 0x88, 0x57, 0x8b, 0x38, 0x1d,
	0x89, 0x05, 0xdd, 0x73, 0xc0, 0x2b, 0x11, 0x8b, 0x3d, 0x15, 0xf2, 0x66, 0x28, 0xc3, 0x34, 0x9a,
	0x98, 0xa9, 0x62, 0x69, 0xa8, 0x21, 0xb1, 0x75, 0x89, 0x08, 0xcf, 0x34, 0x64, 0xa5, 0x08, 0x7e,
	0x74, 0xa0, 0x7b, 0xae, 0xa2, 0x0b, 0x11, 0xe2, 0x2c, 0x60, 0xd0, 0x26, 0x98, 0x0e, 0x89, 0x7e,
	0xb3, 0xa7, 0x70, 0x60, 0x7a, 0x2b, 0xc4, 0x8c, 0xf5, 0x30, 0x68, 0xf3, 0xa6, 0xd2, 0x6a, 0x17,
	0x97, 0xcc, 0x46, 0xaa, 0xa2, 0x4b, 0x04, 0xcf, 0x32, 0x65, 0x47, 0xa7, 0x35, 0x78, 0x23, 0x35,
	0xa9, 0x9e, 0x76, 0xf4, 0x1b, 0x19, 0x48, 0xb3, 0x34, 0x12, 0x34, 0x06, 0x5c, 0xae, 0x05, 0x44,
	0x0e, 0x63, 0x95, 0x9b, 0xb7, 0x4f, 0xbf, 0xf1, 0xf4, 0x51, 0x3c, 0x1e, 0xc7, 0x51, 0x91, 0xa8,
	0x92, 0x5e, 0xbd, 0xcb, 0x2d, 0x0d, 0x36, 0xfa, 0x4c, 0x8a, 0x79, 0x9c, 0x15, 0xf9, 0xc5, 0xf2,
	0xdd, 0x37, 0x74, 0x38, 0x94, 0x52, 0xb1, 0x50, 0x64, 0x07, 0x3d, 0x94, 0x2a, 0x39, 0xf8, 0xbd,
	0x05, 0xfd, 0x66, 0xc1, 0x37, 0x52, 0x74, 0x02, 0x3d, 0x62, 0xf4, 0x42, 0x33, 0xa0, 0x09, 0xb2,
	0x55, 0xec, 0x31, 0xb8, 0xf3, 0x38, 0xf5, 0xdd, 0x13, 0xf7, 0xb4, 0xf7, 0x12, 0x4c, 0x8b, 0x5c,
	0xc5, 0x29, 0x47, 0x35, 0x7b, 0x02, 0xed, 0x79, 0x56, 0x20, 0x3d, 0x68, 0xee, 0x55, 0xe6, 0xac,
	0x50, 0x9c, 0x0c, 0x1b, 0x59, 0x5a, 0xab, 0x4b, 0x67, 0x43, 0x5d, 0x82, 0x4f, 0xc0, 0xbd, 0x8a,
	0x53, 0x6c, 0x1f, 0x9c, 0x3f, 0x22, 0xcf, 0xab, 0x76, 0x33, 0x22, 0x92, 0x7d, 0x85, 0xab, 0xcc,
	0x44, 0xad, 0x85, 0x80, 0x43, 0x1b, 0xaf, 0x47, 0x72, 0x68, 0xf6, 0x85, 0xb9, 0x20, 0xc7, 0x3d,
	0x5e, 0xcb, 0xf6, 0x99, 0xce, 0x7b, 0xce, 0x74, 0xed, 0x33, 0x7f, 0x6a, 0x41, 0x47, 0xbf, 0x8a,
	0x8d, 0x24, 0x56, 0x39, 0x3a, 0x56, 0x8e, 0xef, 0xeb, 0xaa, 0xaa, 0xa7, 0xa9, 0x68, 0x6d, 0xab,
	0xa7, 0xa9, 0xa2, 0xf4, 0x56, 0xbe, 0xa4, 0xb7, 0xe2, 0x91, 0x5b, 0x25, 0x52, 0xa1, 0xe8, 0x55,
	0xbc, 0x95, 0x59, 0x36, 0xf6, 0x3b, 0x27, 0xee, 0xe9, 0x3e, 0xb7, 0x55, 0xc1, 0x1f, 0x2e, 0x0c,
	0xb8, 0x88, 0x44, 0x3c, 0x53, 0x7a, 0xcc, 0x99, 0x4c, 0xff, 0xa9, 0x15, 0x79, 0x04, 0x5e, 0x76,
	0x9b, 0x0a, 0x49, 0x09, 0x75, 0xb9, 0x16, 0x56, 0x16, 0x67, 0x7b, 0xfb, 0x87, 0xc3, 0x7f, 0x76,
	0x39, 0x56, 0x56, 0x72, 0x3e, 0x20, 0xe7, 0xa5, 0x62, 0x65, 0xa9, 0xf5, 0xef, 0x5c, 0x6a, 0x87,
	0xeb, 0x4b, 0x2d, 0xf8, 0xbc, 0x59, 0x5c, 0xda, 0x4b, 0x2f, 0xa0, 0x5d, 0xb7, 0x77, 0xcf, 0x2a,
	0x60, 0xb3, 0x07, 0x38, 0x81, 0x82, 0x5f, 0x1d, 0x5c, 0x6c, 0x96, 0x69, 0xdb, 0xb2, 0xba, 0x7f,
	0x77, 0x34, 0xf8, 0x71, 0x37, 0xf3, 0xd3, 0x68, 0x92, 0xa5, 0xc2, 0x58, 0x4d, 0x0d, 0xbd, 0xda,
	0xd7, 0x54, 0xf0, 0x5f, 0xee, 0xa0, 0xe0, 0x35, 0x30, 0x9b, 0x37, 0xbd, 0xea, 0xef, 0xc7, 0xfd,
	0x6b, 0x78, 0x68, 0x5b, 0xcc, 0x17, 0x00, 0x7b, 0xde, 0x38, 0xe3, 0x78, 0xd3, 0x19, 0x45, 0x59,
	0x1f, 0xd1, 0x88, 0xc2, 0x7c, 0x00, 0xdc, 0x2b, 0x8a, 0x9f, 0x5b, 0xf0, 0x80, 0x8b, 0x6f, 0xf5,
	0xbf, 0xb0, 0xd1, 0x48, 0xbe, 0xc9, 0xe2, 0x34, 0xc7, 0xe1, 0x45, 0xcc, 0x98, 0x81, 0x46, 0xa4,
	0xfc, 0x9d, 0xd9, 0x80, 0xd5, 0xc8, 0x69, 0x4d, 0x74, 0xb9, 0x16, 0xb0, 0xef, 0x67, 0xe1, 0xb5,
	0xf8, 0xaa, 0x98, 0x0e, 0x85, 0xa4, 0xb2, 0x7b, 0xdc, 0xd2, 0xe0, 0x88, 0x46, 0xe9, 0x32, 0xfe,
	0x4e, 0xef, 0x07, 0x8f, 0xd7, 0x72, 0xf0, 0x05, 0xf6, 0xfb, 0x2c, 0x29, 0x97, 0x57, 0xe6, 0xec,
	0x95, 0xf9, 0x67, 0x49, 0x4d, 0x8a, 0xeb, 0x00, 0x77, 0xce, 0x83, 0xb5, 0xd8, 0xb8, 0x8d, 0x0a,
	0x42, 0x38, 0xfa, 0xa6, 0x10, 0xd2, 0x3a, 0xe8, 0x6d, 0x28, 0xc3, 0xa9, 0x95, 0x63, 0xeb, 0xaf,
	0xe5, 0x68, 0x3d, 0x16, 0x67, 0xf5, 0xcb, 0xee, 0xd1, 0xca, 0x15, 0x5c, 0x7f, 0x89, 0x7e, 0x04,
	0x9d, 0xbb, 0x62, 0x35, 0x80, 0xe7, 0x12, 0xf3, 0x6d, 0xde, 0xcc, 0x7a, 0xb0, 0x5b, 0xa4, 0x37,
	0x69, 0x76, 0x9b, 0x0e, 0x76, 0x50, 0x98, 0x89, 0x74, 0x14, 0xa7, 0xd7, 0x83, 0x16, 0x0a, 0x38,
	0xb6, 0x50, 0x70, 0x58, 0x1f, 0xc0, 0x6c, 0x4e, 0x94, 0x5d, 0xb6, 0x0f, 0x7b, 0x7a, 0x74, 0x88,
	0xd1, 0xa0, 0x8d, 0x52, 0x14, 0xa6, 0x91, 0x48, 0xc4, 0x68, 0xe0, 0xa1, 0x23, 0x8e, 0x9c, 0xac,
	0x50, 0x83, 0xce, 0xb0, 0x43, 0xff, 0xd0, 0x5f, 0xfd, 0x19, 0x00, 0x00, 0xff, 0xff, 0x64, 0xe3,
	0xf6, 0xae, 0xb0, 0x0f, 0x00, 0x00,
}
