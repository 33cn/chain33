// Code generated by protoc-gen-go. DO NOT EDIT.
// source: executor.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Genesis struct {
	Isrun bool `protobuf:"varint,1,opt,name=isrun" json:"isrun,omitempty"`
}

func (m *Genesis) Reset()                    { *m = Genesis{} }
func (m *Genesis) String() string            { return proto.CompactTextString(m) }
func (*Genesis) ProtoMessage()               {}
func (*Genesis) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Genesis) GetIsrun() bool {
	if m != nil {
		return m.Isrun
	}
	return false
}

// message for execs.coins
type CoinsAction struct {
	// Types that are valid to be assigned to Value:
	//	*CoinsAction_Transfer
	//	*CoinsAction_Withdraw
	//	*CoinsAction_Genesis
	Value isCoinsAction_Value `protobuf_oneof:"value"`
	Ty    int32               `protobuf:"varint,3,opt,name=ty" json:"ty,omitempty"`
}

func (m *CoinsAction) Reset()                    { *m = CoinsAction{} }
func (m *CoinsAction) String() string            { return proto.CompactTextString(m) }
func (*CoinsAction) ProtoMessage()               {}
func (*CoinsAction) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

type isCoinsAction_Value interface {
	isCoinsAction_Value()
}

type CoinsAction_Transfer struct {
	Transfer *CoinsTransfer `protobuf:"bytes,1,opt,name=transfer,oneof"`
}
type CoinsAction_Withdraw struct {
	Withdraw *CoinsWithdraw `protobuf:"bytes,4,opt,name=withdraw,oneof"`
}
type CoinsAction_Genesis struct {
	Genesis *CoinsGenesis `protobuf:"bytes,2,opt,name=genesis,oneof"`
}

func (*CoinsAction_Transfer) isCoinsAction_Value() {}
func (*CoinsAction_Withdraw) isCoinsAction_Value() {}
func (*CoinsAction_Genesis) isCoinsAction_Value()  {}

func (m *CoinsAction) GetValue() isCoinsAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CoinsAction) GetTransfer() *CoinsTransfer {
	if x, ok := m.GetValue().(*CoinsAction_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *CoinsAction) GetWithdraw() *CoinsWithdraw {
	if x, ok := m.GetValue().(*CoinsAction_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (m *CoinsAction) GetGenesis() *CoinsGenesis {
	if x, ok := m.GetValue().(*CoinsAction_Genesis); ok {
		return x.Genesis
	}
	return nil
}

func (m *CoinsAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CoinsAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CoinsAction_OneofMarshaler, _CoinsAction_OneofUnmarshaler, _CoinsAction_OneofSizer, []interface{}{
		(*CoinsAction_Transfer)(nil),
		(*CoinsAction_Withdraw)(nil),
		(*CoinsAction_Genesis)(nil),
	}
}

func _CoinsAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CoinsAction)
	// value
	switch x := m.Value.(type) {
	case *CoinsAction_Transfer:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transfer); err != nil {
			return err
		}
	case *CoinsAction_Withdraw:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Withdraw); err != nil {
			return err
		}
	case *CoinsAction_Genesis:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Genesis); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CoinsAction.Value has unexpected type %T", x)
	}
	return nil
}

func _CoinsAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CoinsAction)
	switch tag {
	case 1: // value.transfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoinsTransfer)
		err := b.DecodeMessage(msg)
		m.Value = &CoinsAction_Transfer{msg}
		return true, err
	case 4: // value.withdraw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoinsWithdraw)
		err := b.DecodeMessage(msg)
		m.Value = &CoinsAction_Withdraw{msg}
		return true, err
	case 2: // value.genesis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoinsGenesis)
		err := b.DecodeMessage(msg)
		m.Value = &CoinsAction_Genesis{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CoinsAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CoinsAction)
	// value
	switch x := m.Value.(type) {
	case *CoinsAction_Transfer:
		s := proto.Size(x.Transfer)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CoinsAction_Withdraw:
		s := proto.Size(x.Withdraw)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CoinsAction_Genesis:
		s := proto.Size(x.Genesis)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// 给某个地址凭空打币
// 只能执行一次，不能执行第二次
type CoinsGenesis struct {
	Amount        int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	ReturnAddress string `protobuf:"bytes,3,opt,name=returnAddress" json:"returnAddress,omitempty"`
}

func (m *CoinsGenesis) Reset()                    { *m = CoinsGenesis{} }
func (m *CoinsGenesis) String() string            { return proto.CompactTextString(m) }
func (*CoinsGenesis) ProtoMessage()               {}
func (*CoinsGenesis) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *CoinsGenesis) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CoinsGenesis) GetReturnAddress() string {
	if m != nil {
		return m.ReturnAddress
	}
	return ""
}

type CoinsTransfer struct {
	Cointoken string `protobuf:"bytes,1,opt,name=cointoken" json:"cointoken,omitempty"`
	Amount    int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Note      string `protobuf:"bytes,3,opt,name=note" json:"note,omitempty"`
}

func (m *CoinsTransfer) Reset()                    { *m = CoinsTransfer{} }
func (m *CoinsTransfer) String() string            { return proto.CompactTextString(m) }
func (*CoinsTransfer) ProtoMessage()               {}
func (*CoinsTransfer) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *CoinsTransfer) GetCointoken() string {
	if m != nil {
		return m.Cointoken
	}
	return ""
}

func (m *CoinsTransfer) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CoinsTransfer) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type CoinsWithdraw struct {
	Cointoken string `protobuf:"bytes,1,opt,name=cointoken" json:"cointoken,omitempty"`
	Amount    int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Note      string `protobuf:"bytes,3,opt,name=note" json:"note,omitempty"`
}

func (m *CoinsWithdraw) Reset()                    { *m = CoinsWithdraw{} }
func (m *CoinsWithdraw) String() string            { return proto.CompactTextString(m) }
func (*CoinsWithdraw) ProtoMessage()               {}
func (*CoinsWithdraw) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *CoinsWithdraw) GetCointoken() string {
	if m != nil {
		return m.Cointoken
	}
	return ""
}

func (m *CoinsWithdraw) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CoinsWithdraw) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type Hashlock struct {
	HashlockId    []byte `protobuf:"bytes,1,opt,name=hashlockId,proto3" json:"hashlockId,omitempty"`
	Status        int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	CreateTime    int64  `protobuf:"varint,3,opt,name=CreateTime" json:"CreateTime,omitempty"`
	ToAddress     string `protobuf:"bytes,4,opt,name=toAddress" json:"toAddress,omitempty"`
	ReturnAddress string `protobuf:"bytes,5,opt,name=returnAddress" json:"returnAddress,omitempty"`
	Amount        int64  `protobuf:"varint,6,opt,name=amount" json:"amount,omitempty"`
	Frozentime    int64  `protobuf:"varint,7,opt,name=frozentime" json:"frozentime,omitempty"`
}

func (m *Hashlock) Reset()                    { *m = Hashlock{} }
func (m *Hashlock) String() string            { return proto.CompactTextString(m) }
func (*Hashlock) ProtoMessage()               {}
func (*Hashlock) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *Hashlock) GetHashlockId() []byte {
	if m != nil {
		return m.HashlockId
	}
	return nil
}

func (m *Hashlock) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Hashlock) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Hashlock) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *Hashlock) GetReturnAddress() string {
	if m != nil {
		return m.ReturnAddress
	}
	return ""
}

func (m *Hashlock) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Hashlock) GetFrozentime() int64 {
	if m != nil {
		return m.Frozentime
	}
	return 0
}

// message for hashlock
type HashlockAction struct {
	// Types that are valid to be assigned to Value:
	//	*HashlockAction_Hlock
	//	*HashlockAction_Hsend
	//	*HashlockAction_Hunlock
	Value isHashlockAction_Value `protobuf_oneof:"value"`
	Ty    int32                  `protobuf:"varint,4,opt,name=ty" json:"ty,omitempty"`
}

func (m *HashlockAction) Reset()                    { *m = HashlockAction{} }
func (m *HashlockAction) String() string            { return proto.CompactTextString(m) }
func (*HashlockAction) ProtoMessage()               {}
func (*HashlockAction) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

type isHashlockAction_Value interface {
	isHashlockAction_Value()
}

type HashlockAction_Hlock struct {
	Hlock *HashlockLock `protobuf:"bytes,1,opt,name=hlock,oneof"`
}
type HashlockAction_Hsend struct {
	Hsend *HashlockSend `protobuf:"bytes,2,opt,name=hsend,oneof"`
}
type HashlockAction_Hunlock struct {
	Hunlock *HashlockUnlock `protobuf:"bytes,3,opt,name=hunlock,oneof"`
}

func (*HashlockAction_Hlock) isHashlockAction_Value()   {}
func (*HashlockAction_Hsend) isHashlockAction_Value()   {}
func (*HashlockAction_Hunlock) isHashlockAction_Value() {}

func (m *HashlockAction) GetValue() isHashlockAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *HashlockAction) GetHlock() *HashlockLock {
	if x, ok := m.GetValue().(*HashlockAction_Hlock); ok {
		return x.Hlock
	}
	return nil
}

func (m *HashlockAction) GetHsend() *HashlockSend {
	if x, ok := m.GetValue().(*HashlockAction_Hsend); ok {
		return x.Hsend
	}
	return nil
}

func (m *HashlockAction) GetHunlock() *HashlockUnlock {
	if x, ok := m.GetValue().(*HashlockAction_Hunlock); ok {
		return x.Hunlock
	}
	return nil
}

func (m *HashlockAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HashlockAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HashlockAction_OneofMarshaler, _HashlockAction_OneofUnmarshaler, _HashlockAction_OneofSizer, []interface{}{
		(*HashlockAction_Hlock)(nil),
		(*HashlockAction_Hsend)(nil),
		(*HashlockAction_Hunlock)(nil),
	}
}

func _HashlockAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HashlockAction)
	// value
	switch x := m.Value.(type) {
	case *HashlockAction_Hlock:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hlock); err != nil {
			return err
		}
	case *HashlockAction_Hsend:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hsend); err != nil {
			return err
		}
	case *HashlockAction_Hunlock:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hunlock); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HashlockAction.Value has unexpected type %T", x)
	}
	return nil
}

func _HashlockAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HashlockAction)
	switch tag {
	case 1: // value.hlock
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashlockLock)
		err := b.DecodeMessage(msg)
		m.Value = &HashlockAction_Hlock{msg}
		return true, err
	case 2: // value.hsend
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashlockSend)
		err := b.DecodeMessage(msg)
		m.Value = &HashlockAction_Hsend{msg}
		return true, err
	case 3: // value.hunlock
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashlockUnlock)
		err := b.DecodeMessage(msg)
		m.Value = &HashlockAction_Hunlock{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HashlockAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HashlockAction)
	// value
	switch x := m.Value.(type) {
	case *HashlockAction_Hlock:
		s := proto.Size(x.Hlock)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HashlockAction_Hsend:
		s := proto.Size(x.Hsend)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HashlockAction_Hunlock:
		s := proto.Size(x.Hunlock)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HashlockLock struct {
	Amount        int64  `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	Time          int64  `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Hash          []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	ToAddress     string `protobuf:"bytes,4,opt,name=toAddress" json:"toAddress,omitempty"`
	ReturnAddress string `protobuf:"bytes,5,opt,name=returnAddress" json:"returnAddress,omitempty"`
}

func (m *HashlockLock) Reset()                    { *m = HashlockLock{} }
func (m *HashlockLock) String() string            { return proto.CompactTextString(m) }
func (*HashlockLock) ProtoMessage()               {}
func (*HashlockLock) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *HashlockLock) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *HashlockLock) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *HashlockLock) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *HashlockLock) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *HashlockLock) GetReturnAddress() string {
	if m != nil {
		return m.ReturnAddress
	}
	return ""
}

type HashlockUnlock struct {
	Secret []byte `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *HashlockUnlock) Reset()                    { *m = HashlockUnlock{} }
func (m *HashlockUnlock) String() string            { return proto.CompactTextString(m) }
func (*HashlockUnlock) ProtoMessage()               {}
func (*HashlockUnlock) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *HashlockUnlock) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

type HashlockSend struct {
	Secret []byte `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *HashlockSend) Reset()                    { *m = HashlockSend{} }
func (m *HashlockSend) String() string            { return proto.CompactTextString(m) }
func (*HashlockSend) ProtoMessage()               {}
func (*HashlockSend) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *HashlockSend) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

type HashRecv struct {
	HashlockId []byte         `protobuf:"bytes,1,opt,name=HashlockId,proto3" json:"HashlockId,omitempty"`
	Infomation *Hashlockquery `protobuf:"bytes,2,opt,name=Infomation" json:"Infomation,omitempty"`
}

func (m *HashRecv) Reset()                    { *m = HashRecv{} }
func (m *HashRecv) String() string            { return proto.CompactTextString(m) }
func (*HashRecv) ProtoMessage()               {}
func (*HashRecv) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *HashRecv) GetHashlockId() []byte {
	if m != nil {
		return m.HashlockId
	}
	return nil
}

func (m *HashRecv) GetInfomation() *Hashlockquery {
	if m != nil {
		return m.Infomation
	}
	return nil
}

type Hashlockquery struct {
	Time        int64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Status      int32 `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Amount      int64 `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	CreateTime  int64 `protobuf:"varint,4,opt,name=createTime" json:"createTime,omitempty"`
	CurrentTime int64 `protobuf:"varint,5,opt,name=currentTime" json:"currentTime,omitempty"`
}

func (m *Hashlockquery) Reset()                    { *m = Hashlockquery{} }
func (m *Hashlockquery) String() string            { return proto.CompactTextString(m) }
func (*Hashlockquery) ProtoMessage()               {}
func (*Hashlockquery) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *Hashlockquery) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Hashlockquery) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Hashlockquery) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Hashlockquery) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Hashlockquery) GetCurrentTime() int64 {
	if m != nil {
		return m.CurrentTime
	}
	return 0
}

type Ticket struct {
	TicketId      string `protobuf:"bytes,1,opt,name=ticketId" json:"ticketId,omitempty"`
	Status        int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	IsGenesis     bool   `protobuf:"varint,3,opt,name=isGenesis" json:"isGenesis,omitempty"`
	CreateTime    int64  `protobuf:"varint,4,opt,name=createTime" json:"createTime,omitempty"`
	MinerTime     int64  `protobuf:"varint,5,opt,name=minerTime" json:"minerTime,omitempty"`
	MinerValue    int64  `protobuf:"varint,8,opt,name=minerValue" json:"minerValue,omitempty"`
	MinerAddress  string `protobuf:"bytes,6,opt,name=minerAddress" json:"minerAddress,omitempty"`
	ReturnAddress string `protobuf:"bytes,7,opt,name=returnAddress" json:"returnAddress,omitempty"`
}

func (m *Ticket) Reset()                    { *m = Ticket{} }
func (m *Ticket) String() string            { return proto.CompactTextString(m) }
func (*Ticket) ProtoMessage()               {}
func (*Ticket) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *Ticket) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

func (m *Ticket) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Ticket) GetIsGenesis() bool {
	if m != nil {
		return m.IsGenesis
	}
	return false
}

func (m *Ticket) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Ticket) GetMinerTime() int64 {
	if m != nil {
		return m.MinerTime
	}
	return 0
}

func (m *Ticket) GetMinerValue() int64 {
	if m != nil {
		return m.MinerValue
	}
	return 0
}

func (m *Ticket) GetMinerAddress() string {
	if m != nil {
		return m.MinerAddress
	}
	return ""
}

func (m *Ticket) GetReturnAddress() string {
	if m != nil {
		return m.ReturnAddress
	}
	return ""
}

// message for execs.ticket
type TicketAction struct {
	// Types that are valid to be assigned to Value:
	//	*TicketAction_Tbind
	//	*TicketAction_Topen
	//	*TicketAction_Genesis
	//	*TicketAction_Tclose
	//	*TicketAction_Miner
	Value isTicketAction_Value `protobuf_oneof:"value"`
	Ty    int32                `protobuf:"varint,10,opt,name=ty" json:"ty,omitempty"`
}

func (m *TicketAction) Reset()                    { *m = TicketAction{} }
func (m *TicketAction) String() string            { return proto.CompactTextString(m) }
func (*TicketAction) ProtoMessage()               {}
func (*TicketAction) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

type isTicketAction_Value interface {
	isTicketAction_Value()
}

type TicketAction_Tbind struct {
	Tbind *TicketBind `protobuf:"bytes,5,opt,name=tbind,oneof"`
}
type TicketAction_Topen struct {
	Topen *TicketOpen `protobuf:"bytes,1,opt,name=topen,oneof"`
}
type TicketAction_Genesis struct {
	Genesis *TicketGenesis `protobuf:"bytes,2,opt,name=genesis,oneof"`
}
type TicketAction_Tclose struct {
	Tclose *TicketClose `protobuf:"bytes,3,opt,name=tclose,oneof"`
}
type TicketAction_Miner struct {
	Miner *TicketMiner `protobuf:"bytes,4,opt,name=miner,oneof"`
}

func (*TicketAction_Tbind) isTicketAction_Value()   {}
func (*TicketAction_Topen) isTicketAction_Value()   {}
func (*TicketAction_Genesis) isTicketAction_Value() {}
func (*TicketAction_Tclose) isTicketAction_Value()  {}
func (*TicketAction_Miner) isTicketAction_Value()   {}

func (m *TicketAction) GetValue() isTicketAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TicketAction) GetTbind() *TicketBind {
	if x, ok := m.GetValue().(*TicketAction_Tbind); ok {
		return x.Tbind
	}
	return nil
}

func (m *TicketAction) GetTopen() *TicketOpen {
	if x, ok := m.GetValue().(*TicketAction_Topen); ok {
		return x.Topen
	}
	return nil
}

func (m *TicketAction) GetGenesis() *TicketGenesis {
	if x, ok := m.GetValue().(*TicketAction_Genesis); ok {
		return x.Genesis
	}
	return nil
}

func (m *TicketAction) GetTclose() *TicketClose {
	if x, ok := m.GetValue().(*TicketAction_Tclose); ok {
		return x.Tclose
	}
	return nil
}

func (m *TicketAction) GetMiner() *TicketMiner {
	if x, ok := m.GetValue().(*TicketAction_Miner); ok {
		return x.Miner
	}
	return nil
}

func (m *TicketAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TicketAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TicketAction_OneofMarshaler, _TicketAction_OneofUnmarshaler, _TicketAction_OneofSizer, []interface{}{
		(*TicketAction_Tbind)(nil),
		(*TicketAction_Topen)(nil),
		(*TicketAction_Genesis)(nil),
		(*TicketAction_Tclose)(nil),
		(*TicketAction_Miner)(nil),
	}
}

func _TicketAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TicketAction)
	// value
	switch x := m.Value.(type) {
	case *TicketAction_Tbind:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tbind); err != nil {
			return err
		}
	case *TicketAction_Topen:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Topen); err != nil {
			return err
		}
	case *TicketAction_Genesis:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Genesis); err != nil {
			return err
		}
	case *TicketAction_Tclose:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tclose); err != nil {
			return err
		}
	case *TicketAction_Miner:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Miner); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TicketAction.Value has unexpected type %T", x)
	}
	return nil
}

func _TicketAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TicketAction)
	switch tag {
	case 5: // value.tbind
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TicketBind)
		err := b.DecodeMessage(msg)
		m.Value = &TicketAction_Tbind{msg}
		return true, err
	case 1: // value.topen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TicketOpen)
		err := b.DecodeMessage(msg)
		m.Value = &TicketAction_Topen{msg}
		return true, err
	case 2: // value.genesis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TicketGenesis)
		err := b.DecodeMessage(msg)
		m.Value = &TicketAction_Genesis{msg}
		return true, err
	case 3: // value.tclose
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TicketClose)
		err := b.DecodeMessage(msg)
		m.Value = &TicketAction_Tclose{msg}
		return true, err
	case 4: // value.miner
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TicketMiner)
		err := b.DecodeMessage(msg)
		m.Value = &TicketAction_Miner{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TicketAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TicketAction)
	// value
	switch x := m.Value.(type) {
	case *TicketAction_Tbind:
		s := proto.Size(x.Tbind)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TicketAction_Topen:
		s := proto.Size(x.Topen)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TicketAction_Genesis:
		s := proto.Size(x.Genesis)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TicketAction_Tclose:
		s := proto.Size(x.Tclose)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TicketAction_Miner:
		s := proto.Size(x.Miner)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TicketMiner struct {
	Bits     uint32 `protobuf:"varint,1,opt,name=bits" json:"bits,omitempty"`
	Reward   int64  `protobuf:"varint,2,opt,name=reward" json:"reward,omitempty"`
	TicketId string `protobuf:"bytes,3,opt,name=ticketId" json:"ticketId,omitempty"`
	Modify   []byte `protobuf:"bytes,4,opt,name=modify,proto3" json:"modify,omitempty"`
}

func (m *TicketMiner) Reset()                    { *m = TicketMiner{} }
func (m *TicketMiner) String() string            { return proto.CompactTextString(m) }
func (*TicketMiner) ProtoMessage()               {}
func (*TicketMiner) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *TicketMiner) GetBits() uint32 {
	if m != nil {
		return m.Bits
	}
	return 0
}

func (m *TicketMiner) GetReward() int64 {
	if m != nil {
		return m.Reward
	}
	return 0
}

func (m *TicketMiner) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

func (m *TicketMiner) GetModify() []byte {
	if m != nil {
		return m.Modify
	}
	return nil
}

type TicketBind struct {
	MinerAddress  string `protobuf:"bytes,1,opt,name=minerAddress" json:"minerAddress,omitempty"`
	ReturnAddress string `protobuf:"bytes,2,opt,name=returnAddress" json:"returnAddress,omitempty"`
}

func (m *TicketBind) Reset()                    { *m = TicketBind{} }
func (m *TicketBind) String() string            { return proto.CompactTextString(m) }
func (*TicketBind) ProtoMessage()               {}
func (*TicketBind) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *TicketBind) GetMinerAddress() string {
	if m != nil {
		return m.MinerAddress
	}
	return ""
}

func (m *TicketBind) GetReturnAddress() string {
	if m != nil {
		return m.ReturnAddress
	}
	return ""
}

type TicketOpen struct {
	MinerAddress  string `protobuf:"bytes,1,opt,name=minerAddress" json:"minerAddress,omitempty"`
	Count         int32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	ReturnAddress string `protobuf:"bytes,3,opt,name=returnAddress" json:"returnAddress,omitempty"`
}

func (m *TicketOpen) Reset()                    { *m = TicketOpen{} }
func (m *TicketOpen) String() string            { return proto.CompactTextString(m) }
func (*TicketOpen) ProtoMessage()               {}
func (*TicketOpen) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *TicketOpen) GetMinerAddress() string {
	if m != nil {
		return m.MinerAddress
	}
	return ""
}

func (m *TicketOpen) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *TicketOpen) GetReturnAddress() string {
	if m != nil {
		return m.ReturnAddress
	}
	return ""
}

type TicketGenesis struct {
	MinerAddress  string `protobuf:"bytes,1,opt,name=minerAddress" json:"minerAddress,omitempty"`
	ReturnAddress string `protobuf:"bytes,2,opt,name=returnAddress" json:"returnAddress,omitempty"`
	Count         int32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *TicketGenesis) Reset()                    { *m = TicketGenesis{} }
func (m *TicketGenesis) String() string            { return proto.CompactTextString(m) }
func (*TicketGenesis) ProtoMessage()               {}
func (*TicketGenesis) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

func (m *TicketGenesis) GetMinerAddress() string {
	if m != nil {
		return m.MinerAddress
	}
	return ""
}

func (m *TicketGenesis) GetReturnAddress() string {
	if m != nil {
		return m.ReturnAddress
	}
	return ""
}

func (m *TicketGenesis) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type TicketClose struct {
	TicketId []string `protobuf:"bytes,1,rep,name=ticketId" json:"ticketId,omitempty"`
}

func (m *TicketClose) Reset()                    { *m = TicketClose{} }
func (m *TicketClose) String() string            { return proto.CompactTextString(m) }
func (*TicketClose) ProtoMessage()               {}
func (*TicketClose) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *TicketClose) GetTicketId() []string {
	if m != nil {
		return m.TicketId
	}
	return nil
}

type TicketList struct {
	Addr   string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Status int32  `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (m *TicketList) Reset()                    { *m = TicketList{} }
func (m *TicketList) String() string            { return proto.CompactTextString(m) }
func (*TicketList) ProtoMessage()               {}
func (*TicketList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *TicketList) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *TicketList) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type TicketInfos struct {
	TicketIds []string `protobuf:"bytes,1,rep,name=ticketIds" json:"ticketIds,omitempty"`
}

func (m *TicketInfos) Reset()                    { *m = TicketInfos{} }
func (m *TicketInfos) String() string            { return proto.CompactTextString(m) }
func (*TicketInfos) ProtoMessage()               {}
func (*TicketInfos) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

func (m *TicketInfos) GetTicketIds() []string {
	if m != nil {
		return m.TicketIds
	}
	return nil
}

type ReplyTicketList struct {
	Tickets []*Ticket `protobuf:"bytes,1,rep,name=tickets" json:"tickets,omitempty"`
}

func (m *ReplyTicketList) Reset()                    { *m = ReplyTicketList{} }
func (m *ReplyTicketList) String() string            { return proto.CompactTextString(m) }
func (*ReplyTicketList) ProtoMessage()               {}
func (*ReplyTicketList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21} }

func (m *ReplyTicketList) GetTickets() []*Ticket {
	if m != nil {
		return m.Tickets
	}
	return nil
}

type ReplyWalletTickets struct {
	Tickets  []*Ticket `protobuf:"bytes,1,rep,name=tickets" json:"tickets,omitempty"`
	Privkeys [][]byte  `protobuf:"bytes,2,rep,name=privkeys,proto3" json:"privkeys,omitempty"`
}

func (m *ReplyWalletTickets) Reset()                    { *m = ReplyWalletTickets{} }
func (m *ReplyWalletTickets) String() string            { return proto.CompactTextString(m) }
func (*ReplyWalletTickets) ProtoMessage()               {}
func (*ReplyWalletTickets) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{22} }

func (m *ReplyWalletTickets) GetTickets() []*Ticket {
	if m != nil {
		return m.Tickets
	}
	return nil
}

func (m *ReplyWalletTickets) GetPrivkeys() [][]byte {
	if m != nil {
		return m.Privkeys
	}
	return nil
}

type ReceiptTicket struct {
	TicketId   string `protobuf:"bytes,1,opt,name=ticketId" json:"ticketId,omitempty"`
	Status     int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	PrevStatus int32  `protobuf:"varint,3,opt,name=prevStatus" json:"prevStatus,omitempty"`
	Addr       string `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
}

func (m *ReceiptTicket) Reset()                    { *m = ReceiptTicket{} }
func (m *ReceiptTicket) String() string            { return proto.CompactTextString(m) }
func (*ReceiptTicket) ProtoMessage()               {}
func (*ReceiptTicket) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{23} }

func (m *ReceiptTicket) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

func (m *ReceiptTicket) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReceiptTicket) GetPrevStatus() int32 {
	if m != nil {
		return m.PrevStatus
	}
	return 0
}

func (m *ReceiptTicket) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type ReceiptTicketBind struct {
	OldMinerAddress string `protobuf:"bytes,1,opt,name=oldMinerAddress" json:"oldMinerAddress,omitempty"`
	NewMinerAddress string `protobuf:"bytes,2,opt,name=newMinerAddress" json:"newMinerAddress,omitempty"`
	ReturnAddress   string `protobuf:"bytes,3,opt,name=returnAddress" json:"returnAddress,omitempty"`
}

func (m *ReceiptTicketBind) Reset()                    { *m = ReceiptTicketBind{} }
func (m *ReceiptTicketBind) String() string            { return proto.CompactTextString(m) }
func (*ReceiptTicketBind) ProtoMessage()               {}
func (*ReceiptTicketBind) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{24} }

func (m *ReceiptTicketBind) GetOldMinerAddress() string {
	if m != nil {
		return m.OldMinerAddress
	}
	return ""
}

func (m *ReceiptTicketBind) GetNewMinerAddress() string {
	if m != nil {
		return m.NewMinerAddress
	}
	return ""
}

func (m *ReceiptTicketBind) GetReturnAddress() string {
	if m != nil {
		return m.ReturnAddress
	}
	return ""
}

type ExecTxList struct {
	StateHash []byte         `protobuf:"bytes,1,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Txs       []*Transaction `protobuf:"bytes,2,rep,name=txs" json:"txs,omitempty"`
	BlockTime int64          `protobuf:"varint,3,opt,name=blockTime" json:"blockTime,omitempty"`
	Height    int64          `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
}

func (m *ExecTxList) Reset()                    { *m = ExecTxList{} }
func (m *ExecTxList) String() string            { return proto.CompactTextString(m) }
func (*ExecTxList) ProtoMessage()               {}
func (*ExecTxList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{25} }

func (m *ExecTxList) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *ExecTxList) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *ExecTxList) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *ExecTxList) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Query struct {
	Execer   []byte `protobuf:"bytes,1,opt,name=execer,proto3" json:"execer,omitempty"`
	FuncName string `protobuf:"bytes,2,opt,name=funcName" json:"funcName,omitempty"`
	Payload  []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{26} }

func (m *Query) GetExecer() []byte {
	if m != nil {
		return m.Execer
	}
	return nil
}

func (m *Query) GetFuncName() string {
	if m != nil {
		return m.FuncName
	}
	return ""
}

func (m *Query) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// message for retrieve start
type RetrievePara struct {
	DefaultAddress string `protobuf:"bytes,1,opt,name=defaultAddress" json:"defaultAddress,omitempty"`
	Status         int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	CreateTime     int64  `protobuf:"varint,3,opt,name=createTime" json:"createTime,omitempty"`
	PrepareTime    int64  `protobuf:"varint,4,opt,name=prepareTime" json:"prepareTime,omitempty"`
	DelayPeriod    int64  `protobuf:"varint,5,opt,name=delayPeriod" json:"delayPeriod,omitempty"`
}

func (m *RetrievePara) Reset()                    { *m = RetrievePara{} }
func (m *RetrievePara) String() string            { return proto.CompactTextString(m) }
func (*RetrievePara) ProtoMessage()               {}
func (*RetrievePara) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{27} }

func (m *RetrievePara) GetDefaultAddress() string {
	if m != nil {
		return m.DefaultAddress
	}
	return ""
}

func (m *RetrievePara) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RetrievePara) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *RetrievePara) GetPrepareTime() int64 {
	if m != nil {
		return m.PrepareTime
	}
	return 0
}

func (m *RetrievePara) GetDelayPeriod() int64 {
	if m != nil {
		return m.DelayPeriod
	}
	return 0
}

type Retrieve struct {
	BackupAddress string          `protobuf:"bytes,1,opt,name=backupAddress" json:"backupAddress,omitempty"`
	RetPara       []*RetrievePara `protobuf:"bytes,2,rep,name=retPara" json:"retPara,omitempty"`
}

func (m *Retrieve) Reset()                    { *m = Retrieve{} }
func (m *Retrieve) String() string            { return proto.CompactTextString(m) }
func (*Retrieve) ProtoMessage()               {}
func (*Retrieve) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{28} }

func (m *Retrieve) GetBackupAddress() string {
	if m != nil {
		return m.BackupAddress
	}
	return ""
}

func (m *Retrieve) GetRetPara() []*RetrievePara {
	if m != nil {
		return m.RetPara
	}
	return nil
}

type RetrieveAction struct {
	// Types that are valid to be assigned to Value:
	//	*RetrieveAction_PreRet
	//	*RetrieveAction_PerfRet
	//	*RetrieveAction_Backup
	//	*RetrieveAction_Cancel
	Value isRetrieveAction_Value `protobuf_oneof:"value"`
	Ty    int32                  `protobuf:"varint,5,opt,name=ty" json:"ty,omitempty"`
}

func (m *RetrieveAction) Reset()                    { *m = RetrieveAction{} }
func (m *RetrieveAction) String() string            { return proto.CompactTextString(m) }
func (*RetrieveAction) ProtoMessage()               {}
func (*RetrieveAction) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{29} }

type isRetrieveAction_Value interface {
	isRetrieveAction_Value()
}

type RetrieveAction_PreRet struct {
	PreRet *PreRetrieve `protobuf:"bytes,1,opt,name=preRet,oneof"`
}
type RetrieveAction_PerfRet struct {
	PerfRet *PerformRetrieve `protobuf:"bytes,2,opt,name=perfRet,oneof"`
}
type RetrieveAction_Backup struct {
	Backup *BackupRetrieve `protobuf:"bytes,3,opt,name=backup,oneof"`
}
type RetrieveAction_Cancel struct {
	Cancel *CancelRetrieve `protobuf:"bytes,4,opt,name=cancel,oneof"`
}

func (*RetrieveAction_PreRet) isRetrieveAction_Value()  {}
func (*RetrieveAction_PerfRet) isRetrieveAction_Value() {}
func (*RetrieveAction_Backup) isRetrieveAction_Value()  {}
func (*RetrieveAction_Cancel) isRetrieveAction_Value()  {}

func (m *RetrieveAction) GetValue() isRetrieveAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RetrieveAction) GetPreRet() *PreRetrieve {
	if x, ok := m.GetValue().(*RetrieveAction_PreRet); ok {
		return x.PreRet
	}
	return nil
}

func (m *RetrieveAction) GetPerfRet() *PerformRetrieve {
	if x, ok := m.GetValue().(*RetrieveAction_PerfRet); ok {
		return x.PerfRet
	}
	return nil
}

func (m *RetrieveAction) GetBackup() *BackupRetrieve {
	if x, ok := m.GetValue().(*RetrieveAction_Backup); ok {
		return x.Backup
	}
	return nil
}

func (m *RetrieveAction) GetCancel() *CancelRetrieve {
	if x, ok := m.GetValue().(*RetrieveAction_Cancel); ok {
		return x.Cancel
	}
	return nil
}

func (m *RetrieveAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RetrieveAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RetrieveAction_OneofMarshaler, _RetrieveAction_OneofUnmarshaler, _RetrieveAction_OneofSizer, []interface{}{
		(*RetrieveAction_PreRet)(nil),
		(*RetrieveAction_PerfRet)(nil),
		(*RetrieveAction_Backup)(nil),
		(*RetrieveAction_Cancel)(nil),
	}
}

func _RetrieveAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RetrieveAction)
	// value
	switch x := m.Value.(type) {
	case *RetrieveAction_PreRet:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PreRet); err != nil {
			return err
		}
	case *RetrieveAction_PerfRet:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PerfRet); err != nil {
			return err
		}
	case *RetrieveAction_Backup:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Backup); err != nil {
			return err
		}
	case *RetrieveAction_Cancel:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cancel); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RetrieveAction.Value has unexpected type %T", x)
	}
	return nil
}

func _RetrieveAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RetrieveAction)
	switch tag {
	case 1: // value.preRet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PreRetrieve)
		err := b.DecodeMessage(msg)
		m.Value = &RetrieveAction_PreRet{msg}
		return true, err
	case 2: // value.perfRet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PerformRetrieve)
		err := b.DecodeMessage(msg)
		m.Value = &RetrieveAction_PerfRet{msg}
		return true, err
	case 3: // value.backup
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BackupRetrieve)
		err := b.DecodeMessage(msg)
		m.Value = &RetrieveAction_Backup{msg}
		return true, err
	case 4: // value.cancel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CancelRetrieve)
		err := b.DecodeMessage(msg)
		m.Value = &RetrieveAction_Cancel{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RetrieveAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RetrieveAction)
	// value
	switch x := m.Value.(type) {
	case *RetrieveAction_PreRet:
		s := proto.Size(x.PreRet)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RetrieveAction_PerfRet:
		s := proto.Size(x.PerfRet)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RetrieveAction_Backup:
		s := proto.Size(x.Backup)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RetrieveAction_Cancel:
		s := proto.Size(x.Cancel)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type BackupRetrieve struct {
	BackupAddress  string `protobuf:"bytes,1,opt,name=backupAddress" json:"backupAddress,omitempty"`
	DefaultAddress string `protobuf:"bytes,2,opt,name=defaultAddress" json:"defaultAddress,omitempty"`
	DelayPeriod    int64  `protobuf:"varint,3,opt,name=delayPeriod" json:"delayPeriod,omitempty"`
}

func (m *BackupRetrieve) Reset()                    { *m = BackupRetrieve{} }
func (m *BackupRetrieve) String() string            { return proto.CompactTextString(m) }
func (*BackupRetrieve) ProtoMessage()               {}
func (*BackupRetrieve) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{30} }

func (m *BackupRetrieve) GetBackupAddress() string {
	if m != nil {
		return m.BackupAddress
	}
	return ""
}

func (m *BackupRetrieve) GetDefaultAddress() string {
	if m != nil {
		return m.DefaultAddress
	}
	return ""
}

func (m *BackupRetrieve) GetDelayPeriod() int64 {
	if m != nil {
		return m.DelayPeriod
	}
	return 0
}

type PreRetrieve struct {
	BackupAddress  string `protobuf:"bytes,1,opt,name=backupAddress" json:"backupAddress,omitempty"`
	DefaultAddress string `protobuf:"bytes,2,opt,name=defaultAddress" json:"defaultAddress,omitempty"`
}

func (m *PreRetrieve) Reset()                    { *m = PreRetrieve{} }
func (m *PreRetrieve) String() string            { return proto.CompactTextString(m) }
func (*PreRetrieve) ProtoMessage()               {}
func (*PreRetrieve) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{31} }

func (m *PreRetrieve) GetBackupAddress() string {
	if m != nil {
		return m.BackupAddress
	}
	return ""
}

func (m *PreRetrieve) GetDefaultAddress() string {
	if m != nil {
		return m.DefaultAddress
	}
	return ""
}

type PerformRetrieve struct {
	BackupAddress  string `protobuf:"bytes,1,opt,name=backupAddress" json:"backupAddress,omitempty"`
	DefaultAddress string `protobuf:"bytes,2,opt,name=defaultAddress" json:"defaultAddress,omitempty"`
}

func (m *PerformRetrieve) Reset()                    { *m = PerformRetrieve{} }
func (m *PerformRetrieve) String() string            { return proto.CompactTextString(m) }
func (*PerformRetrieve) ProtoMessage()               {}
func (*PerformRetrieve) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{32} }

func (m *PerformRetrieve) GetBackupAddress() string {
	if m != nil {
		return m.BackupAddress
	}
	return ""
}

func (m *PerformRetrieve) GetDefaultAddress() string {
	if m != nil {
		return m.DefaultAddress
	}
	return ""
}

type CancelRetrieve struct {
	BackupAddress  string `protobuf:"bytes,1,opt,name=backupAddress" json:"backupAddress,omitempty"`
	DefaultAddress string `protobuf:"bytes,2,opt,name=defaultAddress" json:"defaultAddress,omitempty"`
}

func (m *CancelRetrieve) Reset()                    { *m = CancelRetrieve{} }
func (m *CancelRetrieve) String() string            { return proto.CompactTextString(m) }
func (*CancelRetrieve) ProtoMessage()               {}
func (*CancelRetrieve) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{33} }

func (m *CancelRetrieve) GetBackupAddress() string {
	if m != nil {
		return m.BackupAddress
	}
	return ""
}

func (m *CancelRetrieve) GetDefaultAddress() string {
	if m != nil {
		return m.DefaultAddress
	}
	return ""
}

// ////////////////////////////////////////////////////////////////////////////
// message for token start/////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
type TokenAction struct {
	// Types that are valid to be assigned to Value:
	//	*TokenAction_Tokenprecreate
	//	*TokenAction_Tokenfinishcreate
	//	*TokenAction_Tokenrevokecreate
	//	*TokenAction_Transfer
	//	*TokenAction_Withdraw
	//	*TokenAction_Genesis
	Value isTokenAction_Value `protobuf_oneof:"value"`
	Ty    int32               `protobuf:"varint,7,opt,name=Ty" json:"Ty,omitempty"`
}

func (m *TokenAction) Reset()                    { *m = TokenAction{} }
func (m *TokenAction) String() string            { return proto.CompactTextString(m) }
func (*TokenAction) ProtoMessage()               {}
func (*TokenAction) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{34} }

type isTokenAction_Value interface {
	isTokenAction_Value()
}

type TokenAction_Tokenprecreate struct {
	Tokenprecreate *TokenPreCreate `protobuf:"bytes,1,opt,name=tokenprecreate,oneof"`
}
type TokenAction_Tokenfinishcreate struct {
	Tokenfinishcreate *TokenFinishCreate `protobuf:"bytes,2,opt,name=tokenfinishcreate,oneof"`
}
type TokenAction_Tokenrevokecreate struct {
	Tokenrevokecreate *TokenRevokeCreate `protobuf:"bytes,3,opt,name=tokenrevokecreate,oneof"`
}
type TokenAction_Transfer struct {
	Transfer *CoinsTransfer `protobuf:"bytes,4,opt,name=transfer,oneof"`
}
type TokenAction_Withdraw struct {
	Withdraw *CoinsWithdraw `protobuf:"bytes,5,opt,name=withdraw,oneof"`
}
type TokenAction_Genesis struct {
	Genesis *CoinsGenesis `protobuf:"bytes,6,opt,name=genesis,oneof"`
}

func (*TokenAction_Tokenprecreate) isTokenAction_Value()    {}
func (*TokenAction_Tokenfinishcreate) isTokenAction_Value() {}
func (*TokenAction_Tokenrevokecreate) isTokenAction_Value() {}
func (*TokenAction_Transfer) isTokenAction_Value()          {}
func (*TokenAction_Withdraw) isTokenAction_Value()          {}
func (*TokenAction_Genesis) isTokenAction_Value()           {}

func (m *TokenAction) GetValue() isTokenAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TokenAction) GetTokenprecreate() *TokenPreCreate {
	if x, ok := m.GetValue().(*TokenAction_Tokenprecreate); ok {
		return x.Tokenprecreate
	}
	return nil
}

func (m *TokenAction) GetTokenfinishcreate() *TokenFinishCreate {
	if x, ok := m.GetValue().(*TokenAction_Tokenfinishcreate); ok {
		return x.Tokenfinishcreate
	}
	return nil
}

func (m *TokenAction) GetTokenrevokecreate() *TokenRevokeCreate {
	if x, ok := m.GetValue().(*TokenAction_Tokenrevokecreate); ok {
		return x.Tokenrevokecreate
	}
	return nil
}

func (m *TokenAction) GetTransfer() *CoinsTransfer {
	if x, ok := m.GetValue().(*TokenAction_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *TokenAction) GetWithdraw() *CoinsWithdraw {
	if x, ok := m.GetValue().(*TokenAction_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (m *TokenAction) GetGenesis() *CoinsGenesis {
	if x, ok := m.GetValue().(*TokenAction_Genesis); ok {
		return x.Genesis
	}
	return nil
}

func (m *TokenAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TokenAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TokenAction_OneofMarshaler, _TokenAction_OneofUnmarshaler, _TokenAction_OneofSizer, []interface{}{
		(*TokenAction_Tokenprecreate)(nil),
		(*TokenAction_Tokenfinishcreate)(nil),
		(*TokenAction_Tokenrevokecreate)(nil),
		(*TokenAction_Transfer)(nil),
		(*TokenAction_Withdraw)(nil),
		(*TokenAction_Genesis)(nil),
	}
}

func _TokenAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TokenAction)
	// value
	switch x := m.Value.(type) {
	case *TokenAction_Tokenprecreate:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tokenprecreate); err != nil {
			return err
		}
	case *TokenAction_Tokenfinishcreate:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tokenfinishcreate); err != nil {
			return err
		}
	case *TokenAction_Tokenrevokecreate:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tokenrevokecreate); err != nil {
			return err
		}
	case *TokenAction_Transfer:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transfer); err != nil {
			return err
		}
	case *TokenAction_Withdraw:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Withdraw); err != nil {
			return err
		}
	case *TokenAction_Genesis:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Genesis); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TokenAction.Value has unexpected type %T", x)
	}
	return nil
}

func _TokenAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TokenAction)
	switch tag {
	case 1: // value.tokenprecreate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TokenPreCreate)
		err := b.DecodeMessage(msg)
		m.Value = &TokenAction_Tokenprecreate{msg}
		return true, err
	case 2: // value.tokenfinishcreate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TokenFinishCreate)
		err := b.DecodeMessage(msg)
		m.Value = &TokenAction_Tokenfinishcreate{msg}
		return true, err
	case 3: // value.tokenrevokecreate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TokenRevokeCreate)
		err := b.DecodeMessage(msg)
		m.Value = &TokenAction_Tokenrevokecreate{msg}
		return true, err
	case 4: // value.transfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoinsTransfer)
		err := b.DecodeMessage(msg)
		m.Value = &TokenAction_Transfer{msg}
		return true, err
	case 5: // value.withdraw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoinsWithdraw)
		err := b.DecodeMessage(msg)
		m.Value = &TokenAction_Withdraw{msg}
		return true, err
	case 6: // value.genesis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoinsGenesis)
		err := b.DecodeMessage(msg)
		m.Value = &TokenAction_Genesis{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TokenAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TokenAction)
	// value
	switch x := m.Value.(type) {
	case *TokenAction_Tokenprecreate:
		s := proto.Size(x.Tokenprecreate)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TokenAction_Tokenfinishcreate:
		s := proto.Size(x.Tokenfinishcreate)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TokenAction_Tokenrevokecreate:
		s := proto.Size(x.Tokenrevokecreate)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TokenAction_Transfer:
		s := proto.Size(x.Transfer)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TokenAction_Withdraw:
		s := proto.Size(x.Withdraw)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TokenAction_Genesis:
		s := proto.Size(x.Genesis)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// 创建token，支持最大精确度是6位小数,即存入数据库的实际总额需要放大1e6倍
type TokenPreCreate struct {
	Name         string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Symbol       string `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	Introduction string `protobuf:"bytes,3,opt,name=introduction" json:"introduction,omitempty"`
	Total        int64  `protobuf:"varint,4,opt,name=total" json:"total,omitempty"`
	Price        int64  `protobuf:"varint,5,opt,name=price" json:"price,omitempty"`
	Owner        string `protobuf:"bytes,6,opt,name=owner" json:"owner,omitempty"`
}

func (m *TokenPreCreate) Reset()                    { *m = TokenPreCreate{} }
func (m *TokenPreCreate) String() string            { return proto.CompactTextString(m) }
func (*TokenPreCreate) ProtoMessage()               {}
func (*TokenPreCreate) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{35} }

func (m *TokenPreCreate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TokenPreCreate) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *TokenPreCreate) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

func (m *TokenPreCreate) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *TokenPreCreate) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TokenPreCreate) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type TokenFinishCreate struct {
	Symbol string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Owner  string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
}

func (m *TokenFinishCreate) Reset()                    { *m = TokenFinishCreate{} }
func (m *TokenFinishCreate) String() string            { return proto.CompactTextString(m) }
func (*TokenFinishCreate) ProtoMessage()               {}
func (*TokenFinishCreate) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{36} }

func (m *TokenFinishCreate) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *TokenFinishCreate) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type TokenRevokeCreate struct {
	Symbol string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Owner  string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
}

func (m *TokenRevokeCreate) Reset()                    { *m = TokenRevokeCreate{} }
func (m *TokenRevokeCreate) String() string            { return proto.CompactTextString(m) }
func (*TokenRevokeCreate) ProtoMessage()               {}
func (*TokenRevokeCreate) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{37} }

func (m *TokenRevokeCreate) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *TokenRevokeCreate) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type Token struct {
	Name         string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Symbol       string `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	Introduction string `protobuf:"bytes,3,opt,name=introduction" json:"introduction,omitempty"`
	Total        int64  `protobuf:"varint,4,opt,name=total" json:"total,omitempty"`
	Price        int64  `protobuf:"varint,5,opt,name=price" json:"price,omitempty"`
	Owner        string `protobuf:"bytes,6,opt,name=owner" json:"owner,omitempty"`
	Creator      string `protobuf:"bytes,7,opt,name=creator" json:"creator,omitempty"`
	Status       int32  `protobuf:"varint,8,opt,name=status" json:"status,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{38} }

func (m *Token) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Token) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Token) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

func (m *Token) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Token) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Token) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Token) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Token) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type ReqTokens struct {
	Queryall bool     `protobuf:"varint,1,opt,name=queryall" json:"queryall,omitempty"`
	Status   int32    `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Tokens   []string `protobuf:"bytes,3,rep,name=tokens" json:"tokens,omitempty"`
}

func (m *ReqTokens) Reset()                    { *m = ReqTokens{} }
func (m *ReqTokens) String() string            { return proto.CompactTextString(m) }
func (*ReqTokens) ProtoMessage()               {}
func (*ReqTokens) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{39} }

func (m *ReqTokens) GetQueryall() bool {
	if m != nil {
		return m.Queryall
	}
	return false
}

func (m *ReqTokens) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReqTokens) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type ReplyTokens struct {
	Tokens []*Token `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
}

func (m *ReplyTokens) Reset()                    { *m = ReplyTokens{} }
func (m *ReplyTokens) String() string            { return proto.CompactTextString(m) }
func (*ReplyTokens) ProtoMessage()               {}
func (*ReplyTokens) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{40} }

func (m *ReplyTokens) GetTokens() []*Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type ReceiptToken struct {
	Symbol string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Owner  string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	Status int32  `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (m *ReceiptToken) Reset()                    { *m = ReceiptToken{} }
func (m *ReceiptToken) String() string            { return proto.CompactTextString(m) }
func (*ReceiptToken) ProtoMessage()               {}
func (*ReceiptToken) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{41} }

func (m *ReceiptToken) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ReceiptToken) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ReceiptToken) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// ////////////////////////////////////////////////////////////////////////////
// message for Trade start/////////////////////////////////////////////////////
// ////////////////////////////////////////////////////////////////////////////
type Trade struct {
	// Types that are valid to be assigned to Value:
	//	*Trade_Tokensell
	//	*Trade_Tokenbuy
	//	*Trade_Tokenrevokesell
	Value isTrade_Value `protobuf_oneof:"value"`
	Ty    int32         `protobuf:"varint,4,opt,name=ty" json:"ty,omitempty"`
}

func (m *Trade) Reset()                    { *m = Trade{} }
func (m *Trade) String() string            { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()               {}
func (*Trade) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{42} }

type isTrade_Value interface {
	isTrade_Value()
}

type Trade_Tokensell struct {
	Tokensell *TradeForSell `protobuf:"bytes,1,opt,name=tokensell,oneof"`
}
type Trade_Tokenbuy struct {
	Tokenbuy *TradeForBuy `protobuf:"bytes,2,opt,name=tokenbuy,oneof"`
}
type Trade_Tokenrevokesell struct {
	Tokenrevokesell *TradeForRevokeSell `protobuf:"bytes,3,opt,name=tokenrevokesell,oneof"`
}

func (*Trade_Tokensell) isTrade_Value()       {}
func (*Trade_Tokenbuy) isTrade_Value()        {}
func (*Trade_Tokenrevokesell) isTrade_Value() {}

func (m *Trade) GetValue() isTrade_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Trade) GetTokensell() *TradeForSell {
	if x, ok := m.GetValue().(*Trade_Tokensell); ok {
		return x.Tokensell
	}
	return nil
}

func (m *Trade) GetTokenbuy() *TradeForBuy {
	if x, ok := m.GetValue().(*Trade_Tokenbuy); ok {
		return x.Tokenbuy
	}
	return nil
}

func (m *Trade) GetTokenrevokesell() *TradeForRevokeSell {
	if x, ok := m.GetValue().(*Trade_Tokenrevokesell); ok {
		return x.Tokenrevokesell
	}
	return nil
}

func (m *Trade) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Trade) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Trade_OneofMarshaler, _Trade_OneofUnmarshaler, _Trade_OneofSizer, []interface{}{
		(*Trade_Tokensell)(nil),
		(*Trade_Tokenbuy)(nil),
		(*Trade_Tokenrevokesell)(nil),
	}
}

func _Trade_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Trade)
	// value
	switch x := m.Value.(type) {
	case *Trade_Tokensell:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tokensell); err != nil {
			return err
		}
	case *Trade_Tokenbuy:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tokenbuy); err != nil {
			return err
		}
	case *Trade_Tokenrevokesell:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tokenrevokesell); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Trade.Value has unexpected type %T", x)
	}
	return nil
}

func _Trade_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Trade)
	switch tag {
	case 1: // value.tokensell
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TradeForSell)
		err := b.DecodeMessage(msg)
		m.Value = &Trade_Tokensell{msg}
		return true, err
	case 2: // value.tokenbuy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TradeForBuy)
		err := b.DecodeMessage(msg)
		m.Value = &Trade_Tokenbuy{msg}
		return true, err
	case 3: // value.tokenrevokesell
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TradeForRevokeSell)
		err := b.DecodeMessage(msg)
		m.Value = &Trade_Tokenrevokesell{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Trade_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Trade)
	// value
	switch x := m.Value.(type) {
	case *Trade_Tokensell:
		s := proto.Size(x.Tokensell)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Trade_Tokenbuy:
		s := proto.Size(x.Tokenbuy)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Trade_Tokenrevokesell:
		s := proto.Size(x.Tokenrevokesell)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// 创建众筹交易,确定一手交易的token的数量，单价以及总共有多少手token可以进行众筹
type TradeForSell struct {
	Tokensymbol       string `protobuf:"bytes,1,opt,name=tokensymbol" json:"tokensymbol,omitempty"`
	Amountperboardlot int64  `protobuf:"varint,2,opt,name=amountperboardlot" json:"amountperboardlot,omitempty"`
	Minboardlot       int64  `protobuf:"varint,3,opt,name=minboardlot" json:"minboardlot,omitempty"`
	Priceperboardlot  int64  `protobuf:"varint,4,opt,name=priceperboardlot" json:"priceperboardlot,omitempty"`
	Totalboardlot     int64  `protobuf:"varint,5,opt,name=totalboardlot" json:"totalboardlot,omitempty"`
	Starttime         int64  `protobuf:"varint,6,opt,name=starttime" json:"starttime,omitempty"`
	Stoptime          int64  `protobuf:"varint,7,opt,name=stoptime" json:"stoptime,omitempty"`
	Crowdfund         bool   `protobuf:"varint,8,opt,name=crowdfund" json:"crowdfund,omitempty"`
}

func (m *TradeForSell) Reset()                    { *m = TradeForSell{} }
func (m *TradeForSell) String() string            { return proto.CompactTextString(m) }
func (*TradeForSell) ProtoMessage()               {}
func (*TradeForSell) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{43} }

func (m *TradeForSell) GetTokensymbol() string {
	if m != nil {
		return m.Tokensymbol
	}
	return ""
}

func (m *TradeForSell) GetAmountperboardlot() int64 {
	if m != nil {
		return m.Amountperboardlot
	}
	return 0
}

func (m *TradeForSell) GetMinboardlot() int64 {
	if m != nil {
		return m.Minboardlot
	}
	return 0
}

func (m *TradeForSell) GetPriceperboardlot() int64 {
	if m != nil {
		return m.Priceperboardlot
	}
	return 0
}

func (m *TradeForSell) GetTotalboardlot() int64 {
	if m != nil {
		return m.Totalboardlot
	}
	return 0
}

func (m *TradeForSell) GetStarttime() int64 {
	if m != nil {
		return m.Starttime
	}
	return 0
}

func (m *TradeForSell) GetStoptime() int64 {
	if m != nil {
		return m.Stoptime
	}
	return 0
}

func (m *TradeForSell) GetCrowdfund() bool {
	if m != nil {
		return m.Crowdfund
	}
	return false
}

type SellOrder struct {
	Tokensymbol       string `protobuf:"bytes,1,opt,name=tokensymbol" json:"tokensymbol,omitempty"`
	Address           string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Amountperboardlot int64  `protobuf:"varint,3,opt,name=amountperboardlot" json:"amountperboardlot,omitempty"`
	Minboardlot       int64  `protobuf:"varint,4,opt,name=minboardlot" json:"minboardlot,omitempty"`
	Priceperboardlot  int64  `protobuf:"varint,5,opt,name=priceperboardlot" json:"priceperboardlot,omitempty"`
	Totalboardlot     int64  `protobuf:"varint,6,opt,name=totalboardlot" json:"totalboardlot,omitempty"`
	Soldboardlot      int64  `protobuf:"varint,7,opt,name=soldboardlot" json:"soldboardlot,omitempty"`
	Starttime         int64  `protobuf:"varint,8,opt,name=starttime" json:"starttime,omitempty"`
	Stoptime          int64  `protobuf:"varint,9,opt,name=stoptime" json:"stoptime,omitempty"`
	Crowdfund         bool   `protobuf:"varint,10,opt,name=crowdfund" json:"crowdfund,omitempty"`
	Sellid            string `protobuf:"bytes,11,opt,name=sellid" json:"sellid,omitempty"`
	Status            int32  `protobuf:"varint,12,opt,name=status" json:"status,omitempty"`
}

func (m *SellOrder) Reset()                    { *m = SellOrder{} }
func (m *SellOrder) String() string            { return proto.CompactTextString(m) }
func (*SellOrder) ProtoMessage()               {}
func (*SellOrder) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{44} }

func (m *SellOrder) GetTokensymbol() string {
	if m != nil {
		return m.Tokensymbol
	}
	return ""
}

func (m *SellOrder) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SellOrder) GetAmountperboardlot() int64 {
	if m != nil {
		return m.Amountperboardlot
	}
	return 0
}

func (m *SellOrder) GetMinboardlot() int64 {
	if m != nil {
		return m.Minboardlot
	}
	return 0
}

func (m *SellOrder) GetPriceperboardlot() int64 {
	if m != nil {
		return m.Priceperboardlot
	}
	return 0
}

func (m *SellOrder) GetTotalboardlot() int64 {
	if m != nil {
		return m.Totalboardlot
	}
	return 0
}

func (m *SellOrder) GetSoldboardlot() int64 {
	if m != nil {
		return m.Soldboardlot
	}
	return 0
}

func (m *SellOrder) GetStarttime() int64 {
	if m != nil {
		return m.Starttime
	}
	return 0
}

func (m *SellOrder) GetStoptime() int64 {
	if m != nil {
		return m.Stoptime
	}
	return 0
}

func (m *SellOrder) GetCrowdfund() bool {
	if m != nil {
		return m.Crowdfund
	}
	return false
}

func (m *SellOrder) GetSellid() string {
	if m != nil {
		return m.Sellid
	}
	return ""
}

func (m *SellOrder) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type SellOrderReceipt struct {
	Sellid string `protobuf:"bytes,1,opt,name=sellid" json:"sellid,omitempty"`
}

func (m *SellOrderReceipt) Reset()                    { *m = SellOrderReceipt{} }
func (m *SellOrderReceipt) String() string            { return proto.CompactTextString(m) }
func (*SellOrderReceipt) ProtoMessage()               {}
func (*SellOrderReceipt) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{45} }

func (m *SellOrderReceipt) GetSellid() string {
	if m != nil {
		return m.Sellid
	}
	return ""
}

type ReqAddrTokens struct {
	Addr   string   `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Status int32    `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Token  []string `protobuf:"bytes,3,rep,name=token" json:"token,omitempty"`
}

func (m *ReqAddrTokens) Reset()                    { *m = ReqAddrTokens{} }
func (m *ReqAddrTokens) String() string            { return proto.CompactTextString(m) }
func (*ReqAddrTokens) ProtoMessage()               {}
func (*ReqAddrTokens) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{46} }

func (m *ReqAddrTokens) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReqAddrTokens) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReqAddrTokens) GetToken() []string {
	if m != nil {
		return m.Token
	}
	return nil
}

type ReplySellOrders struct {
	Selloders []*SellOrder `protobuf:"bytes,1,rep,name=selloders" json:"selloders,omitempty"`
}

func (m *ReplySellOrders) Reset()                    { *m = ReplySellOrders{} }
func (m *ReplySellOrders) String() string            { return proto.CompactTextString(m) }
func (*ReplySellOrders) ProtoMessage()               {}
func (*ReplySellOrders) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{47} }

func (m *ReplySellOrders) GetSelloders() []*SellOrder {
	if m != nil {
		return m.Selloders
	}
	return nil
}

type TokenRecv struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Recv  int64  `protobuf:"varint,2,opt,name=recv" json:"recv,omitempty"`
}

func (m *TokenRecv) Reset()                    { *m = TokenRecv{} }
func (m *TokenRecv) String() string            { return proto.CompactTextString(m) }
func (*TokenRecv) ProtoMessage()               {}
func (*TokenRecv) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{48} }

func (m *TokenRecv) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TokenRecv) GetRecv() int64 {
	if m != nil {
		return m.Recv
	}
	return 0
}

type ReplyAddrRecvForTokens struct {
	Tokenrecv []*TokenRecv `protobuf:"bytes,1,rep,name=tokenrecv" json:"tokenrecv,omitempty"`
}

func (m *ReplyAddrRecvForTokens) Reset()                    { *m = ReplyAddrRecvForTokens{} }
func (m *ReplyAddrRecvForTokens) String() string            { return proto.CompactTextString(m) }
func (*ReplyAddrRecvForTokens) ProtoMessage()               {}
func (*ReplyAddrRecvForTokens) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{49} }

func (m *ReplyAddrRecvForTokens) GetTokenrecv() []*TokenRecv {
	if m != nil {
		return m.Tokenrecv
	}
	return nil
}

// 购买者发起交易用来购买token持有者之前挂单出售的token
// 其中的hash为token出售者发起出售交易的hash
type TradeForBuy struct {
	Sellid      string `protobuf:"bytes,1,opt,name=sellid" json:"sellid,omitempty"`
	Boardlotcnt int64  `protobuf:"varint,2,opt,name=boardlotcnt" json:"boardlotcnt,omitempty"`
}

func (m *TradeForBuy) Reset()                    { *m = TradeForBuy{} }
func (m *TradeForBuy) String() string            { return proto.CompactTextString(m) }
func (*TradeForBuy) ProtoMessage()               {}
func (*TradeForBuy) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{50} }

func (m *TradeForBuy) GetSellid() string {
	if m != nil {
		return m.Sellid
	}
	return ""
}

func (m *TradeForBuy) GetBoardlotcnt() int64 {
	if m != nil {
		return m.Boardlotcnt
	}
	return 0
}

// 允许token的持有者撤销之前未成交出售token的挂单
type TradeForRevokeSell struct {
	Sellid string `protobuf:"bytes,1,opt,name=sellid" json:"sellid,omitempty"`
}

func (m *TradeForRevokeSell) Reset()                    { *m = TradeForRevokeSell{} }
func (m *TradeForRevokeSell) String() string            { return proto.CompactTextString(m) }
func (*TradeForRevokeSell) ProtoMessage()               {}
func (*TradeForRevokeSell) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{51} }

func (m *TradeForRevokeSell) GetSellid() string {
	if m != nil {
		return m.Sellid
	}
	return ""
}

type ReceiptTradeBase struct {
	Tokensymbol       string `protobuf:"bytes,1,opt,name=tokensymbol" json:"tokensymbol,omitempty"`
	Owner             string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	Amountperboardlot string `protobuf:"bytes,3,opt,name=amountperboardlot" json:"amountperboardlot,omitempty"`
	Minboardlot       int64  `protobuf:"varint,4,opt,name=minboardlot" json:"minboardlot,omitempty"`
	Priceperboardlot  string `protobuf:"bytes,5,opt,name=priceperboardlot" json:"priceperboardlot,omitempty"`
	Totalboardlot     int64  `protobuf:"varint,6,opt,name=totalboardlot" json:"totalboardlot,omitempty"`
	Soldboardlot      int64  `protobuf:"varint,7,opt,name=soldboardlot" json:"soldboardlot,omitempty"`
	Starttime         int64  `protobuf:"varint,8,opt,name=starttime" json:"starttime,omitempty"`
	Stoptime          int64  `protobuf:"varint,9,opt,name=stoptime" json:"stoptime,omitempty"`
	Crowdfund         bool   `protobuf:"varint,10,opt,name=crowdfund" json:"crowdfund,omitempty"`
	Sellid            string `protobuf:"bytes,11,opt,name=sellid" json:"sellid,omitempty"`
	Status            string `protobuf:"bytes,12,opt,name=status" json:"status,omitempty"`
}

func (m *ReceiptTradeBase) Reset()                    { *m = ReceiptTradeBase{} }
func (m *ReceiptTradeBase) String() string            { return proto.CompactTextString(m) }
func (*ReceiptTradeBase) ProtoMessage()               {}
func (*ReceiptTradeBase) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{52} }

func (m *ReceiptTradeBase) GetTokensymbol() string {
	if m != nil {
		return m.Tokensymbol
	}
	return ""
}

func (m *ReceiptTradeBase) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ReceiptTradeBase) GetAmountperboardlot() string {
	if m != nil {
		return m.Amountperboardlot
	}
	return ""
}

func (m *ReceiptTradeBase) GetMinboardlot() int64 {
	if m != nil {
		return m.Minboardlot
	}
	return 0
}

func (m *ReceiptTradeBase) GetPriceperboardlot() string {
	if m != nil {
		return m.Priceperboardlot
	}
	return ""
}

func (m *ReceiptTradeBase) GetTotalboardlot() int64 {
	if m != nil {
		return m.Totalboardlot
	}
	return 0
}

func (m *ReceiptTradeBase) GetSoldboardlot() int64 {
	if m != nil {
		return m.Soldboardlot
	}
	return 0
}

func (m *ReceiptTradeBase) GetStarttime() int64 {
	if m != nil {
		return m.Starttime
	}
	return 0
}

func (m *ReceiptTradeBase) GetStoptime() int64 {
	if m != nil {
		return m.Stoptime
	}
	return 0
}

func (m *ReceiptTradeBase) GetCrowdfund() bool {
	if m != nil {
		return m.Crowdfund
	}
	return false
}

func (m *ReceiptTradeBase) GetSellid() string {
	if m != nil {
		return m.Sellid
	}
	return ""
}

func (m *ReceiptTradeBase) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type ReceiptTradeSell struct {
	Base *ReceiptTradeBase `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *ReceiptTradeSell) Reset()                    { *m = ReceiptTradeSell{} }
func (m *ReceiptTradeSell) String() string            { return proto.CompactTextString(m) }
func (*ReceiptTradeSell) ProtoMessage()               {}
func (*ReceiptTradeSell) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{53} }

func (m *ReceiptTradeSell) GetBase() *ReceiptTradeBase {
	if m != nil {
		return m.Base
	}
	return nil
}

type ReceiptTradeBuy struct {
	Buyeraddr         string `protobuf:"bytes,1,opt,name=buyeraddr" json:"buyeraddr,omitempty"`
	Sellid            string `protobuf:"bytes,2,opt,name=sellid" json:"sellid,omitempty"`
	Token             string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	Boardlotcnt       int64  `protobuf:"varint,4,opt,name=boardlotcnt" json:"boardlotcnt,omitempty"`
	Amountperboardlot string `protobuf:"bytes,5,opt,name=amountperboardlot" json:"amountperboardlot,omitempty"`
	Priceperboardlot  string `protobuf:"bytes,6,opt,name=priceperboardlot" json:"priceperboardlot,omitempty"`
	Buytxhash         string `protobuf:"bytes,7,opt,name=buytxhash" json:"buytxhash,omitempty"`
}

func (m *ReceiptTradeBuy) Reset()                    { *m = ReceiptTradeBuy{} }
func (m *ReceiptTradeBuy) String() string            { return proto.CompactTextString(m) }
func (*ReceiptTradeBuy) ProtoMessage()               {}
func (*ReceiptTradeBuy) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{54} }

func (m *ReceiptTradeBuy) GetBuyeraddr() string {
	if m != nil {
		return m.Buyeraddr
	}
	return ""
}

func (m *ReceiptTradeBuy) GetSellid() string {
	if m != nil {
		return m.Sellid
	}
	return ""
}

func (m *ReceiptTradeBuy) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ReceiptTradeBuy) GetBoardlotcnt() int64 {
	if m != nil {
		return m.Boardlotcnt
	}
	return 0
}

func (m *ReceiptTradeBuy) GetAmountperboardlot() string {
	if m != nil {
		return m.Amountperboardlot
	}
	return ""
}

func (m *ReceiptTradeBuy) GetPriceperboardlot() string {
	if m != nil {
		return m.Priceperboardlot
	}
	return ""
}

func (m *ReceiptTradeBuy) GetBuytxhash() string {
	if m != nil {
		return m.Buytxhash
	}
	return ""
}

type ReceiptTradeRevoke struct {
	Base *ReceiptTradeBase `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *ReceiptTradeRevoke) Reset()                    { *m = ReceiptTradeRevoke{} }
func (m *ReceiptTradeRevoke) String() string            { return proto.CompactTextString(m) }
func (*ReceiptTradeRevoke) ProtoMessage()               {}
func (*ReceiptTradeRevoke) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{55} }

func (m *ReceiptTradeRevoke) GetBase() *ReceiptTradeBase {
	if m != nil {
		return m.Base
	}
	return nil
}

type TradeBuyDone struct {
	Token             string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Boardlotcnt       int64  `protobuf:"varint,2,opt,name=boardlotcnt" json:"boardlotcnt,omitempty"`
	Amountperboardlot string `protobuf:"bytes,3,opt,name=amountperboardlot" json:"amountperboardlot,omitempty"`
	Priceperboardlot  string `protobuf:"bytes,4,opt,name=priceperboardlot" json:"priceperboardlot,omitempty"`
}

func (m *TradeBuyDone) Reset()                    { *m = TradeBuyDone{} }
func (m *TradeBuyDone) String() string            { return proto.CompactTextString(m) }
func (*TradeBuyDone) ProtoMessage()               {}
func (*TradeBuyDone) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{56} }

func (m *TradeBuyDone) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TradeBuyDone) GetBoardlotcnt() int64 {
	if m != nil {
		return m.Boardlotcnt
	}
	return 0
}

func (m *TradeBuyDone) GetAmountperboardlot() string {
	if m != nil {
		return m.Amountperboardlot
	}
	return ""
}

func (m *TradeBuyDone) GetPriceperboardlot() string {
	if m != nil {
		return m.Priceperboardlot
	}
	return ""
}

func init() {
	proto.RegisterType((*Genesis)(nil), "types.Genesis")
	proto.RegisterType((*CoinsAction)(nil), "types.CoinsAction")
	proto.RegisterType((*CoinsGenesis)(nil), "types.CoinsGenesis")
	proto.RegisterType((*CoinsTransfer)(nil), "types.CoinsTransfer")
	proto.RegisterType((*CoinsWithdraw)(nil), "types.CoinsWithdraw")
	proto.RegisterType((*Hashlock)(nil), "types.Hashlock")
	proto.RegisterType((*HashlockAction)(nil), "types.HashlockAction")
	proto.RegisterType((*HashlockLock)(nil), "types.HashlockLock")
	proto.RegisterType((*HashlockUnlock)(nil), "types.HashlockUnlock")
	proto.RegisterType((*HashlockSend)(nil), "types.HashlockSend")
	proto.RegisterType((*HashRecv)(nil), "types.HashRecv")
	proto.RegisterType((*Hashlockquery)(nil), "types.Hashlockquery")
	proto.RegisterType((*Ticket)(nil), "types.Ticket")
	proto.RegisterType((*TicketAction)(nil), "types.TicketAction")
	proto.RegisterType((*TicketMiner)(nil), "types.TicketMiner")
	proto.RegisterType((*TicketBind)(nil), "types.TicketBind")
	proto.RegisterType((*TicketOpen)(nil), "types.TicketOpen")
	proto.RegisterType((*TicketGenesis)(nil), "types.TicketGenesis")
	proto.RegisterType((*TicketClose)(nil), "types.TicketClose")
	proto.RegisterType((*TicketList)(nil), "types.TicketList")
	proto.RegisterType((*TicketInfos)(nil), "types.TicketInfos")
	proto.RegisterType((*ReplyTicketList)(nil), "types.ReplyTicketList")
	proto.RegisterType((*ReplyWalletTickets)(nil), "types.ReplyWalletTickets")
	proto.RegisterType((*ReceiptTicket)(nil), "types.ReceiptTicket")
	proto.RegisterType((*ReceiptTicketBind)(nil), "types.ReceiptTicketBind")
	proto.RegisterType((*ExecTxList)(nil), "types.ExecTxList")
	proto.RegisterType((*Query)(nil), "types.Query")
	proto.RegisterType((*RetrievePara)(nil), "types.RetrievePara")
	proto.RegisterType((*Retrieve)(nil), "types.Retrieve")
	proto.RegisterType((*RetrieveAction)(nil), "types.RetrieveAction")
	proto.RegisterType((*BackupRetrieve)(nil), "types.BackupRetrieve")
	proto.RegisterType((*PreRetrieve)(nil), "types.PreRetrieve")
	proto.RegisterType((*PerformRetrieve)(nil), "types.PerformRetrieve")
	proto.RegisterType((*CancelRetrieve)(nil), "types.CancelRetrieve")
	proto.RegisterType((*TokenAction)(nil), "types.TokenAction")
	proto.RegisterType((*TokenPreCreate)(nil), "types.TokenPreCreate")
	proto.RegisterType((*TokenFinishCreate)(nil), "types.TokenFinishCreate")
	proto.RegisterType((*TokenRevokeCreate)(nil), "types.TokenRevokeCreate")
	proto.RegisterType((*Token)(nil), "types.Token")
	proto.RegisterType((*ReqTokens)(nil), "types.ReqTokens")
	proto.RegisterType((*ReplyTokens)(nil), "types.ReplyTokens")
	proto.RegisterType((*ReceiptToken)(nil), "types.ReceiptToken")
	proto.RegisterType((*Trade)(nil), "types.Trade")
	proto.RegisterType((*TradeForSell)(nil), "types.TradeForSell")
	proto.RegisterType((*SellOrder)(nil), "types.SellOrder")
	proto.RegisterType((*SellOrderReceipt)(nil), "types.SellOrderReceipt")
	proto.RegisterType((*ReqAddrTokens)(nil), "types.ReqAddrTokens")
	proto.RegisterType((*ReplySellOrders)(nil), "types.ReplySellOrders")
	proto.RegisterType((*TokenRecv)(nil), "types.TokenRecv")
	proto.RegisterType((*ReplyAddrRecvForTokens)(nil), "types.ReplyAddrRecvForTokens")
	proto.RegisterType((*TradeForBuy)(nil), "types.TradeForBuy")
	proto.RegisterType((*TradeForRevokeSell)(nil), "types.TradeForRevokeSell")
	proto.RegisterType((*ReceiptTradeBase)(nil), "types.ReceiptTradeBase")
	proto.RegisterType((*ReceiptTradeSell)(nil), "types.ReceiptTradeSell")
	proto.RegisterType((*ReceiptTradeBuy)(nil), "types.ReceiptTradeBuy")
	proto.RegisterType((*ReceiptTradeRevoke)(nil), "types.ReceiptTradeRevoke")
	proto.RegisterType((*TradeBuyDone)(nil), "types.TradeBuyDone")
}

func init() { proto.RegisterFile("executor.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 2104 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x59, 0x4f, 0x8f, 0x1c, 0x47,
	0x15, 0xdf, 0x9e, 0x99, 0x9e, 0x3f, 0x6f, 0x66, 0xd7, 0xde, 0xc6, 0x98, 0x25, 0xb2, 0x8c, 0xd5,
	0xb2, 0xc2, 0xc6, 0x36, 0x9b, 0xb0, 0x06, 0x09, 0x71, 0x89, 0x76, 0x4d, 0x9c, 0x89, 0xe4, 0x10,
	0xa7, 0xbc, 0x89, 0x15, 0x21, 0x11, 0x7a, 0xba, 0x6b, 0xb2, 0xad, 0xed, 0xe9, 0x6a, 0x57, 0x57,
	0xef, 0xee, 0x70, 0x42, 0x1c, 0x90, 0x38, 0x70, 0x41, 0x44, 0xe2, 0x88, 0x38, 0x72, 0xe4, 0xc0,
	0x95, 0x0f, 0x80, 0xc4, 0x47, 0xe0, 0x1b, 0x70, 0xe6, 0x8a, 0xea, 0x55, 0x55, 0x77, 0x75, 0xf7,
	0xcc, 0x66, 0x0c, 0x7b, 0x40, 0xdc, 0xe6, 0xbd, 0xfe, 0xbd, 0x57, 0xaf, 0xde, 0x9f, 0x7a, 0xaf,
	0x6a, 0x60, 0x87, 0x5e, 0xd2, 0xb0, 0x10, 0x8c, 0x1f, 0x64, 0x9c, 0x09, 0xe6, 0xb9, 0x62, 0x99,
	0xd1, 0xfc, 0x8d, 0x5d, 0xc1, 0x83, 0x34, 0x0f, 0x42, 0x11, 0xb3, 0x54, 0x7d, 0xf1, 0xbf, 0x05,
	0x83, 0xf7, 0x69, 0x4a, 0xf3, 0x38, 0xf7, 0x6e, 0x81, 0x1b, 0xe7, 0xbc, 0x48, 0xf7, 0x9c, 0x7b,
	0xce, 0xfe, 0x90, 0x28, 0xc2, 0xff, 0xab, 0x03, 0xe3, 0x27, 0x2c, 0x4e, 0xf3, 0x23, 0x14, 0xf3,
	0x0e, 0x61, 0x88, 0x5a, 0xe6, 0x94, 0x23, 0x70, 0x7c, 0x78, 0xeb, 0x00, 0xb5, 0x1f, 0x20, 0xea,
	0x44, 0x7f, 0x9b, 0x6e, 0x91, 0x12, 0x27, 0x65, 0x2e, 0x62, 0x71, 0x1a, 0xf1, 0xe0, 0x62, 0xaf,
	0xd7, 0x96, 0x79, 0xa9, 0xbf, 0x49, 0x19, 0x83, 0xf3, 0xde, 0x86, 0xc1, 0x17, 0xca, 0xb0, 0xbd,
	0x0e, 0x8a, 0x7c, 0xcd, 0x16, 0xd1, 0x36, 0x4f, 0xb7, 0x88, 0x41, 0x79, 0x3b, 0xd0, 0x11, 0xcb,
	0xbd, 0xee, 0x3d, 0x67, 0xdf, 0x25, 0x1d, 0xb1, 0x3c, 0x1e, 0x80, 0x7b, 0x1e, 0x24, 0x05, 0xf5,
	0x9f, 0xc1, 0xc4, 0x96, 0xf1, 0x6e, 0x43, 0x3f, 0x58, 0xb0, 0x22, 0x15, 0xa8, 0xb8, 0x4b, 0x34,
	0xe5, 0xdd, 0x87, 0x6d, 0x4e, 0x45, 0xc1, 0xd3, 0xa3, 0x28, 0xe2, 0x34, 0xcf, 0x51, 0xd7, 0x88,
	0xd4, 0x99, 0xfe, 0x67, 0xb0, 0x5d, 0xdb, 0xa8, 0x77, 0x07, 0x46, 0x21, 0x8b, 0x53, 0xc1, 0xce,
	0xa8, 0x72, 0xdd, 0x88, 0x54, 0x8c, 0xb5, 0x8b, 0x79, 0xd0, 0x4b, 0x99, 0xa0, 0x7a, 0x0d, 0xfc,
	0x5d, 0xaa, 0x36, 0xfe, 0xb8, 0x46, 0xd5, 0xff, 0x70, 0x60, 0x38, 0x0d, 0xf2, 0xd3, 0x84, 0x85,
	0x67, 0xde, 0x5d, 0x80, 0x53, 0xfd, 0xfb, 0x83, 0x08, 0xf5, 0x4e, 0x88, 0xc5, 0x91, 0x8a, 0x73,
	0x11, 0x88, 0x42, 0x79, 0xde, 0x25, 0x9a, 0x92, 0x72, 0x4f, 0x38, 0x0d, 0x04, 0x3d, 0x89, 0x17,
	0x4a, 0x7d, 0x97, 0x58, 0x1c, 0x69, 0xae, 0x60, 0xc6, 0x79, 0x3d, 0x65, 0x6e, 0xc9, 0x68, 0xbb,
	0xd7, 0x5d, 0xe1, 0x5e, 0x6b, 0x53, 0xfd, 0xda, 0xa6, 0xee, 0x02, 0xcc, 0x39, 0xfb, 0x39, 0x4d,
	0x85, 0x5c, 0x7b, 0xa0, 0xd6, 0xae, 0x38, 0xfe, 0x5f, 0x1c, 0xd8, 0x31, 0x1b, 0xd4, 0x99, 0xfa,
	0x10, 0x5c, 0x24, 0x75, 0x9a, 0x9a, 0xfc, 0x31, 0xa8, 0x67, 0x2c, 0x3c, 0x9b, 0x6e, 0x11, 0x85,
	0x41, 0x70, 0x4e, 0xd3, 0xa8, 0x91, 0x6c, 0x06, 0xfc, 0x82, 0xa6, 0x11, 0x82, 0x25, 0xc6, 0xfb,
	0x2e, 0x0c, 0x4e, 0x8b, 0x14, 0x75, 0x77, 0x11, 0xfe, 0xf5, 0x06, 0xfc, 0x13, 0xfc, 0x28, 0xb3,
	0x53, 0xe3, 0x74, 0x76, 0xf6, 0xda, 0xd9, 0xf9, 0x5b, 0x07, 0x26, 0xb6, 0x49, 0x96, 0x07, 0x9c,
	0x66, 0x58, 0x71, 0xef, 0x2a, 0xd8, 0xf8, 0x5b, 0xf2, 0x64, 0xdc, 0xd0, 0x8a, 0x09, 0xc1, 0xdf,
	0xd7, 0x11, 0x05, 0x7f, 0xbf, 0x72, 0xa6, 0xda, 0x0a, 0xe6, 0x04, 0x0d, 0x39, 0x15, 0x3a, 0x5f,
	0x34, 0xe5, 0xbf, 0x59, 0x59, 0x2f, 0x7d, 0xb4, 0x16, 0xf7, 0x33, 0x95, 0x7f, 0x84, 0x86, 0xe7,
	0x32, 0x96, 0xd3, 0x56, 0xfe, 0x55, 0x1c, 0xef, 0x7b, 0x00, 0x1f, 0xa4, 0x73, 0xb6, 0x08, 0x64,
	0x18, 0x75, 0x40, 0x6e, 0x35, 0x3c, 0xfc, 0xaa, 0xa0, 0x7c, 0x49, 0x2c, 0x9c, 0xff, 0xa5, 0x03,
	0xdb, 0xb5, 0xaf, 0xa5, 0xc7, 0x1c, 0xcb, 0x63, 0xeb, 0x72, 0xbb, 0xf2, 0x7a, 0xb7, 0x99, 0x77,
	0x61, 0x95, 0xf3, 0x3d, 0x95, 0x77, 0x15, 0xc7, 0xbb, 0x07, 0xe3, 0xb0, 0xe0, 0x9c, 0xa6, 0x02,
	0x01, 0x2e, 0x02, 0x6c, 0x96, 0xff, 0xcb, 0x0e, 0xf4, 0x4f, 0xe2, 0xf0, 0x8c, 0x0a, 0xef, 0x0d,
	0x18, 0x0a, 0xfc, 0xa5, 0xb7, 0x3d, 0x22, 0x25, 0xbd, 0xd6, 0xb0, 0x3b, 0x30, 0x8a, 0xcd, 0xd1,
	0x85, 0xb6, 0x0d, 0x49, 0xc5, 0xf8, 0x4a, 0xf3, 0xee, 0xc0, 0x68, 0x11, 0xa7, 0x94, 0x5b, 0xc6,
	0x55, 0x0c, 0x29, 0x8d, 0xc4, 0xa7, 0x32, 0x13, 0xf7, 0x86, 0x4a, 0xba, 0xe2, 0x78, 0x3e, 0x4c,
	0x90, 0x32, 0xb9, 0xd2, 0x47, 0x9b, 0x6b, 0xbc, 0x76, 0x42, 0x0d, 0x56, 0x25, 0xd4, 0xaf, 0x3b,
	0x30, 0x51, 0x4e, 0xd0, 0xc5, 0xf9, 0x16, 0xb8, 0x62, 0x16, 0xa7, 0x11, 0x1a, 0x35, 0x3e, 0xdc,
	0xd5, 0xe1, 0x55, 0x98, 0xe3, 0x58, 0x55, 0x1b, 0x22, 0x10, 0xca, 0x32, 0x7d, 0x02, 0x36, 0xa1,
	0x1f, 0x65, 0x34, 0x45, 0xa8, 0x44, 0x78, 0xef, 0x34, 0x9b, 0xc6, 0xad, 0x1a, 0x78, 0x45, 0xd7,
	0x78, 0x04, 0x7d, 0x11, 0x26, 0x2c, 0xa7, 0xba, 0x92, 0xbd, 0x9a, 0xc0, 0x13, 0xf9, 0x65, 0xba,
	0x45, 0x34, 0xc6, 0x7b, 0x00, 0x2e, 0x6e, 0x5e, 0x77, 0xb1, 0x3a, 0xf8, 0x43, 0xf9, 0x45, 0xda,
	0x82, 0x10, 0x5d, 0xf1, 0xd0, 0xae, 0xf8, 0x05, 0x8c, 0x2d, 0x01, 0x99, 0xa5, 0xb3, 0x58, 0xe4,
	0xb8, 0xbb, 0x6d, 0x82, 0xbf, 0x65, 0x32, 0x70, 0x7a, 0x11, 0xf0, 0xc8, 0x1c, 0xed, 0x8a, 0xaa,
	0x25, 0x50, 0xb7, 0x9d, 0x40, 0x0b, 0x16, 0xc5, 0x73, 0x75, 0xca, 0x4c, 0x88, 0xa6, 0xfc, 0x4f,
	0x01, 0x2a, 0xaf, 0xb6, 0x42, 0xea, 0x6c, 0x12, 0xd2, 0xce, 0xaa, 0x90, 0x26, 0x46, 0xaf, 0x0c,
	0xc1, 0x46, 0x7a, 0x6f, 0x81, 0x1b, 0x96, 0xfd, 0xca, 0x25, 0x8a, 0xd8, 0xb0, 0xed, 0x32, 0xd8,
	0xae, 0xc5, 0xf0, 0xfa, 0x36, 0x52, 0x99, 0xd5, 0xb5, 0xcc, 0xf2, 0xdf, 0x32, 0x51, 0xc2, 0x1c,
	0x68, 0x94, 0x6e, 0xd7, 0xf6, 0xbc, 0xff, 0x03, 0xe3, 0x89, 0x67, 0x71, 0x8e, 0xe7, 0x74, 0x10,
	0x45, 0x5c, 0x1b, 0x84, 0xbf, 0xad, 0xe2, 0xee, 0xda, 0xc5, 0xed, 0x3f, 0x34, 0x8b, 0xc8, 0x73,
	0x0c, 0x6b, 0xdd, 0x28, 0xcd, 0xf5, 0x2a, 0x15, 0xc3, 0xff, 0x21, 0xdc, 0x20, 0x34, 0x4b, 0x96,
	0xd6, 0x5a, 0xdf, 0x86, 0x81, 0xfa, 0xae, 0xe0, 0xe3, 0xc3, 0xed, 0x5a, 0x46, 0x12, 0xf3, 0xd5,
	0xff, 0x0c, 0x3c, 0x94, 0x7d, 0x19, 0x24, 0x09, 0x15, 0xea, 0x6b, 0xbe, 0xb1, 0xb8, 0xdc, 0x7d,
	0xc6, 0xe3, 0xf3, 0x33, 0xba, 0x94, 0x3e, 0xec, 0xee, 0x4f, 0x48, 0x49, 0xfb, 0x17, 0xb0, 0x4d,
	0x68, 0x48, 0xe3, 0x4c, 0xfc, 0x17, 0xa7, 0xdc, 0x5d, 0x80, 0x8c, 0xd3, 0xf3, 0x17, 0xb6, 0x93,
	0x2c, 0x4e, 0xe9, 0xd4, 0x5e, 0xe5, 0x54, 0xff, 0x37, 0x0e, 0xec, 0xd6, 0x56, 0xc6, 0x04, 0xdf,
	0x87, 0x1b, 0x2c, 0x89, 0x3e, 0x6c, 0xa7, 0x46, 0x93, 0x2d, 0x91, 0x29, 0xbd, 0xa8, 0x21, 0x55,
	0x7e, 0x34, 0xd9, 0x1b, 0xa6, 0xe8, 0xaf, 0x1c, 0x80, 0xf7, 0x2e, 0x69, 0x78, 0x72, 0x89, 0xb1,
	0xb9, 0x03, 0x23, 0xb9, 0x39, 0x2a, 0x7b, 0x92, 0x6e, 0x72, 0x15, 0xc3, 0xbb, 0x0f, 0x5d, 0x71,
	0xa9, 0x9c, 0x69, 0x9d, 0x23, 0xd5, 0x78, 0x4e, 0xe4, 0x67, 0xa9, 0x63, 0x26, 0xfb, 0x99, 0x35,
	0x70, 0x55, 0x0c, 0xe9, 0xcc, 0x53, 0x1a, 0x7f, 0x71, 0x2a, 0xf4, 0xc1, 0xaf, 0x29, 0xff, 0x13,
	0x70, 0x3f, 0xc6, 0x06, 0x78, 0x1b, 0xfa, 0xf2, 0x22, 0xa0, 0x27, 0xf5, 0x09, 0xd1, 0x94, 0x8c,
	0xd0, 0xbc, 0x48, 0xc3, 0x1f, 0x07, 0x7a, 0x9c, 0x18, 0x91, 0x92, 0xf6, 0xf6, 0x60, 0x90, 0x05,
	0xcb, 0x84, 0x05, 0x91, 0x9e, 0x2a, 0x0c, 0xe9, 0xff, 0xd9, 0x81, 0x09, 0xa1, 0x82, 0xc7, 0xf4,
	0x9c, 0x3e, 0x0f, 0x78, 0xe0, 0xbd, 0x09, 0x3b, 0x11, 0x9d, 0x07, 0x45, 0x22, 0xea, 0x9e, 0x6e,
	0x70, 0xaf, 0x0a, 0x7a, 0xd8, 0x9a, 0x27, 0xeb, 0xbd, 0x35, 0xe3, 0x34, 0x0b, 0xb8, 0xdd, 0xdd,
	0x6c, 0x96, 0x44, 0x44, 0x34, 0x09, 0x96, 0xcf, 0x29, 0x8f, 0x59, 0x64, 0xba, 0xaf, 0xc5, 0xf2,
	0x3f, 0x87, 0xa1, 0xb1, 0x59, 0x86, 0x71, 0x16, 0x84, 0x67, 0x45, 0x56, 0x37, 0xb7, 0xce, 0xf4,
	0xbe, 0x03, 0x03, 0x4e, 0x85, 0xdc, 0xa0, 0x8e, 0x8e, 0x99, 0x05, 0xed, 0xbd, 0x13, 0x83, 0xf1,
	0xff, 0xe9, 0xc0, 0x8e, 0xf9, 0xa2, 0x7b, 0xdb, 0x23, 0xe8, 0x67, 0x9c, 0x12, 0x3d, 0x03, 0x55,
	0xe1, 0x7d, 0x8e, 0x4c, 0x44, 0xca, 0x9e, 0xa2, 0x30, 0xde, 0x21, 0x0c, 0x32, 0xca, 0xe7, 0x12,
	0xae, 0x7a, 0xd6, 0x6d, 0x03, 0xa7, 0x7c, 0xce, 0xf8, 0xc2, 0x12, 0x31, 0x40, 0xef, 0x6d, 0xe8,
	0x2b, 0xa3, 0x1b, 0xf3, 0xe7, 0x31, 0x32, 0xed, 0x45, 0x14, 0x4c, 0x0a, 0x84, 0x41, 0x1a, 0xd2,
	0x44, 0x77, 0x2e, 0x23, 0xf0, 0x04, 0x99, 0xb6, 0x80, 0x82, 0xe9, 0xee, 0xe5, 0xb6, 0xbb, 0xd7,
	0x2f, 0x1c, 0xd8, 0xa9, 0x2f, 0xb3, 0xa1, 0x5f, 0xdb, 0xd9, 0xd2, 0x59, 0x99, 0x2d, 0x8d, 0x98,
	0x76, 0xdb, 0x31, 0xfd, 0x09, 0x8c, 0x2d, 0x57, 0x5e, 0xef, 0xf2, 0xfe, 0xe7, 0x70, 0xa3, 0xe1,
	0xf8, 0x6b, 0x5e, 0xe0, 0xa7, 0xb0, 0x53, 0xf7, 0xfa, 0x35, 0xeb, 0xff, 0x5d, 0x17, 0xc6, 0x27,
	0xf2, 0x82, 0xa8, 0xb3, 0xf1, 0x5d, 0xd8, 0xc1, 0xfb, 0x62, 0xc6, 0xa9, 0xaa, 0x2d, 0x9d, 0x95,
	0x26, 0x05, 0x10, 0xfb, 0x9c, 0x53, 0x75, 0x91, 0x9b, 0x6e, 0x91, 0x06, 0xdc, 0x9b, 0xc2, 0x2e,
	0x72, 0xe6, 0x71, 0x1a, 0xe7, 0xa7, 0x5a, 0x87, 0x4a, 0xd5, 0x3d, 0x5b, 0xc7, 0x53, 0xfc, 0x5e,
	0xaa, 0x69, 0x0b, 0x95, 0x9a, 0x38, 0x3d, 0x67, 0x67, 0xc6, 0x9a, 0x6e, 0x5b, 0x13, 0xc1, 0xef,
	0x0d, 0x4d, 0xb6, 0x50, 0xed, 0x15, 0xa2, 0xf7, 0x1f, 0xbc, 0x42, 0xb8, 0xaf, 0xff, 0x0a, 0xd1,
	0xdf, 0xf4, 0x15, 0xe2, 0x64, 0x89, 0x33, 0xb0, 0x4b, 0x3a, 0x27, 0x56, 0xdd, 0xfc, 0xd1, 0x81,
	0x9d, 0xba, 0xab, 0xf1, 0xa2, 0x1e, 0xe8, 0xfb, 0x89, 0xbc, 0xa8, 0x07, 0xfa, 0x7e, 0xb2, 0x5c,
	0xcc, 0x58, 0xa2, 0xa3, 0xab, 0x29, 0x39, 0xee, 0xc4, 0xa9, 0xe0, 0x2c, 0x2a, 0x30, 0xaa, 0xba,
	0x03, 0xd5, 0x78, 0x72, 0x90, 0x11, 0x4c, 0x04, 0x89, 0x3e, 0x29, 0x15, 0x21, 0xb9, 0x19, 0x8f,
	0x43, 0x33, 0xfe, 0x2b, 0x42, 0x72, 0xd9, 0x85, 0x9c, 0x64, 0xd5, 0x4c, 0xaf, 0x08, 0xff, 0x08,
	0x76, 0x5b, 0xa1, 0xb4, 0x4c, 0x72, 0x6a, 0x26, 0x95, 0x2a, 0x3a, 0xab, 0x54, 0xd8, 0x31, 0x7c,
	0x4d, 0x15, 0x7f, 0x73, 0xc0, 0x45, 0x1d, 0xff, 0x7b, 0x1e, 0x92, 0xed, 0x11, 0x53, 0x90, 0x71,
	0x7d, 0xd1, 0x31, 0xa4, 0xd5, 0xe5, 0x86, 0xb5, 0x19, 0xef, 0x25, 0x8c, 0x08, 0x7d, 0x85, 0xfb,
	0xc1, 0x41, 0x0a, 0xef, 0xa6, 0x41, 0x92, 0xe8, 0x67, 0xb6, 0x92, 0xbe, 0xea, 0x6a, 0x8a, 0x05,
	0x20, 0xc7, 0x0e, 0x39, 0x12, 0x6a, 0xca, 0x7f, 0x0c, 0x63, 0x35, 0x0f, 0x2a, 0xd5, 0xf7, 0x4b,
	0x98, 0x9a, 0xe5, 0x26, 0xb5, 0x8a, 0x32, 0x42, 0x27, 0xb2, 0x87, 0xab, 0x99, 0xc9, 0x3c, 0x22,
	0x6d, 0x1e, 0x99, 0xb5, 0x73, 0xec, 0xdf, 0x65, 0xc4, 0x78, 0x10, 0x51, 0xef, 0x31, 0x8c, 0xd4,
	0x4a, 0x54, 0xef, 0xb0, 0x2a, 0x19, 0x04, 0x3c, 0x65, 0xfc, 0x05, 0x4d, 0x92, 0xe9, 0x16, 0xa9,
	0x70, 0xde, 0x3b, 0x30, 0x44, 0x62, 0x56, 0x2c, 0xf5, 0xc1, 0xe2, 0x35, 0x64, 0x8e, 0x8b, 0x25,
	0xd6, 0xb2, 0x46, 0x79, 0xef, 0xc1, 0x0d, 0xeb, 0x50, 0xc0, 0xc5, 0xd4, 0x39, 0xf2, 0xcd, 0x86,
	0xa0, 0x4a, 0x43, 0xbd, 0x64, 0x53, 0x66, 0xfd, 0xab, 0xcc, 0x9f, 0xe4, 0x7d, 0xd5, 0xb2, 0x57,
	0x76, 0x25, 0x65, 0xaf, 0xed, 0x2c, 0x9b, 0xe5, 0x3d, 0x82, 0x5d, 0xf5, 0x66, 0x90, 0x51, 0x3e,
	0x63, 0x01, 0x8f, 0x12, 0x66, 0x5e, 0xe6, 0xda, 0x1f, 0xa4, 0xbe, 0x45, 0x9c, 0x96, 0x38, 0xdd,
	0xe5, 0x2c, 0x96, 0xf7, 0x00, 0x6e, 0x62, 0x22, 0xda, 0xea, 0x54, 0xda, 0xb6, 0xf8, 0xb2, 0x83,
	0x60, 0x2a, 0x97, 0x40, 0x95, 0xc9, 0x75, 0xa6, 0x9e, 0x48, 0xb9, 0xc0, 0x47, 0x11, 0xf5, 0xbc,
	0x56, 0x31, 0x64, 0x6a, 0xe6, 0x82, 0x65, 0xd6, 0xfb, 0x5a, 0x49, 0xe3, 0x43, 0x24, 0x67, 0x17,
	0xd1, 0xbc, 0x48, 0x23, 0x4c, 0xef, 0x21, 0xa9, 0x18, 0xfe, 0x97, 0x5d, 0x18, 0x49, 0x27, 0x7d,
	0xc4, 0x23, 0xca, 0x37, 0xf0, 0xd4, 0x1e, 0x0c, 0x82, 0x5a, 0x0b, 0x33, 0xe4, 0x6a, 0x1f, 0x76,
	0x37, 0xf4, 0x61, 0x6f, 0x33, 0x1f, 0xba, 0x9b, 0xfa, 0xb0, 0xbf, 0xca, 0x87, 0x3e, 0x4c, 0x72,
	0x96, 0x44, 0x25, 0x48, 0x79, 0xaa, 0xc6, 0xab, 0xfb, 0x79, 0x78, 0x95, 0x9f, 0x47, 0x57, 0xf9,
	0x19, 0x1a, 0x7e, 0x56, 0x6f, 0x6b, 0x49, 0x12, 0x47, 0x7b, 0x63, 0x5d, 0xab, 0x48, 0x59, 0x55,
	0x39, 0xa9, 0x55, 0xe5, 0x03, 0xb8, 0x59, 0x86, 0x45, 0x17, 0xbd, 0xa5, 0xc3, 0xb1, 0x75, 0xf8,
	0x1f, 0xcb, 0x5b, 0xdc, 0x2b, 0x39, 0x43, 0xe8, 0xe3, 0xe4, 0xea, 0x6b, 0x6c, 0xfd, 0x84, 0xc2,
	0x63, 0xf5, 0x8c, 0xa6, 0xfa, 0x80, 0x52, 0x84, 0x7f, 0xa4, 0xef, 0xab, 0xa5, 0x0d, 0xb9, 0x77,
	0x00, 0x23, 0xb9, 0x1e, 0x93, 0x84, 0x3e, 0xa6, 0x6e, 0xea, 0x82, 0xad, 0x2c, 0xad, 0x20, 0xfe,
	0xf7, 0x61, 0xa4, 0x9b, 0x49, 0x78, 0x5e, 0xad, 0xa2, 0x4c, 0x52, 0x84, 0xb4, 0x93, 0xd3, 0xf0,
	0xdc, 0x3c, 0x8b, 0xca, 0xdf, 0xfe, 0x14, 0x6e, 0xe3, 0xca, 0x72, 0x3b, 0x52, 0xf4, 0x29, 0x33,
	0xbb, 0x3a, 0xd0, 0xc7, 0x13, 0x8a, 0xd4, 0x0d, 0x28, 0x17, 0x22, 0x15, 0xc4, 0x7f, 0x1f, 0xc6,
	0xd6, 0x11, 0xb4, 0xce, 0x7b, 0x32, 0x13, 0x4d, 0xf4, 0xc3, 0xf2, 0x3d, 0xde, 0x66, 0xf9, 0x8f,
	0xc0, 0x6b, 0x1f, 0x49, 0x6b, 0xa3, 0xf1, 0xfb, 0x2e, 0xdc, 0x34, 0xc7, 0xb4, 0x94, 0x3a, 0x0e,
	0x72, 0xba, 0x41, 0x61, 0xad, 0x3e, 0xb4, 0xd7, 0x16, 0xd5, 0xe8, 0x7a, 0x8b, 0x6a, 0xf4, 0x7f,
	0x5c, 0x54, 0xa3, 0xb2, 0xa8, 0xde, 0xad, 0x47, 0x06, 0xc3, 0xf8, 0x10, 0x7a, 0xb3, 0x20, 0x37,
	0x83, 0xf5, 0x37, 0xca, 0xfb, 0x62, 0x3d, 0x80, 0x04, 0x41, 0xfe, 0xbf, 0x1c, 0x59, 0x17, 0xd6,
	0xa7, 0x62, 0x89, 0xf7, 0xfc, 0x62, 0x49, 0xb9, 0x55, 0x71, 0x15, 0xc3, 0x32, 0xb1, 0x53, 0x33,
	0xd1, 0x2a, 0x3b, 0xab, 0x20, 0x1a, 0xb9, 0xd8, 0x6b, 0xe5, 0xe2, 0xea, 0x84, 0x70, 0xd7, 0x25,
	0xc4, 0xaa, 0x70, 0xf7, 0xd7, 0x84, 0x5b, 0xed, 0x43, 0x5c, 0xe2, 0x9f, 0x12, 0x83, 0x72, 0x1f,
	0x8a, 0xe1, 0x1f, 0x81, 0x67, 0x6f, 0x5c, 0xd5, 0xc1, 0xeb, 0x39, 0xef, 0x0f, 0x8e, 0xee, 0xcb,
	0xc7, 0xc5, 0xf2, 0x47, 0x2c, 0xa5, 0x6b, 0x0e, 0x85, 0xaf, 0xac, 0xc7, 0xd7, 0x2c, 0x8a, 0x75,
	0xbd, 0x78, 0x85, 0x0f, 0x66, 0x7d, 0xfc, 0x63, 0xf5, 0xf1, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x62, 0xe9, 0x77, 0xe1, 0x84, 0x1d, 0x00, 0x00,
}
