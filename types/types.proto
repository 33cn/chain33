syntax = "proto3";
package types;

service grpcservice{
	//chain33 对外提供服务的接口
	//区块链接口
	rpc GetBlocks(ReqBlocks) returns (Reply){}
	rpc GetLastHeader(ReqNil)returns(Header){}
	//交易接口
	rpc QueryTransaction(ReqHash) returns (TransactionDetail){}
	rpc SendTransaction(Transaction) returns (Reply){}
	rpc GetTransactionByAddr(ReqAddr)returns(ReplyTxInfos){}
	rpc GetTransactionByHashes(ReqHashes)returns(TransactionDetails){}
	//缓存接口
	rpc GetMemPool(ReqNil)returns(ReplyTxList){}
	//钱包接口
	rpc GetAccounts(ReqNil)returns(WalletAccounts){}
	rpc NewAccount(ReqNewAccount)returns(WalletAccount){}
	rpc WalletTransactionList(ReqWalletTransactionList)returns(WalletTxDetails){}
	rpc ImportPrivKey(ReqWalletImportPrivKey)returns(WalletAccount){}
	rpc SendToAddress(ReqWalletSendToAddress)returns(ReplyHash){}
	rpc SetTxFee(ReqWalletSetFee)returns(Reply){}
	rpc SetLabl(ReqWalletSetLabel)returns(WalletAccount){}
	rpc MergeBalance(ReqWalletMergeBalance)returns(ReplyHashes){}
	rpc SetPasswd(ReqWalletSetPasswd)returns(Reply){}
	rpc Lock(ReqNil)returns(Reply){}
	rpc UnLock(WalletUnLock)returns(Reply){}
	rpc GetPeerInfo(ReqNil)returns(PeerList){}
	rpc GetLastMemPool(ReqNil)returns(ReplyTxList){}
	
}

service p2premoteaddr{
	//获取远程地址
	rpc RemotePeerAddr(P2PGetAddr)returns(P2PAddr){}
}

service p2pgservice{
	
	//广播交易
	rpc BroadCastTx(P2PTx)returns(Reply){}
	rpc BroadCastBlock(P2PBlock)returns(Reply){}
	//PING 
	rpc Ping(P2PPing)returns(P2PPong){}
	//获取地址
	rpc GetAddr(P2PGetAddr)returns(P2PAddr){}
	//版本
	rpc Version(P2PVersion)returns(P2PVerAck){}
	rpc Version2(P2PVersion)returns(P2PVersion){}
	//获取区块，最高200
	rpc GetBlocks(P2PGetBlocks)returns(P2PInv){}
	
	//
	rpc GetMemPool(P2PGetMempool)returns(P2PInv){}
	
	//获取数据
	rpc GetData(P2PGetData)returns(stream InvDatas){}
	
	
	//获取头部
	rpc GetHeaders(P2PGetHeaders)returns(P2PHeaders){}
	//获取 peerinfo
	rpc GetPeerInfo(P2PGetPeerInfo)returns(P2PPeerInfo){}
	rpc RouteChat(ReqNil) returns (stream BroadCastData) {}
	
	
	
}

message ReqNil{
	
}

message P2PGetPeerInfo{
	int32 version=1;
}

message P2PPeerInfo{
	string addr=1;
	int32 port=2;
	string name=3;
	int32 mempoolSize=4;
	Header header=5;
}

message P2PVersion{
	int32 version=1;
	int64 service=2;
	int64 timestamp=3;
	string addrRecv=4;
	string addrFrom=5;
	int64 nonce=6;
	string userAgent =7;
	int64 startHeight=8;
}

message P2PVerAck {
	int32 version=1;
	int64 service=2;
	int64 nonce=3;
}

message P2PPing {
	int64  nonce  =1;
	string addr=2;
	int32  port=3;
	Signature sign=4;

}

message P2PPong{
	int64 nonce=1;
}

message P2PGetAddr{
	int64 nonce=1;
}

message P2PAddr{
	int64 nonce=1;
	repeated string addrlist=2;
	
}

message P2PGetBlocks {
	int32 version=1;
	int64 startHeight=2;
	int64 endHeight=3;
}

message P2PGetMempool{
	int32 version=1;
}

message P2PInv{
	repeated Inventory invs=1;
	
}

//ty=MSG_TX MSG_BLOCK
message Inventory{
	int32 ty=1; 
	bytes hash=2;
	int64 height=3;
}

message P2PGetData{
	int32 version=1;
	repeated Inventory invs=2;
}

message P2PTx {
	 Transaction tx=1;
}

message P2PBlock {
	 Block block=1;
}

message BroadCastData{
	oneof value{
		P2PTx tx=1;
		P2PBlock block=2;
	}
}

message P2PGetHeaders{
	int32 version=1;
	int64 startHeight=2;
	int64 endHeigh=3;
}

message P2PHeaders {
	repeated Header headers=1;
}
//end

message Header {
	int64 version = 1;
	bytes parentHash = 2;
	bytes txHash = 3;
	bytes stateHash = 4;
	int64 height = 5;
	int64 blockTime = 6;
	Signature  signature = 8;
}

message Block {
	int64 version = 1;
	bytes parentHash = 2;
	bytes txHash = 3;
	bytes stateHash = 4;
	int64 height = 5;
	int64 blockTime = 6;
	repeated Transaction txs = 7;
	Signature  signature = 8;
}

message BlockOverview {
	Header head = 1;
	int64  txCount = 2;
	repeated bytes txHashes = 3;
}

message Transaction {
	bytes      execer = 1;
	bytes      payload =2;
	Signature  signature = 3;
	int64      fee = 4;
	int64      expire  = 5;
	int64      nonce = 6; //随机ID，可以防止payload 相同的时候，交易重复
	string 	   to = 7; //对方地址，如果没有对方地址，可以为空
}

//三种签名支持
//ty = 1 -> secp256k1
//ty = 2 -> ed25519 
//ty = 3 -> sm2
message Signature {
	int32 ty = 1;
	bytes pubkey = 2;
	bytes signature = 3;
}

message ChainStatus {
	int64 currentHeight = 1;
	int64 mempoolSize = 2;
	int64 msgQueueSize = 3;
}

message ReqHash {
	bytes hash = 1;
}

message ReqInt {
	int64 height = 1;
}

message ReqAddr {
	string addr = 1;
	int32 flag  = 2;//表示取所有/from/to/其他的hash列表
	int32 count = 3;
	int32 direction=4;
	int64 height = 5;
	int64 index = 6;
}

message ReqHashes {
	repeated bytes hashes = 1;
}

message ReplyHash {
	bytes hash = 1;
}

message AddrOverview {
	int64 reciver = 1;
	int64 balance = 2;
	int64 txCount = 3;
}

message ReplyTxInfo {
	bytes hash = 1;
	int64 height = 2;
	int64 index = 3;
}

message TransactionDetail {
	Transaction tx = 1;
	ReceiptData receipt = 2;
	repeated bytes proofs = 3;
	int64 height = 4;
	int64 index = 5;
	int64 blocktime =6;
	int64  amount   = 7;
	string fromaddr   = 8;
}

message TransactionDetails {
	repeated TransactionDetail txs = 1;
}

//req
message ReqBlocks {
	int64 start = 1;
	int64 end = 2;
	bool  Isdetail =3;
}

//resp
message BlockDetails {
	repeated BlockDetail items = 1;
}

message Reply {
	bool isOk = 1;
	bytes msg = 2;
}

message ReplyBlockHeight {
	int64 height =1;
}

message ReqTxList {
	int64 count = 1;
}

message ReplyTxList {
	repeated Transaction txs = 1;
}

message TxHashList {
	repeated bytes hashes = 1;
}

message TxResult {
	int64 height =1;
	int32 index = 2;
	Transaction tx = 3;
	ReceiptData receiptdate =4;
	int64 blocktime =5;
}

//resp
message Headers {
    repeated Header items = 1;
}

message MempoolSize {
    int64 size = 1;
}

message StoreSet {
	bytes stateHash = 1;
	repeated KeyValue KV = 2;
}

message StoreGet {
	bytes stateHash = 1;
	repeated bytes keys = 2;
}

message StoreReplyValue {
	repeated bytes values = 2;
}

message KeyValue {
	bytes key = 1;
	bytes value = 2;
}


message ReceiptLog {
	int32 ty = 1;
	bytes log = 2;
}

//ty = 0 -> error Receipt
//ty = 1 -> CutFee //cut fee ,bug exec not ok
//ty = 2 -> exec ok
message Receipt {
	int32 ty = 1;
	repeated KeyValue KV = 2;
	repeated ReceiptLog logs = 3;
}

message ReceiptData {
	int32 ty = 1;
	repeated ReceiptLog logs = 3;
}

message BlockDetail {
	Block block = 1;
	repeated ReceiptData receipts = 2;
}

message Receipts {
	repeated Receipt receipts = 1;
}

message ExecTxList {
	bytes stateHash = 1;
	repeated Transaction txs = 2;
	int64 blockTime = 3;
	int64 height = 4;
}

//currency = 0 -> origin account
message Account {
	int32 currency = 1;
	int64 balance = 2;
	int64 frozen = 3;
	string addr = 4;
}

message WalletAccount {
	Account acc = 1;
	string label = 2;
}

message ReceiptBalance {
	int64 prev = 1;
	int64 current = 2;
	int64 delt = 3;
}

message ReceiptExecAccount {
	string execAddr = 1;
	Account prev = 2;
	Account current = 3;
}

//p2p
message Peer {
	string addr = 1;
	int32  port = 2;
	string name = 3;
	int32  mempoolSize = 4;
	Header header = 5;
}

message PeerList {
	repeated Peer peers =1;
}

// merkle avl tree
message LeafNode {
        bytes key =1;
        bytes value = 2;
        int32 height = 3;
        int32 size = 4;
}

message InnerNode {
        bytes leftHash =1;
        bytes rightHash = 2;
        int32 height = 3;
        int32 size = 4;
}

message StoreNode {
        bytes key =1;
        bytes value = 2;
        bytes leftHash =3;
        bytes rightHash = 4;
        int32 height = 5;
        int32 size = 6;
}

message MAVLProof {
	bytes leafHash =1;
	repeated InnerNode innerNodes = 2;
	bytes rootHash =3;
}


message InvData {
	oneof value {
		Transaction tx = 1;
		Block block = 2;
	}
	int32 ty = 3;
}

message InvDatas {
	repeated InvData items = 1;
}

message Genesis {
	bool isrun = 1;
}

//Wallet Module
message WalletAccounts {
	repeated WalletAccount wallets = 1;
}

message ReqNewAccount {
	string label = 1;
}

message ReqWalletTransactionList {
	bytes fromTx = 1; //从这个txId 开始读。默认从最后一个数据。
	int32 count = 2;
	int32 direction=3;
}

message ReqWalletImportPrivKey {
	string privkey = 1; //bitcoin 的私钥格式
	string label = 2;
}

message ReqWalletSendToAddress {
	string from = 1;
	string to = 2;
	int64 amount = 3;
	string note = 4;
}

message ReqWalletSetFee {
	int64 amount = 1;
}

message ReqWalletSetLabel {
	string addr = 1;
	string label = 2;
}

message ReqWalletMergeBalance {
	string to = 1;
}

message ReplyHashes {
	repeated bytes hashes = 1;
}


message ReqWalletSetPasswd {
	string oldpass = 1;
	string newpass = 2;
}

message WalletUnLock {
	string passwd = 1;
	int64 timeout = 2;
}

message Config {
	string title=1;
	string loglevel = 2;
	string logConsoleLevel = 10;
	string logFile = 9;
	Store  store=3;
	Consensus consensus=4;
	MemPool memPool=5;
	BlockChain blockChain=6;
	Wallet wallet=7;
	P2P p2p=8;
}

message P2P {	
	int32           seedPort=1;
	string          dbPath=2;
	bool            isSeed=3;
	repeated string seeds=4;
	bool enable=5;
	int32 version=6;
	int32 verMix=7;
	int32 verMax=8;
}

message Wallet{
	int64  minFee=1;
	string dbPath=2;
}

message Store {
	string driver=1;
	string dbPath=2;
}

message Consensus {
	string name=1;
	string genesis=2;
	bool minerstart = 3;
	int64 genesisBlockTime = 4;
	string hotkeyAddr = 5;
}

message MemPool {
	int64 poolCacheSize=1;
	int64 minTxFee=2;
}

message BlockChain {
	int64 defCacheSize=1;
	int64 maxFetchBlockNum=2;
	int64 timeoutSeconds=3;
	int64 batchBlockNum=4;
	string driver = 5;
	string dbPath = 6;
}

message ReplyTxInfos {
	repeated ReplyTxInfo txInfos = 1;
}

message WalletTxDetail {
	Transaction tx = 1;
	ReceiptData receipt = 2;
	int64       height  = 3;
	int64       index   = 4;
	int64       blocktime   = 5;
	int64       amount   = 6;
	string      fromaddr   = 7;
	bytes 	    txhash	  =8;
}

message WalletTxDetails {
	repeated WalletTxDetail txDetails = 1;
}

message WalletAccountStore {
	string privkey = 1;
	string label = 2;
	string addr = 3;
	string timeStamp = 4;
}

message Blocks {
	repeated Block items = 1;
}

message WalletPwHash {
	bytes pwHash = 1;
	string randstr = 2;
}

//message for execs.coins
message CoinsAction {
	oneof value {
		CoinsTransfer  transfer = 1;
		CoinsGenesis   genesis = 2;
	}
	int32 ty = 3;
}

//给某个地址凭空打币
//只能执行一次，不能执行第二次
message CoinsGenesis {
	int64 amount = 2;
	string returnAddress = 3;
}

message CoinsTransfer {
	int64 amount = 2;
	string note = 3;
}

//message for execs.ticket
message TicketAction {
	oneof value {
		TicketOpen      topen = 1;
		TicketGenesis   genesis = 2;
		TicketClose  tclose = 3;
		TicketMiner miner = 4;
	}
	int32 ty = 10;
}

message TicketMiner {
	uint32 bits = 1;
	int64  reward = 2;
	string ticketId = 3;
	bytes  modify = 4;
}

message TicketOpen {
	string minerAddress = 1; //用户挖矿的ticket 地址
	int32 count = 2; //购买ticket的数目
}

message TicketGenesis {
	string minerAddress = 1;
	string returnAddress = 2;
	int32 count = 3;
}

message TicketClose {
	repeated string ticketId = 1;
}

message TicketList {
	string addr = 1;
	bool isClosed = 2;
}

message TicketInfos {
	repeated string ticketIds = 1;
}

message Ticket {
	string ticketId  = 1;
	int32  status     = 2;   //0 -> 未成熟 1 -> 可挖矿 2 -> 已挖成功 3-> 已关闭
	bool   isGenesis   = 3;  //genesis 创建的私钥比较特殊
	int64  createTime = 4;   //创建时间
	int64  minerTime  = 5;   //挖矿时间
	int64  minerValue = 8;   //挖到的币的数目
	string minerAddress = 6;
	string returnAddress = 7; //return wallet
}

message ReceiptTicket {
	string ticketId = 1;
}

message Hashlock{
	bytes  hashlockId    = 1;
	int32  status        = 2;
	int64  CreateTime    = 3;
	string toAddress     = 4;
	string returnAddress = 5;
	int64  amount        = 6;
	int64  frozentime    = 7;
}

//message for hashlock
message HashlockAction {
	oneof value {
		HashlockLock      hlock   = 1;
		HashlockSend      hsend   = 2;
		HashlockUnlock    hunlock = 3;
	}
	int32 ty = 4;
}

message HashlockLock {
	int64  amount        = 1;
	int64  time          = 2;
	bytes  hash          = 3;
	string toAddress     = 4;
	string returnAddress = 5;
}

message HashlockUnlock {
	bytes  secret   = 1;
	//bytes  hash     = 3;
}

message HashlockSend {
	bytes  secret   = 1;
	//bytes  hash     = 3;
}

