syntax = "proto3";
package types;

//add by bangzhu.li
service grpcservice{
	rpc SendTransaction(Transaction) returns (Reply){}
	rpc QueryTransaction(RequestHash) returns (Reply){}
	rpc GetBlocks(RequestBlocks) returns (Reply){}
}
//end

message Header {
	int64 version = 1;
	bytes parentHash = 2;
	bytes txHash = 3;
	bytes stateHash = 4;
	int64 height = 5;
	int64 blockTime = 6;
}

message Block {
	int64 version = 1;
	bytes parentHash = 2;
	bytes txHash = 3;
	int64 height = 4;
	int64 blockTime = 5;
	repeated Transaction txs = 6;
}

message Transaction {
	bytes  execer = 1;
	bytes  payload =2;
	Signature  signature = 3;
	int64  fee = 4;
}

//三种签名支持
//ty = 1 -> secp256k1
//ty = 2 -> ed25519 
//ty = 3 -> sm2
message Signature {
	int32 ty = 1;
	bytes pubkey = 2;
	bytes signature = 3;
}

message ChainStatus {
	int64 currentHeight = 1;
	int64 mempoolSize = 2;
	int64 msgQueueSize = 3;
}

message RequestHash {
	bytes hash = 1;
}

message ReplyHash {
	bytes hash = 1;
}


message MerkleProof {
	repeated bytes hashs = 1;
}

//req
message RequestBlocks {
	int64 start = 1;
	int64 end = 2;
}

//resp
message Blocks {
	repeated Block items = 1;
}

message Reply {
	bool isOk = 1;
	bytes msg = 2;
}

message ReplyBlockHeight {
	int64 height =1;
}

message RequestTxList {
	int64 count = 1;
}

message ReplyTxList {
	repeated Transaction txs = 1;
}

message TxHashList {
	repeated bytes hashes = 1;
}

message TxResult {
	int64 height =1;
	int32 index = 2;
	Transaction tx = 3;
}

//resp
message Headers {
    repeated Header items = 1;
}

message MempoolSize {
    int64 size = 1;
}

message StoreSet {
	bytes stateHash = 1;
	repeated KeyValue KV = 2;
}

message StoreGet {
	bytes stateHash = 1;
	repeated bytes keys = 2;
}

message StoreReplyValue {
	repeated bytes values = 2;
}

message KeyValue {
	bytes key = 1;
	bytes value = 2;
}


message ReceiptLog {
	int32 ty = 1;
	bytes log = 2;
}

//ty = 0 -> error Receipt
//ty = 1 -> CutFee //cut fee ,bug exec not ok
//ty = 2 -> exec ok
message Receipt {
	int32 ty = 1;
	repeated KeyValue KV = 2;
	repeated ReceiptLog logs = 3;
}

message Receipts {
	repeated Receipt receipts = 1;
}

message ExecTxList {
	bytes stateHash = 1;
	repeated Transaction txs = 2;
}

//currency = 0 -> origin account

message Account {
	int32 currency = 1;
	int64 balance = 2;
	int64 frozen = 3;
}

message ReceiptBalance {
	int64 prev = 1;
	int64 current = 2;
	int64 delt = 3;
}