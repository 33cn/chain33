// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReqNil struct {
}

func (m *ReqNil) Reset()                    { *m = ReqNil{} }
func (m *ReqNil) String() string            { return proto.CompactTextString(m) }
func (*ReqNil) ProtoMessage()               {}
func (*ReqNil) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

type GenSeedLang struct {
	Lang int32 `protobuf:"varint,1,opt,name=lang" json:"lang,omitempty"`
}

func (m *GenSeedLang) Reset()                    { *m = GenSeedLang{} }
func (m *GenSeedLang) String() string            { return proto.CompactTextString(m) }
func (*GenSeedLang) ProtoMessage()               {}
func (*GenSeedLang) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *GenSeedLang) GetLang() int32 {
	if m != nil {
		return m.Lang
	}
	return 0
}

type GetSeedByPw struct {
	Passwd string `protobuf:"bytes,1,opt,name=passwd" json:"passwd,omitempty"`
}

func (m *GetSeedByPw) Reset()                    { *m = GetSeedByPw{} }
func (m *GetSeedByPw) String() string            { return proto.CompactTextString(m) }
func (*GetSeedByPw) ProtoMessage()               {}
func (*GetSeedByPw) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *GetSeedByPw) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

type SaveSeedByPw struct {
	Seed   string `protobuf:"bytes,1,opt,name=seed" json:"seed,omitempty"`
	Passwd string `protobuf:"bytes,2,opt,name=passwd" json:"passwd,omitempty"`
}

func (m *SaveSeedByPw) Reset()                    { *m = SaveSeedByPw{} }
func (m *SaveSeedByPw) String() string            { return proto.CompactTextString(m) }
func (*SaveSeedByPw) ProtoMessage()               {}
func (*SaveSeedByPw) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *SaveSeedByPw) GetSeed() string {
	if m != nil {
		return m.Seed
	}
	return ""
}

func (m *SaveSeedByPw) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

type ReplySeed struct {
	Seed string `protobuf:"bytes,1,opt,name=seed" json:"seed,omitempty"`
}

func (m *ReplySeed) Reset()                    { *m = ReplySeed{} }
func (m *ReplySeed) String() string            { return proto.CompactTextString(m) }
func (*ReplySeed) ProtoMessage()               {}
func (*ReplySeed) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *ReplySeed) GetSeed() string {
	if m != nil {
		return m.Seed
	}
	return ""
}

type ReqBalance struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
	Execer    string   `protobuf:"bytes,2,opt,name=execer" json:"execer,omitempty"`
}

func (m *ReqBalance) Reset()                    { *m = ReqBalance{} }
func (m *ReqBalance) String() string            { return proto.CompactTextString(m) }
func (*ReqBalance) ProtoMessage()               {}
func (*ReqBalance) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *ReqBalance) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *ReqBalance) GetExecer() string {
	if m != nil {
		return m.Execer
	}
	return ""
}

type ReplyBlockHeight struct {
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *ReplyBlockHeight) Reset()                    { *m = ReplyBlockHeight{} }
func (m *ReplyBlockHeight) String() string            { return proto.CompactTextString(m) }
func (*ReplyBlockHeight) ProtoMessage()               {}
func (*ReplyBlockHeight) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *ReplyBlockHeight) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ReqTxList struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *ReqTxList) Reset()                    { *m = ReqTxList{} }
func (m *ReqTxList) String() string            { return proto.CompactTextString(m) }
func (*ReqTxList) ProtoMessage()               {}
func (*ReqTxList) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

func (m *ReqTxList) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReplyTxList struct {
	Txs []*Transaction `protobuf:"bytes,1,rep,name=txs" json:"txs,omitempty"`
}

func (m *ReplyTxList) Reset()                    { *m = ReplyTxList{} }
func (m *ReplyTxList) String() string            { return proto.CompactTextString(m) }
func (*ReplyTxList) ProtoMessage()               {}
func (*ReplyTxList) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *ReplyTxList) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

type TxHashList struct {
	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (m *TxHashList) Reset()                    { *m = TxHashList{} }
func (m *TxHashList) String() string            { return proto.CompactTextString(m) }
func (*TxHashList) ProtoMessage()               {}
func (*TxHashList) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{9} }

func (m *TxHashList) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type TxResult struct {
	Height      int64        `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Index       int32        `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Tx          *Transaction `protobuf:"bytes,3,opt,name=tx" json:"tx,omitempty"`
	Receiptdate *ReceiptData `protobuf:"bytes,4,opt,name=receiptdate" json:"receiptdate,omitempty"`
	Blocktime   int64        `protobuf:"varint,5,opt,name=blocktime" json:"blocktime,omitempty"`
	ActionName  string       `protobuf:"bytes,6,opt,name=actionName" json:"actionName,omitempty"`
}

func (m *TxResult) Reset()                    { *m = TxResult{} }
func (m *TxResult) String() string            { return proto.CompactTextString(m) }
func (*TxResult) ProtoMessage()               {}
func (*TxResult) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{10} }

func (m *TxResult) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TxResult) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TxResult) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TxResult) GetReceiptdate() *ReceiptData {
	if m != nil {
		return m.Receiptdate
	}
	return nil
}

func (m *TxResult) GetBlocktime() int64 {
	if m != nil {
		return m.Blocktime
	}
	return 0
}

func (m *TxResult) GetActionName() string {
	if m != nil {
		return m.ActionName
	}
	return ""
}

type ReplyTxInfos struct {
	TxInfos []*ReplyTxInfo `protobuf:"bytes,1,rep,name=txInfos" json:"txInfos,omitempty"`
}

func (m *ReplyTxInfos) Reset()                    { *m = ReplyTxInfos{} }
func (m *ReplyTxInfos) String() string            { return proto.CompactTextString(m) }
func (*ReplyTxInfos) ProtoMessage()               {}
func (*ReplyTxInfos) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{11} }

func (m *ReplyTxInfos) GetTxInfos() []*ReplyTxInfo {
	if m != nil {
		return m.TxInfos
	}
	return nil
}

type MinerFlag struct {
	Flag int32 `protobuf:"varint,1,opt,name=flag" json:"flag,omitempty"`
}

func (m *MinerFlag) Reset()                    { *m = MinerFlag{} }
func (m *MinerFlag) String() string            { return proto.CompactTextString(m) }
func (*MinerFlag) ProtoMessage()               {}
func (*MinerFlag) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{12} }

func (m *MinerFlag) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

type ReqNewAccount struct {
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
}

func (m *ReqNewAccount) Reset()                    { *m = ReqNewAccount{} }
func (m *ReqNewAccount) String() string            { return proto.CompactTextString(m) }
func (*ReqNewAccount) ProtoMessage()               {}
func (*ReqNewAccount) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{13} }

func (m *ReqNewAccount) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ReqWalletTransactionList struct {
	FromTx    []byte `protobuf:"bytes,1,opt,name=fromTx,proto3" json:"fromTx,omitempty"`
	Count     int32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Direction int32  `protobuf:"varint,3,opt,name=direction" json:"direction,omitempty"`
}

func (m *ReqWalletTransactionList) Reset()                    { *m = ReqWalletTransactionList{} }
func (m *ReqWalletTransactionList) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletTransactionList) ProtoMessage()               {}
func (*ReqWalletTransactionList) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{14} }

func (m *ReqWalletTransactionList) GetFromTx() []byte {
	if m != nil {
		return m.FromTx
	}
	return nil
}

func (m *ReqWalletTransactionList) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqWalletTransactionList) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

type ReqWalletImportPrivKey struct {
	Privkey string `protobuf:"bytes,1,opt,name=privkey" json:"privkey,omitempty"`
	Label   string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
}

func (m *ReqWalletImportPrivKey) Reset()                    { *m = ReqWalletImportPrivKey{} }
func (m *ReqWalletImportPrivKey) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletImportPrivKey) ProtoMessage()               {}
func (*ReqWalletImportPrivKey) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{15} }

func (m *ReqWalletImportPrivKey) GetPrivkey() string {
	if m != nil {
		return m.Privkey
	}
	return ""
}

func (m *ReqWalletImportPrivKey) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ReqWalletSendToAddress struct {
	From   string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To     string `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Amount int64  `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	Note   string `protobuf:"bytes,4,opt,name=note" json:"note,omitempty"`
}

func (m *ReqWalletSendToAddress) Reset()                    { *m = ReqWalletSendToAddress{} }
func (m *ReqWalletSendToAddress) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletSendToAddress) ProtoMessage()               {}
func (*ReqWalletSendToAddress) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{16} }

func (m *ReqWalletSendToAddress) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ReqWalletSendToAddress) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ReqWalletSendToAddress) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ReqWalletSendToAddress) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type ReqWalletSetFee struct {
	Amount int64 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
}

func (m *ReqWalletSetFee) Reset()                    { *m = ReqWalletSetFee{} }
func (m *ReqWalletSetFee) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletSetFee) ProtoMessage()               {}
func (*ReqWalletSetFee) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{17} }

func (m *ReqWalletSetFee) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type ReqWalletSetLabel struct {
	Addr  string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
}

func (m *ReqWalletSetLabel) Reset()                    { *m = ReqWalletSetLabel{} }
func (m *ReqWalletSetLabel) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletSetLabel) ProtoMessage()               {}
func (*ReqWalletSetLabel) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{18} }

func (m *ReqWalletSetLabel) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReqWalletSetLabel) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ReqWalletMergeBalance struct {
	To string `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
}

func (m *ReqWalletMergeBalance) Reset()                    { *m = ReqWalletMergeBalance{} }
func (m *ReqWalletMergeBalance) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletMergeBalance) ProtoMessage()               {}
func (*ReqWalletMergeBalance) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{19} }

func (m *ReqWalletMergeBalance) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type ReplyHashes struct {
	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (m *ReplyHashes) Reset()                    { *m = ReplyHashes{} }
func (m *ReplyHashes) String() string            { return proto.CompactTextString(m) }
func (*ReplyHashes) ProtoMessage()               {}
func (*ReplyHashes) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{20} }

func (m *ReplyHashes) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type ReqWalletSetPasswd struct {
	Oldpass string `protobuf:"bytes,1,opt,name=oldpass" json:"oldpass,omitempty"`
	Newpass string `protobuf:"bytes,2,opt,name=newpass" json:"newpass,omitempty"`
}

func (m *ReqWalletSetPasswd) Reset()                    { *m = ReqWalletSetPasswd{} }
func (m *ReqWalletSetPasswd) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletSetPasswd) ProtoMessage()               {}
func (*ReqWalletSetPasswd) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{21} }

func (m *ReqWalletSetPasswd) GetOldpass() string {
	if m != nil {
		return m.Oldpass
	}
	return ""
}

func (m *ReqWalletSetPasswd) GetNewpass() string {
	if m != nil {
		return m.Newpass
	}
	return ""
}

type WalletUnLock struct {
	Passwd  string `protobuf:"bytes,1,opt,name=passwd" json:"passwd,omitempty"`
	Timeout int64  `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *WalletUnLock) Reset()                    { *m = WalletUnLock{} }
func (m *WalletUnLock) String() string            { return proto.CompactTextString(m) }
func (*WalletUnLock) ProtoMessage()               {}
func (*WalletUnLock) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{22} }

func (m *WalletUnLock) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *WalletUnLock) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type Query struct {
	Execer   []byte `protobuf:"bytes,1,opt,name=execer,proto3" json:"execer,omitempty"`
	FuncName string `protobuf:"bytes,2,opt,name=funcName" json:"funcName,omitempty"`
	Payload  []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{23} }

func (m *Query) GetExecer() []byte {
	if m != nil {
		return m.Execer
	}
	return nil
}

func (m *Query) GetFuncName() string {
	if m != nil {
		return m.FuncName
	}
	return ""
}

func (m *Query) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ReqHash struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *ReqHash) Reset()                    { *m = ReqHash{} }
func (m *ReqHash) String() string            { return proto.CompactTextString(m) }
func (*ReqHash) ProtoMessage()               {}
func (*ReqHash) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{24} }

func (m *ReqHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type HexTx struct {
	Tx string `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
}

func (m *HexTx) Reset()                    { *m = HexTx{} }
func (m *HexTx) String() string            { return proto.CompactTextString(m) }
func (*HexTx) ProtoMessage()               {}
func (*HexTx) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{25} }

func (m *HexTx) GetTx() string {
	if m != nil {
		return m.Tx
	}
	return ""
}

type ReqInt struct {
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *ReqInt) Reset()                    { *m = ReqInt{} }
func (m *ReqInt) String() string            { return proto.CompactTextString(m) }
func (*ReqInt) ProtoMessage()               {}
func (*ReqInt) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{26} }

func (m *ReqInt) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ReqAddr struct {
	Addr      string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Flag      int32  `protobuf:"varint,2,opt,name=flag" json:"flag,omitempty"`
	Count     int32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Direction int32  `protobuf:"varint,4,opt,name=direction" json:"direction,omitempty"`
	Height    int64  `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	Index     int64  `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
}

func (m *ReqAddr) Reset()                    { *m = ReqAddr{} }
func (m *ReqAddr) String() string            { return proto.CompactTextString(m) }
func (*ReqAddr) ProtoMessage()               {}
func (*ReqAddr) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{27} }

func (m *ReqAddr) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReqAddr) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *ReqAddr) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqAddr) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *ReqAddr) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ReqAddr) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type ReqHashes struct {
	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (m *ReqHashes) Reset()                    { *m = ReqHashes{} }
func (m *ReqHashes) String() string            { return proto.CompactTextString(m) }
func (*ReqHashes) ProtoMessage()               {}
func (*ReqHashes) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{28} }

func (m *ReqHashes) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type ReplyHash struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *ReplyHash) Reset()                    { *m = ReplyHash{} }
func (m *ReplyHash) String() string            { return proto.CompactTextString(m) }
func (*ReplyHash) ProtoMessage()               {}
func (*ReplyHash) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{29} }

func (m *ReplyHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type AddrOverview struct {
	Reciver int64 `protobuf:"varint,1,opt,name=reciver" json:"reciver,omitempty"`
	Balance int64 `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	TxCount int64 `protobuf:"varint,3,opt,name=txCount" json:"txCount,omitempty"`
}

func (m *AddrOverview) Reset()                    { *m = AddrOverview{} }
func (m *AddrOverview) String() string            { return proto.CompactTextString(m) }
func (*AddrOverview) ProtoMessage()               {}
func (*AddrOverview) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{30} }

func (m *AddrOverview) GetReciver() int64 {
	if m != nil {
		return m.Reciver
	}
	return 0
}

func (m *AddrOverview) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *AddrOverview) GetTxCount() int64 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

type ReplyTxInfo struct {
	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height int64  `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Index  int64  `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
}

func (m *ReplyTxInfo) Reset()                    { *m = ReplyTxInfo{} }
func (m *ReplyTxInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyTxInfo) ProtoMessage()               {}
func (*ReplyTxInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{31} }

func (m *ReplyTxInfo) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ReplyTxInfo) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ReplyTxInfo) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// req
type ReqBlocks struct {
	Start    int64  `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End      int64  `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	Isdetail bool   `protobuf:"varint,3,opt,name=Isdetail" json:"Isdetail,omitempty"`
	Pid      string `protobuf:"bytes,4,opt,name=pid" json:"pid,omitempty"`
}

func (m *ReqBlocks) Reset()                    { *m = ReqBlocks{} }
func (m *ReqBlocks) String() string            { return proto.CompactTextString(m) }
func (*ReqBlocks) ProtoMessage()               {}
func (*ReqBlocks) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{32} }

func (m *ReqBlocks) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReqBlocks) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *ReqBlocks) GetIsdetail() bool {
	if m != nil {
		return m.Isdetail
	}
	return false
}

func (m *ReqBlocks) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

type Peer struct {
	Addr        string  `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Port        int32   `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Name        string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Self        bool    `protobuf:"varint,4,opt,name=self" json:"self,omitempty"`
	MempoolSize int32   `protobuf:"varint,5,opt,name=mempoolSize" json:"mempoolSize,omitempty"`
	Header      *Header `protobuf:"bytes,6,opt,name=header" json:"header,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{33} }

func (m *Peer) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Peer) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Peer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Peer) GetSelf() bool {
	if m != nil {
		return m.Self
	}
	return false
}

func (m *Peer) GetMempoolSize() int32 {
	if m != nil {
		return m.MempoolSize
	}
	return 0
}

func (m *Peer) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type PeerList struct {
	Peers []*Peer `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *PeerList) Reset()                    { *m = PeerList{} }
func (m *PeerList) String() string            { return proto.CompactTextString(m) }
func (*PeerList) ProtoMessage()               {}
func (*PeerList) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{34} }

func (m *PeerList) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

func init() {
	proto.RegisterType((*ReqNil)(nil), "types.ReqNil")
	proto.RegisterType((*GenSeedLang)(nil), "types.GenSeedLang")
	proto.RegisterType((*GetSeedByPw)(nil), "types.GetSeedByPw")
	proto.RegisterType((*SaveSeedByPw)(nil), "types.SaveSeedByPw")
	proto.RegisterType((*ReplySeed)(nil), "types.ReplySeed")
	proto.RegisterType((*ReqBalance)(nil), "types.ReqBalance")
	proto.RegisterType((*ReplyBlockHeight)(nil), "types.ReplyBlockHeight")
	proto.RegisterType((*ReqTxList)(nil), "types.ReqTxList")
	proto.RegisterType((*ReplyTxList)(nil), "types.ReplyTxList")
	proto.RegisterType((*TxHashList)(nil), "types.TxHashList")
	proto.RegisterType((*TxResult)(nil), "types.TxResult")
	proto.RegisterType((*ReplyTxInfos)(nil), "types.ReplyTxInfos")
	proto.RegisterType((*MinerFlag)(nil), "types.MinerFlag")
	proto.RegisterType((*ReqNewAccount)(nil), "types.ReqNewAccount")
	proto.RegisterType((*ReqWalletTransactionList)(nil), "types.ReqWalletTransactionList")
	proto.RegisterType((*ReqWalletImportPrivKey)(nil), "types.ReqWalletImportPrivKey")
	proto.RegisterType((*ReqWalletSendToAddress)(nil), "types.ReqWalletSendToAddress")
	proto.RegisterType((*ReqWalletSetFee)(nil), "types.ReqWalletSetFee")
	proto.RegisterType((*ReqWalletSetLabel)(nil), "types.ReqWalletSetLabel")
	proto.RegisterType((*ReqWalletMergeBalance)(nil), "types.ReqWalletMergeBalance")
	proto.RegisterType((*ReplyHashes)(nil), "types.ReplyHashes")
	proto.RegisterType((*ReqWalletSetPasswd)(nil), "types.ReqWalletSetPasswd")
	proto.RegisterType((*WalletUnLock)(nil), "types.WalletUnLock")
	proto.RegisterType((*Query)(nil), "types.Query")
	proto.RegisterType((*ReqHash)(nil), "types.ReqHash")
	proto.RegisterType((*HexTx)(nil), "types.HexTx")
	proto.RegisterType((*ReqInt)(nil), "types.ReqInt")
	proto.RegisterType((*ReqAddr)(nil), "types.ReqAddr")
	proto.RegisterType((*ReqHashes)(nil), "types.ReqHashes")
	proto.RegisterType((*ReplyHash)(nil), "types.ReplyHash")
	proto.RegisterType((*AddrOverview)(nil), "types.AddrOverview")
	proto.RegisterType((*ReplyTxInfo)(nil), "types.ReplyTxInfo")
	proto.RegisterType((*ReqBlocks)(nil), "types.ReqBlocks")
	proto.RegisterType((*Peer)(nil), "types.Peer")
	proto.RegisterType((*PeerList)(nil), "types.PeerList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Grpcservice service

type GrpcserviceClient interface {
	// chain33 对外提供服务的接口
	// 区块链接口
	GetBlocks(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Reply, error)
	GetLastHeader(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Header, error)
	// 交易接口
	CreateRawTransaction(ctx context.Context, in *CreateTx, opts ...grpc.CallOption) (*UnsignTx, error)
	SendRawTransaction(ctx context.Context, in *SignedTx, opts ...grpc.CallOption) (*Reply, error)
	QueryTransaction(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*TransactionDetail, error)
	SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error)
	GetTransactionByAddr(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*ReplyTxInfos, error)
	GetTransactionByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*TransactionDetails, error)
	// 缓存接口
	GetMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error)
	// 钱包接口
	GetAccounts(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletAccounts, error)
	NewAccount(ctx context.Context, in *ReqNewAccount, opts ...grpc.CallOption) (*WalletAccount, error)
	WalletTransactionList(ctx context.Context, in *ReqWalletTransactionList, opts ...grpc.CallOption) (*WalletTxDetails, error)
	ImportPrivKey(ctx context.Context, in *ReqWalletImportPrivKey, opts ...grpc.CallOption) (*WalletAccount, error)
	SendToAddress(ctx context.Context, in *ReqWalletSendToAddress, opts ...grpc.CallOption) (*ReplyHash, error)
	SetTxFee(ctx context.Context, in *ReqWalletSetFee, opts ...grpc.CallOption) (*Reply, error)
	SetLabl(ctx context.Context, in *ReqWalletSetLabel, opts ...grpc.CallOption) (*WalletAccount, error)
	MergeBalance(ctx context.Context, in *ReqWalletMergeBalance, opts ...grpc.CallOption) (*ReplyHashes, error)
	SetPasswd(ctx context.Context, in *ReqWalletSetPasswd, opts ...grpc.CallOption) (*Reply, error)
	Lock(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	UnLock(ctx context.Context, in *WalletUnLock, opts ...grpc.CallOption) (*Reply, error)
	GetPeerInfo(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*PeerList, error)
	GetLastMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error)
	GetWalletStatus(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletStatus, error)
	// 区块浏览器接口
	GetBlockOverview(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*BlockOverview, error)
	GetAddrOverview(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*AddrOverview, error)
	GetBlockHash(ctx context.Context, in *ReqInt, opts ...grpc.CallOption) (*ReplyHash, error)
	// seed
	GenSeed(ctx context.Context, in *GenSeedLang, opts ...grpc.CallOption) (*ReplySeed, error)
	GetSeed(ctx context.Context, in *GetSeedByPw, opts ...grpc.CallOption) (*ReplySeed, error)
	SaveSeed(ctx context.Context, in *SaveSeedByPw, opts ...grpc.CallOption) (*Reply, error)
	// Balance Query
	GetBalance(ctx context.Context, in *ReqBalance, opts ...grpc.CallOption) (*Accounts, error)
	QueryChain(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Reply, error)
	// Miner
	SetAutoMining(ctx context.Context, in *MinerFlag, opts ...grpc.CallOption) (*Reply, error)
	//
	GetHexTxByHash(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*HexTx, error)
}

type grpcserviceClient struct {
	cc *grpc.ClientConn
}

func NewGrpcserviceClient(cc *grpc.ClientConn) GrpcserviceClient {
	return &grpcserviceClient{cc}
}

func (c *grpcserviceClient) GetBlocks(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetBlocks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetLastHeader(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Header, error) {
	out := new(Header)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetLastHeader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) CreateRawTransaction(ctx context.Context, in *CreateTx, opts ...grpc.CallOption) (*UnsignTx, error) {
	out := new(UnsignTx)
	err := grpc.Invoke(ctx, "/types.grpcservice/CreateRawTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) SendRawTransaction(ctx context.Context, in *SignedTx, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/SendRawTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) QueryTransaction(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*TransactionDetail, error) {
	out := new(TransactionDetail)
	err := grpc.Invoke(ctx, "/types.grpcservice/QueryTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/SendTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetTransactionByAddr(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*ReplyTxInfos, error) {
	out := new(ReplyTxInfos)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetTransactionByAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetTransactionByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*TransactionDetails, error) {
	out := new(TransactionDetails)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetTransactionByHashes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error) {
	out := new(ReplyTxList)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetMemPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetAccounts(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletAccounts, error) {
	out := new(WalletAccounts)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetAccounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) NewAccount(ctx context.Context, in *ReqNewAccount, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := grpc.Invoke(ctx, "/types.grpcservice/NewAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) WalletTransactionList(ctx context.Context, in *ReqWalletTransactionList, opts ...grpc.CallOption) (*WalletTxDetails, error) {
	out := new(WalletTxDetails)
	err := grpc.Invoke(ctx, "/types.grpcservice/WalletTransactionList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) ImportPrivKey(ctx context.Context, in *ReqWalletImportPrivKey, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := grpc.Invoke(ctx, "/types.grpcservice/ImportPrivKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) SendToAddress(ctx context.Context, in *ReqWalletSendToAddress, opts ...grpc.CallOption) (*ReplyHash, error) {
	out := new(ReplyHash)
	err := grpc.Invoke(ctx, "/types.grpcservice/SendToAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) SetTxFee(ctx context.Context, in *ReqWalletSetFee, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/SetTxFee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) SetLabl(ctx context.Context, in *ReqWalletSetLabel, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := grpc.Invoke(ctx, "/types.grpcservice/SetLabl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) MergeBalance(ctx context.Context, in *ReqWalletMergeBalance, opts ...grpc.CallOption) (*ReplyHashes, error) {
	out := new(ReplyHashes)
	err := grpc.Invoke(ctx, "/types.grpcservice/MergeBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) SetPasswd(ctx context.Context, in *ReqWalletSetPasswd, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/SetPasswd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) Lock(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/Lock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) UnLock(ctx context.Context, in *WalletUnLock, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/UnLock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetPeerInfo(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*PeerList, error) {
	out := new(PeerList)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetPeerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetLastMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error) {
	out := new(ReplyTxList)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetLastMemPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetWalletStatus(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletStatus, error) {
	out := new(WalletStatus)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetWalletStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetBlockOverview(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*BlockOverview, error) {
	out := new(BlockOverview)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetBlockOverview", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetAddrOverview(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*AddrOverview, error) {
	out := new(AddrOverview)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetAddrOverview", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetBlockHash(ctx context.Context, in *ReqInt, opts ...grpc.CallOption) (*ReplyHash, error) {
	out := new(ReplyHash)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetBlockHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GenSeed(ctx context.Context, in *GenSeedLang, opts ...grpc.CallOption) (*ReplySeed, error) {
	out := new(ReplySeed)
	err := grpc.Invoke(ctx, "/types.grpcservice/GenSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetSeed(ctx context.Context, in *GetSeedByPw, opts ...grpc.CallOption) (*ReplySeed, error) {
	out := new(ReplySeed)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) SaveSeed(ctx context.Context, in *SaveSeedByPw, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/SaveSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetBalance(ctx context.Context, in *ReqBalance, opts ...grpc.CallOption) (*Accounts, error) {
	out := new(Accounts)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) QueryChain(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/QueryChain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) SetAutoMining(ctx context.Context, in *MinerFlag, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/SetAutoMining", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetHexTxByHash(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*HexTx, error) {
	out := new(HexTx)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetHexTxByHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Grpcservice service

type GrpcserviceServer interface {
	// chain33 对外提供服务的接口
	// 区块链接口
	GetBlocks(context.Context, *ReqBlocks) (*Reply, error)
	GetLastHeader(context.Context, *ReqNil) (*Header, error)
	// 交易接口
	CreateRawTransaction(context.Context, *CreateTx) (*UnsignTx, error)
	SendRawTransaction(context.Context, *SignedTx) (*Reply, error)
	QueryTransaction(context.Context, *ReqHash) (*TransactionDetail, error)
	SendTransaction(context.Context, *Transaction) (*Reply, error)
	GetTransactionByAddr(context.Context, *ReqAddr) (*ReplyTxInfos, error)
	GetTransactionByHashes(context.Context, *ReqHashes) (*TransactionDetails, error)
	// 缓存接口
	GetMemPool(context.Context, *ReqNil) (*ReplyTxList, error)
	// 钱包接口
	GetAccounts(context.Context, *ReqNil) (*WalletAccounts, error)
	NewAccount(context.Context, *ReqNewAccount) (*WalletAccount, error)
	WalletTransactionList(context.Context, *ReqWalletTransactionList) (*WalletTxDetails, error)
	ImportPrivKey(context.Context, *ReqWalletImportPrivKey) (*WalletAccount, error)
	SendToAddress(context.Context, *ReqWalletSendToAddress) (*ReplyHash, error)
	SetTxFee(context.Context, *ReqWalletSetFee) (*Reply, error)
	SetLabl(context.Context, *ReqWalletSetLabel) (*WalletAccount, error)
	MergeBalance(context.Context, *ReqWalletMergeBalance) (*ReplyHashes, error)
	SetPasswd(context.Context, *ReqWalletSetPasswd) (*Reply, error)
	Lock(context.Context, *ReqNil) (*Reply, error)
	UnLock(context.Context, *WalletUnLock) (*Reply, error)
	GetPeerInfo(context.Context, *ReqNil) (*PeerList, error)
	GetLastMemPool(context.Context, *ReqNil) (*ReplyTxList, error)
	GetWalletStatus(context.Context, *ReqNil) (*WalletStatus, error)
	// 区块浏览器接口
	GetBlockOverview(context.Context, *ReqHash) (*BlockOverview, error)
	GetAddrOverview(context.Context, *ReqAddr) (*AddrOverview, error)
	GetBlockHash(context.Context, *ReqInt) (*ReplyHash, error)
	// seed
	GenSeed(context.Context, *GenSeedLang) (*ReplySeed, error)
	GetSeed(context.Context, *GetSeedByPw) (*ReplySeed, error)
	SaveSeed(context.Context, *SaveSeedByPw) (*Reply, error)
	// Balance Query
	GetBalance(context.Context, *ReqBalance) (*Accounts, error)
	QueryChain(context.Context, *Query) (*Reply, error)
	// Miner
	SetAutoMining(context.Context, *MinerFlag) (*Reply, error)
	//
	GetHexTxByHash(context.Context, *ReqHash) (*HexTx, error)
}

func RegisterGrpcserviceServer(s *grpc.Server, srv GrpcserviceServer) {
	s.RegisterService(&_Grpcservice_serviceDesc, srv)
}

func _Grpcservice_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetBlocks(ctx, req.(*ReqBlocks))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetLastHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetLastHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetLastHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetLastHeader(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_CreateRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).CreateRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/CreateRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).CreateRawTransaction(ctx, req.(*CreateTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_SendRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).SendRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/SendRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).SendRawTransaction(ctx, req.(*SignedTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_QueryTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).QueryTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/QueryTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).QueryTransaction(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).SendTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetTransactionByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetTransactionByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetTransactionByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetTransactionByAddr(ctx, req.(*ReqAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetTransactionByHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetTransactionByHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetTransactionByHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetTransactionByHashes(ctx, req.(*ReqHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetMemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetMemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetMemPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetMemPool(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetAccounts(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNewAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).NewAccount(ctx, req.(*ReqNewAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_WalletTransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletTransactionList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).WalletTransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/WalletTransactionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).WalletTransactionList(ctx, req.(*ReqWalletTransactionList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_ImportPrivKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletImportPrivKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).ImportPrivKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/ImportPrivKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).ImportPrivKey(ctx, req.(*ReqWalletImportPrivKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_SendToAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSendToAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).SendToAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/SendToAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).SendToAddress(ctx, req.(*ReqWalletSendToAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_SetTxFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).SetTxFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/SetTxFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).SetTxFee(ctx, req.(*ReqWalletSetFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_SetLabl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetLabel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).SetLabl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/SetLabl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).SetLabl(ctx, req.(*ReqWalletSetLabel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_MergeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletMergeBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).MergeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/MergeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).MergeBalance(ctx, req.(*ReqWalletMergeBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_SetPasswd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetPasswd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).SetPasswd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/SetPasswd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).SetPasswd(ctx, req.(*ReqWalletSetPasswd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).Lock(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_UnLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletUnLock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).UnLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/UnLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).UnLock(ctx, req.(*WalletUnLock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetPeerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetPeerInfo(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetLastMemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetLastMemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetLastMemPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetLastMemPool(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetWalletStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetWalletStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetWalletStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetWalletStatus(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetBlockOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetBlockOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetBlockOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetBlockOverview(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetAddrOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetAddrOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetAddrOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetAddrOverview(ctx, req.(*ReqAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetBlockHash(ctx, req.(*ReqInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GenSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenSeedLang)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GenSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GenSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GenSeed(ctx, req.(*GenSeedLang))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeedByPw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetSeed(ctx, req.(*GetSeedByPw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_SaveSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSeedByPw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).SaveSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/SaveSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).SaveSeed(ctx, req.(*SaveSeedByPw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetBalance(ctx, req.(*ReqBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_QueryChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).QueryChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/QueryChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).QueryChain(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_SetAutoMining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinerFlag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).SetAutoMining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/SetAutoMining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).SetAutoMining(ctx, req.(*MinerFlag))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetHexTxByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetHexTxByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetHexTxByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetHexTxByHash(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

var _Grpcservice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.grpcservice",
	HandlerType: (*GrpcserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlocks",
			Handler:    _Grpcservice_GetBlocks_Handler,
		},
		{
			MethodName: "GetLastHeader",
			Handler:    _Grpcservice_GetLastHeader_Handler,
		},
		{
			MethodName: "CreateRawTransaction",
			Handler:    _Grpcservice_CreateRawTransaction_Handler,
		},
		{
			MethodName: "SendRawTransaction",
			Handler:    _Grpcservice_SendRawTransaction_Handler,
		},
		{
			MethodName: "QueryTransaction",
			Handler:    _Grpcservice_QueryTransaction_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _Grpcservice_SendTransaction_Handler,
		},
		{
			MethodName: "GetTransactionByAddr",
			Handler:    _Grpcservice_GetTransactionByAddr_Handler,
		},
		{
			MethodName: "GetTransactionByHashes",
			Handler:    _Grpcservice_GetTransactionByHashes_Handler,
		},
		{
			MethodName: "GetMemPool",
			Handler:    _Grpcservice_GetMemPool_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _Grpcservice_GetAccounts_Handler,
		},
		{
			MethodName: "NewAccount",
			Handler:    _Grpcservice_NewAccount_Handler,
		},
		{
			MethodName: "WalletTransactionList",
			Handler:    _Grpcservice_WalletTransactionList_Handler,
		},
		{
			MethodName: "ImportPrivKey",
			Handler:    _Grpcservice_ImportPrivKey_Handler,
		},
		{
			MethodName: "SendToAddress",
			Handler:    _Grpcservice_SendToAddress_Handler,
		},
		{
			MethodName: "SetTxFee",
			Handler:    _Grpcservice_SetTxFee_Handler,
		},
		{
			MethodName: "SetLabl",
			Handler:    _Grpcservice_SetLabl_Handler,
		},
		{
			MethodName: "MergeBalance",
			Handler:    _Grpcservice_MergeBalance_Handler,
		},
		{
			MethodName: "SetPasswd",
			Handler:    _Grpcservice_SetPasswd_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _Grpcservice_Lock_Handler,
		},
		{
			MethodName: "UnLock",
			Handler:    _Grpcservice_UnLock_Handler,
		},
		{
			MethodName: "GetPeerInfo",
			Handler:    _Grpcservice_GetPeerInfo_Handler,
		},
		{
			MethodName: "GetLastMemPool",
			Handler:    _Grpcservice_GetLastMemPool_Handler,
		},
		{
			MethodName: "GetWalletStatus",
			Handler:    _Grpcservice_GetWalletStatus_Handler,
		},
		{
			MethodName: "GetBlockOverview",
			Handler:    _Grpcservice_GetBlockOverview_Handler,
		},
		{
			MethodName: "GetAddrOverview",
			Handler:    _Grpcservice_GetAddrOverview_Handler,
		},
		{
			MethodName: "GetBlockHash",
			Handler:    _Grpcservice_GetBlockHash_Handler,
		},
		{
			MethodName: "GenSeed",
			Handler:    _Grpcservice_GenSeed_Handler,
		},
		{
			MethodName: "GetSeed",
			Handler:    _Grpcservice_GetSeed_Handler,
		},
		{
			MethodName: "SaveSeed",
			Handler:    _Grpcservice_SaveSeed_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Grpcservice_GetBalance_Handler,
		},
		{
			MethodName: "QueryChain",
			Handler:    _Grpcservice_QueryChain_Handler,
		},
		{
			MethodName: "SetAutoMining",
			Handler:    _Grpcservice_SetAutoMining_Handler,
		},
		{
			MethodName: "GetHexTxByHash",
			Handler:    _Grpcservice_GetHexTxByHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 1544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0x6d, 0x73, 0xdb, 0x36,
	0x12, 0xd6, 0x8b, 0x65, 0x4b, 0x2b, 0xd9, 0x56, 0x10, 0xc7, 0xa7, 0x68, 0x92, 0x8b, 0x83, 0x8b,
	0xe7, 0x72, 0x99, 0x4b, 0x72, 0x71, 0xee, 0x6d, 0x72, 0x97, 0x4e, 0xe3, 0x64, 0x62, 0x7b, 0xea,
	0x24, 0x2e, 0xad, 0x4c, 0xbf, 0xf4, 0x0b, 0x4c, 0xc2, 0x32, 0x27, 0x14, 0x29, 0x93, 0xb0, 0x4d,
	0xf5, 0x6f, 0xf4, 0x07, 0xf4, 0x1f, 0x75, 0xfa, 0x93, 0x3a, 0xbb, 0x00, 0x28, 0x50, 0x2f, 0xed,
	0xf4, 0x1b, 0x16, 0xd8, 0x5d, 0x2c, 0x76, 0x1f, 0x3c, 0x0b, 0x12, 0x5a, 0xe9, 0xd8, 0x7f, 0x36,
	0x4e, 0x13, 0x95, 0xb0, 0x86, 0x9a, 0x8c, 0x65, 0xd6, 0xef, 0xf8, 0xc9, 0x68, 0x94, 0xc4, 0x7a,
	0xb2, 0x7f, 0x4b, 0xa5, 0x22, 0xce, 0x84, 0xaf, 0xc2, 0x62, 0xaa, 0x7b, 0x16, 0x25, 0xfe, 0x17,
	0xff, 0x42, 0x84, 0x76, 0xa6, 0x73, 0x23, 0xa2, 0x48, 0x2a, 0x23, 0xad, 0x0b, 0xdf, 0x4f, 0xae,
	0x62, 0x23, 0xf2, 0x26, 0xac, 0x7a, 0xf2, 0xf2, 0x63, 0x18, 0xf1, 0x87, 0xd0, 0x3e, 0x90, 0xf1,
	0xa9, 0x94, 0xc1, 0xb1, 0x88, 0x87, 0x8c, 0xc1, 0x4a, 0x24, 0xe2, 0x61, 0xaf, 0xba, 0x53, 0x7d,
	0xdc, 0xf0, 0x68, 0xcc, 0x77, 0x51, 0x45, 0xa1, 0xca, 0xfe, 0xe4, 0xe4, 0x86, 0x6d, 0xc3, 0xea,
	0x58, 0x64, 0xd9, 0x4d, 0x40, 0x4a, 0x2d, 0xcf, 0x48, 0xfc, 0x15, 0x74, 0x4e, 0xc5, 0xb5, 0x2c,
	0xf4, 0x18, 0xac, 0x64, 0x52, 0x5a, 0x2d, 0x1a, 0x3b, 0xb6, 0xb5, 0x92, 0xed, 0x03, 0x68, 0x79,
	0x72, 0x1c, 0x4d, 0xd0, 0x78, 0x91, 0x21, 0xdf, 0x07, 0xf0, 0xe4, 0xe5, 0xbe, 0x88, 0x44, 0xec,
	0x4b, 0x76, 0x0f, 0x5a, 0x22, 0x08, 0x52, 0x99, 0x65, 0x32, 0xeb, 0x55, 0x77, 0xea, 0x8f, 0x5b,
	0xde, 0x74, 0x02, 0x37, 0x91, 0xb9, 0xf4, 0x65, 0x6a, 0x37, 0xd1, 0x12, 0x7f, 0x02, 0x5d, 0xda,
	0x64, 0x1f, 0x53, 0x75, 0x28, 0xc3, 0xe1, 0x85, 0x42, 0xdd, 0x0b, 0x1a, 0xd1, 0x6e, 0x75, 0xcf,
	0x48, 0xfc, 0x21, 0x06, 0x74, 0x39, 0xc8, 0x8f, 0xc3, 0x4c, 0xb1, 0x2d, 0x68, 0x50, 0xf2, 0x8c,
	0x8e, 0x16, 0xf8, 0x4b, 0x68, 0x93, 0x3b, 0xa3, 0xf4, 0x08, 0xea, 0x2a, 0xd7, 0xd1, 0xb4, 0xf7,
	0xd8, 0x33, 0xaa, 0xdb, 0xb3, 0xc1, 0xb4, 0x50, 0x1e, 0x2e, 0xf3, 0x47, 0x00, 0x83, 0xfc, 0x50,
	0x64, 0x17, 0x64, 0x83, 0xbb, 0x8b, 0xec, 0xc2, 0x1c, 0xa2, 0xe3, 0x19, 0x89, 0xff, 0x52, 0x85,
	0xe6, 0x20, 0xf7, 0x64, 0x76, 0x15, 0x2d, 0x0d, 0x11, 0xa3, 0x0a, 0xe3, 0x40, 0xe6, 0x74, 0xca,
	0x86, 0xa7, 0x05, 0xc6, 0xa1, 0xa6, 0xf2, 0x5e, 0x7d, 0xa7, 0xba, 0x24, 0x8a, 0x9a, 0xca, 0xd9,
	0x3f, 0xa1, 0x9d, 0x4a, 0x5f, 0x86, 0x63, 0x15, 0x08, 0x25, 0x7b, 0x2b, 0x25, 0x65, 0x4f, 0xaf,
	0xbc, 0x13, 0x4a, 0x78, 0xae, 0x1a, 0x26, 0x9d, 0x40, 0xa6, 0xc2, 0x91, 0xec, 0x35, 0x28, 0x94,
	0xe9, 0x04, 0xfb, 0x33, 0x80, 0xde, 0xe1, 0xa3, 0x18, 0xc9, 0xde, 0x2a, 0x25, 0xde, 0x99, 0xe1,
	0xff, 0x87, 0x8e, 0xc9, 0xd6, 0x51, 0x7c, 0x9e, 0x64, 0xec, 0xef, 0xb0, 0xa6, 0xf4, 0x70, 0x26,
	0x65, 0x8e, 0x96, 0x67, 0x55, 0x10, 0x1f, 0x1f, 0xc2, 0x58, 0xa6, 0xef, 0x23, 0x41, 0x18, 0x3d,
	0x8f, 0x44, 0x81, 0x51, 0x1c, 0xf3, 0x5d, 0x58, 0x47, 0x40, 0xcb, 0x9b, 0x37, 0x1a, 0xe7, 0x98,
	0x9d, 0x48, 0x9c, 0xc9, 0xc8, 0xa0, 0x48, 0x0b, 0xfc, 0x1c, 0x7a, 0x9e, 0xbc, 0xfc, 0x8e, 0x6e,
	0x86, 0x93, 0x15, 0x5b, 0x8c, 0xf3, 0x34, 0x19, 0x0d, 0x72, 0x32, 0xe9, 0x78, 0x46, 0x9a, 0x56,
	0xdf, 0xe4, 0x59, 0xfb, 0xbf, 0x07, 0xad, 0x20, 0x4c, 0x25, 0x99, 0x53, 0xba, 0x1b, 0xde, 0x74,
	0x82, 0x1f, 0xc2, 0x76, 0xb1, 0xcf, 0xd1, 0x68, 0x9c, 0xa4, 0xea, 0x24, 0x0d, 0xaf, 0xbf, 0x91,
	0x13, 0xd6, 0x83, 0xb5, 0x71, 0x1a, 0x5e, 0x7f, 0x91, 0x13, 0x13, 0x99, 0x15, 0xa7, 0x11, 0xd7,
	0xdc, 0x88, 0x2f, 0x1c, 0x4f, 0xa7, 0x32, 0x0e, 0x06, 0xc9, 0x1b, 0x0d, 0x74, 0x4a, 0x43, 0x9a,
	0x8c, 0xec, 0x35, 0xc1, 0x31, 0xdb, 0x80, 0x9a, 0x4a, 0x8c, 0x83, 0x9a, 0x4a, 0xf0, 0x4c, 0x62,
	0x44, 0xc1, 0xd7, 0x35, 0x76, 0xb4, 0x84, 0xb6, 0x71, 0x62, 0x4a, 0xdf, 0xf2, 0x68, 0xcc, 0xff,
	0x06, 0x9b, 0xce, 0x4e, 0xea, 0xbd, 0x94, 0x8e, 0x79, 0xd5, 0x35, 0xe7, 0xaf, 0xe1, 0x96, 0xab,
	0x7a, 0x8c, 0x91, 0xa2, 0x4f, 0xbc, 0x83, 0x36, 0x1e, 0x1c, 0x2f, 0x39, 0xd3, 0x5f, 0xe1, 0x4e,
	0x61, 0xfe, 0x41, 0xa6, 0x43, 0x69, 0xef, 0xb5, 0x0e, 0xbf, 0x6a, 0xc3, 0x47, 0xe6, 0x21, 0x38,
	0x1c, 0xd2, 0xb5, 0x58, 0x7a, 0x5d, 0x0e, 0x81, 0xb9, 0xe1, 0x9c, 0x10, 0xa7, 0x60, 0xa6, 0x93,
	0x28, 0x40, 0x82, 0xb1, 0x99, 0x36, 0x22, 0xae, 0xc4, 0xf2, 0x86, 0x56, 0x74, 0x5c, 0x56, 0xe4,
	0x5f, 0x43, 0x47, 0xbb, 0xf9, 0x1c, 0x1f, 0x27, 0xfe, 0x97, 0x65, 0x5c, 0x87, 0x1e, 0x10, 0xf5,
	0xc9, 0x95, 0x46, 0x45, 0xdd, 0xb3, 0x22, 0xff, 0x0c, 0x8d, 0x6f, 0xaf, 0x64, 0x3a, 0x71, 0x58,
	0xc8, 0xc0, 0x49, 0x4b, 0xac, 0x0f, 0xcd, 0xf3, 0xab, 0xd8, 0xa7, 0x6b, 0xa2, 0x77, 0x2f, 0x64,
	0x02, 0x87, 0x98, 0x44, 0x89, 0x08, 0xa8, 0x5e, 0x1d, 0xcf, 0x8a, 0xfc, 0x3e, 0xac, 0x79, 0xf2,
	0x12, 0xf3, 0x80, 0x79, 0xc6, 0x73, 0x1b, 0xb7, 0x34, 0xe6, 0x7f, 0x82, 0xc6, 0xa1, 0xcc, 0x07,
	0x39, 0x65, 0x30, 0x2f, 0x32, 0x98, 0xf3, 0x1d, 0x22, 0xfa, 0xa3, 0x78, 0x39, 0xd3, 0xfd, 0x58,
	0x25, 0xd7, 0x88, 0xaa, 0x85, 0x25, 0xb4, 0xb7, 0xad, 0x36, 0xbd, 0x6d, 0xd3, 0x2b, 0x51, 0x5f,
	0x7a, 0x25, 0x56, 0x66, 0xae, 0x84, 0xb3, 0x7f, 0x63, 0x31, 0x8d, 0xad, 0x6a, 0x72, 0x25, 0x81,
	0xff, 0x85, 0xf8, 0xf7, 0x77, 0xea, 0x6e, 0xbb, 0xc6, 0xd2, 0xb4, 0x7c, 0x0f, 0x1d, 0x3c, 0xd7,
	0xa7, 0x6b, 0x99, 0x5e, 0x87, 0xf2, 0x06, 0xf3, 0x9b, 0x4a, 0x3f, 0xbc, 0x36, 0x45, 0xa9, 0x7b,
	0x56, 0xc4, 0x95, 0x33, 0x0d, 0x42, 0x5b, 0x50, 0x23, 0x52, 0xa9, 0xf3, 0xb7, 0xce, 0x1d, 0xb2,
	0x22, 0xff, 0x54, 0x34, 0x00, 0x24, 0xa9, 0x45, 0x01, 0x38, 0x87, 0xae, 0x2d, 0x3e, 0x74, 0xdd,
	0x3d, 0xb4, 0xa0, 0x43, 0x53, 0x7b, 0xca, 0x50, 0x25, 0x53, 0x22, 0x2d, 0x9a, 0x0e, 0x09, 0xac,
	0x0b, 0x75, 0x19, 0x07, 0xc6, 0x1b, 0x0e, 0x11, 0x4f, 0x47, 0x59, 0x20, 0x95, 0x08, 0x23, 0xf2,
	0xd6, 0xf4, 0x0a, 0x19, 0xb5, 0xc7, 0x61, 0x60, 0x6e, 0x39, 0x0e, 0xf9, 0x4f, 0x55, 0x58, 0x39,
	0x91, 0x72, 0x69, 0xa9, 0x91, 0xaa, 0x6c, 0xa9, 0x71, 0x4c, 0x4c, 0x81, 0x50, 0xad, 0x1b, 0xa6,
	0x40, 0x98, 0x52, 0x83, 0x8e, 0xce, 0xc9, 0x6f, 0xd3, 0xa3, 0x31, 0xdb, 0x81, 0xf6, 0x48, 0x8e,
	0xc6, 0x49, 0x12, 0x9d, 0x86, 0x3f, 0xe8, 0xfe, 0xd0, 0xf0, 0xdc, 0x29, 0xb6, 0x8b, 0xb9, 0x10,
	0x81, 0x4c, 0xa9, 0xd2, 0xed, 0xbd, 0x75, 0x43, 0xf8, 0x87, 0x34, 0xe9, 0x99, 0x45, 0xfe, 0x14,
	0x9a, 0x18, 0x20, 0x51, 0xf2, 0x43, 0x68, 0x8c, 0xa5, 0x4c, 0x6d, 0x8b, 0x68, 0x1b, 0x0b, 0x5c,
	0xf7, 0xf4, 0xca, 0xde, 0xcf, 0x1b, 0xd0, 0x1e, 0xa6, 0x63, 0x3f, 0xc3, 0x12, 0xfb, 0x92, 0x3d,
	0x85, 0xd6, 0x81, 0x54, 0x26, 0x87, 0xdd, 0xa2, 0xa7, 0x98, 0xac, 0xf6, 0x3b, 0x6e, 0x97, 0xe1,
	0x15, 0xf6, 0x1c, 0xd6, 0x0f, 0x90, 0xc0, 0x32, 0xa5, 0xc3, 0x60, 0xeb, 0x53, 0x93, 0x8f, 0x61,
	0xd4, 0x2f, 0x07, 0xc9, 0x2b, 0xec, 0x15, 0x6c, 0xbd, 0x4d, 0xa5, 0x50, 0xd2, 0x13, 0x37, 0x4e,
	0x07, 0x61, 0x9b, 0x46, 0x51, 0x2f, 0x0e, 0xf2, 0xbe, 0x9d, 0xf8, 0x1c, 0x67, 0xe1, 0x30, 0x1e,
	0xe4, 0xbc, 0xc2, 0xfe, 0x05, 0x0c, 0x29, 0x7c, 0x89, 0xe5, 0x69, 0x38, 0x8c, 0x65, 0x30, 0xc8,
	0xe7, 0x62, 0xfc, 0x0a, 0xba, 0x44, 0x29, 0xae, 0xd1, 0xc6, 0x34, 0x4c, 0x44, 0x7f, 0xbf, 0x37,
	0xdf, 0xea, 0xdf, 0x11, 0x06, 0x68, 0xdb, 0x4d, 0xea, 0x1c, 0x8e, 0xf9, 0x82, 0x97, 0xc1, 0xdc,
	0xb6, 0xaf, 0x61, 0xeb, 0xa0, 0xd4, 0x25, 0xf7, 0x27, 0x44, 0x12, 0xce, 0xd6, 0x28, 0xf7, 0x6f,
	0xcf, 0x37, 0xee, 0x8c, 0x57, 0xd8, 0x01, 0x6c, 0xcf, 0x9a, 0x9b, 0xeb, 0xdc, 0x2d, 0xc7, 0x2e,
	0xb3, 0xfe, 0xdd, 0x65, 0xd1, 0xa3, 0xa3, 0x17, 0x00, 0x07, 0xd8, 0x27, 0x46, 0x27, 0x49, 0x12,
	0xcd, 0xd6, 0x67, 0xe6, 0xd5, 0x80, 0xa8, 0xa1, 0x13, 0xe3, 0x8b, 0xd5, 0x3c, 0x05, 0xb2, 0x59,
	0x9b, 0x3b, 0x46, 0xd4, 0x4c, 0x6f, 0xb5, 0xa8, 0xb6, 0xe0, 0xbe, 0x20, 0x1c, 0xab, 0x62, 0xb6,
	0xbf, 0xb5, 0xc8, 0x98, 0x57, 0x98, 0x07, 0x77, 0x16, 0x3f, 0x2b, 0x1e, 0x4c, 0xdd, 0x2c, 0x54,
	0xe8, 0x6f, 0x97, 0x3c, 0x0e, 0xf2, 0xe9, 0xc9, 0xdf, 0xc3, 0x7a, 0xf9, 0xf1, 0x70, 0x7f, 0xd6,
	0x57, 0x69, 0x79, 0x69, 0x6c, 0xfb, 0xb0, 0x5e, 0x7e, 0x3a, 0xcc, 0xf9, 0x29, 0x2d, 0xf7, 0xbb,
	0x6e, 0x52, 0xb1, 0x44, 0xbc, 0xc2, 0xf6, 0xa0, 0x79, 0x8a, 0xd1, 0xd1, 0xb3, 0x60, 0xde, 0x1c,
	0x9f, 0x0b, 0x73, 0x08, 0xfa, 0x1f, 0xac, 0xe9, 0xd7, 0x41, 0xc4, 0x7a, 0x0b, 0x4c, 0xe8, 0xd9,
	0xf0, 0x1b, 0x41, 0x77, 0x4a, 0x6f, 0x83, 0x7b, 0xb3, 0x1e, 0xdc, 0xd5, 0x32, 0x0e, 0x34, 0xaa,
	0x78, 0x85, 0xfd, 0x1b, 0x5a, 0xd3, 0xf7, 0xc0, 0xdd, 0x05, 0x21, 0xe8, 0xa5, 0xb9, 0xc0, 0x77,
	0x61, 0x85, 0xda, 0xff, 0x0c, 0x70, 0x66, 0xd5, 0x9e, 0xc2, 0xaa, 0x79, 0x27, 0xdc, 0x2e, 0x1d,
	0x42, 0x4f, 0x2e, 0xe0, 0x1a, 0x44, 0x25, 0x92, 0x17, 0xf5, 0x8b, 0x19, 0xe7, 0x9b, 0x0e, 0xb9,
	0x15, 0x30, 0xde, 0x30, 0xe4, 0xf4, 0x87, 0xd0, 0xff, 0x1f, 0xd8, 0x3c, 0x90, 0xca, 0x9c, 0x51,
	0x09, 0x75, 0x35, 0x77, 0x03, 0xca, 0xe1, 0x6a, 0x1d, 0xc2, 0x7f, 0xd7, 0x72, 0x67, 0xd1, 0x32,
	0x67, 0x89, 0xc6, 0x96, 0xab, 0xa4, 0xc5, 0x2b, 0xec, 0xbf, 0xb4, 0x69, 0xa9, 0xdb, 0x2e, 0x23,
	0x0a, 0x57, 0x89, 0xee, 0x77, 0xc7, 0xee, 0x4a, 0x8d, 0xdc, 0x89, 0xf5, 0x28, 0x56, 0x0b, 0xc1,
	0xf8, 0x02, 0xd6, 0xcc, 0x47, 0x6b, 0xc1, 0x64, 0xce, 0x47, 0x6c, 0xd9, 0x04, 0x67, 0xad, 0x89,
	0x9a, 0x31, 0x29, 0x3e, 0x6a, 0x17, 0x9a, 0x3c, 0x87, 0xa6, 0xfd, 0xa0, 0x2d, 0x0a, 0xec, 0x7e,
	0xe1, 0xce, 0x15, 0x78, 0x8f, 0x98, 0xca, 0x02, 0xf6, 0x96, 0xd3, 0x7c, 0x0c, 0x4a, 0x6d, 0x8d,
	0x1d, 0xce, 0x79, 0x02, 0x40, 0xe4, 0xfe, 0x16, 0x3f, 0xdd, 0x99, 0xf5, 0x48, 0x53, 0x73, 0xfe,
	0x5f, 0xe0, 0x3d, 0x56, 0x6f, 0xae, 0x54, 0xf2, 0x21, 0x8c, 0xc3, 0x78, 0x58, 0x30, 0x69, 0xf1,
	0x6d, 0x34, 0x67, 0xf2, 0x0f, 0x82, 0x10, 0xbd, 0x0d, 0x35, 0xff, 0xce, 0x15, 0xb4, 0x53, 0x74,
	0xb8, 0x1c, 0x9b, 0xd4, 0xd9, 0x2a, 0xfd, 0x21, 0x78, 0xf9, 0x6b, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x1a, 0x8c, 0xf9, 0xd6, 0x85, 0x10, 0x00, 0x00,
}
