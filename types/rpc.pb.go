// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chain33 service

type Chain33Client interface {
	// chain33 对外提供服务的接口
	// 区块链接口
	GetBlocks(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Reply, error)
	// 获取最新的区块头
	GetLastHeader(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Header, error)
	// 交易接口
	CreateRawTransaction(ctx context.Context, in *CreateTx, opts ...grpc.CallOption) (*UnsignTx, error)
	CreateRawTxGroup(ctx context.Context, in *CreateTransactionGroup, opts ...grpc.CallOption) (*UnsignTx, error)
	// 发送签名后交易
	SendRawTransaction(ctx context.Context, in *SignedTx, opts ...grpc.CallOption) (*Reply, error)
	// 根据哈希查询交易
	QueryTransaction(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*TransactionDetail, error)
	// 发送交易
	SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error)
	// 通过地址获取交易信息
	GetTransactionByAddr(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*ReplyTxInfos, error)
	// 通过哈希数组获取对应的交易
	GetTransactionByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*TransactionDetails, error)
	// 缓存接口
	GetMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error)
	// 钱包接口
	// 获取钱包账户信息
	GetAccounts(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletAccounts, error)
	// 创建钱包账户
	NewAccount(ctx context.Context, in *ReqNewAccount, opts ...grpc.CallOption) (*WalletAccount, error)
	// 获取钱包的交易列表
	WalletTransactionList(ctx context.Context, in *ReqWalletTransactionList, opts ...grpc.CallOption) (*WalletTxDetails, error)
	// 导入钱包私钥
	ImportPrivKey(ctx context.Context, in *ReqWalletImportPrivKey, opts ...grpc.CallOption) (*WalletAccount, error)
	// 发送交易
	SendToAddress(ctx context.Context, in *ReqWalletSendToAddress, opts ...grpc.CallOption) (*ReplyHash, error)
	// 设置交易手续费
	SetTxFee(ctx context.Context, in *ReqWalletSetFee, opts ...grpc.CallOption) (*Reply, error)
	// 设置标签
	SetLabl(ctx context.Context, in *ReqWalletSetLabel, opts ...grpc.CallOption) (*WalletAccount, error)
	// 合并钱包余额
	MergeBalance(ctx context.Context, in *ReqWalletMergeBalance, opts ...grpc.CallOption) (*ReplyHashes, error)
	// 设置钱包密码
	SetPasswd(ctx context.Context, in *ReqWalletSetPasswd, opts ...grpc.CallOption) (*Reply, error)
	// 给钱包上锁
	Lock(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	// 给钱包解锁
	UnLock(ctx context.Context, in *WalletUnLock, opts ...grpc.CallOption) (*Reply, error)
	// 获取当前节点连接的其他节点信息
	GetPeerInfo(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*PeerList, error)
	// 获取最新的Mempool
	GetLastMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error)
	// 获取钱包状态
	GetWalletStatus(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletStatus, error)
	// 区块浏览器接口
	// /
	GetBlockOverview(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*BlockOverview, error)
	GetAddrOverview(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*AddrOverview, error)
	GetBlockHash(ctx context.Context, in *ReqInt, opts ...grpc.CallOption) (*ReplyHash, error)
	// seed
	// 创建seed
	GenSeed(ctx context.Context, in *GenSeedLang, opts ...grpc.CallOption) (*ReplySeed, error)
	// 获取seed
	GetSeed(ctx context.Context, in *GetSeedByPw, opts ...grpc.CallOption) (*ReplySeed, error)
	// 保存seed
	SaveSeed(ctx context.Context, in *SaveSeedByPw, opts ...grpc.CallOption) (*Reply, error)
	// Balance Query
	// 获取余额
	GetBalance(ctx context.Context, in *ReqBalance, opts ...grpc.CallOption) (*Accounts, error)
	QueryChain(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Reply, error)
	// Miner
	// 设置自动挖矿
	SetAutoMining(ctx context.Context, in *MinerFlag, opts ...grpc.CallOption) (*Reply, error)
	// 获取交易的十六进制编码
	GetHexTxByHash(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*HexTx, error)
	// 查询钱包票数
	GetTicketCount(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int64, error)
	// 导出私钥
	DumpPrivkey(ctx context.Context, in *ReqStr, opts ...grpc.CallOption) (*ReplyStr, error)
	// 获取程序版本
	Version(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	// 是否同步
	IsSync(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	// ntpclock是否同步
	IsNtpClockSync(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	// 获取当前节点的网络信息
	NetInfo(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*NodeNetInfo, error)
	// 获取系统致命故障信息
	GetFatalFailure(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int32, error)
	// Privacy Trading
	// 显示指定地址的公钥对信息，可以作为后续交易参数
	ShowPrivacyKey(ctx context.Context, in *ReqStr, opts ...grpc.CallOption) (*ReplyPrivacyPkPair, error)
	// 创建一系列UTXO
	CreateUTXOs(ctx context.Context, in *ReqCreateUTXOs, opts ...grpc.CallOption) (*Reply, error)
	// 将资金从公开到隐私转移
	MakeTxPublic2Privacy(ctx context.Context, in *ReqPub2Pri, opts ...grpc.CallOption) (*Reply, error)
	// 将资产从隐私到隐私进行转移
	MakeTxPrivacy2Privacy(ctx context.Context, in *ReqPri2Pri, opts ...grpc.CallOption) (*Reply, error)
	// 将资产从隐私到公开进行转移
	MakeTxPrivacy2Public(ctx context.Context, in *ReqPri2Pub, opts ...grpc.CallOption) (*Reply, error)
	// 扫描UTXO以及获取扫描UTXO后的状态
	RescanUtxos(ctx context.Context, in *ReqRescanUtxos, opts ...grpc.CallOption) (*RepRescanUtxos, error)
	// 使能隐私账户
	EnablePrivacy(ctx context.Context, in *ReqEnablePrivacy, opts ...grpc.CallOption) (*RepEnablePrivacy, error)
	// 获取最新的block执行序列
	GetLastBlockSequence(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int64, error)
	// 获取指定区间的block加载序列号信息
	GetBlockSequences(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*BlockSequences, error)
	// 通过block hash 获取对应的blocks信息
	GetBlockByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*BlockDetails, error)
	// 关闭chain33
	CloseQueue(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	// 获取地址所以合约下的余额
	GetAllExecBalance(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*AllExecBalance, error)
	// 创建绑定挖矿
	CreateBindMiner(ctx context.Context, in *ReqBindMiner, opts ...grpc.CallOption) (*ReplyBindMiner, error)
	// 签名交易
	SignRawTx(ctx context.Context, in *ReqSignRawTx, opts ...grpc.CallOption) (*ReplySignRawTx, error)
	CreateNoBalanceTransaction(ctx context.Context, in *NoBalanceTx, opts ...grpc.CallOption) (*ReplySignRawTx, error)
}

type chain33Client struct {
	cc *grpc.ClientConn
}

func NewChain33Client(cc *grpc.ClientConn) Chain33Client {
	return &chain33Client{cc}
}

func (c *chain33Client) GetBlocks(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/GetBlocks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetLastHeader(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Header, error) {
	out := new(Header)
	err := grpc.Invoke(ctx, "/types.chain33/GetLastHeader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) CreateRawTransaction(ctx context.Context, in *CreateTx, opts ...grpc.CallOption) (*UnsignTx, error) {
	out := new(UnsignTx)
	err := grpc.Invoke(ctx, "/types.chain33/CreateRawTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) CreateRawTxGroup(ctx context.Context, in *CreateTransactionGroup, opts ...grpc.CallOption) (*UnsignTx, error) {
	out := new(UnsignTx)
	err := grpc.Invoke(ctx, "/types.chain33/CreateRawTxGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) SendRawTransaction(ctx context.Context, in *SignedTx, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/SendRawTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) QueryTransaction(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*TransactionDetail, error) {
	out := new(TransactionDetail)
	err := grpc.Invoke(ctx, "/types.chain33/QueryTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/SendTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetTransactionByAddr(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*ReplyTxInfos, error) {
	out := new(ReplyTxInfos)
	err := grpc.Invoke(ctx, "/types.chain33/GetTransactionByAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetTransactionByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*TransactionDetails, error) {
	out := new(TransactionDetails)
	err := grpc.Invoke(ctx, "/types.chain33/GetTransactionByHashes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error) {
	out := new(ReplyTxList)
	err := grpc.Invoke(ctx, "/types.chain33/GetMemPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetAccounts(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletAccounts, error) {
	out := new(WalletAccounts)
	err := grpc.Invoke(ctx, "/types.chain33/GetAccounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) NewAccount(ctx context.Context, in *ReqNewAccount, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := grpc.Invoke(ctx, "/types.chain33/NewAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) WalletTransactionList(ctx context.Context, in *ReqWalletTransactionList, opts ...grpc.CallOption) (*WalletTxDetails, error) {
	out := new(WalletTxDetails)
	err := grpc.Invoke(ctx, "/types.chain33/WalletTransactionList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) ImportPrivKey(ctx context.Context, in *ReqWalletImportPrivKey, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := grpc.Invoke(ctx, "/types.chain33/ImportPrivKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) SendToAddress(ctx context.Context, in *ReqWalletSendToAddress, opts ...grpc.CallOption) (*ReplyHash, error) {
	out := new(ReplyHash)
	err := grpc.Invoke(ctx, "/types.chain33/SendToAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) SetTxFee(ctx context.Context, in *ReqWalletSetFee, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/SetTxFee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) SetLabl(ctx context.Context, in *ReqWalletSetLabel, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := grpc.Invoke(ctx, "/types.chain33/SetLabl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) MergeBalance(ctx context.Context, in *ReqWalletMergeBalance, opts ...grpc.CallOption) (*ReplyHashes, error) {
	out := new(ReplyHashes)
	err := grpc.Invoke(ctx, "/types.chain33/MergeBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) SetPasswd(ctx context.Context, in *ReqWalletSetPasswd, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/SetPasswd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) Lock(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/Lock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) UnLock(ctx context.Context, in *WalletUnLock, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/UnLock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetPeerInfo(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*PeerList, error) {
	out := new(PeerList)
	err := grpc.Invoke(ctx, "/types.chain33/GetPeerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetLastMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error) {
	out := new(ReplyTxList)
	err := grpc.Invoke(ctx, "/types.chain33/GetLastMemPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetWalletStatus(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletStatus, error) {
	out := new(WalletStatus)
	err := grpc.Invoke(ctx, "/types.chain33/GetWalletStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetBlockOverview(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*BlockOverview, error) {
	out := new(BlockOverview)
	err := grpc.Invoke(ctx, "/types.chain33/GetBlockOverview", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetAddrOverview(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*AddrOverview, error) {
	out := new(AddrOverview)
	err := grpc.Invoke(ctx, "/types.chain33/GetAddrOverview", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetBlockHash(ctx context.Context, in *ReqInt, opts ...grpc.CallOption) (*ReplyHash, error) {
	out := new(ReplyHash)
	err := grpc.Invoke(ctx, "/types.chain33/GetBlockHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GenSeed(ctx context.Context, in *GenSeedLang, opts ...grpc.CallOption) (*ReplySeed, error) {
	out := new(ReplySeed)
	err := grpc.Invoke(ctx, "/types.chain33/GenSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetSeed(ctx context.Context, in *GetSeedByPw, opts ...grpc.CallOption) (*ReplySeed, error) {
	out := new(ReplySeed)
	err := grpc.Invoke(ctx, "/types.chain33/GetSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) SaveSeed(ctx context.Context, in *SaveSeedByPw, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/SaveSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetBalance(ctx context.Context, in *ReqBalance, opts ...grpc.CallOption) (*Accounts, error) {
	out := new(Accounts)
	err := grpc.Invoke(ctx, "/types.chain33/GetBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) QueryChain(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/QueryChain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) SetAutoMining(ctx context.Context, in *MinerFlag, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/SetAutoMining", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetHexTxByHash(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*HexTx, error) {
	out := new(HexTx)
	err := grpc.Invoke(ctx, "/types.chain33/GetHexTxByHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetTicketCount(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := grpc.Invoke(ctx, "/types.chain33/GetTicketCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) DumpPrivkey(ctx context.Context, in *ReqStr, opts ...grpc.CallOption) (*ReplyStr, error) {
	out := new(ReplyStr)
	err := grpc.Invoke(ctx, "/types.chain33/DumpPrivkey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) Version(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) IsSync(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/IsSync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) IsNtpClockSync(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/IsNtpClockSync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) NetInfo(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*NodeNetInfo, error) {
	out := new(NodeNetInfo)
	err := grpc.Invoke(ctx, "/types.chain33/NetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetFatalFailure(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int32, error) {
	out := new(Int32)
	err := grpc.Invoke(ctx, "/types.chain33/GetFatalFailure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) ShowPrivacyKey(ctx context.Context, in *ReqStr, opts ...grpc.CallOption) (*ReplyPrivacyPkPair, error) {
	out := new(ReplyPrivacyPkPair)
	err := grpc.Invoke(ctx, "/types.chain33/ShowPrivacyKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) CreateUTXOs(ctx context.Context, in *ReqCreateUTXOs, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/CreateUTXOs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) MakeTxPublic2Privacy(ctx context.Context, in *ReqPub2Pri, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/MakeTxPublic2Privacy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) MakeTxPrivacy2Privacy(ctx context.Context, in *ReqPri2Pri, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/MakeTxPrivacy2Privacy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) MakeTxPrivacy2Public(ctx context.Context, in *ReqPri2Pub, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/MakeTxPrivacy2Public", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) RescanUtxos(ctx context.Context, in *ReqRescanUtxos, opts ...grpc.CallOption) (*RepRescanUtxos, error) {
	out := new(RepRescanUtxos)
	err := grpc.Invoke(ctx, "/types.chain33/RescanUtxos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) EnablePrivacy(ctx context.Context, in *ReqEnablePrivacy, opts ...grpc.CallOption) (*RepEnablePrivacy, error) {
	out := new(RepEnablePrivacy)
	err := grpc.Invoke(ctx, "/types.chain33/EnablePrivacy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetLastBlockSequence(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := grpc.Invoke(ctx, "/types.chain33/GetLastBlockSequence", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetBlockSequences(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*BlockSequences, error) {
	out := new(BlockSequences)
	err := grpc.Invoke(ctx, "/types.chain33/GetBlockSequences", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetBlockByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*BlockDetails, error) {
	out := new(BlockDetails)
	err := grpc.Invoke(ctx, "/types.chain33/GetBlockByHashes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) CloseQueue(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.chain33/CloseQueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) GetAllExecBalance(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*AllExecBalance, error) {
	out := new(AllExecBalance)
	err := grpc.Invoke(ctx, "/types.chain33/GetAllExecBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) CreateBindMiner(ctx context.Context, in *ReqBindMiner, opts ...grpc.CallOption) (*ReplyBindMiner, error) {
	out := new(ReplyBindMiner)
	err := grpc.Invoke(ctx, "/types.chain33/CreateBindMiner", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) SignRawTx(ctx context.Context, in *ReqSignRawTx, opts ...grpc.CallOption) (*ReplySignRawTx, error) {
	out := new(ReplySignRawTx)
	err := grpc.Invoke(ctx, "/types.chain33/SignRawTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chain33Client) CreateNoBalanceTransaction(ctx context.Context, in *NoBalanceTx, opts ...grpc.CallOption) (*ReplySignRawTx, error) {
	out := new(ReplySignRawTx)
	err := grpc.Invoke(ctx, "/types.chain33/CreateNoBalanceTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chain33 service

type Chain33Server interface {
	// chain33 对外提供服务的接口
	// 区块链接口
	GetBlocks(context.Context, *ReqBlocks) (*Reply, error)
	// 获取最新的区块头
	GetLastHeader(context.Context, *ReqNil) (*Header, error)
	// 交易接口
	CreateRawTransaction(context.Context, *CreateTx) (*UnsignTx, error)
	CreateRawTxGroup(context.Context, *CreateTransactionGroup) (*UnsignTx, error)
	// 发送签名后交易
	SendRawTransaction(context.Context, *SignedTx) (*Reply, error)
	// 根据哈希查询交易
	QueryTransaction(context.Context, *ReqHash) (*TransactionDetail, error)
	// 发送交易
	SendTransaction(context.Context, *Transaction) (*Reply, error)
	// 通过地址获取交易信息
	GetTransactionByAddr(context.Context, *ReqAddr) (*ReplyTxInfos, error)
	// 通过哈希数组获取对应的交易
	GetTransactionByHashes(context.Context, *ReqHashes) (*TransactionDetails, error)
	// 缓存接口
	GetMemPool(context.Context, *ReqNil) (*ReplyTxList, error)
	// 钱包接口
	// 获取钱包账户信息
	GetAccounts(context.Context, *ReqNil) (*WalletAccounts, error)
	// 创建钱包账户
	NewAccount(context.Context, *ReqNewAccount) (*WalletAccount, error)
	// 获取钱包的交易列表
	WalletTransactionList(context.Context, *ReqWalletTransactionList) (*WalletTxDetails, error)
	// 导入钱包私钥
	ImportPrivKey(context.Context, *ReqWalletImportPrivKey) (*WalletAccount, error)
	// 发送交易
	SendToAddress(context.Context, *ReqWalletSendToAddress) (*ReplyHash, error)
	// 设置交易手续费
	SetTxFee(context.Context, *ReqWalletSetFee) (*Reply, error)
	// 设置标签
	SetLabl(context.Context, *ReqWalletSetLabel) (*WalletAccount, error)
	// 合并钱包余额
	MergeBalance(context.Context, *ReqWalletMergeBalance) (*ReplyHashes, error)
	// 设置钱包密码
	SetPasswd(context.Context, *ReqWalletSetPasswd) (*Reply, error)
	// 给钱包上锁
	Lock(context.Context, *ReqNil) (*Reply, error)
	// 给钱包解锁
	UnLock(context.Context, *WalletUnLock) (*Reply, error)
	// 获取当前节点连接的其他节点信息
	GetPeerInfo(context.Context, *ReqNil) (*PeerList, error)
	// 获取最新的Mempool
	GetLastMemPool(context.Context, *ReqNil) (*ReplyTxList, error)
	// 获取钱包状态
	GetWalletStatus(context.Context, *ReqNil) (*WalletStatus, error)
	// 区块浏览器接口
	// /
	GetBlockOverview(context.Context, *ReqHash) (*BlockOverview, error)
	GetAddrOverview(context.Context, *ReqAddr) (*AddrOverview, error)
	GetBlockHash(context.Context, *ReqInt) (*ReplyHash, error)
	// seed
	// 创建seed
	GenSeed(context.Context, *GenSeedLang) (*ReplySeed, error)
	// 获取seed
	GetSeed(context.Context, *GetSeedByPw) (*ReplySeed, error)
	// 保存seed
	SaveSeed(context.Context, *SaveSeedByPw) (*Reply, error)
	// Balance Query
	// 获取余额
	GetBalance(context.Context, *ReqBalance) (*Accounts, error)
	QueryChain(context.Context, *Query) (*Reply, error)
	// Miner
	// 设置自动挖矿
	SetAutoMining(context.Context, *MinerFlag) (*Reply, error)
	// 获取交易的十六进制编码
	GetHexTxByHash(context.Context, *ReqHash) (*HexTx, error)
	// 查询钱包票数
	GetTicketCount(context.Context, *ReqNil) (*Int64, error)
	// 导出私钥
	DumpPrivkey(context.Context, *ReqStr) (*ReplyStr, error)
	// 获取程序版本
	Version(context.Context, *ReqNil) (*Reply, error)
	// 是否同步
	IsSync(context.Context, *ReqNil) (*Reply, error)
	// ntpclock是否同步
	IsNtpClockSync(context.Context, *ReqNil) (*Reply, error)
	// 获取当前节点的网络信息
	NetInfo(context.Context, *ReqNil) (*NodeNetInfo, error)
	// 获取系统致命故障信息
	GetFatalFailure(context.Context, *ReqNil) (*Int32, error)
	// Privacy Trading
	// 显示指定地址的公钥对信息，可以作为后续交易参数
	ShowPrivacyKey(context.Context, *ReqStr) (*ReplyPrivacyPkPair, error)
	// 创建一系列UTXO
	CreateUTXOs(context.Context, *ReqCreateUTXOs) (*Reply, error)
	// 将资金从公开到隐私转移
	MakeTxPublic2Privacy(context.Context, *ReqPub2Pri) (*Reply, error)
	// 将资产从隐私到隐私进行转移
	MakeTxPrivacy2Privacy(context.Context, *ReqPri2Pri) (*Reply, error)
	// 将资产从隐私到公开进行转移
	MakeTxPrivacy2Public(context.Context, *ReqPri2Pub) (*Reply, error)
	// 扫描UTXO以及获取扫描UTXO后的状态
	RescanUtxos(context.Context, *ReqRescanUtxos) (*RepRescanUtxos, error)
	// 使能隐私账户
	EnablePrivacy(context.Context, *ReqEnablePrivacy) (*RepEnablePrivacy, error)
	// 获取最新的block执行序列
	GetLastBlockSequence(context.Context, *ReqNil) (*Int64, error)
	// 获取指定区间的block加载序列号信息
	GetBlockSequences(context.Context, *ReqBlocks) (*BlockSequences, error)
	// 通过block hash 获取对应的blocks信息
	GetBlockByHashes(context.Context, *ReqHashes) (*BlockDetails, error)
	// 关闭chain33
	CloseQueue(context.Context, *ReqNil) (*Reply, error)
	// 获取地址所以合约下的余额
	GetAllExecBalance(context.Context, *ReqAddr) (*AllExecBalance, error)
	// 创建绑定挖矿
	CreateBindMiner(context.Context, *ReqBindMiner) (*ReplyBindMiner, error)
	// 签名交易
	SignRawTx(context.Context, *ReqSignRawTx) (*ReplySignRawTx, error)
	CreateNoBalanceTransaction(context.Context, *NoBalanceTx) (*ReplySignRawTx, error)
}

func RegisterChain33Server(s *grpc.Server, srv Chain33Server) {
	s.RegisterService(&_Chain33_serviceDesc, srv)
}

func _Chain33_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetBlocks(ctx, req.(*ReqBlocks))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetLastHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetLastHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetLastHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetLastHeader(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_CreateRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).CreateRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/CreateRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).CreateRawTransaction(ctx, req.(*CreateTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_CreateRawTxGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).CreateRawTxGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/CreateRawTxGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).CreateRawTxGroup(ctx, req.(*CreateTransactionGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_SendRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).SendRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/SendRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).SendRawTransaction(ctx, req.(*SignedTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_QueryTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).QueryTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/QueryTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).QueryTransaction(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).SendTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetTransactionByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetTransactionByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetTransactionByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetTransactionByAddr(ctx, req.(*ReqAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetTransactionByHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetTransactionByHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetTransactionByHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetTransactionByHashes(ctx, req.(*ReqHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetMemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetMemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetMemPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetMemPool(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetAccounts(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNewAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).NewAccount(ctx, req.(*ReqNewAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_WalletTransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletTransactionList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).WalletTransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/WalletTransactionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).WalletTransactionList(ctx, req.(*ReqWalletTransactionList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_ImportPrivKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletImportPrivKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).ImportPrivKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/ImportPrivKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).ImportPrivKey(ctx, req.(*ReqWalletImportPrivKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_SendToAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSendToAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).SendToAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/SendToAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).SendToAddress(ctx, req.(*ReqWalletSendToAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_SetTxFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).SetTxFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/SetTxFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).SetTxFee(ctx, req.(*ReqWalletSetFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_SetLabl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetLabel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).SetLabl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/SetLabl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).SetLabl(ctx, req.(*ReqWalletSetLabel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_MergeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletMergeBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).MergeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/MergeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).MergeBalance(ctx, req.(*ReqWalletMergeBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_SetPasswd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetPasswd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).SetPasswd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/SetPasswd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).SetPasswd(ctx, req.(*ReqWalletSetPasswd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).Lock(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_UnLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletUnLock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).UnLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/UnLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).UnLock(ctx, req.(*WalletUnLock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetPeerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetPeerInfo(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetLastMemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetLastMemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetLastMemPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetLastMemPool(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetWalletStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetWalletStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetWalletStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetWalletStatus(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetBlockOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetBlockOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetBlockOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetBlockOverview(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetAddrOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetAddrOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetAddrOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetAddrOverview(ctx, req.(*ReqAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetBlockHash(ctx, req.(*ReqInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GenSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenSeedLang)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GenSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GenSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GenSeed(ctx, req.(*GenSeedLang))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeedByPw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetSeed(ctx, req.(*GetSeedByPw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_SaveSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSeedByPw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).SaveSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/SaveSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).SaveSeed(ctx, req.(*SaveSeedByPw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetBalance(ctx, req.(*ReqBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_QueryChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).QueryChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/QueryChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).QueryChain(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_SetAutoMining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinerFlag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).SetAutoMining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/SetAutoMining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).SetAutoMining(ctx, req.(*MinerFlag))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetHexTxByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetHexTxByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetHexTxByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetHexTxByHash(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetTicketCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetTicketCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetTicketCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetTicketCount(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_DumpPrivkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).DumpPrivkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/DumpPrivkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).DumpPrivkey(ctx, req.(*ReqStr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).Version(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_IsSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).IsSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/IsSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).IsSync(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_IsNtpClockSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).IsNtpClockSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/IsNtpClockSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).IsNtpClockSync(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_NetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).NetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/NetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).NetInfo(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetFatalFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetFatalFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetFatalFailure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetFatalFailure(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_ShowPrivacyKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).ShowPrivacyKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/ShowPrivacyKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).ShowPrivacyKey(ctx, req.(*ReqStr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_CreateUTXOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateUTXOs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).CreateUTXOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/CreateUTXOs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).CreateUTXOs(ctx, req.(*ReqCreateUTXOs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_MakeTxPublic2Privacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPub2Pri)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).MakeTxPublic2Privacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/MakeTxPublic2Privacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).MakeTxPublic2Privacy(ctx, req.(*ReqPub2Pri))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_MakeTxPrivacy2Privacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPri2Pri)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).MakeTxPrivacy2Privacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/MakeTxPrivacy2Privacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).MakeTxPrivacy2Privacy(ctx, req.(*ReqPri2Pri))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_MakeTxPrivacy2Public_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPri2Pub)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).MakeTxPrivacy2Public(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/MakeTxPrivacy2Public",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).MakeTxPrivacy2Public(ctx, req.(*ReqPri2Pub))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_RescanUtxos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRescanUtxos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).RescanUtxos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/RescanUtxos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).RescanUtxos(ctx, req.(*ReqRescanUtxos))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_EnablePrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEnablePrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).EnablePrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/EnablePrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).EnablePrivacy(ctx, req.(*ReqEnablePrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetLastBlockSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetLastBlockSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetLastBlockSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetLastBlockSequence(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetBlockSequences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetBlockSequences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetBlockSequences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetBlockSequences(ctx, req.(*ReqBlocks))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetBlockByHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetBlockByHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetBlockByHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetBlockByHashes(ctx, req.(*ReqHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_CloseQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).CloseQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/CloseQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).CloseQueue(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_GetAllExecBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).GetAllExecBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/GetAllExecBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).GetAllExecBalance(ctx, req.(*ReqAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_CreateBindMiner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBindMiner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).CreateBindMiner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/CreateBindMiner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).CreateBindMiner(ctx, req.(*ReqBindMiner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_SignRawTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSignRawTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).SignRawTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/SignRawTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).SignRawTx(ctx, req.(*ReqSignRawTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chain33_CreateNoBalanceTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoBalanceTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain33Server).CreateNoBalanceTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.chain33/CreateNoBalanceTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain33Server).CreateNoBalanceTransaction(ctx, req.(*NoBalanceTx))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chain33_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.chain33",
	HandlerType: (*Chain33Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlocks",
			Handler:    _Chain33_GetBlocks_Handler,
		},
		{
			MethodName: "GetLastHeader",
			Handler:    _Chain33_GetLastHeader_Handler,
		},
		{
			MethodName: "CreateRawTransaction",
			Handler:    _Chain33_CreateRawTransaction_Handler,
		},
		{
			MethodName: "CreateRawTxGroup",
			Handler:    _Chain33_CreateRawTxGroup_Handler,
		},
		{
			MethodName: "SendRawTransaction",
			Handler:    _Chain33_SendRawTransaction_Handler,
		},
		{
			MethodName: "QueryTransaction",
			Handler:    _Chain33_QueryTransaction_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _Chain33_SendTransaction_Handler,
		},
		{
			MethodName: "GetTransactionByAddr",
			Handler:    _Chain33_GetTransactionByAddr_Handler,
		},
		{
			MethodName: "GetTransactionByHashes",
			Handler:    _Chain33_GetTransactionByHashes_Handler,
		},
		{
			MethodName: "GetMemPool",
			Handler:    _Chain33_GetMemPool_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _Chain33_GetAccounts_Handler,
		},
		{
			MethodName: "NewAccount",
			Handler:    _Chain33_NewAccount_Handler,
		},
		{
			MethodName: "WalletTransactionList",
			Handler:    _Chain33_WalletTransactionList_Handler,
		},
		{
			MethodName: "ImportPrivKey",
			Handler:    _Chain33_ImportPrivKey_Handler,
		},
		{
			MethodName: "SendToAddress",
			Handler:    _Chain33_SendToAddress_Handler,
		},
		{
			MethodName: "SetTxFee",
			Handler:    _Chain33_SetTxFee_Handler,
		},
		{
			MethodName: "SetLabl",
			Handler:    _Chain33_SetLabl_Handler,
		},
		{
			MethodName: "MergeBalance",
			Handler:    _Chain33_MergeBalance_Handler,
		},
		{
			MethodName: "SetPasswd",
			Handler:    _Chain33_SetPasswd_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _Chain33_Lock_Handler,
		},
		{
			MethodName: "UnLock",
			Handler:    _Chain33_UnLock_Handler,
		},
		{
			MethodName: "GetPeerInfo",
			Handler:    _Chain33_GetPeerInfo_Handler,
		},
		{
			MethodName: "GetLastMemPool",
			Handler:    _Chain33_GetLastMemPool_Handler,
		},
		{
			MethodName: "GetWalletStatus",
			Handler:    _Chain33_GetWalletStatus_Handler,
		},
		{
			MethodName: "GetBlockOverview",
			Handler:    _Chain33_GetBlockOverview_Handler,
		},
		{
			MethodName: "GetAddrOverview",
			Handler:    _Chain33_GetAddrOverview_Handler,
		},
		{
			MethodName: "GetBlockHash",
			Handler:    _Chain33_GetBlockHash_Handler,
		},
		{
			MethodName: "GenSeed",
			Handler:    _Chain33_GenSeed_Handler,
		},
		{
			MethodName: "GetSeed",
			Handler:    _Chain33_GetSeed_Handler,
		},
		{
			MethodName: "SaveSeed",
			Handler:    _Chain33_SaveSeed_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Chain33_GetBalance_Handler,
		},
		{
			MethodName: "QueryChain",
			Handler:    _Chain33_QueryChain_Handler,
		},
		{
			MethodName: "SetAutoMining",
			Handler:    _Chain33_SetAutoMining_Handler,
		},
		{
			MethodName: "GetHexTxByHash",
			Handler:    _Chain33_GetHexTxByHash_Handler,
		},
		{
			MethodName: "GetTicketCount",
			Handler:    _Chain33_GetTicketCount_Handler,
		},
		{
			MethodName: "DumpPrivkey",
			Handler:    _Chain33_DumpPrivkey_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Chain33_Version_Handler,
		},
		{
			MethodName: "IsSync",
			Handler:    _Chain33_IsSync_Handler,
		},
		{
			MethodName: "IsNtpClockSync",
			Handler:    _Chain33_IsNtpClockSync_Handler,
		},
		{
			MethodName: "NetInfo",
			Handler:    _Chain33_NetInfo_Handler,
		},
		{
			MethodName: "GetFatalFailure",
			Handler:    _Chain33_GetFatalFailure_Handler,
		},
		{
			MethodName: "ShowPrivacyKey",
			Handler:    _Chain33_ShowPrivacyKey_Handler,
		},
		{
			MethodName: "CreateUTXOs",
			Handler:    _Chain33_CreateUTXOs_Handler,
		},
		{
			MethodName: "MakeTxPublic2Privacy",
			Handler:    _Chain33_MakeTxPublic2Privacy_Handler,
		},
		{
			MethodName: "MakeTxPrivacy2Privacy",
			Handler:    _Chain33_MakeTxPrivacy2Privacy_Handler,
		},
		{
			MethodName: "MakeTxPrivacy2Public",
			Handler:    _Chain33_MakeTxPrivacy2Public_Handler,
		},
		{
			MethodName: "RescanUtxos",
			Handler:    _Chain33_RescanUtxos_Handler,
		},
		{
			MethodName: "EnablePrivacy",
			Handler:    _Chain33_EnablePrivacy_Handler,
		},
		{
			MethodName: "GetLastBlockSequence",
			Handler:    _Chain33_GetLastBlockSequence_Handler,
		},
		{
			MethodName: "GetBlockSequences",
			Handler:    _Chain33_GetBlockSequences_Handler,
		},
		{
			MethodName: "GetBlockByHashes",
			Handler:    _Chain33_GetBlockByHashes_Handler,
		},
		{
			MethodName: "CloseQueue",
			Handler:    _Chain33_CloseQueue_Handler,
		},
		{
			MethodName: "GetAllExecBalance",
			Handler:    _Chain33_GetAllExecBalance_Handler,
		},
		{
			MethodName: "CreateBindMiner",
			Handler:    _Chain33_CreateBindMiner_Handler,
		},
		{
			MethodName: "SignRawTx",
			Handler:    _Chain33_SignRawTx_Handler,
		},
		{
			MethodName: "CreateNoBalanceTransaction",
			Handler:    _Chain33_CreateNoBalanceTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 1149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x57, 0x5f, 0x53, 0xe3, 0xb6,
	0x17, 0xf5, 0xc3, 0xef, 0x07, 0x8b, 0x48, 0x20, 0x88, 0x40, 0xc1, 0xd3, 0x4e, 0x67, 0x3c, 0xed,
	0xb4, 0xd3, 0xce, 0x86, 0x92, 0x6c, 0xb7, 0xed, 0x76, 0xbb, 0x1d, 0x12, 0x36, 0x21, 0xb3, 0x90,
	0xcd, 0xe2, 0xd0, 0x76, 0xfa, 0xa6, 0x38, 0xb7, 0xc1, 0x13, 0x23, 0x79, 0x6d, 0x99, 0x38, 0xdf,
	0xb8, 0x1f, 0xa3, 0x23, 0xd9, 0xb2, 0xe5, 0xd8, 0x40, 0xfb, 0x04, 0xba, 0xf7, 0x9e, 0xfb, 0xc7,
	0x3a, 0x3a, 0x52, 0xd0, 0x56, 0xe0, 0x3b, 0x2d, 0x3f, 0x60, 0x9c, 0xe1, 0xff, 0xf3, 0x95, 0x0f,
	0xa1, 0x59, 0x73, 0xd8, 0xdd, 0x1d, 0xa3, 0x89, 0xd1, 0xdc, 0xe3, 0x01, 0xa1, 0x21, 0x71, 0xb8,
	0x9b, 0x99, 0x1a, 0x53, 0x8f, 0x39, 0x0b, 0xe7, 0x96, 0xb8, 0xca, 0x52, 0x5b, 0x12, 0xcf, 0x03,
	0x9e, 0xae, 0xb6, 0xfc, 0xb6, 0x9f, 0xfe, 0x5b, 0x27, 0x8e, 0xc3, 0x22, 0xaa, 0x3c, 0x3b, 0x10,
	0x83, 0x13, 0x71, 0x16, 0x24, 0xeb, 0xf6, 0xdf, 0x47, 0x68, 0x53, 0xe6, 0xe9, 0x74, 0xf0, 0x73,
	0xb4, 0x35, 0x00, 0xde, 0x15, 0xa9, 0x43, 0xdc, 0x68, 0xc9, 0x5e, 0x5a, 0xd7, 0xf0, 0x31, 0xb1,
	0x98, 0xb5, 0xcc, 0xe2, 0x7b, 0x2b, 0xcb, 0xc0, 0x27, 0xa8, 0x3e, 0x00, 0x7e, 0x49, 0x42, 0x7e,
	0x01, 0x64, 0x06, 0x01, 0xae, 0xe7, 0x90, 0x91, 0xeb, 0x99, 0x6a, 0x99, 0x78, 0x2d, 0x03, 0xbf,
	0x42, 0xcd, 0x5e, 0x00, 0x84, 0xc3, 0x35, 0x59, 0x4e, 0xf2, 0x99, 0xf0, 0x6e, 0x1a, 0x98, 0x38,
	0x27, 0xb1, 0xa9, 0x0c, 0x37, 0x34, 0x74, 0xe7, 0x74, 0x12, 0x5b, 0x06, 0x3e, 0x47, 0x8d, 0x1c,
	0x1b, 0x0f, 0x02, 0x16, 0xf9, 0xf8, 0xb3, 0x22, 0x2e, 0xcf, 0x28, 0xdd, 0x55, 0x59, 0xbe, 0x47,
	0xd8, 0x06, 0x3a, 0x7b, 0xa0, 0xbe, 0xed, 0xce, 0x29, 0xcc, 0x26, 0x71, 0x69, 0xd2, 0x37, 0xa8,
	0xf1, 0x21, 0x82, 0x60, 0xa5, 0x83, 0x76, 0xf2, 0x61, 0x2f, 0x48, 0x78, 0x6b, 0x1e, 0xa5, 0x6b,
	0x2d, 0xe6, 0x1c, 0x38, 0x71, 0x3d, 0x59, 0x76, 0x57, 0x94, 0xd5, 0xe1, 0xb8, 0x1c, 0x5e, 0x2a,
	0xfb, 0x0b, 0x6a, 0x0e, 0x80, 0x6b, 0x11, 0xdd, 0xd5, 0xd9, 0x6c, 0x16, 0xe8, 0xa5, 0xc5, 0xda,
	0xdc, 0xd7, 0x71, 0x93, 0x78, 0x48, 0xff, 0x62, 0xa1, 0x65, 0xe0, 0x01, 0x3a, 0x5c, 0x87, 0x8b,
	0x4e, 0xa1, 0xb0, 0xb7, 0x89, 0xc5, 0x3c, 0x7e, 0xa8, 0x7b, 0x91, 0xe8, 0x14, 0xa1, 0x01, 0xf0,
	0x2b, 0xb8, 0x1b, 0x33, 0xe6, 0xad, 0xef, 0x32, 0x2e, 0x16, 0xbf, 0x74, 0x43, 0x2e, 0x27, 0xde,
	0x1e, 0x00, 0x3f, 0x4b, 0xa8, 0x17, 0xae, 0x63, 0x0e, 0xd2, 0xe5, 0xef, 0x92, 0xb3, 0x2a, 0x4a,
	0x32, 0x04, 0x8d, 0x60, 0x99, 0x1a, 0x70, 0x53, 0x43, 0x65, 0x56, 0xb3, 0x59, 0x05, 0xb6, 0x0c,
	0x7c, 0x8d, 0x0e, 0x12, 0x93, 0x36, 0x83, 0xe8, 0x06, 0x7f, 0x9e, 0xa7, 0xa9, 0x0c, 0x30, 0x0f,
	0x0b, 0x19, 0x27, 0x71, 0x3e, 0x79, 0x1f, 0xd5, 0x87, 0x77, 0x3e, 0x0b, 0xf8, 0x38, 0x70, 0xef,
	0xdf, 0xc1, 0x2a, 0xa3, 0x5c, 0x96, 0xab, 0xe0, 0x7e, 0xb0, 0xb7, 0x2e, 0xaa, 0x4b, 0x02, 0x30,
	0xb1, 0x5f, 0x10, 0x86, 0xe5, 0x3c, 0x05, 0xb7, 0xd9, 0xd0, 0x3f, 0xaa, 0xd8, 0x22, 0xcb, 0xc0,
	0x6d, 0xf4, 0xcc, 0x16, 0xdd, 0xf5, 0x01, 0xf0, 0x61, 0x19, 0xce, 0xfb, 0x00, 0x25, 0x06, 0xfd,
	0x8c, 0x36, 0x6d, 0x71, 0x44, 0xa7, 0x1e, 0x3e, 0xaa, 0x80, 0x5c, 0x92, 0x29, 0x78, 0x8f, 0x34,
	0x5d, 0xbb, 0x82, 0x60, 0x0e, 0x5d, 0xe2, 0x11, 0xea, 0x00, 0xfe, 0x74, 0x3d, 0x83, 0xee, 0x2d,
	0xf2, 0x20, 0x61, 0x95, 0x65, 0xe0, 0x97, 0x68, 0xcb, 0x06, 0x3e, 0x26, 0x61, 0xb8, 0x9c, 0xe1,
	0xe3, 0x8a, 0x16, 0x12, 0x57, 0xa9, 0xf1, 0x2f, 0xd1, 0xff, 0x2e, 0x99, 0xb3, 0x58, 0x27, 0xce,
	0x7a, 0xd8, 0x73, 0xb4, 0x71, 0x43, 0x65, 0xe0, 0x7e, 0x61, 0x88, 0xc4, 0x58, 0xa1, 0x58, 0x82,
	0x95, 0x63, 0x80, 0x40, 0x9c, 0x91, 0xf5, 0xe4, 0x4a, 0x06, 0x84, 0x3f, 0xa3, 0xf1, 0x4e, 0x2a,
	0x71, 0xff, 0x89, 0xfd, 0x3f, 0xa0, 0xdd, 0x01, 0xf0, 0x74, 0x46, 0x4e, 0x78, 0x54, 0x3a, 0x01,
	0xc5, 0x76, 0x93, 0x18, 0xc9, 0xff, 0x86, 0x52, 0xe0, 0xf7, 0xf7, 0x10, 0xdc, 0xbb, 0xb0, 0x2c,
	0x09, 0x8d, 0xda, 0xae, 0x42, 0x94, 0x65, 0xe0, 0x1f, 0x65, 0x51, 0xc1, 0xa0, 0x2a, 0x68, 0x41,
	0x28, 0xf4, 0x20, 0x79, 0xbe, 0x6b, 0xaa, 0xaa, 0xa8, 0xa0, 0xf7, 0x3a, 0xa4, 0xbc, 0x92, 0x8c,
	0xa7, 0x68, 0x73, 0x00, 0xd4, 0x06, 0x98, 0x65, 0x4a, 0x96, 0xae, 0x2f, 0x09, 0x9d, 0x17, 0x21,
	0xc2, 0xaa, 0x20, 0x7c, 0x0d, 0x22, 0xd7, 0xdd, 0xd5, 0x78, 0x59, 0x09, 0x39, 0x41, 0xcf, 0x6c,
	0x72, 0x0f, 0x12, 0xa3, 0x7a, 0x57, 0x06, 0x09, 0x5a, 0xdf, 0xe0, 0xb6, 0x54, 0x2a, 0x45, 0xd8,
	0x3d, 0xed, 0x0a, 0x4b, 0x59, 0xaa, 0xf6, 0x58, 0xd3, 0x9c, 0x6f, 0x10, 0x92, 0xe2, 0xde, 0x13,
	0xb7, 0x20, 0x56, 0x19, 0xa5, 0xa9, 0x94, 0xff, 0x54, 0x9c, 0x63, 0x7e, 0x16, 0x71, 0x76, 0xe5,
	0x52, 0x97, 0xce, 0x33, 0x25, 0xbd, 0x72, 0x29, 0x04, 0x7d, 0x8f, 0xcc, 0x4b, 0x90, 0xef, 0x24,
	0x85, 0x2e, 0x20, 0x9e, 0xc4, 0x89, 0xfe, 0x96, 0x36, 0xb4, 0x96, 0xdd, 0x93, 0xb1, 0xbc, 0xa4,
	0x4e, 0x24, 0x62, 0xe2, 0x3a, 0x0b, 0xe0, 0x3d, 0x29, 0x84, 0x0f, 0x9c, 0x82, 0x21, 0xe5, 0x2f,
	0x5f, 0x24, 0xb4, 0x3e, 0x8f, 0xee, 0x7c, 0x21, 0x42, 0x0b, 0x58, 0xe9, 0xd1, 0x36, 0x0f, 0xb2,
	0x91, 0x93, 0x0f, 0xcb, 0xc5, 0x45, 0xfc, 0x35, 0xda, 0xfc, 0x0d, 0x82, 0x50, 0xdc, 0x43, 0x4f,
	0x1c, 0xb0, 0xaf, 0xd0, 0xc6, 0x30, 0xb4, 0x57, 0xd4, 0x79, 0x2a, 0xf0, 0x04, 0xed, 0x0c, 0xc3,
	0x11, 0xf7, 0x7b, 0x82, 0x45, 0xff, 0x06, 0xd0, 0x42, 0x9b, 0x23, 0xe0, 0x55, 0xe7, 0x50, 0xb1,
	0x63, 0xc4, 0x66, 0x90, 0x86, 0xc8, 0xef, 0x28, 0xe8, 0xdd, 0x27, 0x9c, 0x78, 0x7d, 0xe2, 0x7a,
	0x51, 0x00, 0x8f, 0x7c, 0x96, 0x4e, 0xdb, 0x32, 0xf0, 0x6b, 0xb4, 0x63, 0xdf, 0xb2, 0xa5, 0xf8,
	0x2c, 0xc4, 0x59, 0xbd, 0x2b, 0x7f, 0x99, 0x63, 0xbd, 0xa5, 0x34, 0x6c, 0xbc, 0x18, 0x13, 0x57,
	0x7c, 0xa3, 0x17, 0x68, 0x3b, 0x79, 0x57, 0xdc, 0x4c, 0xfe, 0x78, 0x1f, 0xe2, 0x83, 0x1c, 0xaa,
	0x99, 0x4b, 0x53, 0xfd, 0x84, 0x9a, 0x57, 0x64, 0x01, 0x93, 0x78, 0x1c, 0x4d, 0x3d, 0xd7, 0x69,
	0xa7, 0x59, 0x75, 0x2a, 0x8e, 0xa3, 0xa9, 0x30, 0x97, 0xa0, 0xaf, 0xd0, 0x41, 0x0a, 0x4d, 0x30,
	0x95, 0xd8, 0xc0, 0xad, 0xc4, 0xe6, 0x65, 0x15, 0x56, 0x96, 0x2f, 0x41, 0xa3, 0x69, 0xc5, 0x23,
	0x63, 0xfb, 0x1a, 0x42, 0x87, 0xd0, 0x1b, 0x1e, 0xb3, 0xc2, 0x9c, 0x9a, 0xd9, 0xcc, 0xcd, 0xbe,
	0x66, 0xb6, 0x0c, 0xdc, 0x43, 0xf5, 0xb7, 0x94, 0x4c, 0x3d, 0x50, 0xdd, 0x7e, 0x92, 0x27, 0x28,
	0x38, 0xcc, 0xdc, 0xe1, 0x17, 0x1c, 0x52, 0x66, 0x9b, 0xa9, 0xcc, 0x4a, 0x11, 0xb2, 0xe1, 0x63,
	0x04, 0xe2, 0x00, 0x3f, 0xc1, 0xfb, 0x37, 0x68, 0x4f, 0xe9, 0x96, 0x82, 0x54, 0xbd, 0x5b, 0x0f,
	0x74, 0xc1, 0xcc, 0x02, 0xe5, 0xed, 0x98, 0xa9, 0xed, 0x23, 0x4f, 0xa3, 0x7d, 0x1d, 0x9e, 0x3f,
	0x0d, 0xbe, 0x45, 0xa8, 0xe7, 0xb1, 0x10, 0x3e, 0x44, 0x10, 0xc1, 0x53, 0x64, 0x7f, 0x2d, 0x3b,
	0x3d, 0xf3, 0xbc, 0xb7, 0x31, 0x38, 0x4a, 0x9e, 0xd6, 0xd5, 0x59, 0xf5, 0x59, 0x0c, 0xb3, 0x0c,
	0xfc, 0x2b, 0xda, 0x4d, 0x38, 0xd7, 0x75, 0xe9, 0x4c, 0x2a, 0x0d, 0xde, 0xd7, 0xa6, 0x54, 0x46,
	0x7d, 0x93, 0xbc, 0x55, 0x66, 0x96, 0xf4, 0xd8, 0x12, 0x6f, 0x5b, 0xf9, 0x74, 0xd6, 0xa1, 0x99,
	0xb1, 0x08, 0xcd, 0xcc, 0x96, 0x81, 0x87, 0xc8, 0x4c, 0x6a, 0x8f, 0x58, 0xda, 0x50, 0xd5, 0x2b,
	0x36, 0x77, 0x3e, 0x9c, 0xaa, 0xfb, 0xc5, 0x9f, 0xd6, 0xdc, 0xe5, 0x1e, 0x99, 0xb6, 0x3a, 0x9d,
	0x96, 0x43, 0x4f, 0xd2, 0x9f, 0x1d, 0xd9, 0x5f, 0x09, 0x9b, 0x6e, 0xc8, 0xdf, 0x25, 0x9d, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xea, 0x0e, 0x8d, 0x8d, 0x16, 0x0d, 0x00, 0x00,
}
