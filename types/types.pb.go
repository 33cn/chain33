// Code generated by protoc-gen-go.
// source: types.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	Header
	Block
	Transaction
	ChainStatus
	RequestHash
	MerkleProof
	RequestBlocks
	Blocks
	Reply
	ReplyBlockHeight
	RequestTxList
	ReplyTxList
	TxHashList
	TxResult
	Headers
	MempoolSize
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Header struct {
	Version    int64  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ParentHash []byte `protobuf:"bytes,2,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	TxHash     []byte `protobuf:"bytes,3,opt,name=txHash,proto3" json:"txHash,omitempty"`
	Height     int64  `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
	BlockTime  int64  `protobuf:"varint,5,opt,name=blockTime" json:"blockTime,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Header) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Header) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *Header) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Header) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Header) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

type Block struct {
	Version    int64          `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ParentHash []byte         `protobuf:"bytes,2,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	TxHash     []byte         `protobuf:"bytes,3,opt,name=txHash,proto3" json:"txHash,omitempty"`
	Height     int64          `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
	BlockTime  int64          `protobuf:"varint,5,opt,name=blockTime" json:"blockTime,omitempty"`
	Txs        []*Transaction `protobuf:"bytes,6,rep,name=txs" json:"txs,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Block) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Block) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *Block) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Block) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *Block) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

type Transaction struct {
	Payload   []byte `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Account   []byte `protobuf:"bytes,3,opt,name=Account,proto3" json:"Account,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Transaction) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Transaction) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Transaction) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

type ChainStatus struct {
	CurrentHeight int64 `protobuf:"varint,1,opt,name=currentHeight" json:"currentHeight,omitempty"`
	MempoolSize   int64 `protobuf:"varint,2,opt,name=mempoolSize" json:"mempoolSize,omitempty"`
	MsgQueueSize  int64 `protobuf:"varint,3,opt,name=msgQueueSize" json:"msgQueueSize,omitempty"`
}

func (m *ChainStatus) Reset()                    { *m = ChainStatus{} }
func (m *ChainStatus) String() string            { return proto.CompactTextString(m) }
func (*ChainStatus) ProtoMessage()               {}
func (*ChainStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ChainStatus) GetCurrentHeight() int64 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *ChainStatus) GetMempoolSize() int64 {
	if m != nil {
		return m.MempoolSize
	}
	return 0
}

func (m *ChainStatus) GetMsgQueueSize() int64 {
	if m != nil {
		return m.MsgQueueSize
	}
	return 0
}

type RequestHash struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *RequestHash) Reset()                    { *m = RequestHash{} }
func (m *RequestHash) String() string            { return proto.CompactTextString(m) }
func (*RequestHash) ProtoMessage()               {}
func (*RequestHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RequestHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type MerkleProof struct {
	Hashs [][]byte `protobuf:"bytes,1,rep,name=hashs,proto3" json:"hashs,omitempty"`
}

func (m *MerkleProof) Reset()                    { *m = MerkleProof{} }
func (m *MerkleProof) String() string            { return proto.CompactTextString(m) }
func (*MerkleProof) ProtoMessage()               {}
func (*MerkleProof) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MerkleProof) GetHashs() [][]byte {
	if m != nil {
		return m.Hashs
	}
	return nil
}

// req
type RequestBlocks struct {
	Start int64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End   int64 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
}

func (m *RequestBlocks) Reset()                    { *m = RequestBlocks{} }
func (m *RequestBlocks) String() string            { return proto.CompactTextString(m) }
func (*RequestBlocks) ProtoMessage()               {}
func (*RequestBlocks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RequestBlocks) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *RequestBlocks) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

// resp
type Blocks struct {
	Items []*Block `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Blocks) Reset()                    { *m = Blocks{} }
func (m *Blocks) String() string            { return proto.CompactTextString(m) }
func (*Blocks) ProtoMessage()               {}
func (*Blocks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Blocks) GetItems() []*Block {
	if m != nil {
		return m.Items
	}
	return nil
}

type Reply struct {
	IsOk bool   `protobuf:"varint,1,opt,name=isOk" json:"isOk,omitempty"`
	Msg  []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Reply) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

func (m *Reply) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type ReplyBlockHeight struct {
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *ReplyBlockHeight) Reset()                    { *m = ReplyBlockHeight{} }
func (m *ReplyBlockHeight) String() string            { return proto.CompactTextString(m) }
func (*ReplyBlockHeight) ProtoMessage()               {}
func (*ReplyBlockHeight) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReplyBlockHeight) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type RequestTxList struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *RequestTxList) Reset()                    { *m = RequestTxList{} }
func (m *RequestTxList) String() string            { return proto.CompactTextString(m) }
func (*RequestTxList) ProtoMessage()               {}
func (*RequestTxList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RequestTxList) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReplyTxList struct {
	Txs []*Transaction `protobuf:"bytes,1,rep,name=txs" json:"txs,omitempty"`
}

func (m *ReplyTxList) Reset()                    { *m = ReplyTxList{} }
func (m *ReplyTxList) String() string            { return proto.CompactTextString(m) }
func (*ReplyTxList) ProtoMessage()               {}
func (*ReplyTxList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ReplyTxList) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

type TxHashList struct {
	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (m *TxHashList) Reset()                    { *m = TxHashList{} }
func (m *TxHashList) String() string            { return proto.CompactTextString(m) }
func (*TxHashList) ProtoMessage()               {}
func (*TxHashList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TxHashList) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type TxResult struct {
	Height int64        `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Index  int32        `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Tx     *Transaction `protobuf:"bytes,3,opt,name=tx" json:"tx,omitempty"`
}

func (m *TxResult) Reset()                    { *m = TxResult{} }
func (m *TxResult) String() string            { return proto.CompactTextString(m) }
func (*TxResult) ProtoMessage()               {}
func (*TxResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *TxResult) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TxResult) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TxResult) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

// resp
type Headers struct {
	Items []*Header `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Headers) Reset()                    { *m = Headers{} }
func (m *Headers) String() string            { return proto.CompactTextString(m) }
func (*Headers) ProtoMessage()               {}
func (*Headers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Headers) GetItems() []*Header {
	if m != nil {
		return m.Items
	}
	return nil
}

type MempoolSize struct {
	Size int64 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
}

func (m *MempoolSize) Reset()                    { *m = MempoolSize{} }
func (m *MempoolSize) String() string            { return proto.CompactTextString(m) }
func (*MempoolSize) ProtoMessage()               {}
func (*MempoolSize) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *MempoolSize) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func init() {
	proto.RegisterType((*Header)(nil), "types.Header")
	proto.RegisterType((*Block)(nil), "types.Block")
	proto.RegisterType((*Transaction)(nil), "types.Transaction")
	proto.RegisterType((*ChainStatus)(nil), "types.ChainStatus")
	proto.RegisterType((*RequestHash)(nil), "types.RequestHash")
	proto.RegisterType((*MerkleProof)(nil), "types.MerkleProof")
	proto.RegisterType((*RequestBlocks)(nil), "types.RequestBlocks")
	proto.RegisterType((*Blocks)(nil), "types.Blocks")
	proto.RegisterType((*Reply)(nil), "types.Reply")
	proto.RegisterType((*ReplyBlockHeight)(nil), "types.ReplyBlockHeight")
	proto.RegisterType((*RequestTxList)(nil), "types.RequestTxList")
	proto.RegisterType((*ReplyTxList)(nil), "types.ReplyTxList")
	proto.RegisterType((*TxHashList)(nil), "types.TxHashList")
	proto.RegisterType((*TxResult)(nil), "types.TxResult")
	proto.RegisterType((*Headers)(nil), "types.Headers")
	proto.RegisterType((*MempoolSize)(nil), "types.MempoolSize")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Grpcservice service

type GrpcserviceClient interface {
	SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error)
	QueryTransaction(ctx context.Context, in *RequestHash, opts ...grpc.CallOption) (*Reply, error)
	GetBlocks(ctx context.Context, in *RequestBlocks, opts ...grpc.CallOption) (*Reply, error)
}

type grpcserviceClient struct {
	cc *grpc.ClientConn
}

func NewGrpcserviceClient(cc *grpc.ClientConn) GrpcserviceClient {
	return &grpcserviceClient{cc}
}

func (c *grpcserviceClient) SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/SendTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) QueryTransaction(ctx context.Context, in *RequestHash, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/QueryTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetBlocks(ctx context.Context, in *RequestBlocks, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetBlocks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Grpcservice service

type GrpcserviceServer interface {
	SendTransaction(context.Context, *Transaction) (*Reply, error)
	QueryTransaction(context.Context, *RequestHash) (*Reply, error)
	GetBlocks(context.Context, *RequestBlocks) (*Reply, error)
}

func RegisterGrpcserviceServer(s *grpc.Server, srv GrpcserviceServer) {
	s.RegisterService(&_Grpcservice_serviceDesc, srv)
}

func _Grpcservice_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).SendTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_QueryTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).QueryTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/QueryTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).QueryTransaction(ctx, req.(*RequestHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetBlocks(ctx, req.(*RequestBlocks))
	}
	return interceptor(ctx, in, info, handler)
}

var _Grpcservice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.grpcservice",
	HandlerType: (*GrpcserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTransaction",
			Handler:    _Grpcservice_SendTransaction_Handler,
		},
		{
			MethodName: "QueryTransaction",
			Handler:    _Grpcservice_QueryTransaction_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _Grpcservice_GetBlocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

func init() { proto.RegisterFile("types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x75, 0x9d, 0xb6, 0xe3, 0x54, 0x54, 0x2b, 0x84, 0x2c, 0x84, 0x50, 0xba, 0x2d, 0x52,
	0x84, 0xa0, 0x12, 0xad, 0x80, 0x33, 0x70, 0xa0, 0x07, 0x10, 0xed, 0x26, 0x47, 0x24, 0xb4, 0x75,
	0x86, 0x78, 0x55, 0x7f, 0xb1, 0xbb, 0xae, 0x6c, 0x7e, 0x05, 0xff, 0x84, 0x13, 0xff, 0x0f, 0xed,
	0x87, 0x1b, 0x07, 0x02, 0x67, 0x6e, 0xfb, 0xde, 0x7c, 0xe4, 0xcd, 0x9b, 0x89, 0x21, 0xd6, 0x5d,
	0x8d, 0xea, 0xa4, 0x96, 0x95, 0xae, 0x48, 0x64, 0x01, 0xfd, 0x1e, 0xc0, 0xe8, 0x1c, 0xf9, 0x02,
	0x25, 0x49, 0x60, 0xe7, 0x06, 0xa5, 0x12, 0x55, 0x99, 0x04, 0x93, 0x60, 0x1a, 0xb2, 0x1e, 0x92,
	0x47, 0x00, 0x35, 0x97, 0x58, 0xea, 0x73, 0xae, 0xb2, 0x64, 0x6b, 0x12, 0x4c, 0xc7, 0x6c, 0xc0,
	0x90, 0xfb, 0x30, 0xd2, 0xad, 0x8d, 0x85, 0x36, 0xe6, 0x91, 0xe1, 0x33, 0x14, 0xcb, 0x4c, 0x27,
	0xdb, 0xb6, 0xa1, 0x47, 0xe4, 0x21, 0xec, 0x5d, 0xe5, 0x55, 0x7a, 0x3d, 0x17, 0x05, 0x26, 0x91,
	0x0d, 0xad, 0x08, 0xfa, 0x33, 0x80, 0xe8, 0x8d, 0x41, 0xff, 0x8b, 0x22, 0x72, 0x0c, 0xa1, 0x6e,
	0x55, 0x32, 0x9a, 0x84, 0xd3, 0xf8, 0x94, 0x9c, 0x38, 0x1b, 0xe7, 0x92, 0x97, 0x8a, 0xa7, 0x5a,
	0x54, 0x25, 0x33, 0x61, 0xfa, 0x19, 0xe2, 0x01, 0x67, 0xc4, 0x5f, 0xf0, 0x2e, 0xaf, 0xf8, 0xc2,
	0x8a, 0x1f, 0xb3, 0x1e, 0x9a, 0x1f, 0x9b, 0x89, 0x65, 0xc9, 0x75, 0x23, 0xd1, 0x6b, 0x5f, 0x11,
	0xa6, 0xee, 0x75, 0x9a, 0x56, 0x4d, 0xa9, 0xbd, 0xf6, 0x1e, 0xd2, 0x0e, 0xe2, 0xb7, 0x19, 0x17,
	0xe5, 0x4c, 0x73, 0xdd, 0x28, 0x72, 0x0c, 0xfb, 0x69, 0x23, 0xed, 0xc8, 0x6e, 0x24, 0xe7, 0xd1,
	0x3a, 0x49, 0x26, 0x10, 0x17, 0x58, 0xd4, 0x55, 0x95, 0xcf, 0xc4, 0x37, 0xf7, 0x73, 0x21, 0x1b,
	0x52, 0x84, 0xc2, 0xb8, 0x50, 0xcb, 0xcb, 0x06, 0x1b, 0xb4, 0x29, 0xa1, 0x4d, 0x59, 0xe3, 0xe8,
	0x21, 0xc4, 0x0c, 0xbf, 0x36, 0xa8, 0x9c, 0xbd, 0x04, 0xb6, 0x33, 0x63, 0xae, 0x1b, 0xcc, 0xbe,
	0xe9, 0x11, 0xc4, 0x1f, 0x50, 0x5e, 0xe7, 0x78, 0x21, 0xab, 0xea, 0x0b, 0xb9, 0x07, 0x91, 0xa1,
	0x55, 0x12, 0x4c, 0xc2, 0xe9, 0x98, 0x39, 0x40, 0x5f, 0xc1, 0xbe, 0xef, 0x63, 0x37, 0xac, 0x4c,
	0x9a, 0xd2, 0x5c, 0xf6, 0xe2, 0x1d, 0x20, 0x07, 0x10, 0x62, 0xb9, 0xf0, 0x62, 0xcd, 0x93, 0x3e,
	0x85, 0x91, 0xaf, 0xa0, 0x10, 0x09, 0x8d, 0x85, 0x6b, 0x1c, 0x9f, 0x8e, 0xfd, 0x3a, 0x6c, 0x94,
	0xb9, 0x10, 0x7d, 0x06, 0x11, 0xc3, 0x3a, 0xef, 0x8c, 0x50, 0xa1, 0x3e, 0x5e, 0xdb, 0xee, 0xbb,
	0xcc, 0xbe, 0x4d, 0xf3, 0x42, 0x2d, 0xbd, 0xf1, 0xe6, 0x49, 0x9f, 0xc0, 0x81, 0x4d, 0xb7, 0x3d,
	0xbc, 0x6f, 0xab, 0x4b, 0x09, 0x86, 0x97, 0x42, 0x1f, 0xdf, 0x4e, 0x30, 0x6f, 0xdf, 0x0b, 0xa5,
	0xcd, 0x04, 0x6e, 0x5b, 0x7e, 0x02, 0xb7, 0xab, 0x33, 0x63, 0x58, 0x9d, 0x77, 0x3e, 0xc9, 0x5f,
	0x50, 0xf0, 0xef, 0x0b, 0x3a, 0x06, 0x98, 0xdb, 0x3b, 0xb5, 0x35, 0x46, 0x01, 0x57, 0x19, 0xf6,
	0x16, 0x7a, 0x44, 0x3f, 0xc1, 0xee, 0xbc, 0x65, 0xa8, 0x9a, 0xfc, 0xaf, 0x2a, 0x8d, 0x28, 0x51,
	0x2e, 0xb0, 0xb5, 0x53, 0x46, 0xcc, 0x01, 0x42, 0x61, 0x4b, 0xb7, 0x76, 0xbf, 0x9b, 0x45, 0x6c,
	0xe9, 0x96, 0x9e, 0xc0, 0x8e, 0xfb, 0x1e, 0x28, 0x72, 0xb4, 0xee, 0xf4, 0xbe, 0xaf, 0x70, 0xe1,
	0xde, 0xea, 0x43, 0xb3, 0xf6, 0xd5, 0x31, 0x11, 0xd8, 0x56, 0xe6, 0x88, 0x9c, 0x1c, 0xfb, 0x3e,
	0xfd, 0x11, 0x40, 0xbc, 0x94, 0x75, 0xaa, 0x50, 0xde, 0x88, 0x14, 0xc9, 0x0b, 0xb8, 0x3b, 0xc3,
	0x72, 0x31, 0xfc, 0xb3, 0x6c, 0x50, 0xf3, 0xa0, 0xdf, 0xac, 0xf5, 0x91, 0xde, 0x21, 0x2f, 0xe1,
	0xe0, 0xb2, 0x41, 0xd9, 0x6d, 0xaa, 0x1b, 0x1c, 0xe7, 0x1f, 0x75, 0xcf, 0x61, 0xef, 0x1d, 0xde,
	0xde, 0xdb, 0x7a, 0x81, 0x63, 0x7f, 0x2f, 0xb9, 0x1a, 0xd9, 0x6f, 0xe4, 0xd9, 0xaf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xce, 0x08, 0x25, 0xb1, 0x32, 0x05, 0x00, 0x00,
}
