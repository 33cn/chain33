// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	ReqNil
	P2PGetPeerInfo
	P2PPeerInfo
	P2PVersion
	P2PVerAck
	P2PPing
	P2PPong
	P2PGetAddr
	P2PAddr
	P2PGetBlocks
	P2PGetMempool
	P2PInv
	Inventory
	P2PGetData
	P2PTx
	P2PBlock
	BroadCastData
	P2PGetHeaders
	P2PHeaders
	Header
	Block
	BlockOverview
	Transaction
	Signature
	ChainStatus
	ReqHash
	ReqInt
	ReqAddr
	ReqHashes
	ReplyHash
	AddrOverview
	ReplyTxInfo
	TransactionDetail
	TransactionDetails
	ReqBlocks
	BlockDetails
	Reply
	ReplyBlockHeight
	ReqTxList
	ReplyTxList
	TxHashList
	TxResult
	Headers
	MempoolSize
	StoreSet
	StoreGet
	StoreReplyValue
	KeyValue
	ReceiptLog
	Receipt
	ReceiptData
	BlockDetail
	Receipts
	ExecTxList
	Account
	WalletAccount
	ReceiptBalance
	ReceiptExecAccount
	Peer
	PeerList
	LeafNode
	InnerNode
	StoreNode
	MAVLProof
	InvData
	InvDatas
	Genesis
	WalletAccounts
	ReqNewAccount
	ReqWalletTransactionList
	ReqWalletImportPrivKey
	ReqWalletSendToAddress
	ReqWalletSetFee
	ReqWalletSetLabel
	ReqWalletMergeBalance
	ReplyHashes
	ReqWalletSetPasswd
	WalletUnLock
	Config
	P2P
	Wallet
	Store
	Consensus
	MemPool
	BlockChain
	ReplyTxInfos
	WalletTxDetail
	WalletTxDetails
	WalletAccountStore
	Blocks
	WalletPwHash
	CoinsAction
	CoinsGenesis
	CoinsTransfer
	TicketAction
	TicketMiner
	TicketOpen
	TicketGenesis
	TicketClose
	TicketList
	TicketInfos
	Ticket
	ReceiptTicket
	Hashlock
	HashlockAction
	HashlockLock
	HashlockUnlock
	HashlockGenesis
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReqNil struct {
}

func (m *ReqNil) Reset()                    { *m = ReqNil{} }
func (m *ReqNil) String() string            { return proto.CompactTextString(m) }
func (*ReqNil) ProtoMessage()               {}
func (*ReqNil) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type P2PGetPeerInfo struct {
	Version int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
}

func (m *P2PGetPeerInfo) Reset()                    { *m = P2PGetPeerInfo{} }
func (m *P2PGetPeerInfo) String() string            { return proto.CompactTextString(m) }
func (*P2PGetPeerInfo) ProtoMessage()               {}
func (*P2PGetPeerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *P2PGetPeerInfo) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type P2PPeerInfo struct {
	Addr        string  `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Port        int32   `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Name        string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	MempoolSize int32   `protobuf:"varint,4,opt,name=mempoolSize" json:"mempoolSize,omitempty"`
	Header      *Header `protobuf:"bytes,5,opt,name=header" json:"header,omitempty"`
}

func (m *P2PPeerInfo) Reset()                    { *m = P2PPeerInfo{} }
func (m *P2PPeerInfo) String() string            { return proto.CompactTextString(m) }
func (*P2PPeerInfo) ProtoMessage()               {}
func (*P2PPeerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *P2PPeerInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *P2PPeerInfo) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *P2PPeerInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *P2PPeerInfo) GetMempoolSize() int32 {
	if m != nil {
		return m.MempoolSize
	}
	return 0
}

func (m *P2PPeerInfo) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type P2PVersion struct {
	Version     int32  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Service     int64  `protobuf:"varint,2,opt,name=service" json:"service,omitempty"`
	Timestamp   int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	AddrRecv    string `protobuf:"bytes,4,opt,name=addrRecv" json:"addrRecv,omitempty"`
	AddrFrom    string `protobuf:"bytes,5,opt,name=addrFrom" json:"addrFrom,omitempty"`
	Nonce       int64  `protobuf:"varint,6,opt,name=nonce" json:"nonce,omitempty"`
	UserAgent   string `protobuf:"bytes,7,opt,name=userAgent" json:"userAgent,omitempty"`
	StartHeight int64  `protobuf:"varint,8,opt,name=startHeight" json:"startHeight,omitempty"`
}

func (m *P2PVersion) Reset()                    { *m = P2PVersion{} }
func (m *P2PVersion) String() string            { return proto.CompactTextString(m) }
func (*P2PVersion) ProtoMessage()               {}
func (*P2PVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *P2PVersion) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2PVersion) GetService() int64 {
	if m != nil {
		return m.Service
	}
	return 0
}

func (m *P2PVersion) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *P2PVersion) GetAddrRecv() string {
	if m != nil {
		return m.AddrRecv
	}
	return ""
}

func (m *P2PVersion) GetAddrFrom() string {
	if m != nil {
		return m.AddrFrom
	}
	return ""
}

func (m *P2PVersion) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *P2PVersion) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *P2PVersion) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

type P2PVerAck struct {
	Version int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Service int64 `protobuf:"varint,2,opt,name=service" json:"service,omitempty"`
	Nonce   int64 `protobuf:"varint,3,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *P2PVerAck) Reset()                    { *m = P2PVerAck{} }
func (m *P2PVerAck) String() string            { return proto.CompactTextString(m) }
func (*P2PVerAck) ProtoMessage()               {}
func (*P2PVerAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *P2PVerAck) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2PVerAck) GetService() int64 {
	if m != nil {
		return m.Service
	}
	return 0
}

func (m *P2PVerAck) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type P2PPing struct {
	Nonce int64      `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	Addr  string     `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Port  int32      `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	Sign  *Signature `protobuf:"bytes,4,opt,name=sign" json:"sign,omitempty"`
}

func (m *P2PPing) Reset()                    { *m = P2PPing{} }
func (m *P2PPing) String() string            { return proto.CompactTextString(m) }
func (*P2PPing) ProtoMessage()               {}
func (*P2PPing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *P2PPing) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *P2PPing) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *P2PPing) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *P2PPing) GetSign() *Signature {
	if m != nil {
		return m.Sign
	}
	return nil
}

type P2PPong struct {
	Nonce int64 `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *P2PPong) Reset()                    { *m = P2PPong{} }
func (m *P2PPong) String() string            { return proto.CompactTextString(m) }
func (*P2PPong) ProtoMessage()               {}
func (*P2PPong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *P2PPong) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type P2PGetAddr struct {
	Nonce int64 `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *P2PGetAddr) Reset()                    { *m = P2PGetAddr{} }
func (m *P2PGetAddr) String() string            { return proto.CompactTextString(m) }
func (*P2PGetAddr) ProtoMessage()               {}
func (*P2PGetAddr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *P2PGetAddr) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type P2PAddr struct {
	Nonce    int64    `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	Addrlist []string `protobuf:"bytes,2,rep,name=addrlist" json:"addrlist,omitempty"`
}

func (m *P2PAddr) Reset()                    { *m = P2PAddr{} }
func (m *P2PAddr) String() string            { return proto.CompactTextString(m) }
func (*P2PAddr) ProtoMessage()               {}
func (*P2PAddr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *P2PAddr) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *P2PAddr) GetAddrlist() []string {
	if m != nil {
		return m.Addrlist
	}
	return nil
}

type P2PGetBlocks struct {
	Version     int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	StartHeight int64 `protobuf:"varint,2,opt,name=startHeight" json:"startHeight,omitempty"`
	EndHeight   int64 `protobuf:"varint,3,opt,name=endHeight" json:"endHeight,omitempty"`
}

func (m *P2PGetBlocks) Reset()                    { *m = P2PGetBlocks{} }
func (m *P2PGetBlocks) String() string            { return proto.CompactTextString(m) }
func (*P2PGetBlocks) ProtoMessage()               {}
func (*P2PGetBlocks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *P2PGetBlocks) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2PGetBlocks) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *P2PGetBlocks) GetEndHeight() int64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

type P2PGetMempool struct {
	Version int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
}

func (m *P2PGetMempool) Reset()                    { *m = P2PGetMempool{} }
func (m *P2PGetMempool) String() string            { return proto.CompactTextString(m) }
func (*P2PGetMempool) ProtoMessage()               {}
func (*P2PGetMempool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *P2PGetMempool) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type P2PInv struct {
	Invs []*Inventory `protobuf:"bytes,1,rep,name=invs" json:"invs,omitempty"`
}

func (m *P2PInv) Reset()                    { *m = P2PInv{} }
func (m *P2PInv) String() string            { return proto.CompactTextString(m) }
func (*P2PInv) ProtoMessage()               {}
func (*P2PInv) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *P2PInv) GetInvs() []*Inventory {
	if m != nil {
		return m.Invs
	}
	return nil
}

// ty=MSG_TX MSG_BLOCK
type Inventory struct {
	Ty     int32  `protobuf:"varint,1,opt,name=ty" json:"ty,omitempty"`
	Hash   []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Height int64  `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
}

func (m *Inventory) Reset()                    { *m = Inventory{} }
func (m *Inventory) String() string            { return proto.CompactTextString(m) }
func (*Inventory) ProtoMessage()               {}
func (*Inventory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Inventory) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *Inventory) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Inventory) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type P2PGetData struct {
	Version int32        `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Invs    []*Inventory `protobuf:"bytes,2,rep,name=invs" json:"invs,omitempty"`
}

func (m *P2PGetData) Reset()                    { *m = P2PGetData{} }
func (m *P2PGetData) String() string            { return proto.CompactTextString(m) }
func (*P2PGetData) ProtoMessage()               {}
func (*P2PGetData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *P2PGetData) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2PGetData) GetInvs() []*Inventory {
	if m != nil {
		return m.Invs
	}
	return nil
}

type P2PTx struct {
	Tx *Transaction `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
}

func (m *P2PTx) Reset()                    { *m = P2PTx{} }
func (m *P2PTx) String() string            { return proto.CompactTextString(m) }
func (*P2PTx) ProtoMessage()               {}
func (*P2PTx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *P2PTx) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

type P2PBlock struct {
	Block *Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
}

func (m *P2PBlock) Reset()                    { *m = P2PBlock{} }
func (m *P2PBlock) String() string            { return proto.CompactTextString(m) }
func (*P2PBlock) ProtoMessage()               {}
func (*P2PBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *P2PBlock) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type BroadCastData struct {
	// Types that are valid to be assigned to Value:
	//	*BroadCastData_Tx
	//	*BroadCastData_Block
	Value isBroadCastData_Value `protobuf_oneof:"value"`
}

func (m *BroadCastData) Reset()                    { *m = BroadCastData{} }
func (m *BroadCastData) String() string            { return proto.CompactTextString(m) }
func (*BroadCastData) ProtoMessage()               {}
func (*BroadCastData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type isBroadCastData_Value interface {
	isBroadCastData_Value()
}

type BroadCastData_Tx struct {
	Tx *P2PTx `protobuf:"bytes,1,opt,name=tx,oneof"`
}
type BroadCastData_Block struct {
	Block *P2PBlock `protobuf:"bytes,2,opt,name=block,oneof"`
}

func (*BroadCastData_Tx) isBroadCastData_Value()    {}
func (*BroadCastData_Block) isBroadCastData_Value() {}

func (m *BroadCastData) GetValue() isBroadCastData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BroadCastData) GetTx() *P2PTx {
	if x, ok := m.GetValue().(*BroadCastData_Tx); ok {
		return x.Tx
	}
	return nil
}

func (m *BroadCastData) GetBlock() *P2PBlock {
	if x, ok := m.GetValue().(*BroadCastData_Block); ok {
		return x.Block
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BroadCastData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BroadCastData_OneofMarshaler, _BroadCastData_OneofUnmarshaler, _BroadCastData_OneofSizer, []interface{}{
		(*BroadCastData_Tx)(nil),
		(*BroadCastData_Block)(nil),
	}
}

func _BroadCastData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BroadCastData)
	// value
	switch x := m.Value.(type) {
	case *BroadCastData_Tx:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tx); err != nil {
			return err
		}
	case *BroadCastData_Block:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BroadCastData.Value has unexpected type %T", x)
	}
	return nil
}

func _BroadCastData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BroadCastData)
	switch tag {
	case 1: // value.tx
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(P2PTx)
		err := b.DecodeMessage(msg)
		m.Value = &BroadCastData_Tx{msg}
		return true, err
	case 2: // value.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(P2PBlock)
		err := b.DecodeMessage(msg)
		m.Value = &BroadCastData_Block{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BroadCastData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BroadCastData)
	// value
	switch x := m.Value.(type) {
	case *BroadCastData_Tx:
		s := proto.Size(x.Tx)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BroadCastData_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type P2PGetHeaders struct {
	Version     int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	StartHeight int64 `protobuf:"varint,2,opt,name=startHeight" json:"startHeight,omitempty"`
	EndHeigh    int64 `protobuf:"varint,3,opt,name=endHeigh" json:"endHeigh,omitempty"`
}

func (m *P2PGetHeaders) Reset()                    { *m = P2PGetHeaders{} }
func (m *P2PGetHeaders) String() string            { return proto.CompactTextString(m) }
func (*P2PGetHeaders) ProtoMessage()               {}
func (*P2PGetHeaders) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *P2PGetHeaders) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2PGetHeaders) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *P2PGetHeaders) GetEndHeigh() int64 {
	if m != nil {
		return m.EndHeigh
	}
	return 0
}

type P2PHeaders struct {
	Headers []*Header `protobuf:"bytes,1,rep,name=headers" json:"headers,omitempty"`
}

func (m *P2PHeaders) Reset()                    { *m = P2PHeaders{} }
func (m *P2PHeaders) String() string            { return proto.CompactTextString(m) }
func (*P2PHeaders) ProtoMessage()               {}
func (*P2PHeaders) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *P2PHeaders) GetHeaders() []*Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

type Header struct {
	Version    int64      `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ParentHash []byte     `protobuf:"bytes,2,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	TxHash     []byte     `protobuf:"bytes,3,opt,name=txHash,proto3" json:"txHash,omitempty"`
	StateHash  []byte     `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Height     int64      `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	BlockTime  int64      `protobuf:"varint,6,opt,name=blockTime" json:"blockTime,omitempty"`
	Signature  *Signature `protobuf:"bytes,8,opt,name=signature" json:"signature,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Header) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Header) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *Header) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Header) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *Header) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Header) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *Header) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Block struct {
	Version    int64          `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ParentHash []byte         `protobuf:"bytes,2,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	TxHash     []byte         `protobuf:"bytes,3,opt,name=txHash,proto3" json:"txHash,omitempty"`
	StateHash  []byte         `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Height     int64          `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	BlockTime  int64          `protobuf:"varint,6,opt,name=blockTime" json:"blockTime,omitempty"`
	Txs        []*Transaction `protobuf:"bytes,7,rep,name=txs" json:"txs,omitempty"`
	Signature  *Signature     `protobuf:"bytes,8,opt,name=signature" json:"signature,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Block) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Block) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *Block) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Block) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *Block) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *Block) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *Block) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type BlockOverview struct {
	Head     *Header  `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
	TxCount  int64    `protobuf:"varint,2,opt,name=txCount" json:"txCount,omitempty"`
	TxHashes [][]byte `protobuf:"bytes,3,rep,name=txHashes,proto3" json:"txHashes,omitempty"`
}

func (m *BlockOverview) Reset()                    { *m = BlockOverview{} }
func (m *BlockOverview) String() string            { return proto.CompactTextString(m) }
func (*BlockOverview) ProtoMessage()               {}
func (*BlockOverview) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *BlockOverview) GetHead() *Header {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *BlockOverview) GetTxCount() int64 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *BlockOverview) GetTxHashes() [][]byte {
	if m != nil {
		return m.TxHashes
	}
	return nil
}

type Transaction struct {
	Execer    []byte     `protobuf:"bytes,1,opt,name=execer,proto3" json:"execer,omitempty"`
	Payload   []byte     `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature *Signature `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
	Fee       int64      `protobuf:"varint,4,opt,name=fee" json:"fee,omitempty"`
	Expire    int64      `protobuf:"varint,5,opt,name=expire" json:"expire,omitempty"`
	Nonce     int64      `protobuf:"varint,6,opt,name=nonce" json:"nonce,omitempty"`
	To        string     `protobuf:"bytes,7,opt,name=to" json:"to,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Transaction) GetExecer() []byte {
	if m != nil {
		return m.Execer
	}
	return nil
}

func (m *Transaction) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Transaction) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Transaction) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *Transaction) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *Transaction) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

// 三种签名支持
// ty = 1 -> secp256k1
// ty = 2 -> ed25519
// ty = 3 -> sm2
type Signature struct {
	Ty        int32  `protobuf:"varint,1,opt,name=ty" json:"ty,omitempty"`
	Pubkey    []byte `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Signature) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *Signature) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ChainStatus struct {
	CurrentHeight int64 `protobuf:"varint,1,opt,name=currentHeight" json:"currentHeight,omitempty"`
	MempoolSize   int64 `protobuf:"varint,2,opt,name=mempoolSize" json:"mempoolSize,omitempty"`
	MsgQueueSize  int64 `protobuf:"varint,3,opt,name=msgQueueSize" json:"msgQueueSize,omitempty"`
}

func (m *ChainStatus) Reset()                    { *m = ChainStatus{} }
func (m *ChainStatus) String() string            { return proto.CompactTextString(m) }
func (*ChainStatus) ProtoMessage()               {}
func (*ChainStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ChainStatus) GetCurrentHeight() int64 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *ChainStatus) GetMempoolSize() int64 {
	if m != nil {
		return m.MempoolSize
	}
	return 0
}

func (m *ChainStatus) GetMsgQueueSize() int64 {
	if m != nil {
		return m.MsgQueueSize
	}
	return 0
}

type ReqHash struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *ReqHash) Reset()                    { *m = ReqHash{} }
func (m *ReqHash) String() string            { return proto.CompactTextString(m) }
func (*ReqHash) ProtoMessage()               {}
func (*ReqHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ReqHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type ReqInt struct {
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *ReqInt) Reset()                    { *m = ReqInt{} }
func (m *ReqInt) String() string            { return proto.CompactTextString(m) }
func (*ReqInt) ProtoMessage()               {}
func (*ReqInt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ReqInt) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ReqAddr struct {
	Addr      string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Flag      int32  `protobuf:"varint,2,opt,name=flag" json:"flag,omitempty"`
	Count     int32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Direction int32  `protobuf:"varint,4,opt,name=direction" json:"direction,omitempty"`
	Height    int64  `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	Index     int64  `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
}

func (m *ReqAddr) Reset()                    { *m = ReqAddr{} }
func (m *ReqAddr) String() string            { return proto.CompactTextString(m) }
func (*ReqAddr) ProtoMessage()               {}
func (*ReqAddr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ReqAddr) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReqAddr) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *ReqAddr) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqAddr) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *ReqAddr) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ReqAddr) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type ReqHashes struct {
	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (m *ReqHashes) Reset()                    { *m = ReqHashes{} }
func (m *ReqHashes) String() string            { return proto.CompactTextString(m) }
func (*ReqHashes) ProtoMessage()               {}
func (*ReqHashes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ReqHashes) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type ReplyHash struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *ReplyHash) Reset()                    { *m = ReplyHash{} }
func (m *ReplyHash) String() string            { return proto.CompactTextString(m) }
func (*ReplyHash) ProtoMessage()               {}
func (*ReplyHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ReplyHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type AddrOverview struct {
	Reciver int64 `protobuf:"varint,1,opt,name=reciver" json:"reciver,omitempty"`
	Balance int64 `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	TxCount int64 `protobuf:"varint,3,opt,name=txCount" json:"txCount,omitempty"`
}

func (m *AddrOverview) Reset()                    { *m = AddrOverview{} }
func (m *AddrOverview) String() string            { return proto.CompactTextString(m) }
func (*AddrOverview) ProtoMessage()               {}
func (*AddrOverview) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *AddrOverview) GetReciver() int64 {
	if m != nil {
		return m.Reciver
	}
	return 0
}

func (m *AddrOverview) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *AddrOverview) GetTxCount() int64 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

type ReplyTxInfo struct {
	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height int64  `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Index  int64  `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
}

func (m *ReplyTxInfo) Reset()                    { *m = ReplyTxInfo{} }
func (m *ReplyTxInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyTxInfo) ProtoMessage()               {}
func (*ReplyTxInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ReplyTxInfo) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ReplyTxInfo) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ReplyTxInfo) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type TransactionDetail struct {
	Tx        *Transaction `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
	Receipt   *ReceiptData `protobuf:"bytes,2,opt,name=receipt" json:"receipt,omitempty"`
	Proofs    [][]byte     `protobuf:"bytes,3,rep,name=proofs,proto3" json:"proofs,omitempty"`
	Height    int64        `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
	Index     int64        `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Blocktime int64        `protobuf:"varint,6,opt,name=blocktime" json:"blocktime,omitempty"`
	Amount    int64        `protobuf:"varint,7,opt,name=amount" json:"amount,omitempty"`
	Fromaddr  string       `protobuf:"bytes,8,opt,name=fromaddr" json:"fromaddr,omitempty"`
}

func (m *TransactionDetail) Reset()                    { *m = TransactionDetail{} }
func (m *TransactionDetail) String() string            { return proto.CompactTextString(m) }
func (*TransactionDetail) ProtoMessage()               {}
func (*TransactionDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *TransactionDetail) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TransactionDetail) GetReceipt() *ReceiptData {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func (m *TransactionDetail) GetProofs() [][]byte {
	if m != nil {
		return m.Proofs
	}
	return nil
}

func (m *TransactionDetail) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TransactionDetail) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TransactionDetail) GetBlocktime() int64 {
	if m != nil {
		return m.Blocktime
	}
	return 0
}

func (m *TransactionDetail) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransactionDetail) GetFromaddr() string {
	if m != nil {
		return m.Fromaddr
	}
	return ""
}

type TransactionDetails struct {
	Txs []*TransactionDetail `protobuf:"bytes,1,rep,name=txs" json:"txs,omitempty"`
}

func (m *TransactionDetails) Reset()                    { *m = TransactionDetails{} }
func (m *TransactionDetails) String() string            { return proto.CompactTextString(m) }
func (*TransactionDetails) ProtoMessage()               {}
func (*TransactionDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *TransactionDetails) GetTxs() []*TransactionDetail {
	if m != nil {
		return m.Txs
	}
	return nil
}

// req
type ReqBlocks struct {
	Start    int64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End      int64 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	Isdetail bool  `protobuf:"varint,3,opt,name=Isdetail" json:"Isdetail,omitempty"`
}

func (m *ReqBlocks) Reset()                    { *m = ReqBlocks{} }
func (m *ReqBlocks) String() string            { return proto.CompactTextString(m) }
func (*ReqBlocks) ProtoMessage()               {}
func (*ReqBlocks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *ReqBlocks) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReqBlocks) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *ReqBlocks) GetIsdetail() bool {
	if m != nil {
		return m.Isdetail
	}
	return false
}

// resp
type BlockDetails struct {
	Items []*BlockDetail `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *BlockDetails) Reset()                    { *m = BlockDetails{} }
func (m *BlockDetails) String() string            { return proto.CompactTextString(m) }
func (*BlockDetails) ProtoMessage()               {}
func (*BlockDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *BlockDetails) GetItems() []*BlockDetail {
	if m != nil {
		return m.Items
	}
	return nil
}

type Reply struct {
	IsOk bool   `protobuf:"varint,1,opt,name=isOk" json:"isOk,omitempty"`
	Msg  []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *Reply) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

func (m *Reply) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type ReplyBlockHeight struct {
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *ReplyBlockHeight) Reset()                    { *m = ReplyBlockHeight{} }
func (m *ReplyBlockHeight) String() string            { return proto.CompactTextString(m) }
func (*ReplyBlockHeight) ProtoMessage()               {}
func (*ReplyBlockHeight) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *ReplyBlockHeight) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ReqTxList struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *ReqTxList) Reset()                    { *m = ReqTxList{} }
func (m *ReqTxList) String() string            { return proto.CompactTextString(m) }
func (*ReqTxList) ProtoMessage()               {}
func (*ReqTxList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ReqTxList) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReplyTxList struct {
	Txs []*Transaction `protobuf:"bytes,1,rep,name=txs" json:"txs,omitempty"`
}

func (m *ReplyTxList) Reset()                    { *m = ReplyTxList{} }
func (m *ReplyTxList) String() string            { return proto.CompactTextString(m) }
func (*ReplyTxList) ProtoMessage()               {}
func (*ReplyTxList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *ReplyTxList) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

type TxHashList struct {
	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (m *TxHashList) Reset()                    { *m = TxHashList{} }
func (m *TxHashList) String() string            { return proto.CompactTextString(m) }
func (*TxHashList) ProtoMessage()               {}
func (*TxHashList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *TxHashList) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type TxResult struct {
	Height      int64        `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Index       int32        `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Tx          *Transaction `protobuf:"bytes,3,opt,name=tx" json:"tx,omitempty"`
	Receiptdate *ReceiptData `protobuf:"bytes,4,opt,name=receiptdate" json:"receiptdate,omitempty"`
	Blocktime   int64        `protobuf:"varint,5,opt,name=blocktime" json:"blocktime,omitempty"`
}

func (m *TxResult) Reset()                    { *m = TxResult{} }
func (m *TxResult) String() string            { return proto.CompactTextString(m) }
func (*TxResult) ProtoMessage()               {}
func (*TxResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *TxResult) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TxResult) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TxResult) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TxResult) GetReceiptdate() *ReceiptData {
	if m != nil {
		return m.Receiptdate
	}
	return nil
}

func (m *TxResult) GetBlocktime() int64 {
	if m != nil {
		return m.Blocktime
	}
	return 0
}

// resp
type Headers struct {
	Items []*Header `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Headers) Reset()                    { *m = Headers{} }
func (m *Headers) String() string            { return proto.CompactTextString(m) }
func (*Headers) ProtoMessage()               {}
func (*Headers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *Headers) GetItems() []*Header {
	if m != nil {
		return m.Items
	}
	return nil
}

type MempoolSize struct {
	Size int64 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
}

func (m *MempoolSize) Reset()                    { *m = MempoolSize{} }
func (m *MempoolSize) String() string            { return proto.CompactTextString(m) }
func (*MempoolSize) ProtoMessage()               {}
func (*MempoolSize) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *MempoolSize) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type StoreSet struct {
	StateHash []byte      `protobuf:"bytes,1,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	KV        []*KeyValue `protobuf:"bytes,2,rep,name=KV" json:"KV,omitempty"`
}

func (m *StoreSet) Reset()                    { *m = StoreSet{} }
func (m *StoreSet) String() string            { return proto.CompactTextString(m) }
func (*StoreSet) ProtoMessage()               {}
func (*StoreSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *StoreSet) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *StoreSet) GetKV() []*KeyValue {
	if m != nil {
		return m.KV
	}
	return nil
}

type StoreGet struct {
	StateHash []byte   `protobuf:"bytes,1,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Keys      [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *StoreGet) Reset()                    { *m = StoreGet{} }
func (m *StoreGet) String() string            { return proto.CompactTextString(m) }
func (*StoreGet) ProtoMessage()               {}
func (*StoreGet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *StoreGet) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *StoreGet) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

type StoreReplyValue struct {
	Values [][]byte `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *StoreReplyValue) Reset()                    { *m = StoreReplyValue{} }
func (m *StoreReplyValue) String() string            { return proto.CompactTextString(m) }
func (*StoreReplyValue) ProtoMessage()               {}
func (*StoreReplyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *StoreReplyValue) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

type KeyValue struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *KeyValue) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type ReceiptLog struct {
	Ty  int32  `protobuf:"varint,1,opt,name=ty" json:"ty,omitempty"`
	Log []byte `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
}

func (m *ReceiptLog) Reset()                    { *m = ReceiptLog{} }
func (m *ReceiptLog) String() string            { return proto.CompactTextString(m) }
func (*ReceiptLog) ProtoMessage()               {}
func (*ReceiptLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *ReceiptLog) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *ReceiptLog) GetLog() []byte {
	if m != nil {
		return m.Log
	}
	return nil
}

// ty = 0 -> error Receipt
// ty = 1 -> CutFee //cut fee ,bug exec not ok
// ty = 2 -> exec ok
type Receipt struct {
	Ty   int32         `protobuf:"varint,1,opt,name=ty" json:"ty,omitempty"`
	KV   []*KeyValue   `protobuf:"bytes,2,rep,name=KV" json:"KV,omitempty"`
	Logs []*ReceiptLog `protobuf:"bytes,3,rep,name=logs" json:"logs,omitempty"`
}

func (m *Receipt) Reset()                    { *m = Receipt{} }
func (m *Receipt) String() string            { return proto.CompactTextString(m) }
func (*Receipt) ProtoMessage()               {}
func (*Receipt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *Receipt) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *Receipt) GetKV() []*KeyValue {
	if m != nil {
		return m.KV
	}
	return nil
}

func (m *Receipt) GetLogs() []*ReceiptLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

type ReceiptData struct {
	Ty   int32         `protobuf:"varint,1,opt,name=ty" json:"ty,omitempty"`
	Logs []*ReceiptLog `protobuf:"bytes,3,rep,name=logs" json:"logs,omitempty"`
}

func (m *ReceiptData) Reset()                    { *m = ReceiptData{} }
func (m *ReceiptData) String() string            { return proto.CompactTextString(m) }
func (*ReceiptData) ProtoMessage()               {}
func (*ReceiptData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *ReceiptData) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *ReceiptData) GetLogs() []*ReceiptLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

type BlockDetail struct {
	Block    *Block         `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Receipts []*ReceiptData `protobuf:"bytes,2,rep,name=receipts" json:"receipts,omitempty"`
}

func (m *BlockDetail) Reset()                    { *m = BlockDetail{} }
func (m *BlockDetail) String() string            { return proto.CompactTextString(m) }
func (*BlockDetail) ProtoMessage()               {}
func (*BlockDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *BlockDetail) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockDetail) GetReceipts() []*ReceiptData {
	if m != nil {
		return m.Receipts
	}
	return nil
}

type Receipts struct {
	Receipts []*Receipt `protobuf:"bytes,1,rep,name=receipts" json:"receipts,omitempty"`
}

func (m *Receipts) Reset()                    { *m = Receipts{} }
func (m *Receipts) String() string            { return proto.CompactTextString(m) }
func (*Receipts) ProtoMessage()               {}
func (*Receipts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *Receipts) GetReceipts() []*Receipt {
	if m != nil {
		return m.Receipts
	}
	return nil
}

type ExecTxList struct {
	StateHash []byte         `protobuf:"bytes,1,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Txs       []*Transaction `protobuf:"bytes,2,rep,name=txs" json:"txs,omitempty"`
	BlockTime int64          `protobuf:"varint,3,opt,name=blockTime" json:"blockTime,omitempty"`
	Height    int64          `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
}

func (m *ExecTxList) Reset()                    { *m = ExecTxList{} }
func (m *ExecTxList) String() string            { return proto.CompactTextString(m) }
func (*ExecTxList) ProtoMessage()               {}
func (*ExecTxList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *ExecTxList) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *ExecTxList) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *ExecTxList) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *ExecTxList) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// currency = 0 -> origin account
type Account struct {
	Currency int32  `protobuf:"varint,1,opt,name=currency" json:"currency,omitempty"`
	Balance  int64  `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	Frozen   int64  `protobuf:"varint,3,opt,name=frozen" json:"frozen,omitempty"`
	Addr     string `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *Account) GetCurrency() int32 {
	if m != nil {
		return m.Currency
	}
	return 0
}

func (m *Account) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Account) GetFrozen() int64 {
	if m != nil {
		return m.Frozen
	}
	return 0
}

func (m *Account) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type WalletAccount struct {
	Acc   *Account `protobuf:"bytes,1,opt,name=acc" json:"acc,omitempty"`
	Label string   `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
}

func (m *WalletAccount) Reset()                    { *m = WalletAccount{} }
func (m *WalletAccount) String() string            { return proto.CompactTextString(m) }
func (*WalletAccount) ProtoMessage()               {}
func (*WalletAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *WalletAccount) GetAcc() *Account {
	if m != nil {
		return m.Acc
	}
	return nil
}

func (m *WalletAccount) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ReceiptBalance struct {
	Prev    int64 `protobuf:"varint,1,opt,name=prev" json:"prev,omitempty"`
	Current int64 `protobuf:"varint,2,opt,name=current" json:"current,omitempty"`
	Delt    int64 `protobuf:"varint,3,opt,name=delt" json:"delt,omitempty"`
}

func (m *ReceiptBalance) Reset()                    { *m = ReceiptBalance{} }
func (m *ReceiptBalance) String() string            { return proto.CompactTextString(m) }
func (*ReceiptBalance) ProtoMessage()               {}
func (*ReceiptBalance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *ReceiptBalance) GetPrev() int64 {
	if m != nil {
		return m.Prev
	}
	return 0
}

func (m *ReceiptBalance) GetCurrent() int64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *ReceiptBalance) GetDelt() int64 {
	if m != nil {
		return m.Delt
	}
	return 0
}

type ReceiptExecAccount struct {
	ExecAddr string   `protobuf:"bytes,1,opt,name=execAddr" json:"execAddr,omitempty"`
	Prev     *Account `protobuf:"bytes,2,opt,name=prev" json:"prev,omitempty"`
	Current  *Account `protobuf:"bytes,3,opt,name=current" json:"current,omitempty"`
}

func (m *ReceiptExecAccount) Reset()                    { *m = ReceiptExecAccount{} }
func (m *ReceiptExecAccount) String() string            { return proto.CompactTextString(m) }
func (*ReceiptExecAccount) ProtoMessage()               {}
func (*ReceiptExecAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *ReceiptExecAccount) GetExecAddr() string {
	if m != nil {
		return m.ExecAddr
	}
	return ""
}

func (m *ReceiptExecAccount) GetPrev() *Account {
	if m != nil {
		return m.Prev
	}
	return nil
}

func (m *ReceiptExecAccount) GetCurrent() *Account {
	if m != nil {
		return m.Current
	}
	return nil
}

// p2p
type Peer struct {
	Addr        string  `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Port        int32   `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Name        string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	MempoolSize int32   `protobuf:"varint,4,opt,name=mempoolSize" json:"mempoolSize,omitempty"`
	Header      *Header `protobuf:"bytes,5,opt,name=header" json:"header,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *Peer) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Peer) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Peer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Peer) GetMempoolSize() int32 {
	if m != nil {
		return m.MempoolSize
	}
	return 0
}

func (m *Peer) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type PeerList struct {
	Peers []*Peer `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *PeerList) Reset()                    { *m = PeerList{} }
func (m *PeerList) String() string            { return proto.CompactTextString(m) }
func (*PeerList) ProtoMessage()               {}
func (*PeerList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *PeerList) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

// merkle avl tree
type LeafNode struct {
	Key    []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Height int32  `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Size   int32  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *LeafNode) Reset()                    { *m = LeafNode{} }
func (m *LeafNode) String() string            { return proto.CompactTextString(m) }
func (*LeafNode) ProtoMessage()               {}
func (*LeafNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *LeafNode) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *LeafNode) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *LeafNode) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *LeafNode) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type InnerNode struct {
	LeftHash  []byte `protobuf:"bytes,1,opt,name=leftHash,proto3" json:"leftHash,omitempty"`
	RightHash []byte `protobuf:"bytes,2,opt,name=rightHash,proto3" json:"rightHash,omitempty"`
	Height    int32  `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Size      int32  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *InnerNode) Reset()                    { *m = InnerNode{} }
func (m *InnerNode) String() string            { return proto.CompactTextString(m) }
func (*InnerNode) ProtoMessage()               {}
func (*InnerNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *InnerNode) GetLeftHash() []byte {
	if m != nil {
		return m.LeftHash
	}
	return nil
}

func (m *InnerNode) GetRightHash() []byte {
	if m != nil {
		return m.RightHash
	}
	return nil
}

func (m *InnerNode) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *InnerNode) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type StoreNode struct {
	Key       []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	LeftHash  []byte `protobuf:"bytes,3,opt,name=leftHash,proto3" json:"leftHash,omitempty"`
	RightHash []byte `protobuf:"bytes,4,opt,name=rightHash,proto3" json:"rightHash,omitempty"`
	Height    int32  `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	Size      int32  `protobuf:"varint,6,opt,name=size" json:"size,omitempty"`
}

func (m *StoreNode) Reset()                    { *m = StoreNode{} }
func (m *StoreNode) String() string            { return proto.CompactTextString(m) }
func (*StoreNode) ProtoMessage()               {}
func (*StoreNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *StoreNode) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *StoreNode) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *StoreNode) GetLeftHash() []byte {
	if m != nil {
		return m.LeftHash
	}
	return nil
}

func (m *StoreNode) GetRightHash() []byte {
	if m != nil {
		return m.RightHash
	}
	return nil
}

func (m *StoreNode) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StoreNode) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type MAVLProof struct {
	LeafHash   []byte       `protobuf:"bytes,1,opt,name=leafHash,proto3" json:"leafHash,omitempty"`
	InnerNodes []*InnerNode `protobuf:"bytes,2,rep,name=innerNodes" json:"innerNodes,omitempty"`
	RootHash   []byte       `protobuf:"bytes,3,opt,name=rootHash,proto3" json:"rootHash,omitempty"`
}

func (m *MAVLProof) Reset()                    { *m = MAVLProof{} }
func (m *MAVLProof) String() string            { return proto.CompactTextString(m) }
func (*MAVLProof) ProtoMessage()               {}
func (*MAVLProof) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *MAVLProof) GetLeafHash() []byte {
	if m != nil {
		return m.LeafHash
	}
	return nil
}

func (m *MAVLProof) GetInnerNodes() []*InnerNode {
	if m != nil {
		return m.InnerNodes
	}
	return nil
}

func (m *MAVLProof) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

type InvData struct {
	// Types that are valid to be assigned to Value:
	//	*InvData_Tx
	//	*InvData_Block
	Value isInvData_Value `protobuf_oneof:"value"`
	Ty    int32           `protobuf:"varint,3,opt,name=ty" json:"ty,omitempty"`
}

func (m *InvData) Reset()                    { *m = InvData{} }
func (m *InvData) String() string            { return proto.CompactTextString(m) }
func (*InvData) ProtoMessage()               {}
func (*InvData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

type isInvData_Value interface {
	isInvData_Value()
}

type InvData_Tx struct {
	Tx *Transaction `protobuf:"bytes,1,opt,name=tx,oneof"`
}
type InvData_Block struct {
	Block *Block `protobuf:"bytes,2,opt,name=block,oneof"`
}

func (*InvData_Tx) isInvData_Value()    {}
func (*InvData_Block) isInvData_Value() {}

func (m *InvData) GetValue() isInvData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *InvData) GetTx() *Transaction {
	if x, ok := m.GetValue().(*InvData_Tx); ok {
		return x.Tx
	}
	return nil
}

func (m *InvData) GetBlock() *Block {
	if x, ok := m.GetValue().(*InvData_Block); ok {
		return x.Block
	}
	return nil
}

func (m *InvData) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InvData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InvData_OneofMarshaler, _InvData_OneofUnmarshaler, _InvData_OneofSizer, []interface{}{
		(*InvData_Tx)(nil),
		(*InvData_Block)(nil),
	}
}

func _InvData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InvData)
	// value
	switch x := m.Value.(type) {
	case *InvData_Tx:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tx); err != nil {
			return err
		}
	case *InvData_Block:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InvData.Value has unexpected type %T", x)
	}
	return nil
}

func _InvData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InvData)
	switch tag {
	case 1: // value.tx
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction)
		err := b.DecodeMessage(msg)
		m.Value = &InvData_Tx{msg}
		return true, err
	case 2: // value.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Block)
		err := b.DecodeMessage(msg)
		m.Value = &InvData_Block{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InvData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InvData)
	// value
	switch x := m.Value.(type) {
	case *InvData_Tx:
		s := proto.Size(x.Tx)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InvData_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type InvDatas struct {
	Items []*InvData `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *InvDatas) Reset()                    { *m = InvDatas{} }
func (m *InvDatas) String() string            { return proto.CompactTextString(m) }
func (*InvDatas) ProtoMessage()               {}
func (*InvDatas) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *InvDatas) GetItems() []*InvData {
	if m != nil {
		return m.Items
	}
	return nil
}

type Genesis struct {
	Isrun bool `protobuf:"varint,1,opt,name=isrun" json:"isrun,omitempty"`
}

func (m *Genesis) Reset()                    { *m = Genesis{} }
func (m *Genesis) String() string            { return proto.CompactTextString(m) }
func (*Genesis) ProtoMessage()               {}
func (*Genesis) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *Genesis) GetIsrun() bool {
	if m != nil {
		return m.Isrun
	}
	return false
}

// Wallet Module
type WalletAccounts struct {
	Wallets []*WalletAccount `protobuf:"bytes,1,rep,name=wallets" json:"wallets,omitempty"`
}

func (m *WalletAccounts) Reset()                    { *m = WalletAccounts{} }
func (m *WalletAccounts) String() string            { return proto.CompactTextString(m) }
func (*WalletAccounts) ProtoMessage()               {}
func (*WalletAccounts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *WalletAccounts) GetWallets() []*WalletAccount {
	if m != nil {
		return m.Wallets
	}
	return nil
}

type ReqNewAccount struct {
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
}

func (m *ReqNewAccount) Reset()                    { *m = ReqNewAccount{} }
func (m *ReqNewAccount) String() string            { return proto.CompactTextString(m) }
func (*ReqNewAccount) ProtoMessage()               {}
func (*ReqNewAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *ReqNewAccount) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ReqWalletTransactionList struct {
	FromTx    []byte `protobuf:"bytes,1,opt,name=fromTx,proto3" json:"fromTx,omitempty"`
	Count     int32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Direction int32  `protobuf:"varint,3,opt,name=direction" json:"direction,omitempty"`
}

func (m *ReqWalletTransactionList) Reset()                    { *m = ReqWalletTransactionList{} }
func (m *ReqWalletTransactionList) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletTransactionList) ProtoMessage()               {}
func (*ReqWalletTransactionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *ReqWalletTransactionList) GetFromTx() []byte {
	if m != nil {
		return m.FromTx
	}
	return nil
}

func (m *ReqWalletTransactionList) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqWalletTransactionList) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

type ReqWalletImportPrivKey struct {
	Privkey string `protobuf:"bytes,1,opt,name=privkey" json:"privkey,omitempty"`
	Label   string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
}

func (m *ReqWalletImportPrivKey) Reset()                    { *m = ReqWalletImportPrivKey{} }
func (m *ReqWalletImportPrivKey) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletImportPrivKey) ProtoMessage()               {}
func (*ReqWalletImportPrivKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *ReqWalletImportPrivKey) GetPrivkey() string {
	if m != nil {
		return m.Privkey
	}
	return ""
}

func (m *ReqWalletImportPrivKey) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ReqWalletSendToAddress struct {
	From   string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To     string `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Amount int64  `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	Note   string `protobuf:"bytes,4,opt,name=note" json:"note,omitempty"`
}

func (m *ReqWalletSendToAddress) Reset()                    { *m = ReqWalletSendToAddress{} }
func (m *ReqWalletSendToAddress) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletSendToAddress) ProtoMessage()               {}
func (*ReqWalletSendToAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *ReqWalletSendToAddress) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ReqWalletSendToAddress) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ReqWalletSendToAddress) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ReqWalletSendToAddress) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type ReqWalletSetFee struct {
	Amount int64 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
}

func (m *ReqWalletSetFee) Reset()                    { *m = ReqWalletSetFee{} }
func (m *ReqWalletSetFee) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletSetFee) ProtoMessage()               {}
func (*ReqWalletSetFee) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *ReqWalletSetFee) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type ReqWalletSetLabel struct {
	Addr  string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
}

func (m *ReqWalletSetLabel) Reset()                    { *m = ReqWalletSetLabel{} }
func (m *ReqWalletSetLabel) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletSetLabel) ProtoMessage()               {}
func (*ReqWalletSetLabel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *ReqWalletSetLabel) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReqWalletSetLabel) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ReqWalletMergeBalance struct {
	To string `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
}

func (m *ReqWalletMergeBalance) Reset()                    { *m = ReqWalletMergeBalance{} }
func (m *ReqWalletMergeBalance) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletMergeBalance) ProtoMessage()               {}
func (*ReqWalletMergeBalance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *ReqWalletMergeBalance) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type ReplyHashes struct {
	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (m *ReplyHashes) Reset()                    { *m = ReplyHashes{} }
func (m *ReplyHashes) String() string            { return proto.CompactTextString(m) }
func (*ReplyHashes) ProtoMessage()               {}
func (*ReplyHashes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *ReplyHashes) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type ReqWalletSetPasswd struct {
	Oldpass string `protobuf:"bytes,1,opt,name=oldpass" json:"oldpass,omitempty"`
	Newpass string `protobuf:"bytes,2,opt,name=newpass" json:"newpass,omitempty"`
}

func (m *ReqWalletSetPasswd) Reset()                    { *m = ReqWalletSetPasswd{} }
func (m *ReqWalletSetPasswd) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletSetPasswd) ProtoMessage()               {}
func (*ReqWalletSetPasswd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *ReqWalletSetPasswd) GetOldpass() string {
	if m != nil {
		return m.Oldpass
	}
	return ""
}

func (m *ReqWalletSetPasswd) GetNewpass() string {
	if m != nil {
		return m.Newpass
	}
	return ""
}

type WalletUnLock struct {
	Passwd  string `protobuf:"bytes,1,opt,name=passwd" json:"passwd,omitempty"`
	Timeout int64  `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *WalletUnLock) Reset()                    { *m = WalletUnLock{} }
func (m *WalletUnLock) String() string            { return proto.CompactTextString(m) }
func (*WalletUnLock) ProtoMessage()               {}
func (*WalletUnLock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *WalletUnLock) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *WalletUnLock) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type Config struct {
	Title           string      `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Loglevel        string      `protobuf:"bytes,2,opt,name=loglevel" json:"loglevel,omitempty"`
	LogConsoleLevel string      `protobuf:"bytes,10,opt,name=logConsoleLevel" json:"logConsoleLevel,omitempty"`
	LogFile         string      `protobuf:"bytes,9,opt,name=logFile" json:"logFile,omitempty"`
	Store           *Store      `protobuf:"bytes,3,opt,name=store" json:"store,omitempty"`
	Consensus       *Consensus  `protobuf:"bytes,4,opt,name=consensus" json:"consensus,omitempty"`
	MemPool         *MemPool    `protobuf:"bytes,5,opt,name=memPool" json:"memPool,omitempty"`
	BlockChain      *BlockChain `protobuf:"bytes,6,opt,name=blockChain" json:"blockChain,omitempty"`
	Wallet          *Wallet     `protobuf:"bytes,7,opt,name=wallet" json:"wallet,omitempty"`
	P2P             *P2P        `protobuf:"bytes,8,opt,name=p2p" json:"p2p,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *Config) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Config) GetLoglevel() string {
	if m != nil {
		return m.Loglevel
	}
	return ""
}

func (m *Config) GetLogConsoleLevel() string {
	if m != nil {
		return m.LogConsoleLevel
	}
	return ""
}

func (m *Config) GetLogFile() string {
	if m != nil {
		return m.LogFile
	}
	return ""
}

func (m *Config) GetStore() *Store {
	if m != nil {
		return m.Store
	}
	return nil
}

func (m *Config) GetConsensus() *Consensus {
	if m != nil {
		return m.Consensus
	}
	return nil
}

func (m *Config) GetMemPool() *MemPool {
	if m != nil {
		return m.MemPool
	}
	return nil
}

func (m *Config) GetBlockChain() *BlockChain {
	if m != nil {
		return m.BlockChain
	}
	return nil
}

func (m *Config) GetWallet() *Wallet {
	if m != nil {
		return m.Wallet
	}
	return nil
}

func (m *Config) GetP2P() *P2P {
	if m != nil {
		return m.P2P
	}
	return nil
}

type P2P struct {
	SeedPort int32    `protobuf:"varint,1,opt,name=seedPort" json:"seedPort,omitempty"`
	DbPath   string   `protobuf:"bytes,2,opt,name=dbPath" json:"dbPath,omitempty"`
	IsSeed   bool     `protobuf:"varint,3,opt,name=isSeed" json:"isSeed,omitempty"`
	Seeds    []string `protobuf:"bytes,4,rep,name=seeds" json:"seeds,omitempty"`
	Enable   bool     `protobuf:"varint,5,opt,name=enable" json:"enable,omitempty"`
	Version  int32    `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	VerMix   int32    `protobuf:"varint,7,opt,name=verMix" json:"verMix,omitempty"`
	VerMax   int32    `protobuf:"varint,8,opt,name=verMax" json:"verMax,omitempty"`
}

func (m *P2P) Reset()                    { *m = P2P{} }
func (m *P2P) String() string            { return proto.CompactTextString(m) }
func (*P2P) ProtoMessage()               {}
func (*P2P) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *P2P) GetSeedPort() int32 {
	if m != nil {
		return m.SeedPort
	}
	return 0
}

func (m *P2P) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *P2P) GetIsSeed() bool {
	if m != nil {
		return m.IsSeed
	}
	return false
}

func (m *P2P) GetSeeds() []string {
	if m != nil {
		return m.Seeds
	}
	return nil
}

func (m *P2P) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *P2P) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2P) GetVerMix() int32 {
	if m != nil {
		return m.VerMix
	}
	return 0
}

func (m *P2P) GetVerMax() int32 {
	if m != nil {
		return m.VerMax
	}
	return 0
}

type Wallet struct {
	MinFee int64  `protobuf:"varint,1,opt,name=minFee" json:"minFee,omitempty"`
	DbPath string `protobuf:"bytes,2,opt,name=dbPath" json:"dbPath,omitempty"`
}

func (m *Wallet) Reset()                    { *m = Wallet{} }
func (m *Wallet) String() string            { return proto.CompactTextString(m) }
func (*Wallet) ProtoMessage()               {}
func (*Wallet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *Wallet) GetMinFee() int64 {
	if m != nil {
		return m.MinFee
	}
	return 0
}

func (m *Wallet) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

type Store struct {
	Driver string `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	DbPath string `protobuf:"bytes,2,opt,name=dbPath" json:"dbPath,omitempty"`
}

func (m *Store) Reset()                    { *m = Store{} }
func (m *Store) String() string            { return proto.CompactTextString(m) }
func (*Store) ProtoMessage()               {}
func (*Store) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *Store) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Store) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

type Consensus struct {
	Name             string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Genesis          string `protobuf:"bytes,2,opt,name=genesis" json:"genesis,omitempty"`
	Minerstart       bool   `protobuf:"varint,3,opt,name=minerstart" json:"minerstart,omitempty"`
	GenesisBlockTime int64  `protobuf:"varint,4,opt,name=genesisBlockTime" json:"genesisBlockTime,omitempty"`
	HotkeyAddr       string `protobuf:"bytes,5,opt,name=hotkeyAddr" json:"hotkeyAddr,omitempty"`
}

func (m *Consensus) Reset()                    { *m = Consensus{} }
func (m *Consensus) String() string            { return proto.CompactTextString(m) }
func (*Consensus) ProtoMessage()               {}
func (*Consensus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *Consensus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Consensus) GetGenesis() string {
	if m != nil {
		return m.Genesis
	}
	return ""
}

func (m *Consensus) GetMinerstart() bool {
	if m != nil {
		return m.Minerstart
	}
	return false
}

func (m *Consensus) GetGenesisBlockTime() int64 {
	if m != nil {
		return m.GenesisBlockTime
	}
	return 0
}

func (m *Consensus) GetHotkeyAddr() string {
	if m != nil {
		return m.HotkeyAddr
	}
	return ""
}

type MemPool struct {
	PoolCacheSize int64 `protobuf:"varint,1,opt,name=poolCacheSize" json:"poolCacheSize,omitempty"`
	MinTxFee      int64 `protobuf:"varint,2,opt,name=minTxFee" json:"minTxFee,omitempty"`
}

func (m *MemPool) Reset()                    { *m = MemPool{} }
func (m *MemPool) String() string            { return proto.CompactTextString(m) }
func (*MemPool) ProtoMessage()               {}
func (*MemPool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *MemPool) GetPoolCacheSize() int64 {
	if m != nil {
		return m.PoolCacheSize
	}
	return 0
}

func (m *MemPool) GetMinTxFee() int64 {
	if m != nil {
		return m.MinTxFee
	}
	return 0
}

type BlockChain struct {
	DefCacheSize     int64  `protobuf:"varint,1,opt,name=defCacheSize" json:"defCacheSize,omitempty"`
	MaxFetchBlockNum int64  `protobuf:"varint,2,opt,name=maxFetchBlockNum" json:"maxFetchBlockNum,omitempty"`
	TimeoutSeconds   int64  `protobuf:"varint,3,opt,name=timeoutSeconds" json:"timeoutSeconds,omitempty"`
	BatchBlockNum    int64  `protobuf:"varint,4,opt,name=batchBlockNum" json:"batchBlockNum,omitempty"`
	Driver           string `protobuf:"bytes,5,opt,name=driver" json:"driver,omitempty"`
	DbPath           string `protobuf:"bytes,6,opt,name=dbPath" json:"dbPath,omitempty"`
}

func (m *BlockChain) Reset()                    { *m = BlockChain{} }
func (m *BlockChain) String() string            { return proto.CompactTextString(m) }
func (*BlockChain) ProtoMessage()               {}
func (*BlockChain) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

func (m *BlockChain) GetDefCacheSize() int64 {
	if m != nil {
		return m.DefCacheSize
	}
	return 0
}

func (m *BlockChain) GetMaxFetchBlockNum() int64 {
	if m != nil {
		return m.MaxFetchBlockNum
	}
	return 0
}

func (m *BlockChain) GetTimeoutSeconds() int64 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *BlockChain) GetBatchBlockNum() int64 {
	if m != nil {
		return m.BatchBlockNum
	}
	return 0
}

func (m *BlockChain) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *BlockChain) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

type ReplyTxInfos struct {
	TxInfos []*ReplyTxInfo `protobuf:"bytes,1,rep,name=txInfos" json:"txInfos,omitempty"`
}

func (m *ReplyTxInfos) Reset()                    { *m = ReplyTxInfos{} }
func (m *ReplyTxInfos) String() string            { return proto.CompactTextString(m) }
func (*ReplyTxInfos) ProtoMessage()               {}
func (*ReplyTxInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func (m *ReplyTxInfos) GetTxInfos() []*ReplyTxInfo {
	if m != nil {
		return m.TxInfos
	}
	return nil
}

type WalletTxDetail struct {
	Tx        *Transaction `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
	Receipt   *ReceiptData `protobuf:"bytes,2,opt,name=receipt" json:"receipt,omitempty"`
	Height    int64        `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Index     int64        `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
	Blocktime int64        `protobuf:"varint,5,opt,name=blocktime" json:"blocktime,omitempty"`
	Amount    int64        `protobuf:"varint,6,opt,name=amount" json:"amount,omitempty"`
	Fromaddr  string       `protobuf:"bytes,7,opt,name=fromaddr" json:"fromaddr,omitempty"`
	Txhash    []byte       `protobuf:"bytes,8,opt,name=txhash,proto3" json:"txhash,omitempty"`
}

func (m *WalletTxDetail) Reset()                    { *m = WalletTxDetail{} }
func (m *WalletTxDetail) String() string            { return proto.CompactTextString(m) }
func (*WalletTxDetail) ProtoMessage()               {}
func (*WalletTxDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{86} }

func (m *WalletTxDetail) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *WalletTxDetail) GetReceipt() *ReceiptData {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func (m *WalletTxDetail) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *WalletTxDetail) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *WalletTxDetail) GetBlocktime() int64 {
	if m != nil {
		return m.Blocktime
	}
	return 0
}

func (m *WalletTxDetail) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *WalletTxDetail) GetFromaddr() string {
	if m != nil {
		return m.Fromaddr
	}
	return ""
}

func (m *WalletTxDetail) GetTxhash() []byte {
	if m != nil {
		return m.Txhash
	}
	return nil
}

type WalletTxDetails struct {
	TxDetails []*WalletTxDetail `protobuf:"bytes,1,rep,name=txDetails" json:"txDetails,omitempty"`
}

func (m *WalletTxDetails) Reset()                    { *m = WalletTxDetails{} }
func (m *WalletTxDetails) String() string            { return proto.CompactTextString(m) }
func (*WalletTxDetails) ProtoMessage()               {}
func (*WalletTxDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{87} }

func (m *WalletTxDetails) GetTxDetails() []*WalletTxDetail {
	if m != nil {
		return m.TxDetails
	}
	return nil
}

type WalletAccountStore struct {
	Privkey   string `protobuf:"bytes,1,opt,name=privkey" json:"privkey,omitempty"`
	Label     string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Addr      string `protobuf:"bytes,3,opt,name=addr" json:"addr,omitempty"`
	TimeStamp string `protobuf:"bytes,4,opt,name=timeStamp" json:"timeStamp,omitempty"`
}

func (m *WalletAccountStore) Reset()                    { *m = WalletAccountStore{} }
func (m *WalletAccountStore) String() string            { return proto.CompactTextString(m) }
func (*WalletAccountStore) ProtoMessage()               {}
func (*WalletAccountStore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{88} }

func (m *WalletAccountStore) GetPrivkey() string {
	if m != nil {
		return m.Privkey
	}
	return ""
}

func (m *WalletAccountStore) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *WalletAccountStore) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *WalletAccountStore) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

type Blocks struct {
	Items []*Block `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Blocks) Reset()                    { *m = Blocks{} }
func (m *Blocks) String() string            { return proto.CompactTextString(m) }
func (*Blocks) ProtoMessage()               {}
func (*Blocks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{89} }

func (m *Blocks) GetItems() []*Block {
	if m != nil {
		return m.Items
	}
	return nil
}

type WalletPwHash struct {
	PwHash  []byte `protobuf:"bytes,1,opt,name=pwHash,proto3" json:"pwHash,omitempty"`
	Randstr string `protobuf:"bytes,2,opt,name=randstr" json:"randstr,omitempty"`
}

func (m *WalletPwHash) Reset()                    { *m = WalletPwHash{} }
func (m *WalletPwHash) String() string            { return proto.CompactTextString(m) }
func (*WalletPwHash) ProtoMessage()               {}
func (*WalletPwHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{90} }

func (m *WalletPwHash) GetPwHash() []byte {
	if m != nil {
		return m.PwHash
	}
	return nil
}

func (m *WalletPwHash) GetRandstr() string {
	if m != nil {
		return m.Randstr
	}
	return ""
}

// message for execs.coins
type CoinsAction struct {
	// Types that are valid to be assigned to Value:
	//	*CoinsAction_Transfer
	//	*CoinsAction_Genesis
	Value isCoinsAction_Value `protobuf_oneof:"value"`
	Ty    int32               `protobuf:"varint,3,opt,name=ty" json:"ty,omitempty"`
}

func (m *CoinsAction) Reset()                    { *m = CoinsAction{} }
func (m *CoinsAction) String() string            { return proto.CompactTextString(m) }
func (*CoinsAction) ProtoMessage()               {}
func (*CoinsAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{91} }

type isCoinsAction_Value interface {
	isCoinsAction_Value()
}

type CoinsAction_Transfer struct {
	Transfer *CoinsTransfer `protobuf:"bytes,1,opt,name=transfer,oneof"`
}
type CoinsAction_Genesis struct {
	Genesis *CoinsGenesis `protobuf:"bytes,2,opt,name=genesis,oneof"`
}

func (*CoinsAction_Transfer) isCoinsAction_Value() {}
func (*CoinsAction_Genesis) isCoinsAction_Value()  {}

func (m *CoinsAction) GetValue() isCoinsAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CoinsAction) GetTransfer() *CoinsTransfer {
	if x, ok := m.GetValue().(*CoinsAction_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *CoinsAction) GetGenesis() *CoinsGenesis {
	if x, ok := m.GetValue().(*CoinsAction_Genesis); ok {
		return x.Genesis
	}
	return nil
}

func (m *CoinsAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CoinsAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CoinsAction_OneofMarshaler, _CoinsAction_OneofUnmarshaler, _CoinsAction_OneofSizer, []interface{}{
		(*CoinsAction_Transfer)(nil),
		(*CoinsAction_Genesis)(nil),
	}
}

func _CoinsAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CoinsAction)
	// value
	switch x := m.Value.(type) {
	case *CoinsAction_Transfer:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transfer); err != nil {
			return err
		}
	case *CoinsAction_Genesis:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Genesis); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CoinsAction.Value has unexpected type %T", x)
	}
	return nil
}

func _CoinsAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CoinsAction)
	switch tag {
	case 1: // value.transfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoinsTransfer)
		err := b.DecodeMessage(msg)
		m.Value = &CoinsAction_Transfer{msg}
		return true, err
	case 2: // value.genesis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoinsGenesis)
		err := b.DecodeMessage(msg)
		m.Value = &CoinsAction_Genesis{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CoinsAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CoinsAction)
	// value
	switch x := m.Value.(type) {
	case *CoinsAction_Transfer:
		s := proto.Size(x.Transfer)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CoinsAction_Genesis:
		s := proto.Size(x.Genesis)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// 给某个地址凭空打币
// 只能执行一次，不能执行第二次
type CoinsGenesis struct {
	Amount        int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	ReturnAddress string `protobuf:"bytes,3,opt,name=returnAddress" json:"returnAddress,omitempty"`
}

func (m *CoinsGenesis) Reset()                    { *m = CoinsGenesis{} }
func (m *CoinsGenesis) String() string            { return proto.CompactTextString(m) }
func (*CoinsGenesis) ProtoMessage()               {}
func (*CoinsGenesis) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{92} }

func (m *CoinsGenesis) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CoinsGenesis) GetReturnAddress() string {
	if m != nil {
		return m.ReturnAddress
	}
	return ""
}

type CoinsTransfer struct {
	Amount int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Note   string `protobuf:"bytes,3,opt,name=note" json:"note,omitempty"`
}

func (m *CoinsTransfer) Reset()                    { *m = CoinsTransfer{} }
func (m *CoinsTransfer) String() string            { return proto.CompactTextString(m) }
func (*CoinsTransfer) ProtoMessage()               {}
func (*CoinsTransfer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93} }

func (m *CoinsTransfer) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CoinsTransfer) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

// message for execs.ticket
type TicketAction struct {
	// Types that are valid to be assigned to Value:
	//	*TicketAction_Topen
	//	*TicketAction_Genesis
	//	*TicketAction_Tclose
	//	*TicketAction_Miner
	Value isTicketAction_Value `protobuf_oneof:"value"`
	Ty    int32                `protobuf:"varint,10,opt,name=ty" json:"ty,omitempty"`
}

func (m *TicketAction) Reset()                    { *m = TicketAction{} }
func (m *TicketAction) String() string            { return proto.CompactTextString(m) }
func (*TicketAction) ProtoMessage()               {}
func (*TicketAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{94} }

type isTicketAction_Value interface {
	isTicketAction_Value()
}

type TicketAction_Topen struct {
	Topen *TicketOpen `protobuf:"bytes,1,opt,name=topen,oneof"`
}
type TicketAction_Genesis struct {
	Genesis *TicketGenesis `protobuf:"bytes,2,opt,name=genesis,oneof"`
}
type TicketAction_Tclose struct {
	Tclose *TicketClose `protobuf:"bytes,3,opt,name=tclose,oneof"`
}
type TicketAction_Miner struct {
	Miner *TicketMiner `protobuf:"bytes,4,opt,name=miner,oneof"`
}

func (*TicketAction_Topen) isTicketAction_Value()   {}
func (*TicketAction_Genesis) isTicketAction_Value() {}
func (*TicketAction_Tclose) isTicketAction_Value()  {}
func (*TicketAction_Miner) isTicketAction_Value()   {}

func (m *TicketAction) GetValue() isTicketAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TicketAction) GetTopen() *TicketOpen {
	if x, ok := m.GetValue().(*TicketAction_Topen); ok {
		return x.Topen
	}
	return nil
}

func (m *TicketAction) GetGenesis() *TicketGenesis {
	if x, ok := m.GetValue().(*TicketAction_Genesis); ok {
		return x.Genesis
	}
	return nil
}

func (m *TicketAction) GetTclose() *TicketClose {
	if x, ok := m.GetValue().(*TicketAction_Tclose); ok {
		return x.Tclose
	}
	return nil
}

func (m *TicketAction) GetMiner() *TicketMiner {
	if x, ok := m.GetValue().(*TicketAction_Miner); ok {
		return x.Miner
	}
	return nil
}

func (m *TicketAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TicketAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TicketAction_OneofMarshaler, _TicketAction_OneofUnmarshaler, _TicketAction_OneofSizer, []interface{}{
		(*TicketAction_Topen)(nil),
		(*TicketAction_Genesis)(nil),
		(*TicketAction_Tclose)(nil),
		(*TicketAction_Miner)(nil),
	}
}

func _TicketAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TicketAction)
	// value
	switch x := m.Value.(type) {
	case *TicketAction_Topen:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Topen); err != nil {
			return err
		}
	case *TicketAction_Genesis:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Genesis); err != nil {
			return err
		}
	case *TicketAction_Tclose:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tclose); err != nil {
			return err
		}
	case *TicketAction_Miner:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Miner); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TicketAction.Value has unexpected type %T", x)
	}
	return nil
}

func _TicketAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TicketAction)
	switch tag {
	case 1: // value.topen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TicketOpen)
		err := b.DecodeMessage(msg)
		m.Value = &TicketAction_Topen{msg}
		return true, err
	case 2: // value.genesis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TicketGenesis)
		err := b.DecodeMessage(msg)
		m.Value = &TicketAction_Genesis{msg}
		return true, err
	case 3: // value.tclose
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TicketClose)
		err := b.DecodeMessage(msg)
		m.Value = &TicketAction_Tclose{msg}
		return true, err
	case 4: // value.miner
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TicketMiner)
		err := b.DecodeMessage(msg)
		m.Value = &TicketAction_Miner{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TicketAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TicketAction)
	// value
	switch x := m.Value.(type) {
	case *TicketAction_Topen:
		s := proto.Size(x.Topen)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TicketAction_Genesis:
		s := proto.Size(x.Genesis)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TicketAction_Tclose:
		s := proto.Size(x.Tclose)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TicketAction_Miner:
		s := proto.Size(x.Miner)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TicketMiner struct {
	Bits     uint32 `protobuf:"varint,1,opt,name=bits" json:"bits,omitempty"`
	Reward   int64  `protobuf:"varint,2,opt,name=reward" json:"reward,omitempty"`
	TicketId string `protobuf:"bytes,3,opt,name=ticketId" json:"ticketId,omitempty"`
	Modify   []byte `protobuf:"bytes,4,opt,name=modify,proto3" json:"modify,omitempty"`
}

func (m *TicketMiner) Reset()                    { *m = TicketMiner{} }
func (m *TicketMiner) String() string            { return proto.CompactTextString(m) }
func (*TicketMiner) ProtoMessage()               {}
func (*TicketMiner) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{95} }

func (m *TicketMiner) GetBits() uint32 {
	if m != nil {
		return m.Bits
	}
	return 0
}

func (m *TicketMiner) GetReward() int64 {
	if m != nil {
		return m.Reward
	}
	return 0
}

func (m *TicketMiner) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

func (m *TicketMiner) GetModify() []byte {
	if m != nil {
		return m.Modify
	}
	return nil
}

type TicketOpen struct {
	MinerAddress string `protobuf:"bytes,1,opt,name=minerAddress" json:"minerAddress,omitempty"`
	Count        int32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *TicketOpen) Reset()                    { *m = TicketOpen{} }
func (m *TicketOpen) String() string            { return proto.CompactTextString(m) }
func (*TicketOpen) ProtoMessage()               {}
func (*TicketOpen) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{96} }

func (m *TicketOpen) GetMinerAddress() string {
	if m != nil {
		return m.MinerAddress
	}
	return ""
}

func (m *TicketOpen) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type TicketGenesis struct {
	MinerAddress  string `protobuf:"bytes,1,opt,name=minerAddress" json:"minerAddress,omitempty"`
	ReturnAddress string `protobuf:"bytes,2,opt,name=returnAddress" json:"returnAddress,omitempty"`
	Count         int32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *TicketGenesis) Reset()                    { *m = TicketGenesis{} }
func (m *TicketGenesis) String() string            { return proto.CompactTextString(m) }
func (*TicketGenesis) ProtoMessage()               {}
func (*TicketGenesis) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{97} }

func (m *TicketGenesis) GetMinerAddress() string {
	if m != nil {
		return m.MinerAddress
	}
	return ""
}

func (m *TicketGenesis) GetReturnAddress() string {
	if m != nil {
		return m.ReturnAddress
	}
	return ""
}

func (m *TicketGenesis) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type TicketClose struct {
	TicketId []string `protobuf:"bytes,1,rep,name=ticketId" json:"ticketId,omitempty"`
}

func (m *TicketClose) Reset()                    { *m = TicketClose{} }
func (m *TicketClose) String() string            { return proto.CompactTextString(m) }
func (*TicketClose) ProtoMessage()               {}
func (*TicketClose) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{98} }

func (m *TicketClose) GetTicketId() []string {
	if m != nil {
		return m.TicketId
	}
	return nil
}

type TicketList struct {
	Addr     string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	IsClosed bool   `protobuf:"varint,2,opt,name=isClosed" json:"isClosed,omitempty"`
}

func (m *TicketList) Reset()                    { *m = TicketList{} }
func (m *TicketList) String() string            { return proto.CompactTextString(m) }
func (*TicketList) ProtoMessage()               {}
func (*TicketList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{99} }

func (m *TicketList) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *TicketList) GetIsClosed() bool {
	if m != nil {
		return m.IsClosed
	}
	return false
}

type TicketInfos struct {
	TicketIds []string `protobuf:"bytes,1,rep,name=ticketIds" json:"ticketIds,omitempty"`
}

func (m *TicketInfos) Reset()                    { *m = TicketInfos{} }
func (m *TicketInfos) String() string            { return proto.CompactTextString(m) }
func (*TicketInfos) ProtoMessage()               {}
func (*TicketInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{100} }

func (m *TicketInfos) GetTicketIds() []string {
	if m != nil {
		return m.TicketIds
	}
	return nil
}

type Ticket struct {
	TicketId      string `protobuf:"bytes,1,opt,name=ticketId" json:"ticketId,omitempty"`
	Status        int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	IsGenesis     bool   `protobuf:"varint,3,opt,name=isGenesis" json:"isGenesis,omitempty"`
	CreateTime    int64  `protobuf:"varint,4,opt,name=createTime" json:"createTime,omitempty"`
	MinerTime     int64  `protobuf:"varint,5,opt,name=minerTime" json:"minerTime,omitempty"`
	MinerValue    int64  `protobuf:"varint,8,opt,name=minerValue" json:"minerValue,omitempty"`
	MinerAddress  string `protobuf:"bytes,6,opt,name=minerAddress" json:"minerAddress,omitempty"`
	ReturnAddress string `protobuf:"bytes,7,opt,name=returnAddress" json:"returnAddress,omitempty"`
}

func (m *Ticket) Reset()                    { *m = Ticket{} }
func (m *Ticket) String() string            { return proto.CompactTextString(m) }
func (*Ticket) ProtoMessage()               {}
func (*Ticket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{101} }

func (m *Ticket) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

func (m *Ticket) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Ticket) GetIsGenesis() bool {
	if m != nil {
		return m.IsGenesis
	}
	return false
}

func (m *Ticket) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Ticket) GetMinerTime() int64 {
	if m != nil {
		return m.MinerTime
	}
	return 0
}

func (m *Ticket) GetMinerValue() int64 {
	if m != nil {
		return m.MinerValue
	}
	return 0
}

func (m *Ticket) GetMinerAddress() string {
	if m != nil {
		return m.MinerAddress
	}
	return ""
}

func (m *Ticket) GetReturnAddress() string {
	if m != nil {
		return m.ReturnAddress
	}
	return ""
}

type ReceiptTicket struct {
	TicketId string `protobuf:"bytes,1,opt,name=ticketId" json:"ticketId,omitempty"`
}

func (m *ReceiptTicket) Reset()                    { *m = ReceiptTicket{} }
func (m *ReceiptTicket) String() string            { return proto.CompactTextString(m) }
func (*ReceiptTicket) ProtoMessage()               {}
func (*ReceiptTicket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{102} }

func (m *ReceiptTicket) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

type Hashlock struct {
	HashlockId    string `protobuf:"bytes,1,opt,name=hashlockId" json:"hashlockId,omitempty"`
	Status        int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	IsGenesis     bool   `protobuf:"varint,3,opt,name=isGenesis" json:"isGenesis,omitempty"`
	CreateTime    int64  `protobuf:"varint,4,opt,name=CreateTime" json:"CreateTime,omitempty"`
	ReturnAddress string `protobuf:"bytes,5,opt,name=returnAddress" json:"returnAddress,omitempty"`
}

func (m *Hashlock) Reset()                    { *m = Hashlock{} }
func (m *Hashlock) String() string            { return proto.CompactTextString(m) }
func (*Hashlock) ProtoMessage()               {}
func (*Hashlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{103} }

func (m *Hashlock) GetHashlockId() string {
	if m != nil {
		return m.HashlockId
	}
	return ""
}

func (m *Hashlock) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Hashlock) GetIsGenesis() bool {
	if m != nil {
		return m.IsGenesis
	}
	return false
}

func (m *Hashlock) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Hashlock) GetReturnAddress() string {
	if m != nil {
		return m.ReturnAddress
	}
	return ""
}

// message for execs.hashlock
type HashlockAction struct {
	// Types that are valid to be assigned to Value:
	//	*HashlockAction_Hlock
	//	*HashlockAction_Genesis
	//	*HashlockAction_Hunlock
	Value isHashlockAction_Value `protobuf_oneof:"value"`
	Ty    int32                  `protobuf:"varint,4,opt,name=ty" json:"ty,omitempty"`
}

func (m *HashlockAction) Reset()                    { *m = HashlockAction{} }
func (m *HashlockAction) String() string            { return proto.CompactTextString(m) }
func (*HashlockAction) ProtoMessage()               {}
func (*HashlockAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{104} }

type isHashlockAction_Value interface {
	isHashlockAction_Value()
}

type HashlockAction_Hlock struct {
	Hlock *HashlockLock `protobuf:"bytes,1,opt,name=hlock,oneof"`
}
type HashlockAction_Genesis struct {
	Genesis *HashlockGenesis `protobuf:"bytes,2,opt,name=genesis,oneof"`
}
type HashlockAction_Hunlock struct {
	Hunlock *HashlockUnlock `protobuf:"bytes,3,opt,name=hunlock,oneof"`
}

func (*HashlockAction_Hlock) isHashlockAction_Value()   {}
func (*HashlockAction_Genesis) isHashlockAction_Value() {}
func (*HashlockAction_Hunlock) isHashlockAction_Value() {}

func (m *HashlockAction) GetValue() isHashlockAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *HashlockAction) GetHlock() *HashlockLock {
	if x, ok := m.GetValue().(*HashlockAction_Hlock); ok {
		return x.Hlock
	}
	return nil
}

func (m *HashlockAction) GetGenesis() *HashlockGenesis {
	if x, ok := m.GetValue().(*HashlockAction_Genesis); ok {
		return x.Genesis
	}
	return nil
}

func (m *HashlockAction) GetHunlock() *HashlockUnlock {
	if x, ok := m.GetValue().(*HashlockAction_Hunlock); ok {
		return x.Hunlock
	}
	return nil
}

func (m *HashlockAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HashlockAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HashlockAction_OneofMarshaler, _HashlockAction_OneofUnmarshaler, _HashlockAction_OneofSizer, []interface{}{
		(*HashlockAction_Hlock)(nil),
		(*HashlockAction_Genesis)(nil),
		(*HashlockAction_Hunlock)(nil),
	}
}

func _HashlockAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HashlockAction)
	// value
	switch x := m.Value.(type) {
	case *HashlockAction_Hlock:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hlock); err != nil {
			return err
		}
	case *HashlockAction_Genesis:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Genesis); err != nil {
			return err
		}
	case *HashlockAction_Hunlock:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hunlock); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HashlockAction.Value has unexpected type %T", x)
	}
	return nil
}

func _HashlockAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HashlockAction)
	switch tag {
	case 1: // value.hlock
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashlockLock)
		err := b.DecodeMessage(msg)
		m.Value = &HashlockAction_Hlock{msg}
		return true, err
	case 2: // value.genesis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashlockGenesis)
		err := b.DecodeMessage(msg)
		m.Value = &HashlockAction_Genesis{msg}
		return true, err
	case 3: // value.hunlock
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashlockUnlock)
		err := b.DecodeMessage(msg)
		m.Value = &HashlockAction_Hunlock{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HashlockAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HashlockAction)
	// value
	switch x := m.Value.(type) {
	case *HashlockAction_Hlock:
		s := proto.Size(x.Hlock)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HashlockAction_Genesis:
		s := proto.Size(x.Genesis)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HashlockAction_Hunlock:
		s := proto.Size(x.Hunlock)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HashlockLock struct {
	Amount int64 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
}

func (m *HashlockLock) Reset()                    { *m = HashlockLock{} }
func (m *HashlockLock) String() string            { return proto.CompactTextString(m) }
func (*HashlockLock) ProtoMessage()               {}
func (*HashlockLock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{105} }

func (m *HashlockLock) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type HashlockUnlock struct {
	UnlockId string `protobuf:"bytes,1,opt,name=unlockId" json:"unlockId,omitempty"`
	Secret   []byte `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	Hash     []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *HashlockUnlock) Reset()                    { *m = HashlockUnlock{} }
func (m *HashlockUnlock) String() string            { return proto.CompactTextString(m) }
func (*HashlockUnlock) ProtoMessage()               {}
func (*HashlockUnlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{106} }

func (m *HashlockUnlock) GetUnlockId() string {
	if m != nil {
		return m.UnlockId
	}
	return ""
}

func (m *HashlockUnlock) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *HashlockUnlock) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type HashlockGenesis struct {
	ReturnAddress string `protobuf:"bytes,1,opt,name=returnAddress" json:"returnAddress,omitempty"`
}

func (m *HashlockGenesis) Reset()                    { *m = HashlockGenesis{} }
func (m *HashlockGenesis) String() string            { return proto.CompactTextString(m) }
func (*HashlockGenesis) ProtoMessage()               {}
func (*HashlockGenesis) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{107} }

func (m *HashlockGenesis) GetReturnAddress() string {
	if m != nil {
		return m.ReturnAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*ReqNil)(nil), "types.ReqNil")
	proto.RegisterType((*P2PGetPeerInfo)(nil), "types.P2PGetPeerInfo")
	proto.RegisterType((*P2PPeerInfo)(nil), "types.P2PPeerInfo")
	proto.RegisterType((*P2PVersion)(nil), "types.P2PVersion")
	proto.RegisterType((*P2PVerAck)(nil), "types.P2PVerAck")
	proto.RegisterType((*P2PPing)(nil), "types.P2PPing")
	proto.RegisterType((*P2PPong)(nil), "types.P2PPong")
	proto.RegisterType((*P2PGetAddr)(nil), "types.P2PGetAddr")
	proto.RegisterType((*P2PAddr)(nil), "types.P2PAddr")
	proto.RegisterType((*P2PGetBlocks)(nil), "types.P2PGetBlocks")
	proto.RegisterType((*P2PGetMempool)(nil), "types.P2PGetMempool")
	proto.RegisterType((*P2PInv)(nil), "types.P2PInv")
	proto.RegisterType((*Inventory)(nil), "types.Inventory")
	proto.RegisterType((*P2PGetData)(nil), "types.P2PGetData")
	proto.RegisterType((*P2PTx)(nil), "types.P2PTx")
	proto.RegisterType((*P2PBlock)(nil), "types.P2PBlock")
	proto.RegisterType((*BroadCastData)(nil), "types.BroadCastData")
	proto.RegisterType((*P2PGetHeaders)(nil), "types.P2PGetHeaders")
	proto.RegisterType((*P2PHeaders)(nil), "types.P2PHeaders")
	proto.RegisterType((*Header)(nil), "types.Header")
	proto.RegisterType((*Block)(nil), "types.Block")
	proto.RegisterType((*BlockOverview)(nil), "types.BlockOverview")
	proto.RegisterType((*Transaction)(nil), "types.Transaction")
	proto.RegisterType((*Signature)(nil), "types.Signature")
	proto.RegisterType((*ChainStatus)(nil), "types.ChainStatus")
	proto.RegisterType((*ReqHash)(nil), "types.ReqHash")
	proto.RegisterType((*ReqInt)(nil), "types.ReqInt")
	proto.RegisterType((*ReqAddr)(nil), "types.ReqAddr")
	proto.RegisterType((*ReqHashes)(nil), "types.ReqHashes")
	proto.RegisterType((*ReplyHash)(nil), "types.ReplyHash")
	proto.RegisterType((*AddrOverview)(nil), "types.AddrOverview")
	proto.RegisterType((*ReplyTxInfo)(nil), "types.ReplyTxInfo")
	proto.RegisterType((*TransactionDetail)(nil), "types.TransactionDetail")
	proto.RegisterType((*TransactionDetails)(nil), "types.TransactionDetails")
	proto.RegisterType((*ReqBlocks)(nil), "types.ReqBlocks")
	proto.RegisterType((*BlockDetails)(nil), "types.BlockDetails")
	proto.RegisterType((*Reply)(nil), "types.Reply")
	proto.RegisterType((*ReplyBlockHeight)(nil), "types.ReplyBlockHeight")
	proto.RegisterType((*ReqTxList)(nil), "types.ReqTxList")
	proto.RegisterType((*ReplyTxList)(nil), "types.ReplyTxList")
	proto.RegisterType((*TxHashList)(nil), "types.TxHashList")
	proto.RegisterType((*TxResult)(nil), "types.TxResult")
	proto.RegisterType((*Headers)(nil), "types.Headers")
	proto.RegisterType((*MempoolSize)(nil), "types.MempoolSize")
	proto.RegisterType((*StoreSet)(nil), "types.StoreSet")
	proto.RegisterType((*StoreGet)(nil), "types.StoreGet")
	proto.RegisterType((*StoreReplyValue)(nil), "types.StoreReplyValue")
	proto.RegisterType((*KeyValue)(nil), "types.KeyValue")
	proto.RegisterType((*ReceiptLog)(nil), "types.ReceiptLog")
	proto.RegisterType((*Receipt)(nil), "types.Receipt")
	proto.RegisterType((*ReceiptData)(nil), "types.ReceiptData")
	proto.RegisterType((*BlockDetail)(nil), "types.BlockDetail")
	proto.RegisterType((*Receipts)(nil), "types.Receipts")
	proto.RegisterType((*ExecTxList)(nil), "types.ExecTxList")
	proto.RegisterType((*Account)(nil), "types.Account")
	proto.RegisterType((*WalletAccount)(nil), "types.WalletAccount")
	proto.RegisterType((*ReceiptBalance)(nil), "types.ReceiptBalance")
	proto.RegisterType((*ReceiptExecAccount)(nil), "types.ReceiptExecAccount")
	proto.RegisterType((*Peer)(nil), "types.Peer")
	proto.RegisterType((*PeerList)(nil), "types.PeerList")
	proto.RegisterType((*LeafNode)(nil), "types.LeafNode")
	proto.RegisterType((*InnerNode)(nil), "types.InnerNode")
	proto.RegisterType((*StoreNode)(nil), "types.StoreNode")
	proto.RegisterType((*MAVLProof)(nil), "types.MAVLProof")
	proto.RegisterType((*InvData)(nil), "types.InvData")
	proto.RegisterType((*InvDatas)(nil), "types.InvDatas")
	proto.RegisterType((*Genesis)(nil), "types.Genesis")
	proto.RegisterType((*WalletAccounts)(nil), "types.WalletAccounts")
	proto.RegisterType((*ReqNewAccount)(nil), "types.ReqNewAccount")
	proto.RegisterType((*ReqWalletTransactionList)(nil), "types.ReqWalletTransactionList")
	proto.RegisterType((*ReqWalletImportPrivKey)(nil), "types.ReqWalletImportPrivKey")
	proto.RegisterType((*ReqWalletSendToAddress)(nil), "types.ReqWalletSendToAddress")
	proto.RegisterType((*ReqWalletSetFee)(nil), "types.ReqWalletSetFee")
	proto.RegisterType((*ReqWalletSetLabel)(nil), "types.ReqWalletSetLabel")
	proto.RegisterType((*ReqWalletMergeBalance)(nil), "types.ReqWalletMergeBalance")
	proto.RegisterType((*ReplyHashes)(nil), "types.ReplyHashes")
	proto.RegisterType((*ReqWalletSetPasswd)(nil), "types.ReqWalletSetPasswd")
	proto.RegisterType((*WalletUnLock)(nil), "types.WalletUnLock")
	proto.RegisterType((*Config)(nil), "types.Config")
	proto.RegisterType((*P2P)(nil), "types.P2P")
	proto.RegisterType((*Wallet)(nil), "types.Wallet")
	proto.RegisterType((*Store)(nil), "types.Store")
	proto.RegisterType((*Consensus)(nil), "types.Consensus")
	proto.RegisterType((*MemPool)(nil), "types.MemPool")
	proto.RegisterType((*BlockChain)(nil), "types.BlockChain")
	proto.RegisterType((*ReplyTxInfos)(nil), "types.ReplyTxInfos")
	proto.RegisterType((*WalletTxDetail)(nil), "types.WalletTxDetail")
	proto.RegisterType((*WalletTxDetails)(nil), "types.WalletTxDetails")
	proto.RegisterType((*WalletAccountStore)(nil), "types.WalletAccountStore")
	proto.RegisterType((*Blocks)(nil), "types.Blocks")
	proto.RegisterType((*WalletPwHash)(nil), "types.WalletPwHash")
	proto.RegisterType((*CoinsAction)(nil), "types.CoinsAction")
	proto.RegisterType((*CoinsGenesis)(nil), "types.CoinsGenesis")
	proto.RegisterType((*CoinsTransfer)(nil), "types.CoinsTransfer")
	proto.RegisterType((*TicketAction)(nil), "types.TicketAction")
	proto.RegisterType((*TicketMiner)(nil), "types.TicketMiner")
	proto.RegisterType((*TicketOpen)(nil), "types.TicketOpen")
	proto.RegisterType((*TicketGenesis)(nil), "types.TicketGenesis")
	proto.RegisterType((*TicketClose)(nil), "types.TicketClose")
	proto.RegisterType((*TicketList)(nil), "types.TicketList")
	proto.RegisterType((*TicketInfos)(nil), "types.TicketInfos")
	proto.RegisterType((*Ticket)(nil), "types.Ticket")
	proto.RegisterType((*ReceiptTicket)(nil), "types.ReceiptTicket")
	proto.RegisterType((*Hashlock)(nil), "types.Hashlock")
	proto.RegisterType((*HashlockAction)(nil), "types.HashlockAction")
	proto.RegisterType((*HashlockLock)(nil), "types.HashlockLock")
	proto.RegisterType((*HashlockUnlock)(nil), "types.HashlockUnlock")
	proto.RegisterType((*HashlockGenesis)(nil), "types.HashlockGenesis")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Grpcservice service

type GrpcserviceClient interface {
	// chain33 对外提供服务的接口
	// 区块链接口
	GetBlocks(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Reply, error)
	GetLastHeader(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Header, error)
	// 交易接口
	QueryTransaction(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*TransactionDetail, error)
	SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error)
	GetTransactionByAddr(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*ReplyTxInfos, error)
	GetTransactionByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*TransactionDetails, error)
	// 缓存接口
	GetMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error)
	// 钱包接口
	GetAccounts(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletAccounts, error)
	NewAccount(ctx context.Context, in *ReqNewAccount, opts ...grpc.CallOption) (*WalletAccount, error)
	WalletTransactionList(ctx context.Context, in *ReqWalletTransactionList, opts ...grpc.CallOption) (*WalletTxDetails, error)
	ImportPrivKey(ctx context.Context, in *ReqWalletImportPrivKey, opts ...grpc.CallOption) (*WalletAccount, error)
	SendToAddress(ctx context.Context, in *ReqWalletSendToAddress, opts ...grpc.CallOption) (*ReplyHash, error)
	SetTxFee(ctx context.Context, in *ReqWalletSetFee, opts ...grpc.CallOption) (*Reply, error)
	SetLabl(ctx context.Context, in *ReqWalletSetLabel, opts ...grpc.CallOption) (*WalletAccount, error)
	MergeBalance(ctx context.Context, in *ReqWalletMergeBalance, opts ...grpc.CallOption) (*ReplyHashes, error)
	SetPasswd(ctx context.Context, in *ReqWalletSetPasswd, opts ...grpc.CallOption) (*Reply, error)
	Lock(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	UnLock(ctx context.Context, in *WalletUnLock, opts ...grpc.CallOption) (*Reply, error)
	GetPeerInfo(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*PeerList, error)
	GetLastMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error)
}

type grpcserviceClient struct {
	cc *grpc.ClientConn
}

func NewGrpcserviceClient(cc *grpc.ClientConn) GrpcserviceClient {
	return &grpcserviceClient{cc}
}

func (c *grpcserviceClient) GetBlocks(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetBlocks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetLastHeader(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Header, error) {
	out := new(Header)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetLastHeader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) QueryTransaction(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*TransactionDetail, error) {
	out := new(TransactionDetail)
	err := grpc.Invoke(ctx, "/types.grpcservice/QueryTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/SendTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetTransactionByAddr(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*ReplyTxInfos, error) {
	out := new(ReplyTxInfos)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetTransactionByAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetTransactionByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*TransactionDetails, error) {
	out := new(TransactionDetails)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetTransactionByHashes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error) {
	out := new(ReplyTxList)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetMemPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetAccounts(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletAccounts, error) {
	out := new(WalletAccounts)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetAccounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) NewAccount(ctx context.Context, in *ReqNewAccount, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := grpc.Invoke(ctx, "/types.grpcservice/NewAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) WalletTransactionList(ctx context.Context, in *ReqWalletTransactionList, opts ...grpc.CallOption) (*WalletTxDetails, error) {
	out := new(WalletTxDetails)
	err := grpc.Invoke(ctx, "/types.grpcservice/WalletTransactionList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) ImportPrivKey(ctx context.Context, in *ReqWalletImportPrivKey, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := grpc.Invoke(ctx, "/types.grpcservice/ImportPrivKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) SendToAddress(ctx context.Context, in *ReqWalletSendToAddress, opts ...grpc.CallOption) (*ReplyHash, error) {
	out := new(ReplyHash)
	err := grpc.Invoke(ctx, "/types.grpcservice/SendToAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) SetTxFee(ctx context.Context, in *ReqWalletSetFee, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/SetTxFee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) SetLabl(ctx context.Context, in *ReqWalletSetLabel, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := grpc.Invoke(ctx, "/types.grpcservice/SetLabl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) MergeBalance(ctx context.Context, in *ReqWalletMergeBalance, opts ...grpc.CallOption) (*ReplyHashes, error) {
	out := new(ReplyHashes)
	err := grpc.Invoke(ctx, "/types.grpcservice/MergeBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) SetPasswd(ctx context.Context, in *ReqWalletSetPasswd, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/SetPasswd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) Lock(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/Lock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) UnLock(ctx context.Context, in *WalletUnLock, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/UnLock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetPeerInfo(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*PeerList, error) {
	out := new(PeerList)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetPeerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetLastMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error) {
	out := new(ReplyTxList)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetLastMemPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Grpcservice service

type GrpcserviceServer interface {
	// chain33 对外提供服务的接口
	// 区块链接口
	GetBlocks(context.Context, *ReqBlocks) (*Reply, error)
	GetLastHeader(context.Context, *ReqNil) (*Header, error)
	// 交易接口
	QueryTransaction(context.Context, *ReqHash) (*TransactionDetail, error)
	SendTransaction(context.Context, *Transaction) (*Reply, error)
	GetTransactionByAddr(context.Context, *ReqAddr) (*ReplyTxInfos, error)
	GetTransactionByHashes(context.Context, *ReqHashes) (*TransactionDetails, error)
	// 缓存接口
	GetMemPool(context.Context, *ReqNil) (*ReplyTxList, error)
	// 钱包接口
	GetAccounts(context.Context, *ReqNil) (*WalletAccounts, error)
	NewAccount(context.Context, *ReqNewAccount) (*WalletAccount, error)
	WalletTransactionList(context.Context, *ReqWalletTransactionList) (*WalletTxDetails, error)
	ImportPrivKey(context.Context, *ReqWalletImportPrivKey) (*WalletAccount, error)
	SendToAddress(context.Context, *ReqWalletSendToAddress) (*ReplyHash, error)
	SetTxFee(context.Context, *ReqWalletSetFee) (*Reply, error)
	SetLabl(context.Context, *ReqWalletSetLabel) (*WalletAccount, error)
	MergeBalance(context.Context, *ReqWalletMergeBalance) (*ReplyHashes, error)
	SetPasswd(context.Context, *ReqWalletSetPasswd) (*Reply, error)
	Lock(context.Context, *ReqNil) (*Reply, error)
	UnLock(context.Context, *WalletUnLock) (*Reply, error)
	GetPeerInfo(context.Context, *ReqNil) (*PeerList, error)
	GetLastMemPool(context.Context, *ReqNil) (*ReplyTxList, error)
}

func RegisterGrpcserviceServer(s *grpc.Server, srv GrpcserviceServer) {
	s.RegisterService(&_Grpcservice_serviceDesc, srv)
}

func _Grpcservice_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetBlocks(ctx, req.(*ReqBlocks))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetLastHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetLastHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetLastHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetLastHeader(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_QueryTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).QueryTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/QueryTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).QueryTransaction(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).SendTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetTransactionByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetTransactionByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetTransactionByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetTransactionByAddr(ctx, req.(*ReqAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetTransactionByHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetTransactionByHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetTransactionByHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetTransactionByHashes(ctx, req.(*ReqHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetMemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetMemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetMemPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetMemPool(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetAccounts(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNewAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).NewAccount(ctx, req.(*ReqNewAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_WalletTransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletTransactionList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).WalletTransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/WalletTransactionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).WalletTransactionList(ctx, req.(*ReqWalletTransactionList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_ImportPrivKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletImportPrivKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).ImportPrivKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/ImportPrivKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).ImportPrivKey(ctx, req.(*ReqWalletImportPrivKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_SendToAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSendToAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).SendToAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/SendToAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).SendToAddress(ctx, req.(*ReqWalletSendToAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_SetTxFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).SetTxFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/SetTxFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).SetTxFee(ctx, req.(*ReqWalletSetFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_SetLabl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetLabel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).SetLabl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/SetLabl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).SetLabl(ctx, req.(*ReqWalletSetLabel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_MergeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletMergeBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).MergeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/MergeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).MergeBalance(ctx, req.(*ReqWalletMergeBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_SetPasswd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetPasswd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).SetPasswd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/SetPasswd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).SetPasswd(ctx, req.(*ReqWalletSetPasswd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).Lock(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_UnLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletUnLock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).UnLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/UnLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).UnLock(ctx, req.(*WalletUnLock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetPeerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetPeerInfo(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetLastMemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetLastMemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetLastMemPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetLastMemPool(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

var _Grpcservice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.grpcservice",
	HandlerType: (*GrpcserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlocks",
			Handler:    _Grpcservice_GetBlocks_Handler,
		},
		{
			MethodName: "GetLastHeader",
			Handler:    _Grpcservice_GetLastHeader_Handler,
		},
		{
			MethodName: "QueryTransaction",
			Handler:    _Grpcservice_QueryTransaction_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _Grpcservice_SendTransaction_Handler,
		},
		{
			MethodName: "GetTransactionByAddr",
			Handler:    _Grpcservice_GetTransactionByAddr_Handler,
		},
		{
			MethodName: "GetTransactionByHashes",
			Handler:    _Grpcservice_GetTransactionByHashes_Handler,
		},
		{
			MethodName: "GetMemPool",
			Handler:    _Grpcservice_GetMemPool_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _Grpcservice_GetAccounts_Handler,
		},
		{
			MethodName: "NewAccount",
			Handler:    _Grpcservice_NewAccount_Handler,
		},
		{
			MethodName: "WalletTransactionList",
			Handler:    _Grpcservice_WalletTransactionList_Handler,
		},
		{
			MethodName: "ImportPrivKey",
			Handler:    _Grpcservice_ImportPrivKey_Handler,
		},
		{
			MethodName: "SendToAddress",
			Handler:    _Grpcservice_SendToAddress_Handler,
		},
		{
			MethodName: "SetTxFee",
			Handler:    _Grpcservice_SetTxFee_Handler,
		},
		{
			MethodName: "SetLabl",
			Handler:    _Grpcservice_SetLabl_Handler,
		},
		{
			MethodName: "MergeBalance",
			Handler:    _Grpcservice_MergeBalance_Handler,
		},
		{
			MethodName: "SetPasswd",
			Handler:    _Grpcservice_SetPasswd_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _Grpcservice_Lock_Handler,
		},
		{
			MethodName: "UnLock",
			Handler:    _Grpcservice_UnLock_Handler,
		},
		{
			MethodName: "GetPeerInfo",
			Handler:    _Grpcservice_GetPeerInfo_Handler,
		},
		{
			MethodName: "GetLastMemPool",
			Handler:    _Grpcservice_GetLastMemPool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

// Client API for P2Premoteaddr service

type P2PremoteaddrClient interface {
	// 获取远程地址
	RemotePeerAddr(ctx context.Context, in *P2PGetAddr, opts ...grpc.CallOption) (*P2PAddr, error)
}

type p2PremoteaddrClient struct {
	cc *grpc.ClientConn
}

func NewP2PremoteaddrClient(cc *grpc.ClientConn) P2PremoteaddrClient {
	return &p2PremoteaddrClient{cc}
}

func (c *p2PremoteaddrClient) RemotePeerAddr(ctx context.Context, in *P2PGetAddr, opts ...grpc.CallOption) (*P2PAddr, error) {
	out := new(P2PAddr)
	err := grpc.Invoke(ctx, "/types.p2premoteaddr/RemotePeerAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for P2Premoteaddr service

type P2PremoteaddrServer interface {
	// 获取远程地址
	RemotePeerAddr(context.Context, *P2PGetAddr) (*P2PAddr, error)
}

func RegisterP2PremoteaddrServer(s *grpc.Server, srv P2PremoteaddrServer) {
	s.RegisterService(&_P2Premoteaddr_serviceDesc, srv)
}

func _P2Premoteaddr_RemotePeerAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PremoteaddrServer).RemotePeerAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2premoteaddr/RemotePeerAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PremoteaddrServer).RemotePeerAddr(ctx, req.(*P2PGetAddr))
	}
	return interceptor(ctx, in, info, handler)
}

var _P2Premoteaddr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.p2premoteaddr",
	HandlerType: (*P2PremoteaddrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemotePeerAddr",
			Handler:    _P2Premoteaddr_RemotePeerAddr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

// Client API for P2Pgservice service

type P2PgserviceClient interface {
	// 广播交易
	BroadCastTx(ctx context.Context, in *P2PTx, opts ...grpc.CallOption) (*Reply, error)
	BroadCastBlock(ctx context.Context, in *P2PBlock, opts ...grpc.CallOption) (*Reply, error)
	// PING
	Ping(ctx context.Context, in *P2PPing, opts ...grpc.CallOption) (*P2PPong, error)
	// 获取地址
	GetAddr(ctx context.Context, in *P2PGetAddr, opts ...grpc.CallOption) (*P2PAddr, error)
	// 版本
	Version(ctx context.Context, in *P2PVersion, opts ...grpc.CallOption) (*P2PVerAck, error)
	Version2(ctx context.Context, in *P2PVersion, opts ...grpc.CallOption) (*P2PVersion, error)
	// 获取区块，最高200
	GetBlocks(ctx context.Context, in *P2PGetBlocks, opts ...grpc.CallOption) (*P2PInv, error)
	//
	GetMemPool(ctx context.Context, in *P2PGetMempool, opts ...grpc.CallOption) (*P2PInv, error)
	// 获取数据
	GetData(ctx context.Context, in *P2PGetData, opts ...grpc.CallOption) (P2Pgservice_GetDataClient, error)
	// 获取头部
	GetHeaders(ctx context.Context, in *P2PGetHeaders, opts ...grpc.CallOption) (*P2PHeaders, error)
	// 获取 peerinfo
	GetPeerInfo(ctx context.Context, in *P2PGetPeerInfo, opts ...grpc.CallOption) (*P2PPeerInfo, error)
	RouteChat(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (P2Pgservice_RouteChatClient, error)
}

type p2PgserviceClient struct {
	cc *grpc.ClientConn
}

func NewP2PgserviceClient(cc *grpc.ClientConn) P2PgserviceClient {
	return &p2PgserviceClient{cc}
}

func (c *p2PgserviceClient) BroadCastTx(ctx context.Context, in *P2PTx, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.p2pgservice/BroadCastTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) BroadCastBlock(ctx context.Context, in *P2PBlock, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.p2pgservice/BroadCastBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) Ping(ctx context.Context, in *P2PPing, opts ...grpc.CallOption) (*P2PPong, error) {
	out := new(P2PPong)
	err := grpc.Invoke(ctx, "/types.p2pgservice/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) GetAddr(ctx context.Context, in *P2PGetAddr, opts ...grpc.CallOption) (*P2PAddr, error) {
	out := new(P2PAddr)
	err := grpc.Invoke(ctx, "/types.p2pgservice/GetAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) Version(ctx context.Context, in *P2PVersion, opts ...grpc.CallOption) (*P2PVerAck, error) {
	out := new(P2PVerAck)
	err := grpc.Invoke(ctx, "/types.p2pgservice/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) Version2(ctx context.Context, in *P2PVersion, opts ...grpc.CallOption) (*P2PVersion, error) {
	out := new(P2PVersion)
	err := grpc.Invoke(ctx, "/types.p2pgservice/Version2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) GetBlocks(ctx context.Context, in *P2PGetBlocks, opts ...grpc.CallOption) (*P2PInv, error) {
	out := new(P2PInv)
	err := grpc.Invoke(ctx, "/types.p2pgservice/GetBlocks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) GetMemPool(ctx context.Context, in *P2PGetMempool, opts ...grpc.CallOption) (*P2PInv, error) {
	out := new(P2PInv)
	err := grpc.Invoke(ctx, "/types.p2pgservice/GetMemPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) GetData(ctx context.Context, in *P2PGetData, opts ...grpc.CallOption) (P2Pgservice_GetDataClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_P2Pgservice_serviceDesc.Streams[0], c.cc, "/types.p2pgservice/GetData", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PgserviceGetDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type P2Pgservice_GetDataClient interface {
	Recv() (*InvDatas, error)
	grpc.ClientStream
}

type p2PgserviceGetDataClient struct {
	grpc.ClientStream
}

func (x *p2PgserviceGetDataClient) Recv() (*InvDatas, error) {
	m := new(InvDatas)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *p2PgserviceClient) GetHeaders(ctx context.Context, in *P2PGetHeaders, opts ...grpc.CallOption) (*P2PHeaders, error) {
	out := new(P2PHeaders)
	err := grpc.Invoke(ctx, "/types.p2pgservice/GetHeaders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) GetPeerInfo(ctx context.Context, in *P2PGetPeerInfo, opts ...grpc.CallOption) (*P2PPeerInfo, error) {
	out := new(P2PPeerInfo)
	err := grpc.Invoke(ctx, "/types.p2pgservice/GetPeerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PgserviceClient) RouteChat(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (P2Pgservice_RouteChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_P2Pgservice_serviceDesc.Streams[1], c.cc, "/types.p2pgservice/RouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2PgserviceRouteChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type P2Pgservice_RouteChatClient interface {
	Recv() (*BroadCastData, error)
	grpc.ClientStream
}

type p2PgserviceRouteChatClient struct {
	grpc.ClientStream
}

func (x *p2PgserviceRouteChatClient) Recv() (*BroadCastData, error) {
	m := new(BroadCastData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for P2Pgservice service

type P2PgserviceServer interface {
	// 广播交易
	BroadCastTx(context.Context, *P2PTx) (*Reply, error)
	BroadCastBlock(context.Context, *P2PBlock) (*Reply, error)
	// PING
	Ping(context.Context, *P2PPing) (*P2PPong, error)
	// 获取地址
	GetAddr(context.Context, *P2PGetAddr) (*P2PAddr, error)
	// 版本
	Version(context.Context, *P2PVersion) (*P2PVerAck, error)
	Version2(context.Context, *P2PVersion) (*P2PVersion, error)
	// 获取区块，最高200
	GetBlocks(context.Context, *P2PGetBlocks) (*P2PInv, error)
	//
	GetMemPool(context.Context, *P2PGetMempool) (*P2PInv, error)
	// 获取数据
	GetData(*P2PGetData, P2Pgservice_GetDataServer) error
	// 获取头部
	GetHeaders(context.Context, *P2PGetHeaders) (*P2PHeaders, error)
	// 获取 peerinfo
	GetPeerInfo(context.Context, *P2PGetPeerInfo) (*P2PPeerInfo, error)
	RouteChat(*ReqNil, P2Pgservice_RouteChatServer) error
}

func RegisterP2PgserviceServer(s *grpc.Server, srv P2PgserviceServer) {
	s.RegisterService(&_P2Pgservice_serviceDesc, srv)
}

func _P2Pgservice_BroadCastTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).BroadCastTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/BroadCastTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).BroadCastTx(ctx, req.(*P2PTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_BroadCastBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).BroadCastBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/BroadCastBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).BroadCastBlock(ctx, req.(*P2PBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PPing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).Ping(ctx, req.(*P2PPing))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_GetAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).GetAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/GetAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).GetAddr(ctx, req.(*P2PGetAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).Version(ctx, req.(*P2PVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_Version2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).Version2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/Version2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).Version2(ctx, req.(*P2PVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetBlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).GetBlocks(ctx, req.(*P2PGetBlocks))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_GetMemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetMempool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).GetMemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/GetMemPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).GetMemPool(ctx, req.(*P2PGetMempool))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(P2PGetData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(P2PgserviceServer).GetData(m, &p2PgserviceGetDataServer{stream})
}

type P2Pgservice_GetDataServer interface {
	Send(*InvDatas) error
	grpc.ServerStream
}

type p2PgserviceGetDataServer struct {
	grpc.ServerStream
}

func (x *p2PgserviceGetDataServer) Send(m *InvDatas) error {
	return x.ServerStream.SendMsg(m)
}

func _P2Pgservice_GetHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetHeaders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).GetHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/GetHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).GetHeaders(ctx, req.(*P2PGetHeaders))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_GetPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetPeerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PgserviceServer).GetPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.p2pgservice/GetPeerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PgserviceServer).GetPeerInfo(ctx, req.(*P2PGetPeerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2Pgservice_RouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqNil)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(P2PgserviceServer).RouteChat(m, &p2PgserviceRouteChatServer{stream})
}

type P2Pgservice_RouteChatServer interface {
	Send(*BroadCastData) error
	grpc.ServerStream
}

type p2PgserviceRouteChatServer struct {
	grpc.ServerStream
}

func (x *p2PgserviceRouteChatServer) Send(m *BroadCastData) error {
	return x.ServerStream.SendMsg(m)
}

var _P2Pgservice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.p2pgservice",
	HandlerType: (*P2PgserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadCastTx",
			Handler:    _P2Pgservice_BroadCastTx_Handler,
		},
		{
			MethodName: "BroadCastBlock",
			Handler:    _P2Pgservice_BroadCastBlock_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _P2Pgservice_Ping_Handler,
		},
		{
			MethodName: "GetAddr",
			Handler:    _P2Pgservice_GetAddr_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _P2Pgservice_Version_Handler,
		},
		{
			MethodName: "Version2",
			Handler:    _P2Pgservice_Version2_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _P2Pgservice_GetBlocks_Handler,
		},
		{
			MethodName: "GetMemPool",
			Handler:    _P2Pgservice_GetMemPool_Handler,
		},
		{
			MethodName: "GetHeaders",
			Handler:    _P2Pgservice_GetHeaders_Handler,
		},
		{
			MethodName: "GetPeerInfo",
			Handler:    _P2Pgservice_GetPeerInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetData",
			Handler:       _P2Pgservice_GetData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RouteChat",
			Handler:       _P2Pgservice_RouteChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types.proto",
}

func init() { proto.RegisterFile("types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3788 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x3a, 0x4d, 0x8f, 0x1b, 0x57,
	0x72, 0x6c, 0x36, 0x3f, 0x8b, 0xe4, 0x68, 0xdc, 0x96, 0x04, 0xee, 0xc0, 0x6b, 0xc9, 0x6f, 0x47,
	0x6b, 0x59, 0xb2, 0x67, 0x2d, 0x7a, 0xbd, 0x5e, 0xc4, 0xde, 0xc0, 0xd2, 0x38, 0xf3, 0x01, 0x8d,
	0x24, 0xba, 0x67, 0xac, 0xe4, 0x10, 0x04, 0xe8, 0x21, 0xdf, 0x70, 0x1a, 0x22, 0xbb, 0xa9, 0xee,
	0xe6, 0x0c, 0xc7, 0x87, 0x1c, 0x12, 0x20, 0x97, 0xdc, 0x92, 0x53, 0x0e, 0x39, 0x26, 0xe7, 0xfc,
	0x81, 0x20, 0xe7, 0xfc, 0x85, 0x1c, 0xf6, 0x17, 0xe4, 0x96, 0x9c, 0x02, 0x04, 0x08, 0xaa, 0x5e,
	0xbd, 0xee, 0xd7, 0xcd, 0xe6, 0x48, 0xda, 0x20, 0x40, 0xf6, 0xd6, 0x55, 0xaf, 0x5e, 0xbd, 0x7a,
	0x55, 0xf5, 0xea, 0x55, 0x55, 0x3f, 0xe8, 0x24, 0x57, 0x73, 0x19, 0xef, 0xcc, 0xa3, 0x30, 0x09,
	0x9d, 0x3a, 0x01, 0xa2, 0x05, 0x0d, 0x57, 0xbe, 0x7e, 0xee, 0x4f, 0xc5, 0x03, 0xd8, 0x18, 0x0e,
	0x86, 0xfb, 0x32, 0x19, 0x4a, 0x19, 0x1d, 0x06, 0x67, 0xa1, 0xd3, 0x87, 0xe6, 0x85, 0x8c, 0x62,
	0x3f, 0x0c, 0xfa, 0xd6, 0x5d, 0xeb, 0x7e, 0xdd, 0xd5, 0xa0, 0xf8, 0x1b, 0x0b, 0x3a, 0xc3, 0xc1,
	0x30, 0xa5, 0x74, 0xa0, 0xe6, 0x8d, 0xc7, 0x11, 0x91, 0xb5, 0x5d, 0xfa, 0x46, 0xdc, 0x3c, 0x8c,
	0x92, 0x7e, 0x95, 0xa6, 0xd2, 0x37, 0xe2, 0x02, 0x6f, 0x26, 0xfb, 0xb6, 0xa2, 0xc3, 0x6f, 0xe7,
	0x2e, 0x74, 0x66, 0x72, 0x36, 0x0f, 0xc3, 0xe9, 0xb1, 0xff, 0xa3, 0xec, 0xd7, 0x88, 0xdc, 0x44,
	0x39, 0xf7, 0xa0, 0x71, 0x2e, 0xbd, 0xb1, 0x8c, 0xfa, 0xf5, 0xbb, 0xd6, 0xfd, 0xce, 0xa0, 0xb7,
	0xa3, 0x36, 0x72, 0x40, 0x48, 0x97, 0x07, 0xc5, 0xbf, 0x5b, 0x00, 0xc3, 0xc1, 0xf0, 0xa5, 0x92,
	0x71, 0xbd, 0xf4, 0x38, 0x12, 0xcb, 0xe8, 0xc2, 0x1f, 0x49, 0x12, 0xce, 0x76, 0x35, 0xe8, 0x7c,
	0x00, 0xed, 0xc4, 0x9f, 0xc9, 0x38, 0xf1, 0x66, 0x73, 0x12, 0xd2, 0x76, 0x33, 0x84, 0xb3, 0x05,
	0x2d, 0xdc, 0x99, 0x2b, 0x47, 0x17, 0x24, 0x66, 0xdb, 0x4d, 0x61, 0x3d, 0xb6, 0x17, 0x85, 0x33,
	0x92, 0x92, 0xc7, 0x10, 0x76, 0x6e, 0x42, 0x3d, 0x08, 0x83, 0x91, 0xec, 0x37, 0x88, 0xa3, 0x02,
	0x70, 0xad, 0x45, 0x2c, 0xa3, 0xc7, 0x13, 0x19, 0x24, 0xfd, 0x26, 0x4d, 0xc9, 0x10, 0xa8, 0x95,
	0x38, 0xf1, 0xa2, 0xe4, 0x40, 0xfa, 0x93, 0xf3, 0xa4, 0xdf, 0xa2, 0x99, 0x26, 0x4a, 0xfc, 0x00,
	0x6d, 0xb5, 0xdb, 0xc7, 0xa3, 0x57, 0xbf, 0xd3, 0x66, 0x53, 0xb1, 0x6c, 0x43, 0x2c, 0x31, 0x83,
	0x26, 0x5a, 0xd6, 0x0f, 0x26, 0x19, 0x81, 0x65, 0xca, 0xad, 0x6d, 0x5d, 0x2d, 0xb1, 0xb5, 0x6d,
	0xd8, 0x7a, 0x1b, 0x6a, 0xb1, 0x3f, 0x09, 0x48, 0x53, 0x9d, 0xc1, 0x26, 0xdb, 0xec, 0xd8, 0x9f,
	0x04, 0x5e, 0xb2, 0x88, 0xa4, 0x4b, 0xa3, 0xe2, 0x8e, 0x5a, 0x2e, 0x5c, 0xb7, 0x9c, 0x10, 0x64,
	0xd4, 0x7d, 0x99, 0x3c, 0xc6, 0x85, 0xca, 0x69, 0xbe, 0x26, 0x26, 0xeb, 0x09, 0xb4, 0x75, 0xa6,
	0x7e, 0x8c, 0xfe, 0x68, 0x6b, 0xeb, 0x20, 0x2c, 0xce, 0xa1, 0xab, 0x16, 0x78, 0x32, 0x0d, 0x47,
	0xaf, 0xe2, 0x6b, 0x54, 0x59, 0xb0, 0x49, 0x75, 0xc5, 0x26, 0x68, 0x53, 0x19, 0x8c, 0x79, 0x9c,
	0xfd, 0x27, 0x45, 0x88, 0x4f, 0xa0, 0xa7, 0x56, 0x7a, 0xa6, 0x9c, 0xfb, 0x9a, 0x03, 0xb6, 0x03,
	0x8d, 0xe1, 0x60, 0x78, 0x18, 0x5c, 0xa0, 0x1a, 0xfd, 0xe0, 0x22, 0xee, 0x5b, 0x77, 0x6d, 0x43,
	0x8d, 0x87, 0xc1, 0x85, 0x0c, 0x92, 0x30, 0xba, 0x72, 0x69, 0x54, 0xec, 0x43, 0x3b, 0x45, 0x39,
	0x1b, 0x50, 0x4d, 0xae, 0x98, 0x63, 0x35, 0xb9, 0x42, 0xeb, 0x9c, 0x7b, 0xf1, 0x39, 0x09, 0xdc,
	0x75, 0xe9, 0xdb, 0xb9, 0x8d, 0x67, 0xca, 0x10, 0x93, 0x21, 0x71, 0xa4, 0xd5, 0xfd, 0x9d, 0x97,
	0x78, 0xd7, 0xe8, 0x42, 0x8b, 0x55, 0xbd, 0x56, 0xac, 0x87, 0x50, 0x1f, 0x0e, 0x86, 0x27, 0x4b,
	0x47, 0x40, 0x35, 0x59, 0x12, 0x8f, 0xce, 0xc0, 0x61, 0xe2, 0x93, 0xc8, 0x0b, 0x62, 0x6f, 0x94,
	0xf8, 0x61, 0xe0, 0x56, 0x93, 0xa5, 0xd8, 0x81, 0xd6, 0x70, 0x30, 0x24, 0x2b, 0x38, 0x02, 0xea,
	0xa7, 0xf8, 0xc1, 0x53, 0xba, 0x3c, 0x85, 0x06, 0x5d, 0x35, 0x24, 0x3c, 0xe8, 0x3d, 0x89, 0x42,
	0x6f, 0xbc, 0xeb, 0xc5, 0x4a, 0xda, 0x0f, 0x8d, 0x45, 0xf4, 0x0c, 0x5a, 0xfe, 0xa0, 0x82, 0x0b,
	0x38, 0x1f, 0x6b, 0xa6, 0x55, 0x22, 0xb9, 0x91, 0x91, 0x10, 0xdf, 0x83, 0x0a, 0x73, 0x7e, 0xd2,
	0x84, 0xfa, 0x85, 0x37, 0x5d, 0x48, 0x31, 0xd1, 0x16, 0x53, 0xa1, 0xe6, 0x7f, 0xe7, 0x1c, 0x5b,
	0xd0, 0xd2, 0xbe, 0xc0, 0x4a, 0x4f, 0x61, 0xf1, 0x25, 0xa9, 0x5d, 0xaf, 0xf2, 0x31, 0x34, 0x55,
	0x4c, 0xd3, 0x66, 0x2f, 0x44, 0x3c, 0x3d, 0x2a, 0x7e, 0x6b, 0x41, 0x43, 0xe1, 0x8a, 0x92, 0xd9,
	0x99, 0x64, 0x1f, 0x02, 0xcc, 0xbd, 0x48, 0x06, 0xc9, 0x41, 0xe6, 0x04, 0x06, 0x06, 0x5d, 0x21,
	0x59, 0xd2, 0x98, 0x4d, 0x63, 0x0c, 0xa1, 0x33, 0xc7, 0x89, 0x97, 0x48, 0x1a, 0xaa, 0xd1, 0x50,
	0x86, 0x30, 0x1c, 0xa8, 0x6e, 0x3a, 0x10, 0xce, 0x22, 0x25, 0x9e, 0xf8, 0x33, 0x1d, 0xf0, 0x32,
	0x84, 0xb3, 0x03, 0xed, 0x58, 0x47, 0x00, 0x0a, 0x6a, 0x65, 0x91, 0x21, 0x23, 0x11, 0x7f, 0x59,
	0x85, 0xba, 0xf2, 0x88, 0xdf, 0x8f, 0xfd, 0x6d, 0x83, 0x9d, 0x2c, 0xe3, 0x7e, 0x93, 0xac, 0x56,
	0xe6, 0xe8, 0x38, 0xfc, 0xce, 0x5a, 0x38, 0x87, 0x1e, 0x29, 0xe1, 0xc5, 0x05, 0x86, 0x6e, 0x79,
	0xe9, 0x7c, 0x04, 0x35, 0x74, 0x01, 0xf6, 0xf5, 0x82, 0x77, 0xd0, 0x10, 0xea, 0x2b, 0x59, 0xee,
	0x86, 0x8b, 0x40, 0xfb, 0xa2, 0x06, 0xd1, 0x0f, 0x95, 0x06, 0x64, 0xdc, 0xb7, 0xef, 0xda, 0xf7,
	0xbb, 0x6e, 0x0a, 0x8b, 0x7f, 0xb1, 0xa0, 0x63, 0x88, 0x8b, 0x5a, 0x90, 0x4b, 0x39, 0x92, 0xea,
	0x6a, 0xef, 0xba, 0x0c, 0x21, 0xf7, 0xb9, 0x77, 0x35, 0x0d, 0xbd, 0x31, 0x2b, 0x5c, 0x83, 0xf9,
	0xbd, 0xd9, 0x6f, 0xdc, 0x9b, 0xb3, 0x09, 0xf6, 0x99, 0x54, 0xd7, 0xbe, 0xed, 0xe2, 0xa7, 0x5a,
	0x73, 0xee, 0x47, 0x52, 0x6b, 0x5e, 0x41, 0x6b, 0xae, 0x51, 0x0c, 0x76, 0x21, 0xdf, 0x9f, 0xd5,
	0x24, 0x14, 0xdf, 0x43, 0x3b, 0x5d, 0x67, 0x25, 0x12, 0xde, 0x86, 0xc6, 0x7c, 0x71, 0xfa, 0x4a,
	0x5e, 0xb1, 0xd4, 0x0c, 0x91, 0x2b, 0xe4, 0x84, 0xee, 0x9a, 0xea, 0xbf, 0x82, 0xce, 0xee, 0xb9,
	0xe7, 0x07, 0xc7, 0x89, 0x97, 0x2c, 0x62, 0x67, 0x1b, 0x7a, 0xa3, 0x45, 0x44, 0xee, 0xa5, 0x1c,
	0x44, 0xf9, 0x63, 0x1e, 0x59, 0x4c, 0x6b, 0x38, 0x1e, 0x98, 0x69, 0x8d, 0x80, 0xee, 0x2c, 0x9e,
	0x7c, 0xbf, 0x90, 0x0b, 0x49, 0x24, 0x2a, 0x26, 0xe4, 0x70, 0xe2, 0xa7, 0xd0, 0x74, 0xe5, 0x6b,
	0x72, 0x48, 0x1d, 0xc5, 0xad, 0x2c, 0x8a, 0x8b, 0xbb, 0x94, 0xbd, 0x1d, 0x06, 0x89, 0xe1, 0xae,
	0x56, 0x2e, 0x9e, 0xff, 0xad, 0x45, 0x1c, 0x1e, 0xf3, 0x2d, 0x5d, 0x96, 0xa5, 0x9d, 0x4d, 0xbd,
	0x89, 0xce, 0xd2, 0xf0, 0x1b, 0x15, 0x3d, 0x22, 0xc7, 0x51, 0xd7, 0xb9, 0x02, 0x50, 0x47, 0x63,
	0x3f, 0x92, 0xe4, 0x17, 0x9c, 0xa5, 0x65, 0x88, 0xb5, 0xc7, 0xe5, 0x26, 0xd4, 0xfd, 0x60, 0x2c,
	0x97, 0xda, 0x68, 0x04, 0x88, 0x9f, 0x41, 0x9b, 0xb7, 0x25, 0x63, 0x9a, 0xaa, 0xbc, 0xd1, 0x22,
	0x6f, 0x64, 0x48, 0xdc, 0x41, 0xa2, 0xf9, 0xf4, 0x6a, 0xed, 0xee, 0xff, 0x14, 0xba, 0xb8, 0xaf,
	0xf4, 0x54, 0xf4, 0xa1, 0x19, 0xc9, 0x91, 0x7f, 0xc1, 0xde, 0x6a, 0xbb, 0x1a, 0xc4, 0x91, 0x53,
	0x6f, 0xea, 0x05, 0x59, 0x12, 0xc4, 0xa0, 0x79, 0x4c, 0xec, 0xdc, 0x31, 0x11, 0x2f, 0xa0, 0x43,
	0xcb, 0x9f, 0x2c, 0x75, 0x8a, 0x5b, 0x14, 0xc0, 0xd8, 0x74, 0xb5, 0x7c, 0xd3, 0xb6, 0xb9, 0xe9,
	0xff, 0xb6, 0xe0, 0x3d, 0xe3, 0x6c, 0x7d, 0x27, 0x13, 0xcf, 0x9f, 0xbe, 0xcd, 0xcd, 0xe8, 0x7c,
	0x4a, 0x1b, 0x93, 0xfe, 0x3c, 0xe1, 0xab, 0x4b, 0x13, 0xba, 0x0a, 0x8b, 0xb7, 0x9f, 0xab, 0x49,
	0xc8, 0xc9, 0xa3, 0x30, 0x3c, 0xd3, 0xa7, 0x9b, 0x21, 0x43, 0xda, 0x5a, 0xb9, 0xb4, 0x75, 0x43,
	0xda, 0x34, 0xce, 0x25, 0xc5, 0x38, 0x87, 0x08, 0xe4, 0xe5, 0xcd, 0x48, 0x6b, 0x4d, 0xc5, 0x4b,
	0x41, 0x18, 0x5b, 0xce, 0xa2, 0x70, 0x46, 0x6e, 0xd6, 0x52, 0x69, 0xb0, 0x86, 0xc5, 0xb7, 0xe0,
	0xac, 0x6c, 0x3f, 0x76, 0x1e, 0xa8, 0x88, 0xa9, 0xee, 0xb9, 0xfe, 0xaa, 0x02, 0x14, 0x1d, 0xc5,
	0x4d, 0xf1, 0x82, 0xdc, 0x86, 0xf3, 0xb4, 0x9b, 0x50, 0xa7, 0xdb, 0x55, 0x67, 0x7a, 0x04, 0x60,
	0x38, 0x91, 0xc1, 0x98, 0xed, 0x81, 0x9f, 0x28, 0xd2, 0x61, 0x3c, 0x26, 0x2e, 0x64, 0x8f, 0x96,
	0x9b, 0xc2, 0xe2, 0xd7, 0xd0, 0x25, 0x6e, 0x5a, 0x98, 0xfb, 0x50, 0xf7, 0x13, 0x39, 0xd3, 0xe2,
	0x38, 0x66, 0xda, 0xc1, 0x82, 0x28, 0x02, 0xf1, 0x19, 0xd4, 0xc9, 0x3b, 0xd0, 0x2f, 0xfc, 0xf8,
	0x85, 0x4a, 0x54, 0x5a, 0x2e, 0x7d, 0xa3, 0x10, 0xb3, 0x78, 0xc2, 0x31, 0x06, 0x3f, 0xc5, 0x03,
	0xd8, 0x24, 0x72, 0x95, 0x68, 0x28, 0xbd, 0xaf, 0x3b, 0xb2, 0x1f, 0xd1, 0x2e, 0x4f, 0x96, 0x47,
	0x7e, 0x9c, 0x64, 0x67, 0x91, 0x77, 0x49, 0x80, 0xf8, 0x22, 0xf5, 0x4d, 0x22, 0xda, 0x36, 0x75,
	0xb8, 0xee, 0xd6, 0x11, 0xdb, 0x00, 0x27, 0x14, 0xe7, 0x69, 0xce, 0xba, 0x53, 0xf7, 0x4f, 0x16,
	0xb4, 0x4e, 0x96, 0xae, 0x8c, 0x17, 0xd3, 0xb5, 0x22, 0x66, 0x2e, 0xa3, 0xc2, 0x06, 0xbb, 0x8c,
	0x72, 0x65, 0xfb, 0x5a, 0x57, 0xfe, 0x25, 0x74, 0xd8, 0x4f, 0xc7, 0x5e, 0x22, 0xb9, 0x38, 0x28,
	0x73, 0x67, 0x93, 0x2c, 0xef, 0x8c, 0xf5, 0x82, 0x33, 0x8a, 0x1d, 0x68, 0xea, 0xcc, 0xe9, 0x67,
	0x79, 0x03, 0x16, 0x6e, 0x46, 0xb6, 0xdd, 0x47, 0xd0, 0x79, 0x66, 0xc4, 0x61, 0x07, 0x0b, 0x95,
	0x1f, 0x75, 0xc5, 0x40, 0xdf, 0xe2, 0x10, 0x5a, 0xc7, 0x49, 0x18, 0xc9, 0x63, 0x99, 0xe4, 0xf3,
	0x04, 0xab, 0x98, 0x27, 0xdc, 0x81, 0xea, 0xd3, 0x97, 0x9c, 0x06, 0xeb, 0x8c, 0xf2, 0xa9, 0xbc,
	0x7a, 0x89, 0xf9, 0xa3, 0x5b, 0x7d, 0xfa, 0x52, 0x7c, 0xc3, 0xac, 0xf6, 0xdf, 0xc8, 0xca, 0x81,
	0xda, 0x2b, 0x79, 0xa5, 0x72, 0xea, 0xae, 0x4b, 0xdf, 0xe2, 0x13, 0xb8, 0x41, 0xb3, 0xc9, 0xdc,
	0xc4, 0x14, 0x8d, 0x42, 0xd9, 0xa9, 0x26, 0x64, 0x48, 0x0c, 0xa0, 0xa5, 0x17, 0x46, 0x0f, 0xc4,
	0x5b, 0x4e, 0x2d, 0x81, 0x9f, 0x68, 0x32, 0xa2, 0x63, 0xaf, 0xe4, 0x04, 0x77, 0x07, 0x80, 0x95,
	0x7e, 0x14, 0x4e, 0x56, 0xae, 0xcb, 0x4d, 0xb0, 0xa7, 0x61, 0xea, 0xc7, 0xd3, 0x70, 0x22, 0x3c,
	0xbc, 0x4d, 0x54, 0x98, 0x29, 0x12, 0xbf, 0x49, 0x11, 0xce, 0x3d, 0xa8, 0x4d, 0xc3, 0x89, 0x8a,
	0x4a, 0x9d, 0xc1, 0x7b, 0x79, 0x9b, 0x1f, 0x85, 0x13, 0x97, 0x86, 0xc5, 0x77, 0xe8, 0xdb, 0xa9,
	0x1f, 0xac, 0x2c, 0xf3, 0x96, 0x5c, 0x3c, 0xe8, 0x18, 0xa7, 0xf6, 0x6d, 0xea, 0x09, 0x67, 0x07,
	0x5a, 0xec, 0x73, 0xba, 0xac, 0x29, 0xf3, 0xcb, 0x94, 0x46, 0xfc, 0x0a, 0x5a, 0x3c, 0x80, 0x51,
	0x2c, 0x9b, 0xab, 0x5c, 0x6f, 0x23, 0x3f, 0xd7, 0x98, 0xf7, 0x57, 0x16, 0xc0, 0x1f, 0x2d, 0xe5,
	0x88, 0x0f, 0xef, 0xf5, 0x3e, 0xc1, 0x47, 0xbb, 0x7a, 0x7d, 0x42, 0x99, 0x4b, 0x4a, 0xed, 0x62,
	0x52, 0xba, 0x26, 0xf0, 0x8b, 0x57, 0xd0, 0x7c, 0x3c, 0x1a, 0xe9, 0xb8, 0xad, 0xd2, 0x97, 0x91,
	0xd6, 0x75, 0x0a, 0x5f, 0x73, 0x79, 0xde, 0x86, 0xc6, 0x59, 0x14, 0xfe, 0x28, 0x03, 0x5d, 0x44,
	0x2a, 0x28, 0x4d, 0x34, 0x6a, 0x59, 0xa2, 0x21, 0xf6, 0xa1, 0xf7, 0xc7, 0xde, 0x74, 0x2a, 0x13,
	0xbd, 0xe4, 0x5d, 0xb0, 0xbd, 0xd1, 0x88, 0x0d, 0xa2, 0xb5, 0xc5, 0x83, 0x2e, 0x0e, 0xa1, 0xcb,
	0x4e, 0xbd, 0x53, 0x39, 0xe5, 0x56, 0x83, 0x02, 0x84, 0x0b, 0x1b, 0xac, 0xd3, 0x27, 0x2c, 0x86,
	0x03, 0xb5, 0x79, 0x24, 0x2f, 0xf4, 0x01, 0xc6, 0x6f, 0x14, 0x9a, 0xf3, 0x31, 0x2d, 0x34, 0x83,
	0x48, 0x3d, 0x96, 0x53, 0x7d, 0xdd, 0xd3, 0xb7, 0xf8, 0x73, 0x70, 0x98, 0x27, 0x1a, 0xc6, 0x50,
	0x0a, 0xa6, 0xbb, 0x8f, 0xb3, 0x9c, 0x29, 0x85, 0x1d, 0xc1, 0x6b, 0x56, 0x4b, 0xc5, 0x57, 0x32,
	0xdc, 0xcf, 0x64, 0xb0, 0x4b, 0xc9, 0xf4, 0xb0, 0xf8, 0x6b, 0x0b, 0x6a, 0x43, 0x29, 0xa3, 0xff,
	0x1f, 0x8d, 0xb4, 0xcf, 0xa0, 0x85, 0xc2, 0x90, 0x77, 0x7e, 0x04, 0xf5, 0xb9, 0xcc, 0x0a, 0xd1,
	0x8e, 0xae, 0x99, 0x25, 0x86, 0x53, 0x1a, 0x11, 0x7f, 0x06, 0xad, 0x23, 0xe9, 0x9d, 0x3d, 0x0f,
	0xc7, 0x6f, 0x1d, 0x77, 0x0a, 0xed, 0x87, 0x7a, 0x7a, 0xb1, 0xe8, 0x58, 0xac, 0x84, 0x57, 0xb1,
	0xf8, 0x35, 0xb4, 0x0f, 0x83, 0x40, 0x46, 0xb4, 0xc0, 0x16, 0xb4, 0xa6, 0xf2, 0x2c, 0x31, 0x0e,
	0x4b, 0x0a, 0xe3, 0x29, 0x88, 0x90, 0x8b, 0x51, 0x07, 0x66, 0x88, 0x77, 0x5a, 0xf2, 0xef, 0x2c,
	0x68, 0x53, 0xd8, 0x7d, 0xa7, 0x4d, 0x99, 0xb2, 0xd9, 0xd7, 0xc9, 0x56, 0x5b, 0x2f, 0x5b, 0xbd,
	0x54, 0xb6, 0x86, 0x21, 0xdb, 0x02, 0xda, 0xcf, 0x1e, 0xbf, 0x3c, 0x1a, 0x62, 0x52, 0xa7, 0x96,
	0xf4, 0xce, 0xf2, 0xea, 0x50, 0xb0, 0xf3, 0x39, 0x80, 0xaf, 0xf5, 0xb6, 0xda, 0xa8, 0xe1, 0x01,
	0xd7, 0xa0, 0x41, 0x6e, 0x51, 0x18, 0xe6, 0x36, 0xa0, 0x61, 0x11, 0x40, 0xf3, 0x30, 0xb8, 0xa0,
	0x90, 0xbc, 0x7d, 0x7d, 0xca, 0xca, 0xdd, 0x96, 0xed, 0x7c, 0xb7, 0x25, 0x17, 0x72, 0xd3, 0x56,
	0x0b, 0x87, 0x77, 0x5b, 0x87, 0xf7, 0xac, 0xf5, 0xf2, 0x39, 0xb4, 0x78, 0x3d, 0xac, 0xb8, 0x72,
	0xb7, 0xfa, 0x46, 0xd6, 0x6d, 0xa2, 0x90, 0xcc, 0xd7, 0xfa, 0x1d, 0x68, 0xee, 0xcb, 0x40, 0xc6,
	0x3e, 0xe5, 0x86, 0x7e, 0x1c, 0x2d, 0x02, 0xce, 0xca, 0x14, 0x20, 0xbe, 0x85, 0x8d, 0x5c, 0x08,
	0xc2, 0x42, 0xbc, 0x79, 0x49, 0x18, 0xcd, 0xfa, 0x26, 0xb3, 0xce, 0xd1, 0xb9, 0x9a, 0x48, 0xdc,
	0x83, 0x9e, 0x2b, 0x5f, 0x3f, 0x97, 0x97, 0x3a, 0x44, 0xa4, 0x21, 0xca, 0x32, 0x43, 0xd4, 0x19,
	0xf4, 0x5d, 0xf9, 0x5a, 0xf1, 0x30, 0x14, 0xa3, 0xf3, 0x2e, 0xcc, 0x88, 0x4f, 0x96, 0xba, 0xa2,
	0x56, 0x50, 0x96, 0xe8, 0x55, 0xd7, 0x16, 0x5d, 0x76, 0xa1, 0xe8, 0x12, 0x07, 0x70, 0x3b, 0x5d,
	0xe7, 0x70, 0x86, 0x81, 0x61, 0x18, 0xf9, 0x17, 0x4f, 0x25, 0xc5, 0xec, 0x79, 0xe4, 0x5f, 0x68,
	0xb7, 0x6d, 0xbb, 0x1a, 0x5c, 0x13, 0x54, 0xcf, 0x0d, 0x4e, 0xc7, 0x32, 0x18, 0x9f, 0x84, 0x18,
	0xe5, 0x64, 0x1c, 0x53, 0x81, 0x18, 0x85, 0x33, 0x1d, 0x91, 0xf0, 0x9b, 0x6b, 0xee, 0xaa, 0xae,
	0xb9, 0x8d, 0x6a, 0xc0, 0xce, 0x55, 0x03, 0x18, 0xa5, 0x42, 0xce, 0xf2, 0x30, 0x4a, 0x85, 0x89,
	0xc4, 0x84, 0xc6, 0x58, 0x29, 0xd9, 0x93, 0x66, 0x31, 0x61, 0x99, 0xd3, 0xc5, 0x6f, 0xe0, 0x3d,
	0x93, 0xf4, 0x08, 0x25, 0x2d, 0x8d, 0x90, 0xe5, 0x7b, 0xfa, 0x18, 0x6e, 0xa5, 0xd3, 0x9f, 0xc9,
	0x68, 0x22, 0xf5, 0x7d, 0xa1, 0xc4, 0xb7, 0xd2, 0x96, 0xc1, 0x3d, 0xce, 0xa6, 0xdf, 0x50, 0x8f,
	0x1e, 0xe0, 0x25, 0x91, 0x89, 0x33, 0xf4, 0xe2, 0xf8, 0x92, 0xfa, 0x2c, 0xe1, 0x74, 0x3c, 0xf7,
	0xe2, 0x58, 0x6b, 0x9a, 0x41, 0x1c, 0x09, 0xe4, 0x25, 0x8d, 0x28, 0xb9, 0x34, 0x28, 0xbe, 0x85,
	0xae, 0x62, 0xf3, 0x43, 0x70, 0x84, 0x87, 0x00, 0x2b, 0x36, 0xe2, 0xc6, 0x2c, 0x18, 0xa2, 0xe2,
	0xd4, 0x9f, 0xc9, 0x70, 0x91, 0xf5, 0x70, 0x14, 0x28, 0xfe, 0xb3, 0x0a, 0x8d, 0xdd, 0x30, 0x38,
	0xf3, 0xa9, 0x5a, 0x4f, 0xfc, 0x64, 0x2a, 0xb5, 0x0b, 0x12, 0x40, 0x81, 0x21, 0x9c, 0x4c, 0xe5,
	0x45, 0xaa, 0x95, 0x14, 0x76, 0xee, 0xc3, 0x8d, 0x69, 0x38, 0xd9, 0x0d, 0x83, 0x38, 0x9c, 0xca,
	0x23, 0x22, 0x01, 0x22, 0x29, 0xa2, 0x51, 0x80, 0x69, 0x38, 0xd9, 0xf3, 0xa7, 0xb2, 0xdf, 0x56,
	0x5b, 0x60, 0x10, 0x13, 0xaa, 0x18, 0x03, 0x24, 0xdf, 0x6c, 0xfa, 0x74, 0xab, 0x5c, 0x55, 0x0d,
	0x39, 0x3b, 0xd0, 0x1e, 0x85, 0x41, 0x2c, 0x83, 0x78, 0x11, 0x17, 0x7e, 0x03, 0xec, 0x6a, 0xbc,
	0x9b, 0x91, 0xe0, 0x7d, 0x39, 0x93, 0xb3, 0x61, 0x18, 0x4e, 0xf9, 0x7e, 0xd2, 0x07, 0xfd, 0x99,
	0xc2, 0xba, 0x7a, 0xd8, 0x79, 0x04, 0x40, 0xe1, 0x83, 0xda, 0x32, 0x14, 0x1d, 0xb3, 0x54, 0xf0,
	0x49, 0x3a, 0xe0, 0x1a, 0x44, 0x78, 0xf7, 0xa9, 0x53, 0x4c, 0x15, 0x6b, 0x76, 0xf7, 0x29, 0x43,
	0xb8, 0x3c, 0xe8, 0x7c, 0x00, 0xf6, 0x7c, 0x30, 0xe7, 0xa6, 0x1c, 0x64, 0x1d, 0x62, 0x17, 0xd1,
	0xe2, 0x5f, 0x2d, 0xb0, 0x87, 0x83, 0x21, 0x6a, 0x37, 0x96, 0x72, 0x3c, 0x0c, 0xb9, 0xfc, 0xac,
	0xbb, 0x29, 0x8c, 0xc6, 0x1c, 0x9f, 0x0e, 0xbd, 0xe4, 0x9c, 0xf5, 0xce, 0x10, 0xe2, 0xfd, 0xf8,
	0x58, 0xca, 0x31, 0x57, 0xa1, 0x0c, 0x51, 0x1d, 0x2b, 0xe5, 0x18, 0x35, 0x64, 0xa3, 0xfd, 0x08,
	0xa0, 0x26, 0x58, 0xe0, 0x9d, 0x4e, 0x55, 0xb9, 0xd3, 0x72, 0x19, 0x32, 0xdb, 0xa0, 0x8d, 0x7c,
	0x03, 0x1a, 0xcb, 0x02, 0x19, 0x3d, 0xf3, 0x97, 0xb4, 0xc1, 0xba, 0xcb, 0x90, 0xc6, 0x7b, 0x4b,
	0xda, 0x14, 0xe3, 0xbd, 0xa5, 0xf8, 0x35, 0x34, 0xd4, 0xde, 0x91, 0x62, 0xe6, 0x07, 0x7b, 0x52,
	0x97, 0x40, 0x0c, 0xad, 0xdb, 0x89, 0xf8, 0x0a, 0xea, 0x64, 0x67, 0x22, 0x88, 0xd2, 0x7e, 0x0b,
	0x12, 0x10, 0xb4, 0x76, 0xe2, 0x3f, 0x58, 0xd0, 0x4e, 0x2d, 0x9f, 0xe6, 0x30, 0x96, 0x91, 0xc3,
	0xf4, 0xa1, 0x39, 0x51, 0x31, 0x5c, 0x9f, 0x19, 0x06, 0x9d, 0x0f, 0x01, 0x66, 0x7e, 0x20, 0x23,
	0x55, 0xf3, 0x2b, 0x15, 0x1a, 0x18, 0xe7, 0x01, 0x6c, 0x32, 0xe9, 0x93, 0x34, 0x13, 0x56, 0xe9,
	0xee, 0x0a, 0x1e, 0x79, 0x9d, 0x87, 0xc9, 0x2b, 0x79, 0x45, 0xa9, 0x9d, 0xfa, 0x5d, 0x67, 0x60,
	0xc4, 0x53, 0x68, 0xb2, 0xcb, 0x39, 0xdb, 0xd0, 0xc3, 0xf4, 0x69, 0xd7, 0x1b, 0x9d, 0xab, 0x2e,
	0x1d, 0x37, 0xfb, 0x72, 0x48, 0xf4, 0x87, 0x99, 0x1f, 0x9c, 0x2c, 0x51, 0x87, 0xea, 0xa4, 0xa6,
	0xb0, 0xf8, 0x37, 0x0b, 0x20, 0xf3, 0x49, 0x47, 0x40, 0x77, 0x2c, 0xcf, 0x8a, 0xfc, 0x72, 0x38,
	0xdc, 0xcb, 0xcc, 0x5b, 0xee, 0xc9, 0x64, 0x74, 0x4e, 0x33, 0x9f, 0x2f, 0x66, 0xcc, 0x76, 0x05,
	0xef, 0xfc, 0x1c, 0x36, 0x38, 0x28, 0x1c, 0xcb, 0x51, 0x18, 0x8c, 0x63, 0x8e, 0xc1, 0x05, 0x2c,
	0x6e, 0xe4, 0xd4, 0x33, 0x19, 0x2a, 0xe5, 0xe4, 0x91, 0x86, 0x45, 0xeb, 0x6b, 0x2c, 0xda, 0xc8,
	0x59, 0xf4, 0x1b, 0xe8, 0x1a, 0x4d, 0xb2, 0xd8, 0xf9, 0x14, 0x9a, 0x89, 0xfa, 0x2c, 0x74, 0x23,
	0x0c, 0x2a, 0x57, 0x93, 0x88, 0xff, 0xb2, 0xf4, 0x8d, 0x7c, 0xb2, 0xfc, 0xbf, 0x6c, 0x87, 0x95,
	0xfd, 0xe9, 0xca, 0x7a, 0x18, 0xb5, 0xb5, 0x6d, 0xaf, 0xfa, 0xfa, 0xb6, 0x57, 0x63, 0x6d, 0xdb,
	0xab, 0x99, 0x6f, 0x7b, 0xa9, 0xdf, 0x0f, 0xd4, 0x3a, 0x6c, 0xe9, 0xdf, 0x0f, 0xd4, 0xbd, 0xdc,
	0x83, 0x1b, 0xf9, 0xbd, 0xc7, 0xce, 0x17, 0xd0, 0x4e, 0x34, 0xc0, 0xfa, 0xbb, 0x95, 0x0b, 0x53,
	0x9a, 0xd4, 0xcd, 0xe8, 0xc4, 0x05, 0x38, 0xb9, 0x6c, 0x45, 0x1d, 0xcd, 0x77, 0x4c, 0x00, 0xd2,
	0x6b, 0xd5, 0x36, 0xae, 0x55, 0xfe, 0x1b, 0x7e, 0x4c, 0x7f, 0xc3, 0xd5, 0x1d, 0x9e, 0x21, 0xc4,
	0xa7, 0xd0, 0xe0, 0x4e, 0x9c, 0xc8, 0xa7, 0x67, 0x85, 0xe2, 0x5a, 0x25, 0x67, 0xe9, 0x95, 0x37,
	0xbc, 0xd4, 0x19, 0xef, 0xfc, 0xd2, 0x48, 0x5b, 0x19, 0xa2, 0x1e, 0xae, 0x17, 0x8c, 0xe3, 0x44,
	0xff, 0x60, 0xd6, 0x20, 0xd6, 0x48, 0x9d, 0xdd, 0xd0, 0x0f, 0xe2, 0xc7, 0xaa, 0xe3, 0x3c, 0x80,
	0x56, 0x82, 0x8e, 0x71, 0xc6, 0xe1, 0x27, 0x4b, 0xde, 0x88, 0xea, 0x84, 0xc7, 0x0e, 0x2a, 0x6e,
	0x4a, 0xe7, 0xfc, 0x22, 0x1f, 0x5e, 0x3a, 0x83, 0xf7, 0xcd, 0x29, 0x9c, 0x3d, 0x1e, 0x54, 0xb2,
	0xa8, 0xb3, 0x36, 0x3d, 0x3d, 0x82, 0xae, 0x39, 0xc7, 0xf0, 0x8c, 0x6a, 0xce, 0x33, 0xb6, 0xa1,
	0x17, 0xc9, 0x64, 0x11, 0x05, 0x9c, 0x4f, 0xb1, 0x82, 0xf3, 0x48, 0xf1, 0x35, 0xf4, 0x72, 0x42,
	0xaf, 0x65, 0xa7, 0x33, 0x2a, 0xdb, 0xc8, 0xa8, 0x7e, 0x6b, 0x41, 0xf7, 0xc4, 0x1f, 0xbd, 0x42,
	0x0f, 0x20, 0xcd, 0x7c, 0x02, 0xf5, 0x24, 0x9c, 0xcb, 0x80, 0xd5, 0xa2, 0x2f, 0x46, 0x45, 0xf3,
	0x62, 0x2e, 0x31, 0x43, 0x57, 0x14, 0xce, 0xe7, 0x45, 0x85, 0xdc, 0xcc, 0x11, 0x97, 0x68, 0xe4,
	0x53, 0x68, 0x24, 0xa3, 0x69, 0x18, 0xcb, 0x62, 0xa3, 0x8f, 0x26, 0xec, 0xe2, 0xc8, 0x41, 0xc5,
	0x65, 0x1a, 0xe7, 0x01, 0xd4, 0x29, 0x46, 0x17, 0x1a, 0x7d, 0x8a, 0xf8, 0x19, 0x8e, 0xa0, 0x2c,
	0x44, 0xc2, 0xba, 0x86, 0x55, 0x5d, 0xcf, 0xa0, 0x63, 0x4c, 0x40, 0x1d, 0x9c, 0xfa, 0x89, 0x4a,
	0xb7, 0x7a, 0x2e, 0x7d, 0xa3, 0xbe, 0x22, 0x79, 0xe9, 0x45, 0xba, 0xf3, 0xcb, 0x10, 0xfd, 0xeb,
	0xa2, 0xa9, 0x87, 0x63, 0xd6, 0x59, 0x0a, 0xd3, 0xb5, 0x17, 0x8e, 0xfd, 0xb3, 0x2b, 0xae, 0xc7,
	0x18, 0x12, 0x7b, 0x00, 0x99, 0xaa, 0xe8, 0x2f, 0x0d, 0x2e, 0xab, 0xed, 0xa7, 0x4e, 0x53, 0x0e,
	0x57, 0x9e, 0xbb, 0x8b, 0x10, 0x7a, 0x39, 0x2d, 0xbe, 0x15, 0xab, 0x15, 0x7f, 0xa9, 0x96, 0xf8,
	0x4b, 0xf9, 0x1f, 0x1a, 0xf1, 0x89, 0xd6, 0x13, 0x59, 0x21, 0xb7, 0x77, 0x4b, 0x3d, 0x7a, 0xd0,
	0xb0, 0xf8, 0x46, 0xef, 0x91, 0x6a, 0x92, 0xb2, 0x9c, 0x7a, 0x0b, 0x5a, 0x7e, 0x4c, 0x8c, 0x94,
	0x4e, 0x5b, 0x6e, 0x0a, 0x8b, 0x87, 0x7a, 0x21, 0x15, 0xf4, 0x29, 0x4e, 0x28, 0xc6, 0x31, 0xaf,
	0x94, 0x21, 0xc4, 0x5f, 0x54, 0xa1, 0xa1, 0xa8, 0x0b, 0x12, 0xad, 0x58, 0x23, 0xa6, 0xff, 0x6b,
	0xac, 0x44, 0x86, 0x90, 0xb9, 0xaf, 0x4f, 0x19, 0x5f, 0xfb, 0x19, 0x02, 0x6f, 0xf2, 0x51, 0x24,
	0xbd, 0x44, 0x1a, 0xf7, 0xbd, 0x81, 0xc1, 0xd9, 0xa4, 0xde, 0x13, 0x23, 0x9c, 0xa7, 0x88, 0x34,
	0xa7, 0xa0, 0x1e, 0x25, 0xbf, 0xb1, 0x31, 0x30, 0x2b, 0x06, 0x6b, 0xbc, 0x8d, 0xc1, 0x9a, 0x65,
	0x07, 0xfc, 0x21, 0x16, 0x8e, 0x74, 0x1f, 0xbd, 0x59, 0x15, 0xe2, 0x1f, 0x2d, 0x68, 0x61, 0x30,
	0xa4, 0x02, 0x19, 0x73, 0x15, 0xfe, 0x4e, 0x49, 0x0d, 0xcc, 0xef, 0xae, 0xb7, 0xdd, 0x15, 0xbd,
	0x65, 0x98, 0xd5, 0x5d, 0xd5, 0xcb, 0x76, 0xf5, 0xcf, 0x16, 0x6c, 0x68, 0x41, 0x39, 0xf6, 0x3c,
	0x84, 0xfa, 0xb9, 0xd1, 0x68, 0xd5, 0xf1, 0x55, 0x53, 0x1d, 0x71, 0xf1, 0xaf, 0xf6, 0x36, 0x28,
	0x46, 0x9f, 0xdb, 0x05, 0xf2, 0x92, 0xf8, 0xf3, 0x08, 0x9a, 0xe7, 0x8b, 0x80, 0x96, 0x50, 0x01,
	0xe8, 0x56, 0x61, 0xce, 0x0f, 0x01, 0x77, 0x18, 0x34, 0x1d, 0x07, 0x96, 0xda, 0x6a, 0x60, 0xf9,
	0x39, 0x74, 0x4d, 0xc1, 0xd6, 0x16, 0xa2, 0x7f, 0x92, 0x6d, 0x53, 0x71, 0x47, 0xf3, 0x29, 0xe6,
	0x99, 0xf9, 0x34, 0x4c, 0x16, 0x91, 0xa3, 0x48, 0x26, 0xfa, 0x27, 0xb3, 0x82, 0xd2, 0x3f, 0x88,
	0xb6, 0xf1, 0x0b, 0xf3, 0x2b, 0xb8, 0x51, 0xd8, 0xeb, 0xaa, 0xea, 0xad, 0x12, 0xd5, 0x0f, 0xfe,
	0xbe, 0x0d, 0x9d, 0x49, 0x34, 0x1f, 0xe9, 0xc7, 0x5c, 0x9f, 0x41, 0x3b, 0x7b, 0xc2, 0xb4, 0x99,
	0xe6, 0x43, 0xfc, 0xb3, 0x6c, 0xab, 0x6b, 0xa6, 0x61, 0xa2, 0xe2, 0xfc, 0x02, 0x7a, 0xfb, 0x58,
	0x51, 0xc7, 0xfc, 0xb2, 0xc5, 0xe9, 0x65, 0x53, 0x9e, 0xfb, 0xd3, 0xad, 0x7c, 0x67, 0x50, 0x54,
	0x9c, 0x3f, 0x84, 0xcd, 0xef, 0x17, 0x32, 0xba, 0x32, 0x1f, 0x07, 0x64, 0x2d, 0x6e, 0xfa, 0x95,
	0xbb, 0xb5, 0xf6, 0xef, 0x9d, 0xa8, 0x38, 0x5f, 0xc2, 0x0d, 0xea, 0x2b, 0x18, 0xd3, 0x4b, 0xd2,
	0xbb, 0x15, 0x39, 0x7f, 0x03, 0x37, 0xf7, 0x73, 0x3d, 0x94, 0x27, 0x94, 0xa1, 0x9b, 0x4b, 0x23,
	0xbc, 0xf5, 0xfe, 0x6a, 0x9a, 0x19, 0x8b, 0x8a, 0xb3, 0x0f, 0xb7, 0x8b, 0xd3, 0xb9, 0xc8, 0xdf,
	0xcc, 0xcb, 0x2e, 0xe3, 0xad, 0x9f, 0xac, 0x93, 0x1e, 0x19, 0x3d, 0x02, 0x50, 0xef, 0xb6, 0xa8,
	0x28, 0x28, 0x28, 0xab, 0x90, 0xe3, 0x62, 0x48, 0xa5, 0x1d, 0x77, 0xf6, 0x8d, 0x56, 0x53, 0x61,
	0xce, 0xad, 0xb2, 0x46, 0x13, 0xae, 0xf4, 0x07, 0x00, 0x66, 0x7f, 0xc9, 0x98, 0x95, 0x62, 0xb7,
	0x4a, 0xbb, 0x54, 0xa2, 0xe2, 0xb8, 0x70, 0xab, 0xbc, 0xe9, 0x74, 0x27, 0x63, 0x53, 0x4a, 0xb0,
	0x75, 0xbb, 0x34, 0xcd, 0x44, 0x79, 0xf6, 0xa0, 0x97, 0x6f, 0x2d, 0xfd, 0xb4, 0xc8, 0x2b, 0x37,
	0xbc, 0x56, 0xb6, 0x27, 0xd0, 0xcb, 0x37, 0x96, 0x56, 0xf8, 0xe4, 0x86, 0xb7, 0x36, 0x4d, 0xa5,
	0x52, 0x07, 0xb2, 0x82, 0x29, 0xdf, 0x31, 0x4a, 0x47, 0xc5, 0xe9, 0xea, 0xf4, 0x64, 0x4f, 0xca,
	0x15, 0x0f, 0xfa, 0x1a, 0x9a, 0xaa, 0x77, 0x34, 0x75, 0xfa, 0x25, 0x53, 0xa8, 0xa9, 0x74, 0x8d,
	0xd0, 0xdd, 0x5c, 0xe7, 0xe8, 0x83, 0x22, 0x07, 0x73, 0x34, 0xef, 0x07, 0xfc, 0xa0, 0xa6, 0xe2,
	0xfc, 0x0a, 0xda, 0x59, 0xb7, 0xe8, 0x27, 0x25, 0x22, 0xa8, 0xa1, 0x15, 0xc1, 0xef, 0x41, 0x8d,
	0x82, 0x52, 0xc1, 0x71, 0x8a, 0x64, 0x9f, 0x41, 0x83, 0xbb, 0x48, 0xef, 0xe7, 0x36, 0xa1, 0x90,
	0x25, 0x07, 0xbf, 0x63, 0x3e, 0xf1, 0x2d, 0x30, 0xbf, 0x61, 0xb4, 0xf7, 0x53, 0x37, 0xde, 0xe0,
	0x48, 0xf1, 0x2e, 0xde, 0x3f, 0xd8, 0x83, 0xde, 0x7c, 0x30, 0x8f, 0xe4, 0x2c, 0x4c, 0x24, 0xe5,
	0x13, 0x5f, 0xc2, 0x86, 0x4b, 0x10, 0xf2, 0xa6, 0x33, 0xfc, 0x5e, 0xd6, 0x5d, 0xe1, 0xe7, 0x9d,
	0x5b, 0x1b, 0x19, 0x8a, 0x0a, 0xf1, 0xca, 0xe0, 0x3f, 0x6a, 0xd0, 0x99, 0x0f, 0xe6, 0x13, 0x1d,
	0xe7, 0x1e, 0x42, 0x27, 0x7d, 0xf4, 0x77, 0xb2, 0x74, 0x72, 0xcf, 0xfc, 0x56, 0x36, 0xfb, 0x08,
	0x36, 0x52, 0x62, 0xf5, 0x8a, 0xac, 0xf8, 0xe6, 0x6f, 0x65, 0xca, 0x7d, 0xa8, 0xd1, 0xdb, 0x57,
	0x43, 0x12, 0x84, 0x4d, 0xc9, 0x86, 0x61, 0x30, 0x11, 0x15, 0x67, 0x07, 0x9a, 0xfa, 0x55, 0xea,
	0xdb, 0xec, 0x04, 0x53, 0x6d, 0xfd, 0x34, 0xd9, 0xa0, 0x67, 0x54, 0xea, 0xee, 0xe9, 0x93, 0x5e,
	0xe5, 0xee, 0x3c, 0x3c, 0x28, 0x9b, 0xb2, 0x8a, 0xa2, 0x2d, 0x1b, 0xf7, 0xc0, 0xfb, 0x39, 0xb9,
	0xf8, 0x2a, 0xe8, 0x65, 0xc8, 0xc3, 0xe0, 0x42, 0x54, 0x9c, 0x2f, 0x72, 0xb1, 0xed, 0x66, 0x6e,
	0x0e, 0xff, 0x27, 0x5f, 0x9d, 0xf4, 0x88, 0x76, 0x4f, 0xbf, 0x03, 0xf2, 0xbb, 0x47, 0x54, 0xea,
	0x47, 0xba, 0x83, 0x2f, 0x2a, 0x9f, 0x5b, 0xce, 0x57, 0xb4, 0x8e, 0xfe, 0x53, 0x9f, 0x5f, 0x87,
	0xb1, 0xe6, 0x9e, 0x18, 0x45, 0x21, 0x31, 0xe7, 0xb3, 0xb7, 0x72, 0x33, 0x35, 0x3a, 0xf5, 0x43,
	0xe3, 0x5d, 0xba, 0xa8, 0x38, 0xbf, 0x84, 0xb6, 0x1b, 0x2e, 0x12, 0xb9, 0x7b, 0xee, 0x25, 0x45,
	0xcf, 0xd5, 0x22, 0xe4, 0x5e, 0x91, 0xa2, 0xa8, 0xa7, 0x0d, 0x7a, 0x23, 0xff, 0xc5, 0xff, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x6b, 0xd7, 0x1e, 0x89, 0x32, 0x2f, 0x00, 0x00,
}
