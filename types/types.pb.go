// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	Header
	Block
	Transaction
	Signature
	ChainStatus
	RequestHash
	ReqAddr
	ReqHashes
	ReplyHash
	ReplyTxInfo
	MerkleProof
	RequestBlocks
	BlockDetails
	Reply
	ReplyBlockHeight
	RequestTxList
	ReplyTxList
	TxHashList
	TxResult
	Headers
	MempoolSize
	StoreSet
	StoreGet
	StoreReplyValue
	KeyValue
	ReceiptLog
	Receipt
	ReceiptData
	BlockDetail
	Receipts
	ExecTxList
	Account
	WalletAccount
	ReceiptBalance
	Peer
	PeerList
	LeafNode
	InnerNode
	StoreNode
	MAVLProof
	CoinsAction
	CoinsGenesis
	CoinsTransfer
	InvData
	InvDatas
	Genesis
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Header struct {
	Version    int64  `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ParentHash []byte `protobuf:"bytes,2,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	TxHash     []byte `protobuf:"bytes,3,opt,name=txHash,proto3" json:"txHash,omitempty"`
	StateHash  []byte `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Height     int64  `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	BlockTime  int64  `protobuf:"varint,6,opt,name=blockTime" json:"blockTime,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Header) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Header) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *Header) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Header) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *Header) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Header) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

type Block struct {
	Version    int64          `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ParentHash []byte         `protobuf:"bytes,2,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	TxHash     []byte         `protobuf:"bytes,3,opt,name=txHash,proto3" json:"txHash,omitempty"`
	StateHash  []byte         `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Height     int64          `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	BlockTime  int64          `protobuf:"varint,6,opt,name=blockTime" json:"blockTime,omitempty"`
	Txs        []*Transaction `protobuf:"bytes,7,rep,name=txs" json:"txs,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Block) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Block) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *Block) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Block) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *Block) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *Block) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

type Transaction struct {
	Execer    []byte     `protobuf:"bytes,1,opt,name=execer,proto3" json:"execer,omitempty"`
	Payload   []byte     `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature *Signature `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
	Fee       int64      `protobuf:"varint,4,opt,name=fee" json:"fee,omitempty"`
	Expire    int32      `protobuf:"varint,5,opt,name=expire" json:"expire,omitempty"`
	Nonce     int32      `protobuf:"varint,6,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Transaction) GetExecer() []byte {
	if m != nil {
		return m.Execer
	}
	return nil
}

func (m *Transaction) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Transaction) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Transaction) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *Transaction) GetExpire() int32 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *Transaction) GetNonce() int32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// 三种签名支持
// ty = 1 -> secp256k1
// ty = 2 -> ed25519
// ty = 3 -> sm2
type Signature struct {
	Ty        int32  `protobuf:"varint,1,opt,name=ty" json:"ty,omitempty"`
	Pubkey    []byte `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Signature) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *Signature) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ChainStatus struct {
	CurrentHeight int64 `protobuf:"varint,1,opt,name=currentHeight" json:"currentHeight,omitempty"`
	MempoolSize   int64 `protobuf:"varint,2,opt,name=mempoolSize" json:"mempoolSize,omitempty"`
	MsgQueueSize  int64 `protobuf:"varint,3,opt,name=msgQueueSize" json:"msgQueueSize,omitempty"`
}

func (m *ChainStatus) Reset()                    { *m = ChainStatus{} }
func (m *ChainStatus) String() string            { return proto.CompactTextString(m) }
func (*ChainStatus) ProtoMessage()               {}
func (*ChainStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ChainStatus) GetCurrentHeight() int64 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *ChainStatus) GetMempoolSize() int64 {
	if m != nil {
		return m.MempoolSize
	}
	return 0
}

func (m *ChainStatus) GetMsgQueueSize() int64 {
	if m != nil {
		return m.MsgQueueSize
	}
	return 0
}

type RequestHash struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *RequestHash) Reset()                    { *m = RequestHash{} }
func (m *RequestHash) String() string            { return proto.CompactTextString(m) }
func (*RequestHash) ProtoMessage()               {}
func (*RequestHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RequestHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type ReqAddr struct {
	Addr string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
}

func (m *ReqAddr) Reset()                    { *m = ReqAddr{} }
func (m *ReqAddr) String() string            { return proto.CompactTextString(m) }
func (*ReqAddr) ProtoMessage()               {}
func (*ReqAddr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReqAddr) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type ReqHashes struct {
	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (m *ReqHashes) Reset()                    { *m = ReqHashes{} }
func (m *ReqHashes) String() string            { return proto.CompactTextString(m) }
func (*ReqHashes) ProtoMessage()               {}
func (*ReqHashes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ReqHashes) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type ReplyHash struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *ReplyHash) Reset()                    { *m = ReplyHash{} }
func (m *ReplyHash) String() string            { return proto.CompactTextString(m) }
func (*ReplyHash) ProtoMessage()               {}
func (*ReplyHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReplyHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type ReplyTxInfo struct {
	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height int64  `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Index  int64  `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
}

func (m *ReplyTxInfo) Reset()                    { *m = ReplyTxInfo{} }
func (m *ReplyTxInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyTxInfo) ProtoMessage()               {}
func (*ReplyTxInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReplyTxInfo) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ReplyTxInfo) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ReplyTxInfo) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type MerkleProof struct {
	Hashs [][]byte `protobuf:"bytes,1,rep,name=hashs,proto3" json:"hashs,omitempty"`
}

func (m *MerkleProof) Reset()                    { *m = MerkleProof{} }
func (m *MerkleProof) String() string            { return proto.CompactTextString(m) }
func (*MerkleProof) ProtoMessage()               {}
func (*MerkleProof) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MerkleProof) GetHashs() [][]byte {
	if m != nil {
		return m.Hashs
	}
	return nil
}

// req
type RequestBlocks struct {
	Start    int64 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End      int64 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	Isdetail bool  `protobuf:"varint,3,opt,name=Isdetail" json:"Isdetail,omitempty"`
}

func (m *RequestBlocks) Reset()                    { *m = RequestBlocks{} }
func (m *RequestBlocks) String() string            { return proto.CompactTextString(m) }
func (*RequestBlocks) ProtoMessage()               {}
func (*RequestBlocks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RequestBlocks) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *RequestBlocks) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *RequestBlocks) GetIsdetail() bool {
	if m != nil {
		return m.Isdetail
	}
	return false
}

// resp
type BlockDetails struct {
	Items []*BlockDetail `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *BlockDetails) Reset()                    { *m = BlockDetails{} }
func (m *BlockDetails) String() string            { return proto.CompactTextString(m) }
func (*BlockDetails) ProtoMessage()               {}
func (*BlockDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *BlockDetails) GetItems() []*BlockDetail {
	if m != nil {
		return m.Items
	}
	return nil
}

type Reply struct {
	IsOk bool   `protobuf:"varint,1,opt,name=isOk" json:"isOk,omitempty"`
	Msg  []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Reply) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

func (m *Reply) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type ReplyBlockHeight struct {
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *ReplyBlockHeight) Reset()                    { *m = ReplyBlockHeight{} }
func (m *ReplyBlockHeight) String() string            { return proto.CompactTextString(m) }
func (*ReplyBlockHeight) ProtoMessage()               {}
func (*ReplyBlockHeight) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ReplyBlockHeight) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type RequestTxList struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *RequestTxList) Reset()                    { *m = RequestTxList{} }
func (m *RequestTxList) String() string            { return proto.CompactTextString(m) }
func (*RequestTxList) ProtoMessage()               {}
func (*RequestTxList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *RequestTxList) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReplyTxList struct {
	Txs []*Transaction `protobuf:"bytes,1,rep,name=txs" json:"txs,omitempty"`
}

func (m *ReplyTxList) Reset()                    { *m = ReplyTxList{} }
func (m *ReplyTxList) String() string            { return proto.CompactTextString(m) }
func (*ReplyTxList) ProtoMessage()               {}
func (*ReplyTxList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ReplyTxList) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

type TxHashList struct {
	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (m *TxHashList) Reset()                    { *m = TxHashList{} }
func (m *TxHashList) String() string            { return proto.CompactTextString(m) }
func (*TxHashList) ProtoMessage()               {}
func (*TxHashList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *TxHashList) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type TxResult struct {
	Height      int64        `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Index       int32        `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Tx          *Transaction `protobuf:"bytes,3,opt,name=tx" json:"tx,omitempty"`
	Receiptdate *ReceiptData `protobuf:"bytes,4,opt,name=receiptdate" json:"receiptdate,omitempty"`
}

func (m *TxResult) Reset()                    { *m = TxResult{} }
func (m *TxResult) String() string            { return proto.CompactTextString(m) }
func (*TxResult) ProtoMessage()               {}
func (*TxResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *TxResult) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TxResult) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TxResult) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TxResult) GetReceiptdate() *ReceiptData {
	if m != nil {
		return m.Receiptdate
	}
	return nil
}

// resp
type Headers struct {
	Items []*Header `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Headers) Reset()                    { *m = Headers{} }
func (m *Headers) String() string            { return proto.CompactTextString(m) }
func (*Headers) ProtoMessage()               {}
func (*Headers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Headers) GetItems() []*Header {
	if m != nil {
		return m.Items
	}
	return nil
}

type MempoolSize struct {
	Size int64 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
}

func (m *MempoolSize) Reset()                    { *m = MempoolSize{} }
func (m *MempoolSize) String() string            { return proto.CompactTextString(m) }
func (*MempoolSize) ProtoMessage()               {}
func (*MempoolSize) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *MempoolSize) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type StoreSet struct {
	StateHash []byte      `protobuf:"bytes,1,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	KV        []*KeyValue `protobuf:"bytes,2,rep,name=KV" json:"KV,omitempty"`
}

func (m *StoreSet) Reset()                    { *m = StoreSet{} }
func (m *StoreSet) String() string            { return proto.CompactTextString(m) }
func (*StoreSet) ProtoMessage()               {}
func (*StoreSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *StoreSet) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *StoreSet) GetKV() []*KeyValue {
	if m != nil {
		return m.KV
	}
	return nil
}

type StoreGet struct {
	StateHash []byte   `protobuf:"bytes,1,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Keys      [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *StoreGet) Reset()                    { *m = StoreGet{} }
func (m *StoreGet) String() string            { return proto.CompactTextString(m) }
func (*StoreGet) ProtoMessage()               {}
func (*StoreGet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *StoreGet) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *StoreGet) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

type StoreReplyValue struct {
	Values [][]byte `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *StoreReplyValue) Reset()                    { *m = StoreReplyValue{} }
func (m *StoreReplyValue) String() string            { return proto.CompactTextString(m) }
func (*StoreReplyValue) ProtoMessage()               {}
func (*StoreReplyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *StoreReplyValue) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

type KeyValue struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *KeyValue) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type ReceiptLog struct {
	Ty  int32  `protobuf:"varint,1,opt,name=ty" json:"ty,omitempty"`
	Log []byte `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
}

func (m *ReceiptLog) Reset()                    { *m = ReceiptLog{} }
func (m *ReceiptLog) String() string            { return proto.CompactTextString(m) }
func (*ReceiptLog) ProtoMessage()               {}
func (*ReceiptLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ReceiptLog) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *ReceiptLog) GetLog() []byte {
	if m != nil {
		return m.Log
	}
	return nil
}

// ty = 0 -> error Receipt
// ty = 1 -> CutFee //cut fee ,bug exec not ok
// ty = 2 -> exec ok
type Receipt struct {
	Ty   int32         `protobuf:"varint,1,opt,name=ty" json:"ty,omitempty"`
	KV   []*KeyValue   `protobuf:"bytes,2,rep,name=KV" json:"KV,omitempty"`
	Logs []*ReceiptLog `protobuf:"bytes,3,rep,name=logs" json:"logs,omitempty"`
}

func (m *Receipt) Reset()                    { *m = Receipt{} }
func (m *Receipt) String() string            { return proto.CompactTextString(m) }
func (*Receipt) ProtoMessage()               {}
func (*Receipt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *Receipt) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *Receipt) GetKV() []*KeyValue {
	if m != nil {
		return m.KV
	}
	return nil
}

func (m *Receipt) GetLogs() []*ReceiptLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

type ReceiptData struct {
	Ty   int32         `protobuf:"varint,1,opt,name=ty" json:"ty,omitempty"`
	Logs []*ReceiptLog `protobuf:"bytes,3,rep,name=logs" json:"logs,omitempty"`
}

func (m *ReceiptData) Reset()                    { *m = ReceiptData{} }
func (m *ReceiptData) String() string            { return proto.CompactTextString(m) }
func (*ReceiptData) ProtoMessage()               {}
func (*ReceiptData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ReceiptData) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *ReceiptData) GetLogs() []*ReceiptLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

type BlockDetail struct {
	Block    *Block         `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Receipts []*ReceiptData `protobuf:"bytes,2,rep,name=receipts" json:"receipts,omitempty"`
}

func (m *BlockDetail) Reset()                    { *m = BlockDetail{} }
func (m *BlockDetail) String() string            { return proto.CompactTextString(m) }
func (*BlockDetail) ProtoMessage()               {}
func (*BlockDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *BlockDetail) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockDetail) GetReceipts() []*ReceiptData {
	if m != nil {
		return m.Receipts
	}
	return nil
}

type Receipts struct {
	Receipts []*Receipt `protobuf:"bytes,1,rep,name=receipts" json:"receipts,omitempty"`
}

func (m *Receipts) Reset()                    { *m = Receipts{} }
func (m *Receipts) String() string            { return proto.CompactTextString(m) }
func (*Receipts) ProtoMessage()               {}
func (*Receipts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *Receipts) GetReceipts() []*Receipt {
	if m != nil {
		return m.Receipts
	}
	return nil
}

type ExecTxList struct {
	StateHash []byte         `protobuf:"bytes,1,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Txs       []*Transaction `protobuf:"bytes,2,rep,name=txs" json:"txs,omitempty"`
}

func (m *ExecTxList) Reset()                    { *m = ExecTxList{} }
func (m *ExecTxList) String() string            { return proto.CompactTextString(m) }
func (*ExecTxList) ProtoMessage()               {}
func (*ExecTxList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ExecTxList) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *ExecTxList) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

type Account struct {
	Currency int32  `protobuf:"varint,1,opt,name=currency" json:"currency,omitempty"`
	Balance  int64  `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	Frozen   int64  `protobuf:"varint,3,opt,name=frozen" json:"frozen,omitempty"`
	Addr     string `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *Account) GetCurrency() int32 {
	if m != nil {
		return m.Currency
	}
	return 0
}

func (m *Account) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Account) GetFrozen() int64 {
	if m != nil {
		return m.Frozen
	}
	return 0
}

func (m *Account) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type WalletAccount struct {
	Acc   *Account `protobuf:"bytes,1,opt,name=acc" json:"acc,omitempty"`
	Label string   `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
}

func (m *WalletAccount) Reset()                    { *m = WalletAccount{} }
func (m *WalletAccount) String() string            { return proto.CompactTextString(m) }
func (*WalletAccount) ProtoMessage()               {}
func (*WalletAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *WalletAccount) GetAcc() *Account {
	if m != nil {
		return m.Acc
	}
	return nil
}

func (m *WalletAccount) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ReceiptBalance struct {
	Prev    int64 `protobuf:"varint,1,opt,name=prev" json:"prev,omitempty"`
	Current int64 `protobuf:"varint,2,opt,name=current" json:"current,omitempty"`
	Delt    int64 `protobuf:"varint,3,opt,name=delt" json:"delt,omitempty"`
}

func (m *ReceiptBalance) Reset()                    { *m = ReceiptBalance{} }
func (m *ReceiptBalance) String() string            { return proto.CompactTextString(m) }
func (*ReceiptBalance) ProtoMessage()               {}
func (*ReceiptBalance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ReceiptBalance) GetPrev() int64 {
	if m != nil {
		return m.Prev
	}
	return 0
}

func (m *ReceiptBalance) GetCurrent() int64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *ReceiptBalance) GetDelt() int64 {
	if m != nil {
		return m.Delt
	}
	return 0
}

// p2p
type Peer struct {
	Addr        string  `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Port        int32   `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Name        string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	MempoolSize int32   `protobuf:"varint,4,opt,name=mempoolSize" json:"mempoolSize,omitempty"`
	Header      *Header `protobuf:"bytes,5,opt,name=header" json:"header,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *Peer) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Peer) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Peer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Peer) GetMempoolSize() int32 {
	if m != nil {
		return m.MempoolSize
	}
	return 0
}

func (m *Peer) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type PeerList struct {
	Peers []*Peer `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *PeerList) Reset()                    { *m = PeerList{} }
func (m *PeerList) String() string            { return proto.CompactTextString(m) }
func (*PeerList) ProtoMessage()               {}
func (*PeerList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *PeerList) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

// merkle avl tree
type LeafNode struct {
	Key    []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Height int32  `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Size   int32  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *LeafNode) Reset()                    { *m = LeafNode{} }
func (m *LeafNode) String() string            { return proto.CompactTextString(m) }
func (*LeafNode) ProtoMessage()               {}
func (*LeafNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *LeafNode) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *LeafNode) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *LeafNode) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *LeafNode) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type InnerNode struct {
	LeftHash  []byte `protobuf:"bytes,1,opt,name=leftHash,proto3" json:"leftHash,omitempty"`
	RightHash []byte `protobuf:"bytes,2,opt,name=rightHash,proto3" json:"rightHash,omitempty"`
	Height    int32  `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Size      int32  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *InnerNode) Reset()                    { *m = InnerNode{} }
func (m *InnerNode) String() string            { return proto.CompactTextString(m) }
func (*InnerNode) ProtoMessage()               {}
func (*InnerNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *InnerNode) GetLeftHash() []byte {
	if m != nil {
		return m.LeftHash
	}
	return nil
}

func (m *InnerNode) GetRightHash() []byte {
	if m != nil {
		return m.RightHash
	}
	return nil
}

func (m *InnerNode) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *InnerNode) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type StoreNode struct {
	Key       []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	LeftHash  []byte `protobuf:"bytes,3,opt,name=leftHash,proto3" json:"leftHash,omitempty"`
	RightHash []byte `protobuf:"bytes,4,opt,name=rightHash,proto3" json:"rightHash,omitempty"`
	Height    int32  `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	Size      int32  `protobuf:"varint,6,opt,name=size" json:"size,omitempty"`
}

func (m *StoreNode) Reset()                    { *m = StoreNode{} }
func (m *StoreNode) String() string            { return proto.CompactTextString(m) }
func (*StoreNode) ProtoMessage()               {}
func (*StoreNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *StoreNode) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *StoreNode) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *StoreNode) GetLeftHash() []byte {
	if m != nil {
		return m.LeftHash
	}
	return nil
}

func (m *StoreNode) GetRightHash() []byte {
	if m != nil {
		return m.RightHash
	}
	return nil
}

func (m *StoreNode) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StoreNode) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type MAVLProof struct {
	LeafHash   []byte       `protobuf:"bytes,1,opt,name=leafHash,proto3" json:"leafHash,omitempty"`
	InnerNodes []*InnerNode `protobuf:"bytes,2,rep,name=innerNodes" json:"innerNodes,omitempty"`
	RootHash   []byte       `protobuf:"bytes,3,opt,name=rootHash,proto3" json:"rootHash,omitempty"`
}

func (m *MAVLProof) Reset()                    { *m = MAVLProof{} }
func (m *MAVLProof) String() string            { return proto.CompactTextString(m) }
func (*MAVLProof) ProtoMessage()               {}
func (*MAVLProof) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *MAVLProof) GetLeafHash() []byte {
	if m != nil {
		return m.LeafHash
	}
	return nil
}

func (m *MAVLProof) GetInnerNodes() []*InnerNode {
	if m != nil {
		return m.InnerNodes
	}
	return nil
}

func (m *MAVLProof) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

type CoinsAction struct {
	// Types that are valid to be assigned to Value:
	//	*CoinsAction_Transfer
	//	*CoinsAction_Genesis
	Value isCoinsAction_Value `protobuf_oneof:"value"`
	Ty    int32               `protobuf:"varint,3,opt,name=ty" json:"ty,omitempty"`
}

func (m *CoinsAction) Reset()                    { *m = CoinsAction{} }
func (m *CoinsAction) String() string            { return proto.CompactTextString(m) }
func (*CoinsAction) ProtoMessage()               {}
func (*CoinsAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

type isCoinsAction_Value interface {
	isCoinsAction_Value()
}

type CoinsAction_Transfer struct {
	Transfer *CoinsTransfer `protobuf:"bytes,1,opt,name=transfer,oneof"`
}
type CoinsAction_Genesis struct {
	Genesis *CoinsGenesis `protobuf:"bytes,2,opt,name=genesis,oneof"`
}

func (*CoinsAction_Transfer) isCoinsAction_Value() {}
func (*CoinsAction_Genesis) isCoinsAction_Value()  {}

func (m *CoinsAction) GetValue() isCoinsAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CoinsAction) GetTransfer() *CoinsTransfer {
	if x, ok := m.GetValue().(*CoinsAction_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *CoinsAction) GetGenesis() *CoinsGenesis {
	if x, ok := m.GetValue().(*CoinsAction_Genesis); ok {
		return x.Genesis
	}
	return nil
}

func (m *CoinsAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CoinsAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CoinsAction_OneofMarshaler, _CoinsAction_OneofUnmarshaler, _CoinsAction_OneofSizer, []interface{}{
		(*CoinsAction_Transfer)(nil),
		(*CoinsAction_Genesis)(nil),
	}
}

func _CoinsAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CoinsAction)
	// value
	switch x := m.Value.(type) {
	case *CoinsAction_Transfer:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transfer); err != nil {
			return err
		}
	case *CoinsAction_Genesis:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Genesis); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CoinsAction.Value has unexpected type %T", x)
	}
	return nil
}

func _CoinsAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CoinsAction)
	switch tag {
	case 1: // value.transfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoinsTransfer)
		err := b.DecodeMessage(msg)
		m.Value = &CoinsAction_Transfer{msg}
		return true, err
	case 2: // value.genesis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoinsGenesis)
		err := b.DecodeMessage(msg)
		m.Value = &CoinsAction_Genesis{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CoinsAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CoinsAction)
	// value
	switch x := m.Value.(type) {
	case *CoinsAction_Transfer:
		s := proto.Size(x.Transfer)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CoinsAction_Genesis:
		s := proto.Size(x.Genesis)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// 给某个地址凭空打币
// 只能执行一次，不能执行第二次
type CoinsGenesis struct {
	Toaddr string `protobuf:"bytes,1,opt,name=toaddr" json:"toaddr,omitempty"`
	Amount int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *CoinsGenesis) Reset()                    { *m = CoinsGenesis{} }
func (m *CoinsGenesis) String() string            { return proto.CompactTextString(m) }
func (*CoinsGenesis) ProtoMessage()               {}
func (*CoinsGenesis) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *CoinsGenesis) GetToaddr() string {
	if m != nil {
		return m.Toaddr
	}
	return ""
}

func (m *CoinsGenesis) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type CoinsTransfer struct {
	Toaddr string `protobuf:"bytes,1,opt,name=toaddr" json:"toaddr,omitempty"`
	Amount int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *CoinsTransfer) Reset()                    { *m = CoinsTransfer{} }
func (m *CoinsTransfer) String() string            { return proto.CompactTextString(m) }
func (*CoinsTransfer) ProtoMessage()               {}
func (*CoinsTransfer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *CoinsTransfer) GetToaddr() string {
	if m != nil {
		return m.Toaddr
	}
	return ""
}

func (m *CoinsTransfer) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type InvData struct {
	// Types that are valid to be assigned to Value:
	//	*InvData_Tx
	//	*InvData_Block
	Value isInvData_Value `protobuf_oneof:"value"`
	Ty    int32           `protobuf:"varint,3,opt,name=ty" json:"ty,omitempty"`
}

func (m *InvData) Reset()                    { *m = InvData{} }
func (m *InvData) String() string            { return proto.CompactTextString(m) }
func (*InvData) ProtoMessage()               {}
func (*InvData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

type isInvData_Value interface {
	isInvData_Value()
}

type InvData_Tx struct {
	Tx *Transaction `protobuf:"bytes,1,opt,name=tx,oneof"`
}
type InvData_Block struct {
	Block *Block `protobuf:"bytes,2,opt,name=block,oneof"`
}

func (*InvData_Tx) isInvData_Value()    {}
func (*InvData_Block) isInvData_Value() {}

func (m *InvData) GetValue() isInvData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *InvData) GetTx() *Transaction {
	if x, ok := m.GetValue().(*InvData_Tx); ok {
		return x.Tx
	}
	return nil
}

func (m *InvData) GetBlock() *Block {
	if x, ok := m.GetValue().(*InvData_Block); ok {
		return x.Block
	}
	return nil
}

func (m *InvData) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InvData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InvData_OneofMarshaler, _InvData_OneofUnmarshaler, _InvData_OneofSizer, []interface{}{
		(*InvData_Tx)(nil),
		(*InvData_Block)(nil),
	}
}

func _InvData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InvData)
	// value
	switch x := m.Value.(type) {
	case *InvData_Tx:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tx); err != nil {
			return err
		}
	case *InvData_Block:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InvData.Value has unexpected type %T", x)
	}
	return nil
}

func _InvData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InvData)
	switch tag {
	case 1: // value.tx
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction)
		err := b.DecodeMessage(msg)
		m.Value = &InvData_Tx{msg}
		return true, err
	case 2: // value.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Block)
		err := b.DecodeMessage(msg)
		m.Value = &InvData_Block{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InvData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InvData)
	// value
	switch x := m.Value.(type) {
	case *InvData_Tx:
		s := proto.Size(x.Tx)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InvData_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type InvDatas struct {
	Items []*InvData `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *InvDatas) Reset()                    { *m = InvDatas{} }
func (m *InvDatas) String() string            { return proto.CompactTextString(m) }
func (*InvDatas) ProtoMessage()               {}
func (*InvDatas) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *InvDatas) GetItems() []*InvData {
	if m != nil {
		return m.Items
	}
	return nil
}

type Genesis struct {
	Isrun bool `protobuf:"varint,1,opt,name=isrun" json:"isrun,omitempty"`
}

func (m *Genesis) Reset()                    { *m = Genesis{} }
func (m *Genesis) String() string            { return proto.CompactTextString(m) }
func (*Genesis) ProtoMessage()               {}
func (*Genesis) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *Genesis) GetIsrun() bool {
	if m != nil {
		return m.Isrun
	}
	return false
}

func init() {
	proto.RegisterType((*Header)(nil), "types.Header")
	proto.RegisterType((*Block)(nil), "types.Block")
	proto.RegisterType((*Transaction)(nil), "types.Transaction")
	proto.RegisterType((*Signature)(nil), "types.Signature")
	proto.RegisterType((*ChainStatus)(nil), "types.ChainStatus")
	proto.RegisterType((*RequestHash)(nil), "types.RequestHash")
	proto.RegisterType((*ReqAddr)(nil), "types.ReqAddr")
	proto.RegisterType((*ReqHashes)(nil), "types.ReqHashes")
	proto.RegisterType((*ReplyHash)(nil), "types.ReplyHash")
	proto.RegisterType((*ReplyTxInfo)(nil), "types.ReplyTxInfo")
	proto.RegisterType((*MerkleProof)(nil), "types.MerkleProof")
	proto.RegisterType((*RequestBlocks)(nil), "types.RequestBlocks")
	proto.RegisterType((*BlockDetails)(nil), "types.BlockDetails")
	proto.RegisterType((*Reply)(nil), "types.Reply")
	proto.RegisterType((*ReplyBlockHeight)(nil), "types.ReplyBlockHeight")
	proto.RegisterType((*RequestTxList)(nil), "types.RequestTxList")
	proto.RegisterType((*ReplyTxList)(nil), "types.ReplyTxList")
	proto.RegisterType((*TxHashList)(nil), "types.TxHashList")
	proto.RegisterType((*TxResult)(nil), "types.TxResult")
	proto.RegisterType((*Headers)(nil), "types.Headers")
	proto.RegisterType((*MempoolSize)(nil), "types.MempoolSize")
	proto.RegisterType((*StoreSet)(nil), "types.StoreSet")
	proto.RegisterType((*StoreGet)(nil), "types.StoreGet")
	proto.RegisterType((*StoreReplyValue)(nil), "types.StoreReplyValue")
	proto.RegisterType((*KeyValue)(nil), "types.KeyValue")
	proto.RegisterType((*ReceiptLog)(nil), "types.ReceiptLog")
	proto.RegisterType((*Receipt)(nil), "types.Receipt")
	proto.RegisterType((*ReceiptData)(nil), "types.ReceiptData")
	proto.RegisterType((*BlockDetail)(nil), "types.BlockDetail")
	proto.RegisterType((*Receipts)(nil), "types.Receipts")
	proto.RegisterType((*ExecTxList)(nil), "types.ExecTxList")
	proto.RegisterType((*Account)(nil), "types.Account")
	proto.RegisterType((*WalletAccount)(nil), "types.WalletAccount")
	proto.RegisterType((*ReceiptBalance)(nil), "types.ReceiptBalance")
	proto.RegisterType((*Peer)(nil), "types.Peer")
	proto.RegisterType((*PeerList)(nil), "types.PeerList")
	proto.RegisterType((*LeafNode)(nil), "types.LeafNode")
	proto.RegisterType((*InnerNode)(nil), "types.InnerNode")
	proto.RegisterType((*StoreNode)(nil), "types.StoreNode")
	proto.RegisterType((*MAVLProof)(nil), "types.MAVLProof")
	proto.RegisterType((*CoinsAction)(nil), "types.CoinsAction")
	proto.RegisterType((*CoinsGenesis)(nil), "types.CoinsGenesis")
	proto.RegisterType((*CoinsTransfer)(nil), "types.CoinsTransfer")
	proto.RegisterType((*InvData)(nil), "types.InvData")
	proto.RegisterType((*InvDatas)(nil), "types.InvDatas")
	proto.RegisterType((*Genesis)(nil), "types.Genesis")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Grpcservice service

type GrpcserviceClient interface {
	SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error)
	QueryTransaction(ctx context.Context, in *RequestHash, opts ...grpc.CallOption) (*Reply, error)
	GetBlocks(ctx context.Context, in *RequestBlocks, opts ...grpc.CallOption) (*Reply, error)
}

type grpcserviceClient struct {
	cc *grpc.ClientConn
}

func NewGrpcserviceClient(cc *grpc.ClientConn) GrpcserviceClient {
	return &grpcserviceClient{cc}
}

func (c *grpcserviceClient) SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/SendTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) QueryTransaction(ctx context.Context, in *RequestHash, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/QueryTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcserviceClient) GetBlocks(ctx context.Context, in *RequestBlocks, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/types.grpcservice/GetBlocks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Grpcservice service

type GrpcserviceServer interface {
	SendTransaction(context.Context, *Transaction) (*Reply, error)
	QueryTransaction(context.Context, *RequestHash) (*Reply, error)
	GetBlocks(context.Context, *RequestBlocks) (*Reply, error)
}

func RegisterGrpcserviceServer(s *grpc.Server, srv GrpcserviceServer) {
	s.RegisterService(&_Grpcservice_serviceDesc, srv)
}

func _Grpcservice_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).SendTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_QueryTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).QueryTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/QueryTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).QueryTransaction(ctx, req.(*RequestHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpcservice_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcserviceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.grpcservice/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcserviceServer).GetBlocks(ctx, req.(*RequestBlocks))
	}
	return interceptor(ctx, in, info, handler)
}

var _Grpcservice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.grpcservice",
	HandlerType: (*GrpcserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTransaction",
			Handler:    _Grpcservice_SendTransaction_Handler,
		},
		{
			MethodName: "QueryTransaction",
			Handler:    _Grpcservice_QueryTransaction_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _Grpcservice_GetBlocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

func init() { proto.RegisterFile("types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0xcf, 0x6e, 0xdb, 0x46,
	0x13, 0x37, 0x45, 0xc9, 0x92, 0x86, 0xb2, 0xe3, 0x6f, 0xbf, 0xa0, 0x10, 0x82, 0xb6, 0x71, 0x36,
	0x0e, 0xe0, 0x06, 0x88, 0x9b, 0x2a, 0x6d, 0xd0, 0x43, 0xd1, 0xc2, 0x49, 0x0a, 0xdb, 0x88, 0xd3,
	0x24, 0x6b, 0xc3, 0xbd, 0x15, 0x58, 0x53, 0x23, 0x99, 0x30, 0x45, 0xd2, 0xdc, 0x95, 0x21, 0xe5,
	0x15, 0x7a, 0xeb, 0xad, 0x2f, 0xd1, 0x3e, 0x4c, 0x5f, 0xa8, 0xd8, 0xd9, 0x25, 0x45, 0xc6, 0xb2,
	0x93, 0x1c, 0x7b, 0xdb, 0x1f, 0xe7, 0xff, 0xec, 0xcc, 0xec, 0x10, 0x02, 0x3d, 0xcf, 0x50, 0xed,
	0x64, 0x79, 0xaa, 0x53, 0xd6, 0x22, 0xc0, 0xff, 0xf2, 0x60, 0x75, 0x1f, 0xe5, 0x10, 0x73, 0xd6,
	0x87, 0xf6, 0x25, 0xe6, 0x2a, 0x4a, 0x93, 0xbe, 0xb7, 0xe9, 0x6d, 0xfb, 0xa2, 0x80, 0xec, 0x4b,
	0x80, 0x4c, 0xe6, 0x98, 0xe8, 0x7d, 0xa9, 0xce, 0xfa, 0x8d, 0x4d, 0x6f, 0xbb, 0x27, 0x2a, 0x5f,
	0xd8, 0x67, 0xb0, 0xaa, 0x67, 0x44, 0xf3, 0x89, 0xe6, 0x10, 0xfb, 0x1c, 0xba, 0x4a, 0x4b, 0x8d,
	0x44, 0x6a, 0x12, 0x69, 0xf1, 0xc1, 0x48, 0x9d, 0x61, 0x34, 0x3e, 0xd3, 0xfd, 0x16, 0x99, 0x73,
	0xc8, 0x48, 0x9d, 0xc6, 0x69, 0x78, 0x7e, 0x1c, 0x4d, 0xb0, 0xbf, 0x4a, 0xa4, 0xc5, 0x07, 0xfe,
	0x8f, 0x07, 0xad, 0x67, 0x06, 0xfd, 0x37, 0xfc, 0x65, 0x5b, 0xe0, 0xeb, 0x99, 0xea, 0xb7, 0x37,
	0xfd, 0xed, 0x60, 0xc0, 0x76, 0xec, 0x15, 0x1c, 0xe7, 0x32, 0x51, 0x32, 0xd4, 0x51, 0x9a, 0x08,
	0x43, 0xe6, 0x7f, 0x7b, 0x10, 0x54, 0x3e, 0x1a, 0x5b, 0x38, 0xc3, 0x10, 0x73, 0x0a, 0xad, 0x27,
	0x1c, 0x32, 0x31, 0x67, 0x72, 0x1e, 0xa7, 0x72, 0xe8, 0xc2, 0x2a, 0x20, 0xdb, 0x81, 0xae, 0x8a,
	0xc6, 0x89, 0xd4, 0xd3, 0x1c, 0x29, 0xac, 0x60, 0xb0, 0xe1, 0xac, 0x1d, 0x15, 0xdf, 0xc5, 0x82,
	0x85, 0x6d, 0x80, 0x3f, 0x42, 0xa4, 0x28, 0x7d, 0x61, 0x8e, 0xd6, 0x66, 0x16, 0xe5, 0x48, 0xf1,
	0xb5, 0x84, 0x43, 0xec, 0x36, 0xb4, 0x92, 0x34, 0x09, 0x6d, 0x6c, 0x2d, 0x61, 0x01, 0x7f, 0x0b,
	0xdd, 0x52, 0x2f, 0x5b, 0x87, 0x86, 0x9e, 0x93, 0xab, 0x2d, 0xd1, 0xd0, 0x73, 0xa3, 0x2a, 0x9b,
	0x9e, 0x9e, 0xe3, 0xdc, 0x79, 0xe9, 0x10, 0x25, 0xb8, 0xe6, 0x64, 0xaf, 0xe2, 0x12, 0x9f, 0x43,
	0xf0, 0xfc, 0x4c, 0x46, 0xc9, 0x91, 0x96, 0x7a, 0xaa, 0xd8, 0x16, 0xac, 0x85, 0xd3, 0x9c, 0x2e,
	0xcd, 0xa6, 0xdd, 0xde, 0x72, 0xfd, 0x23, 0xdb, 0x84, 0x60, 0x82, 0x93, 0x2c, 0x4d, 0xe3, 0xa3,
	0xe8, 0x1d, 0x92, 0x3d, 0x5f, 0x54, 0x3f, 0x31, 0x0e, 0xbd, 0x89, 0x1a, 0xbf, 0x9d, 0xe2, 0x14,
	0x89, 0xc5, 0x27, 0x96, 0xda, 0x37, 0x7e, 0x0f, 0x02, 0x81, 0x17, 0x53, 0x54, 0xb6, 0x40, 0x18,
	0x34, 0xcf, 0x4c, 0x0d, 0xd8, 0xe4, 0xd3, 0x99, 0x7f, 0x01, 0x6d, 0x81, 0x17, 0xbb, 0xc3, 0x61,
	0x6e, 0xc8, 0x72, 0x38, 0xb4, 0x77, 0xd3, 0x15, 0x74, 0xe6, 0xf7, 0xa1, 0x2b, 0xf0, 0xc2, 0x48,
	0xa3, 0xa2, 0x52, 0xa1, 0x53, 0xdf, 0xdb, 0xf4, 0x4d, 0xfc, 0x16, 0xf1, 0xbb, 0x86, 0x29, 0x8b,
	0xe7, 0xd7, 0x1a, 0x79, 0x6d, 0xfc, 0xc8, 0xe2, 0xf9, 0xf1, 0xec, 0x20, 0x19, 0xa5, 0xcb, 0x58,
	0x2a, 0x65, 0xd8, 0xa8, 0x95, 0xe1, 0x6d, 0x68, 0x45, 0xc9, 0x10, 0x67, 0x2e, 0x3e, 0x0b, 0xf8,
	0x7d, 0x08, 0x5e, 0x61, 0x7e, 0x1e, 0xe3, 0x9b, 0x3c, 0x4d, 0x47, 0x86, 0xc9, 0x28, 0x29, 0xfc,
	0xb2, 0x80, 0x1f, 0xc1, 0x9a, 0x8b, 0x9e, 0x3a, 0x4b, 0x19, 0x36, 0xa5, 0x65, 0x5e, 0xa4, 0xdc,
	0x02, 0x53, 0x32, 0x98, 0x0c, 0x9d, 0x59, 0x73, 0x64, 0x77, 0xa0, 0x73, 0xa0, 0x86, 0xa8, 0x65,
	0x14, 0x93, 0xd9, 0x8e, 0x28, 0x31, 0xff, 0x1e, 0x7a, 0xa4, 0xed, 0x05, 0x41, 0xc5, 0xb6, 0xa1,
	0x15, 0x69, 0x9c, 0x58, 0xd3, 0x8b, 0x56, 0xa8, 0xf0, 0x08, 0xcb, 0xc0, 0x1f, 0x41, 0x8b, 0x92,
	0x60, 0xc2, 0x8f, 0xd4, 0xeb, 0x73, 0xf2, 0xa2, 0x23, 0xe8, 0x6c, 0x9c, 0x98, 0xa8, 0xb1, 0xab,
	0x2b, 0x73, 0xe4, 0x0f, 0x61, 0x83, 0xd8, 0x49, 0x93, 0xab, 0x8a, 0x45, 0x92, 0xbc, 0x6a, 0x92,
	0xf8, 0x83, 0x32, 0xd2, 0xe3, 0xd9, 0x61, 0xa4, 0x28, 0x6b, 0x61, 0x3a, 0x4d, 0xca, 0x48, 0x09,
	0xf0, 0x27, 0xe5, 0x35, 0x10, 0x93, 0xeb, 0x61, 0xef, 0xe6, 0x1e, 0xde, 0x02, 0x38, 0xa6, 0x39,
	0x42, 0x32, 0xd7, 0x95, 0xc0, 0x1f, 0x1e, 0x74, 0x8e, 0x67, 0x02, 0xd5, 0x34, 0xbe, 0xd6, 0xcd,
	0xc5, 0x5d, 0x36, 0x6c, 0xcb, 0x11, 0x60, 0x1c, 0x1a, 0x7a, 0xe6, 0x7a, 0x7b, 0x99, 0x17, 0x0d,
	0x3d, 0x63, 0xdf, 0x42, 0x90, 0x63, 0x88, 0x51, 0xa6, 0x87, 0x52, 0xdb, 0xf6, 0x5e, 0x30, 0x0b,
	0x4b, 0x79, 0x21, 0xb5, 0x14, 0x55, 0x36, 0xbe, 0x03, 0x6d, 0xfb, 0x08, 0x28, 0x76, 0xbf, 0x7e,
	0x4d, 0x6b, 0x4e, 0xd4, 0x92, 0x8b, 0x1b, 0xba, 0x67, 0xaa, 0x6a, 0xd1, 0x61, 0x0c, 0x9a, 0xca,
	0x74, 0x96, 0x0d, 0x82, 0xce, 0xfc, 0x00, 0x3a, 0x47, 0x3a, 0xcd, 0xf1, 0x08, 0x75, 0x7d, 0xae,
	0x7a, 0xef, 0xcf, 0xd5, 0xbb, 0xd0, 0x78, 0x79, 0xd2, 0x6f, 0x90, 0xb9, 0x5b, 0xce, 0xdc, 0x4b,
	0x9c, 0x9f, 0xc8, 0x78, 0x8a, 0xa2, 0xf1, 0xf2, 0x84, 0xff, 0xe0, 0x54, 0xed, 0x7d, 0x50, 0x15,
	0x83, 0xe6, 0x39, 0xce, 0x15, 0x29, 0xeb, 0x09, 0x3a, 0xf3, 0xaf, 0xe0, 0x16, 0x49, 0xd3, 0x85,
	0x92, 0x52, 0x93, 0xf6, 0x4b, 0x73, 0x28, 0x18, 0x1d, 0xe2, 0x03, 0xe8, 0x14, 0x86, 0x4d, 0x9d,
	0x99, 0xf9, 0x65, 0x4d, 0x98, 0xa3, 0xb9, 0x14, 0xe2, 0x73, 0xb5, 0x67, 0x01, 0xdf, 0x01, 0x70,
	0x69, 0x3d, 0x4c, 0xc7, 0x57, 0x06, 0xe1, 0x06, 0xf8, 0x71, 0x5a, 0x56, 0x6b, 0x9c, 0x8e, 0xb9,
	0x34, 0x63, 0x84, 0xf8, 0xaf, 0x30, 0x7f, 0x28, 0x11, 0xec, 0x01, 0x34, 0xe3, 0x74, 0xac, 0xfa,
	0x3e, 0xb1, 0xfc, 0xaf, 0x7e, 0xab, 0x87, 0xe9, 0x58, 0x10, 0x99, 0xbf, 0x30, 0xd5, 0x5b, 0xde,
	0xf4, 0x15, 0x33, 0x1f, 0xa9, 0x45, 0x42, 0x50, 0xe9, 0x4d, 0xc6, 0xa1, 0x45, 0x8f, 0x1a, 0x29,
	0x0a, 0x06, 0xbd, 0x6a, 0xfb, 0x0a, 0x4b, 0x62, 0x3b, 0xd0, 0x71, 0x55, 0xa5, 0x5c, 0x18, 0xcb,
	0x2a, 0xaf, 0xe4, 0xe1, 0x4f, 0xa1, 0xe3, 0x08, 0x8a, 0x3d, 0xac, 0xc8, 0xda, 0xd2, 0x5b, 0xaf,
	0xcb, 0x56, 0xe4, 0xde, 0x00, 0xfc, 0x3c, 0xc3, 0xd0, 0x75, 0xe7, 0xcd, 0x25, 0xe1, 0x7a, 0xb7,
	0x71, 0x73, 0xef, 0x9e, 0x43, 0x7b, 0x37, 0xa4, 0xde, 0x37, 0x33, 0xcd, 0xbe, 0x30, 0x61, 0x91,
	0xb4, 0x12, 0x9b, 0xe7, 0xf7, 0x54, 0xc6, 0xd2, 0x3c, 0x86, 0x76, 0x0a, 0x16, 0xd0, 0x94, 0xd4,
	0x28, 0x4f, 0xdf, 0x61, 0xe2, 0xc6, 0xaf, 0x43, 0xe5, 0x53, 0xd1, 0xac, 0x3c, 0x15, 0x7b, 0xb0,
	0xf6, 0xab, 0x8c, 0x63, 0xd4, 0x85, 0xc9, 0x4d, 0xf0, 0x65, 0x18, 0xba, 0xcc, 0x16, 0x61, 0x3b,
	0xa2, 0x30, 0x24, 0x53, 0x7b, 0xb1, 0x3c, 0xc5, 0x98, 0xcc, 0x76, 0x85, 0x05, 0x5c, 0xc0, 0xba,
	0x4b, 0xce, 0x33, 0xe7, 0x06, 0x83, 0x66, 0x96, 0xe3, 0x65, 0xd1, 0x89, 0xe6, 0x6c, 0x9c, 0x76,
	0x4f, 0x66, 0xe1, 0xb4, 0x83, 0x86, 0x7b, 0x88, 0xb1, 0x76, 0x2e, 0xd3, 0x99, 0xff, 0xee, 0x41,
	0xf3, 0x0d, 0xe2, 0xd2, 0x47, 0x8e, 0xd4, 0xa7, 0xb9, 0x76, 0x63, 0x89, 0xce, 0xe6, 0x5b, 0x22,
	0x27, 0xf6, 0x59, 0xed, 0x0a, 0x3a, 0xbf, 0xff, 0x28, 0x37, 0x89, 0xbd, 0xf6, 0x28, 0x3f, 0x30,
	0x93, 0xcf, 0x8c, 0x14, 0x5a, 0x36, 0xae, 0xcc, 0x19, 0x47, 0xe4, 0x8f, 0xa0, 0x63, 0x9c, 0xa1,
	0x7b, 0xbe, 0x07, 0xad, 0x0c, 0x31, 0x2f, 0xca, 0x23, 0x70, 0x12, 0x86, 0x2e, 0x2c, 0x85, 0xff,
	0x06, 0x9d, 0x43, 0x94, 0xa3, 0x5f, 0xd2, 0xe1, 0x47, 0x37, 0x70, 0x65, 0x06, 0xfb, 0x76, 0xed,
	0x71, 0x33, 0xb8, 0x18, 0x6a, 0xd6, 0x79, 0x3b, 0xd4, 0x2e, 0xa0, 0x7b, 0x90, 0x24, 0x98, 0x93,
	0x81, 0x3b, 0xd0, 0x89, 0x71, 0xa4, 0x2b, 0x65, 0x57, 0x62, 0x53, 0x93, 0xb9, 0xd1, 0x52, 0x59,
	0x40, 0x17, 0x1f, 0x3e, 0xc9, 0xe4, 0x9f, 0x1e, 0x74, 0x69, 0x7e, 0x7d, 0x52, 0x50, 0x55, 0xdf,
	0xfc, 0x9b, 0x7c, 0x6b, 0x5e, 0xef, 0x5b, 0x6b, 0xa9, 0x6f, 0xab, 0x15, 0xdf, 0xa6, 0xd0, 0x7d,
	0xb5, 0x7b, 0x72, 0x68, 0x57, 0x0b, 0x32, 0x29, 0x47, 0xf5, 0x74, 0x58, 0xcc, 0x1e, 0x03, 0x44,
	0x45, 0xde, 0x8a, 0x5e, 0x2c, 0xb6, 0xd3, 0x32, 0xa1, 0xa2, 0xc2, 0x63, 0xb4, 0xe5, 0x69, 0x5a,
	0x0b, 0xa0, 0xc0, 0xa6, 0x44, 0x83, 0xe7, 0x69, 0x94, 0xa8, 0x5d, 0xbb, 0x2c, 0x0f, 0xa0, 0xa3,
	0x4d, 0x43, 0x8f, 0xdc, 0xba, 0x1c, 0x0c, 0x6e, 0x3b, 0xdd, 0xc4, 0x75, 0xec, 0x68, 0xfb, 0x2b,
	0xa2, 0xe4, 0x63, 0x5f, 0x43, 0x7b, 0x8c, 0x09, 0xaa, 0x48, 0x51, 0xe2, 0x82, 0xc1, 0xff, 0xab,
	0x22, 0x7b, 0x96, 0xb4, 0xbf, 0x22, 0x0a, 0x2e, 0x37, 0x45, 0xfd, 0x62, 0x8a, 0x3e, 0x6b, 0xbb,
	0xbc, 0xf3, 0x1f, 0xa1, 0x57, 0x95, 0xa1, 0x9f, 0x8b, 0xb4, 0xd2, 0x39, 0x0e, 0x99, 0xef, 0x72,
	0x42, 0xab, 0x86, 0xdb, 0xdb, 0x2c, 0xe2, 0x3f, 0xc1, 0x5a, 0xcd, 0xcd, 0x4f, 0x56, 0x90, 0x40,
	0xfb, 0x20, 0xb9, 0xa4, 0x51, 0xbf, 0x45, 0x1b, 0x82, 0x77, 0xdd, 0x86, 0xb0, 0xbf, 0x42, 0x3b,
	0xc2, 0x56, 0x31, 0xca, 0x1b, 0x57, 0x47, 0xf9, 0xfe, 0x4a, 0x31, 0xcc, 0xaf, 0x0d, 0xf8, 0x31,
	0x74, 0x9c, 0x3d, 0xb3, 0xa3, 0xd7, 0xb6, 0x85, 0xf5, 0xf2, 0x4e, 0x89, 0x5e, 0xac, 0x0b, 0x77,
	0xa1, 0x5d, 0x64, 0xc7, 0x6c, 0x36, 0x2a, 0x9f, 0x26, 0x6e, 0xa7, 0xb3, 0x60, 0x60, 0x7e, 0x7f,
	0xc6, 0x79, 0x16, 0x2a, 0xcc, 0x2f, 0xa3, 0x10, 0xd9, 0x77, 0x70, 0xeb, 0x08, 0x93, 0x61, 0xf5,
	0x8f, 0x68, 0x49, 0x38, 0x77, 0x7a, 0xe5, 0x0b, 0x91, 0xc5, 0x73, 0xbe, 0xc2, 0x9e, 0xc2, 0xc6,
	0xdb, 0x29, 0xe6, 0xf3, 0x65, 0x72, 0x95, 0xf5, 0xfe, 0x8a, 0xdc, 0x37, 0xd0, 0xdd, 0xc3, 0x72,
	0xf7, 0xad, 0x0b, 0xd8, 0xaf, 0xef, 0x8b, 0x9c, 0xae, 0xd2, 0x5f, 0xf4, 0x93, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xd1, 0x50, 0x4f, 0xc5, 0x54, 0x0f, 0x00, 0x00,
}
