// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wallet.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WalletTxDetail struct {
	Tx         *Transaction `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
	Receipt    *ReceiptData `protobuf:"bytes,2,opt,name=receipt" json:"receipt,omitempty"`
	Height     int64        `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Index      int64        `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
	Blocktime  int64        `protobuf:"varint,5,opt,name=blocktime" json:"blocktime,omitempty"`
	Amount     int64        `protobuf:"varint,6,opt,name=amount" json:"amount,omitempty"`
	Fromaddr   string       `protobuf:"bytes,7,opt,name=fromaddr" json:"fromaddr,omitempty"`
	Txhash     []byte       `protobuf:"bytes,8,opt,name=txhash,proto3" json:"txhash,omitempty"`
	ActionName string       `protobuf:"bytes,9,opt,name=actionName" json:"actionName,omitempty"`
}

func (m *WalletTxDetail) Reset()                    { *m = WalletTxDetail{} }
func (m *WalletTxDetail) String() string            { return proto.CompactTextString(m) }
func (*WalletTxDetail) ProtoMessage()               {}
func (*WalletTxDetail) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *WalletTxDetail) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *WalletTxDetail) GetReceipt() *ReceiptData {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func (m *WalletTxDetail) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *WalletTxDetail) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *WalletTxDetail) GetBlocktime() int64 {
	if m != nil {
		return m.Blocktime
	}
	return 0
}

func (m *WalletTxDetail) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *WalletTxDetail) GetFromaddr() string {
	if m != nil {
		return m.Fromaddr
	}
	return ""
}

func (m *WalletTxDetail) GetTxhash() []byte {
	if m != nil {
		return m.Txhash
	}
	return nil
}

func (m *WalletTxDetail) GetActionName() string {
	if m != nil {
		return m.ActionName
	}
	return ""
}

type WalletTxDetails struct {
	TxDetails []*WalletTxDetail `protobuf:"bytes,1,rep,name=txDetails" json:"txDetails,omitempty"`
}

func (m *WalletTxDetails) Reset()                    { *m = WalletTxDetails{} }
func (m *WalletTxDetails) String() string            { return proto.CompactTextString(m) }
func (*WalletTxDetails) ProtoMessage()               {}
func (*WalletTxDetails) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *WalletTxDetails) GetTxDetails() []*WalletTxDetail {
	if m != nil {
		return m.TxDetails
	}
	return nil
}

type WalletAccountStore struct {
	Privkey   string `protobuf:"bytes,1,opt,name=privkey" json:"privkey,omitempty"`
	Label     string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Addr      string `protobuf:"bytes,3,opt,name=addr" json:"addr,omitempty"`
	TimeStamp string `protobuf:"bytes,4,opt,name=timeStamp" json:"timeStamp,omitempty"`
}

func (m *WalletAccountStore) Reset()                    { *m = WalletAccountStore{} }
func (m *WalletAccountStore) String() string            { return proto.CompactTextString(m) }
func (*WalletAccountStore) ProtoMessage()               {}
func (*WalletAccountStore) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *WalletAccountStore) GetPrivkey() string {
	if m != nil {
		return m.Privkey
	}
	return ""
}

func (m *WalletAccountStore) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *WalletAccountStore) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *WalletAccountStore) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

type WalletPwHash struct {
	PwHash  []byte `protobuf:"bytes,1,opt,name=pwHash,proto3" json:"pwHash,omitempty"`
	Randstr string `protobuf:"bytes,2,opt,name=randstr" json:"randstr,omitempty"`
}

func (m *WalletPwHash) Reset()                    { *m = WalletPwHash{} }
func (m *WalletPwHash) String() string            { return proto.CompactTextString(m) }
func (*WalletPwHash) ProtoMessage()               {}
func (*WalletPwHash) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *WalletPwHash) GetPwHash() []byte {
	if m != nil {
		return m.PwHash
	}
	return nil
}

func (m *WalletPwHash) GetRandstr() string {
	if m != nil {
		return m.Randstr
	}
	return ""
}

type WalletStatus struct {
	IsLock       bool `protobuf:"varint,1,opt,name=isLock" json:"isLock,omitempty"`
	IsAutoMining bool `protobuf:"varint,2,opt,name=isAutoMining" json:"isAutoMining,omitempty"`
	HasSeed      bool `protobuf:"varint,3,opt,name=hasSeed" json:"hasSeed,omitempty"`
}

func (m *WalletStatus) Reset()                    { *m = WalletStatus{} }
func (m *WalletStatus) String() string            { return proto.CompactTextString(m) }
func (*WalletStatus) ProtoMessage()               {}
func (*WalletStatus) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

func (m *WalletStatus) GetIsLock() bool {
	if m != nil {
		return m.IsLock
	}
	return false
}

func (m *WalletStatus) GetIsAutoMining() bool {
	if m != nil {
		return m.IsAutoMining
	}
	return false
}

func (m *WalletStatus) GetHasSeed() bool {
	if m != nil {
		return m.HasSeed
	}
	return false
}

type WalletAccounts struct {
	Wallets []*WalletAccount `protobuf:"bytes,1,rep,name=wallets" json:"wallets,omitempty"`
}

func (m *WalletAccounts) Reset()                    { *m = WalletAccounts{} }
func (m *WalletAccounts) String() string            { return proto.CompactTextString(m) }
func (*WalletAccounts) ProtoMessage()               {}
func (*WalletAccounts) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{5} }

func (m *WalletAccounts) GetWallets() []*WalletAccount {
	if m != nil {
		return m.Wallets
	}
	return nil
}

type WalletAccount struct {
	Acc   *Account `protobuf:"bytes,1,opt,name=acc" json:"acc,omitempty"`
	Label string   `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
}

func (m *WalletAccount) Reset()                    { *m = WalletAccount{} }
func (m *WalletAccount) String() string            { return proto.CompactTextString(m) }
func (*WalletAccount) ProtoMessage()               {}
func (*WalletAccount) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{6} }

func (m *WalletAccount) GetAcc() *Account {
	if m != nil {
		return m.Acc
	}
	return nil
}

func (m *WalletAccount) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type WalletUnLock struct {
	Passwd  string `protobuf:"bytes,1,opt,name=passwd" json:"passwd,omitempty"`
	Timeout int64  `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *WalletUnLock) Reset()                    { *m = WalletUnLock{} }
func (m *WalletUnLock) String() string            { return proto.CompactTextString(m) }
func (*WalletUnLock) ProtoMessage()               {}
func (*WalletUnLock) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{7} }

func (m *WalletUnLock) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *WalletUnLock) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type GenSeedLang struct {
	Lang int32 `protobuf:"varint,1,opt,name=lang" json:"lang,omitempty"`
}

func (m *GenSeedLang) Reset()                    { *m = GenSeedLang{} }
func (m *GenSeedLang) String() string            { return proto.CompactTextString(m) }
func (*GenSeedLang) ProtoMessage()               {}
func (*GenSeedLang) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{8} }

func (m *GenSeedLang) GetLang() int32 {
	if m != nil {
		return m.Lang
	}
	return 0
}

type GetSeedByPw struct {
	Passwd string `protobuf:"bytes,1,opt,name=passwd" json:"passwd,omitempty"`
}

func (m *GetSeedByPw) Reset()                    { *m = GetSeedByPw{} }
func (m *GetSeedByPw) String() string            { return proto.CompactTextString(m) }
func (*GetSeedByPw) ProtoMessage()               {}
func (*GetSeedByPw) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{9} }

func (m *GetSeedByPw) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

type SaveSeedByPw struct {
	Seed   string `protobuf:"bytes,1,opt,name=seed" json:"seed,omitempty"`
	Passwd string `protobuf:"bytes,2,opt,name=passwd" json:"passwd,omitempty"`
}

func (m *SaveSeedByPw) Reset()                    { *m = SaveSeedByPw{} }
func (m *SaveSeedByPw) String() string            { return proto.CompactTextString(m) }
func (*SaveSeedByPw) ProtoMessage()               {}
func (*SaveSeedByPw) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{10} }

func (m *SaveSeedByPw) GetSeed() string {
	if m != nil {
		return m.Seed
	}
	return ""
}

func (m *SaveSeedByPw) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

type ReplySeed struct {
	Seed string `protobuf:"bytes,1,opt,name=seed" json:"seed,omitempty"`
}

func (m *ReplySeed) Reset()                    { *m = ReplySeed{} }
func (m *ReplySeed) String() string            { return proto.CompactTextString(m) }
func (*ReplySeed) ProtoMessage()               {}
func (*ReplySeed) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{11} }

func (m *ReplySeed) GetSeed() string {
	if m != nil {
		return m.Seed
	}
	return ""
}

type ReqWalletSetPasswd struct {
	Oldpass string `protobuf:"bytes,1,opt,name=oldpass" json:"oldpass,omitempty"`
	Newpass string `protobuf:"bytes,2,opt,name=newpass" json:"newpass,omitempty"`
}

func (m *ReqWalletSetPasswd) Reset()                    { *m = ReqWalletSetPasswd{} }
func (m *ReqWalletSetPasswd) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletSetPasswd) ProtoMessage()               {}
func (*ReqWalletSetPasswd) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{12} }

func (m *ReqWalletSetPasswd) GetOldpass() string {
	if m != nil {
		return m.Oldpass
	}
	return ""
}

func (m *ReqWalletSetPasswd) GetNewpass() string {
	if m != nil {
		return m.Newpass
	}
	return ""
}

type ReqNewAccount struct {
	Label string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
}

func (m *ReqNewAccount) Reset()                    { *m = ReqNewAccount{} }
func (m *ReqNewAccount) String() string            { return proto.CompactTextString(m) }
func (*ReqNewAccount) ProtoMessage()               {}
func (*ReqNewAccount) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{13} }

func (m *ReqNewAccount) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type MinerFlag struct {
	Flag int32 `protobuf:"varint,1,opt,name=flag" json:"flag,omitempty"`
}

func (m *MinerFlag) Reset()                    { *m = MinerFlag{} }
func (m *MinerFlag) String() string            { return proto.CompactTextString(m) }
func (*MinerFlag) ProtoMessage()               {}
func (*MinerFlag) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{14} }

func (m *MinerFlag) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

type ReqWalletTransactionList struct {
	FromTx    []byte `protobuf:"bytes,1,opt,name=fromTx,proto3" json:"fromTx,omitempty"`
	Count     int32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Direction int32  `protobuf:"varint,3,opt,name=direction" json:"direction,omitempty"`
}

func (m *ReqWalletTransactionList) Reset()                    { *m = ReqWalletTransactionList{} }
func (m *ReqWalletTransactionList) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletTransactionList) ProtoMessage()               {}
func (*ReqWalletTransactionList) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{15} }

func (m *ReqWalletTransactionList) GetFromTx() []byte {
	if m != nil {
		return m.FromTx
	}
	return nil
}

func (m *ReqWalletTransactionList) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqWalletTransactionList) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

type ReqWalletImportPrivKey struct {
	Privkey string `protobuf:"bytes,1,opt,name=privkey" json:"privkey,omitempty"`
	Label   string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
}

func (m *ReqWalletImportPrivKey) Reset()                    { *m = ReqWalletImportPrivKey{} }
func (m *ReqWalletImportPrivKey) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletImportPrivKey) ProtoMessage()               {}
func (*ReqWalletImportPrivKey) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{16} }

func (m *ReqWalletImportPrivKey) GetPrivkey() string {
	if m != nil {
		return m.Privkey
	}
	return ""
}

func (m *ReqWalletImportPrivKey) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ReqWalletSendToAddress struct {
	From        string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To          string `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Amount      int64  `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	Note        string `protobuf:"bytes,4,opt,name=note" json:"note,omitempty"`
	Istoken     bool   `protobuf:"varint,5,opt,name=istoken" json:"istoken,omitempty"`
	TokenSymbol string `protobuf:"bytes,6,opt,name=tokenSymbol" json:"tokenSymbol,omitempty"`
}

func (m *ReqWalletSendToAddress) Reset()                    { *m = ReqWalletSendToAddress{} }
func (m *ReqWalletSendToAddress) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletSendToAddress) ProtoMessage()               {}
func (*ReqWalletSendToAddress) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{17} }

func (m *ReqWalletSendToAddress) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ReqWalletSendToAddress) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ReqWalletSendToAddress) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ReqWalletSendToAddress) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *ReqWalletSendToAddress) GetIstoken() bool {
	if m != nil {
		return m.Istoken
	}
	return false
}

func (m *ReqWalletSendToAddress) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

type ReqWalletSetFee struct {
	Amount int64 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
}

func (m *ReqWalletSetFee) Reset()                    { *m = ReqWalletSetFee{} }
func (m *ReqWalletSetFee) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletSetFee) ProtoMessage()               {}
func (*ReqWalletSetFee) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{18} }

func (m *ReqWalletSetFee) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type ReqWalletSetLabel struct {
	Addr  string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
}

func (m *ReqWalletSetLabel) Reset()                    { *m = ReqWalletSetLabel{} }
func (m *ReqWalletSetLabel) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletSetLabel) ProtoMessage()               {}
func (*ReqWalletSetLabel) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{19} }

func (m *ReqWalletSetLabel) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReqWalletSetLabel) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type ReqWalletMergeBalance struct {
	To string `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
}

func (m *ReqWalletMergeBalance) Reset()                    { *m = ReqWalletMergeBalance{} }
func (m *ReqWalletMergeBalance) String() string            { return proto.CompactTextString(m) }
func (*ReqWalletMergeBalance) ProtoMessage()               {}
func (*ReqWalletMergeBalance) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{20} }

func (m *ReqWalletMergeBalance) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type ReqStr struct {
	Reqstr string `protobuf:"bytes,1,opt,name=reqstr" json:"reqstr,omitempty"`
}

func (m *ReqStr) Reset()                    { *m = ReqStr{} }
func (m *ReqStr) String() string            { return proto.CompactTextString(m) }
func (*ReqStr) ProtoMessage()               {}
func (*ReqStr) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{21} }

func (m *ReqStr) GetReqstr() string {
	if m != nil {
		return m.Reqstr
	}
	return ""
}

type ReplyStr struct {
	Replystr string `protobuf:"bytes,1,opt,name=replystr" json:"replystr,omitempty"`
}

func (m *ReplyStr) Reset()                    { *m = ReplyStr{} }
func (m *ReplyStr) String() string            { return proto.CompactTextString(m) }
func (*ReplyStr) ProtoMessage()               {}
func (*ReplyStr) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{22} }

func (m *ReplyStr) GetReplystr() string {
	if m != nil {
		return m.Replystr
	}
	return ""
}

type ReqTokenPreCreate struct {
	CreatorAddr  string `protobuf:"bytes,1,opt,name=creator_addr,json=creatorAddr" json:"creator_addr,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Symbol       string `protobuf:"bytes,3,opt,name=symbol" json:"symbol,omitempty"`
	Introduction string `protobuf:"bytes,4,opt,name=introduction" json:"introduction,omitempty"`
	OwnerAddr    string `protobuf:"bytes,5,opt,name=owner_addr,json=ownerAddr" json:"owner_addr,omitempty"`
	Total        int64  `protobuf:"varint,6,opt,name=total" json:"total,omitempty"`
	Price        int64  `protobuf:"varint,7,opt,name=price" json:"price,omitempty"`
}

func (m *ReqTokenPreCreate) Reset()                    { *m = ReqTokenPreCreate{} }
func (m *ReqTokenPreCreate) String() string            { return proto.CompactTextString(m) }
func (*ReqTokenPreCreate) ProtoMessage()               {}
func (*ReqTokenPreCreate) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{23} }

func (m *ReqTokenPreCreate) GetCreatorAddr() string {
	if m != nil {
		return m.CreatorAddr
	}
	return ""
}

func (m *ReqTokenPreCreate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReqTokenPreCreate) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ReqTokenPreCreate) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

func (m *ReqTokenPreCreate) GetOwnerAddr() string {
	if m != nil {
		return m.OwnerAddr
	}
	return ""
}

func (m *ReqTokenPreCreate) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ReqTokenPreCreate) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type ReqTokenFinishCreate struct {
	FinisherAddr string `protobuf:"bytes,1,opt,name=finisher_addr,json=finisherAddr" json:"finisher_addr,omitempty"`
	Symbol       string `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	OwnerAddr    string `protobuf:"bytes,3,opt,name=owner_addr,json=ownerAddr" json:"owner_addr,omitempty"`
}

func (m *ReqTokenFinishCreate) Reset()                    { *m = ReqTokenFinishCreate{} }
func (m *ReqTokenFinishCreate) String() string            { return proto.CompactTextString(m) }
func (*ReqTokenFinishCreate) ProtoMessage()               {}
func (*ReqTokenFinishCreate) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{24} }

func (m *ReqTokenFinishCreate) GetFinisherAddr() string {
	if m != nil {
		return m.FinisherAddr
	}
	return ""
}

func (m *ReqTokenFinishCreate) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ReqTokenFinishCreate) GetOwnerAddr() string {
	if m != nil {
		return m.OwnerAddr
	}
	return ""
}

type ReqTokenRevokeCreate struct {
	RevokerAddr string `protobuf:"bytes,1,opt,name=revoker_addr,json=revokerAddr" json:"revoker_addr,omitempty"`
	Symbol      string `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	OwnerAddr   string `protobuf:"bytes,3,opt,name=owner_addr,json=ownerAddr" json:"owner_addr,omitempty"`
}

func (m *ReqTokenRevokeCreate) Reset()                    { *m = ReqTokenRevokeCreate{} }
func (m *ReqTokenRevokeCreate) String() string            { return proto.CompactTextString(m) }
func (*ReqTokenRevokeCreate) ProtoMessage()               {}
func (*ReqTokenRevokeCreate) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{25} }

func (m *ReqTokenRevokeCreate) GetRevokerAddr() string {
	if m != nil {
		return m.RevokerAddr
	}
	return ""
}

func (m *ReqTokenRevokeCreate) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ReqTokenRevokeCreate) GetOwnerAddr() string {
	if m != nil {
		return m.OwnerAddr
	}
	return ""
}

type ReqSellToken struct {
	Sell  *TradeForSell `protobuf:"bytes,1,opt,name=sell" json:"sell,omitempty"`
	Owner string        `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
}

func (m *ReqSellToken) Reset()                    { *m = ReqSellToken{} }
func (m *ReqSellToken) String() string            { return proto.CompactTextString(m) }
func (*ReqSellToken) ProtoMessage()               {}
func (*ReqSellToken) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{26} }

func (m *ReqSellToken) GetSell() *TradeForSell {
	if m != nil {
		return m.Sell
	}
	return nil
}

func (m *ReqSellToken) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type ReqBuyToken struct {
	Buy   *TradeForBuy `protobuf:"bytes,1,opt,name=buy" json:"buy,omitempty"`
	Buyer string       `protobuf:"bytes,2,opt,name=buyer" json:"buyer,omitempty"`
}

func (m *ReqBuyToken) Reset()                    { *m = ReqBuyToken{} }
func (m *ReqBuyToken) String() string            { return proto.CompactTextString(m) }
func (*ReqBuyToken) ProtoMessage()               {}
func (*ReqBuyToken) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{27} }

func (m *ReqBuyToken) GetBuy() *TradeForBuy {
	if m != nil {
		return m.Buy
	}
	return nil
}

func (m *ReqBuyToken) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

type ReqRevokeSell struct {
	Revoke *TradeForRevokeSell `protobuf:"bytes,1,opt,name=revoke" json:"revoke,omitempty"`
	Owner  string              `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
}

func (m *ReqRevokeSell) Reset()                    { *m = ReqRevokeSell{} }
func (m *ReqRevokeSell) String() string            { return proto.CompactTextString(m) }
func (*ReqRevokeSell) ProtoMessage()               {}
func (*ReqRevokeSell) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{28} }

func (m *ReqRevokeSell) GetRevoke() *TradeForRevokeSell {
	if m != nil {
		return m.Revoke
	}
	return nil
}

func (m *ReqRevokeSell) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type ReqModifyConfig struct {
	Key      string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Op       string `protobuf:"bytes,2,opt,name=op" json:"op,omitempty"`
	Value    string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Modifier string `protobuf:"bytes,4,opt,name=modifier" json:"modifier,omitempty"`
}

func (m *ReqModifyConfig) Reset()                    { *m = ReqModifyConfig{} }
func (m *ReqModifyConfig) String() string            { return proto.CompactTextString(m) }
func (*ReqModifyConfig) ProtoMessage()               {}
func (*ReqModifyConfig) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{29} }

func (m *ReqModifyConfig) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ReqModifyConfig) GetOp() string {
	if m != nil {
		return m.Op
	}
	return ""
}

func (m *ReqModifyConfig) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ReqModifyConfig) GetModifier() string {
	if m != nil {
		return m.Modifier
	}
	return ""
}

func init() {
	proto.RegisterType((*WalletTxDetail)(nil), "types.WalletTxDetail")
	proto.RegisterType((*WalletTxDetails)(nil), "types.WalletTxDetails")
	proto.RegisterType((*WalletAccountStore)(nil), "types.WalletAccountStore")
	proto.RegisterType((*WalletPwHash)(nil), "types.WalletPwHash")
	proto.RegisterType((*WalletStatus)(nil), "types.WalletStatus")
	proto.RegisterType((*WalletAccounts)(nil), "types.WalletAccounts")
	proto.RegisterType((*WalletAccount)(nil), "types.WalletAccount")
	proto.RegisterType((*WalletUnLock)(nil), "types.WalletUnLock")
	proto.RegisterType((*GenSeedLang)(nil), "types.GenSeedLang")
	proto.RegisterType((*GetSeedByPw)(nil), "types.GetSeedByPw")
	proto.RegisterType((*SaveSeedByPw)(nil), "types.SaveSeedByPw")
	proto.RegisterType((*ReplySeed)(nil), "types.ReplySeed")
	proto.RegisterType((*ReqWalletSetPasswd)(nil), "types.ReqWalletSetPasswd")
	proto.RegisterType((*ReqNewAccount)(nil), "types.ReqNewAccount")
	proto.RegisterType((*MinerFlag)(nil), "types.MinerFlag")
	proto.RegisterType((*ReqWalletTransactionList)(nil), "types.ReqWalletTransactionList")
	proto.RegisterType((*ReqWalletImportPrivKey)(nil), "types.ReqWalletImportPrivKey")
	proto.RegisterType((*ReqWalletSendToAddress)(nil), "types.ReqWalletSendToAddress")
	proto.RegisterType((*ReqWalletSetFee)(nil), "types.ReqWalletSetFee")
	proto.RegisterType((*ReqWalletSetLabel)(nil), "types.ReqWalletSetLabel")
	proto.RegisterType((*ReqWalletMergeBalance)(nil), "types.ReqWalletMergeBalance")
	proto.RegisterType((*ReqStr)(nil), "types.ReqStr")
	proto.RegisterType((*ReplyStr)(nil), "types.ReplyStr")
	proto.RegisterType((*ReqTokenPreCreate)(nil), "types.ReqTokenPreCreate")
	proto.RegisterType((*ReqTokenFinishCreate)(nil), "types.ReqTokenFinishCreate")
	proto.RegisterType((*ReqTokenRevokeCreate)(nil), "types.ReqTokenRevokeCreate")
	proto.RegisterType((*ReqSellToken)(nil), "types.ReqSellToken")
	proto.RegisterType((*ReqBuyToken)(nil), "types.ReqBuyToken")
	proto.RegisterType((*ReqRevokeSell)(nil), "types.ReqRevokeSell")
	proto.RegisterType((*ReqModifyConfig)(nil), "types.ReqModifyConfig")
}

func init() { proto.RegisterFile("wallet.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 1121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x5d, 0x6f, 0xdb, 0x36,
	0x17, 0x86, 0xec, 0x38, 0xb1, 0x69, 0x27, 0x6d, 0xf9, 0xa6, 0x81, 0xde, 0x60, 0x5b, 0x5d, 0x6e,
	0x5d, 0x33, 0x60, 0x08, 0xb0, 0xf6, 0x6e, 0xc0, 0x80, 0x26, 0x2d, 0xd2, 0x14, 0x4b, 0x8a, 0x80,
	0xce, 0xb0, 0xdd, 0x0d, 0xb4, 0x74, 0x6c, 0x0b, 0x91, 0x45, 0x85, 0xa2, 0xbf, 0xfe, 0xca, 0xae,
	0xf7, 0x87, 0xf6, 0x8f, 0x86, 0x73, 0x48, 0x59, 0x52, 0x97, 0x5e, 0x0c, 0xbb, 0xe3, 0x73, 0x78,
	0x3e, 0x78, 0x1e, 0x1e, 0x3e, 0x12, 0x1b, 0xac, 0x54, 0x9a, 0x82, 0x3d, 0xcd, 0x8d, 0xb6, 0x9a,
	0x77, 0xec, 0x26, 0x87, 0xe2, 0xf8, 0x89, 0x35, 0x2a, 0x2b, 0x54, 0x64, 0x13, 0x9d, 0xb9, 0x9d,
	0xe3, 0xc7, 0xe3, 0x54, 0x47, 0x77, 0xd1, 0x4c, 0x25, 0xa5, 0x65, 0x5f, 0x45, 0x91, 0x5e, 0x64,
	0x3e, 0xf4, 0xf8, 0x00, 0xd6, 0x10, 0x2d, 0xac, 0x36, 0x0e, 0x8b, 0x3f, 0x5a, 0xec, 0xe0, 0x57,
	0xca, 0x7d, 0xbb, 0x7e, 0x07, 0x56, 0x25, 0x29, 0x17, 0xac, 0x65, 0xd7, 0x61, 0x30, 0x0c, 0x4e,
	0xfa, 0xaf, 0xf8, 0x29, 0x95, 0x3a, 0xbd, 0xad, 0x2a, 0xc9, 0x96, 0x5d, 0xf3, 0xef, 0xd9, 0x9e,
	0x81, 0x08, 0x92, 0xdc, 0x86, 0xad, 0x86, 0xa3, 0x74, 0xd6, 0x77, 0xca, 0x2a, 0x59, 0xba, 0xf0,
	0x23, 0xb6, 0x3b, 0x83, 0x64, 0x3a, 0xb3, 0x61, 0x7b, 0x18, 0x9c, 0xb4, 0xa5, 0x47, 0xfc, 0x90,
	0x75, 0x92, 0x2c, 0x86, 0x75, 0xb8, 0x43, 0x66, 0x07, 0xf8, 0x17, 0xac, 0x47, 0x5d, 0xd8, 0x64,
	0x0e, 0x61, 0x87, 0x76, 0x2a, 0x03, 0xe6, 0x52, 0x73, 0x6c, 0x28, 0xdc, 0x75, 0xb9, 0x1c, 0xe2,
	0xc7, 0xac, 0x3b, 0x31, 0x7a, 0xae, 0xe2, 0xd8, 0x84, 0x7b, 0xc3, 0xe0, 0xa4, 0x27, 0xb7, 0x18,
	0x63, 0xec, 0x7a, 0xa6, 0x8a, 0x59, 0xd8, 0x1d, 0x06, 0x27, 0x03, 0xe9, 0x11, 0xff, 0x8a, 0x31,
	0xd7, 0xd3, 0x47, 0x35, 0x87, 0xb0, 0x47, 0x51, 0x35, 0x8b, 0xb8, 0x60, 0x8f, 0x9a, 0xdc, 0x14,
	0xfc, 0x35, 0xeb, 0xd9, 0x12, 0x84, 0xc1, 0xb0, 0x7d, 0xd2, 0x7f, 0xf5, 0xd4, 0xb7, 0xde, 0x74,
	0x95, 0x95, 0x9f, 0x58, 0x32, 0xee, 0x36, 0xcf, 0xdc, 0x5d, 0x8c, 0xac, 0x36, 0xc0, 0x43, 0xb6,
	0x97, 0x9b, 0x64, 0x79, 0x07, 0x1b, 0x22, 0xbb, 0x27, 0x4b, 0x88, 0xbc, 0xa4, 0x6a, 0x0c, 0x29,
	0x71, 0xdb, 0x93, 0x0e, 0x70, 0xce, 0x76, 0xa8, 0xbb, 0x36, 0x19, 0x69, 0x8d, 0x5c, 0x21, 0x2b,
	0x23, 0xab, 0xe6, 0x39, 0xb1, 0xd8, 0x93, 0x95, 0x41, 0xbc, 0x61, 0x03, 0x57, 0xf7, 0x66, 0x75,
	0x89, 0xfd, 0x1e, 0xb1, 0xdd, 0x9c, 0x56, 0x54, 0x70, 0x20, 0x3d, 0xc2, 0x93, 0x18, 0x95, 0xc5,
	0x85, 0x35, 0xbe, 0x62, 0x09, 0x45, 0x5c, 0x66, 0x18, 0x59, 0x65, 0x17, 0x05, 0x66, 0x48, 0x8a,
	0x2b, 0x1d, 0xdd, 0x51, 0x86, 0xae, 0xf4, 0x88, 0x0b, 0x36, 0x48, 0x8a, 0xb3, 0x85, 0xd5, 0xd7,
	0x49, 0x96, 0x64, 0x53, 0x4a, 0xd3, 0x95, 0x0d, 0x1b, 0x56, 0x99, 0xa9, 0x62, 0x04, 0x10, 0x53,
	0x0b, 0x5d, 0x59, 0x42, 0xf1, 0xa6, 0x9c, 0x41, 0xcf, 0x4f, 0xc1, 0x4f, 0xd9, 0x9e, 0x9b, 0xf8,
	0x92, 0xe4, 0xc3, 0x06, 0xc9, 0xde, 0x4f, 0x96, 0x4e, 0xe2, 0x3d, 0xdb, 0x6f, 0xec, 0xf0, 0x21,
	0x6b, 0xab, 0x28, 0xf2, 0x53, 0x7c, 0xe0, 0x83, 0xcb, 0x30, 0xdc, 0x7a, 0x98, 0xe4, 0x8a, 0xb2,
	0x5f, 0x32, 0x6a, 0x0c, 0x29, 0x53, 0x45, 0xb1, 0x8a, 0xfd, 0x1d, 0x79, 0x84, 0xcd, 0x20, 0xcf,
	0x7a, 0xe1, 0x1e, 0x40, 0x5b, 0x96, 0x50, 0x3c, 0x67, 0xfd, 0xf7, 0x90, 0x61, 0x5f, 0x57, 0x2a,
	0x9b, 0xe2, 0xad, 0xa5, 0x2a, 0x9b, 0x52, 0x78, 0x47, 0xd2, 0x5a, 0xbc, 0x40, 0x17, 0x8b, 0x2e,
	0xe7, 0x9b, 0x9b, 0xd5, 0xe7, 0x6a, 0x88, 0x1f, 0xd9, 0x60, 0xa4, 0x96, 0xb0, 0xf5, 0xe3, 0x6c,
	0xa7, 0x40, 0xf6, 0x9c, 0x17, 0xad, 0x6b, 0xb1, 0xad, 0x46, 0xec, 0x33, 0xd6, 0x93, 0x90, 0xa7,
	0x1b, 0x0c, 0x7e, 0x28, 0x50, 0x5c, 0x32, 0x2e, 0xe1, 0xde, 0x5f, 0x2e, 0xd8, 0x9b, 0x6d, 0x5b,
	0x3a, 0x8d, 0x31, 0x47, 0x39, 0x93, 0x1e, 0xe2, 0x4e, 0x06, 0x2b, 0xda, 0xf1, 0x33, 0xe2, 0xa1,
	0x78, 0xc1, 0xf6, 0x25, 0xdc, 0x7f, 0x84, 0x55, 0xc9, 0xfd, 0x96, 0xd9, 0xa0, 0xce, 0xec, 0x33,
	0xd6, 0xbb, 0x4e, 0x32, 0x30, 0x17, 0xa9, 0x22, 0x56, 0x26, 0xa9, 0xda, 0xb2, 0x82, 0x6b, 0x31,
	0x61, 0xe1, 0xf6, 0x44, 0x35, 0xbd, 0xb9, 0x4a, 0x0a, 0x52, 0x10, 0x7c, 0xcd, 0xb7, 0xeb, 0x72,
	0x72, 0x1d, 0xc2, 0x52, 0x54, 0x93, 0xce, 0xd4, 0x91, 0x0e, 0xe0, 0xab, 0x88, 0x13, 0x03, 0x14,
	0x4e, 0xb3, 0xd6, 0x91, 0x95, 0x41, 0x5c, 0xb2, 0xa3, 0x6d, 0x9d, 0x0f, 0xf3, 0x5c, 0x1b, 0x7b,
	0x63, 0x92, 0xe5, 0xcf, 0xb0, 0xf9, 0xb7, 0x2f, 0x52, 0xfc, 0x19, 0xd4, 0x52, 0x8d, 0x20, 0x8b,
	0x6f, 0xf5, 0x59, 0x1c, 0x1b, 0x28, 0x0a, 0x6a, 0xd0, 0xe8, 0x79, 0x49, 0x39, 0xae, 0xf9, 0x01,
	0x6b, 0x59, 0xed, 0x33, 0xb4, 0xac, 0xae, 0x49, 0x59, 0xbb, 0x21, 0x65, 0x9c, 0xed, 0x64, 0xda,
	0x82, 0x7f, 0xcf, 0xb4, 0xc6, 0xa3, 0x25, 0x85, 0xd5, 0x77, 0x90, 0x91, 0x24, 0x76, 0x65, 0x09,
	0xf9, 0x90, 0xf5, 0x69, 0x31, 0xda, 0xcc, 0xc7, 0x3a, 0x25, 0x55, 0xec, 0xc9, 0xba, 0x49, 0x7c,
	0xc7, 0x1e, 0xd5, 0xaf, 0xfa, 0x02, 0xea, 0x2a, 0x1a, 0xd4, 0x4b, 0x8b, 0x9f, 0xd8, 0x93, 0xba,
	0xeb, 0x55, 0x43, 0x78, 0x82, 0x9a, 0xf0, 0x3c, 0x4c, 0xc8, 0x4b, 0xf6, 0x74, 0x1b, 0x7e, 0x0d,
	0x66, 0x0a, 0xe7, 0x2a, 0x55, 0x59, 0x04, 0xbe, 0xf5, 0xa0, 0x6c, 0x5d, 0x0c, 0xd9, 0xae, 0x84,
	0xfb, 0x91, 0x25, 0x6d, 0x36, 0x70, 0x8f, 0xd2, 0xe3, 0x87, 0xdf, 0x21, 0xf1, 0x2d, 0xeb, 0xba,
	0x01, 0xb6, 0x06, 0xb5, 0xdd, 0xe0, 0xba, 0xf2, 0xda, 0x62, 0xf1, 0x57, 0x40, 0x47, 0xbe, 0xc5,
	0x7e, 0x6f, 0x0c, 0xbc, 0x35, 0xa0, 0x2c, 0xf0, 0xe7, 0x6c, 0x10, 0xe1, 0x4a, 0x9b, 0xdf, 0x6b,
	0x47, 0xef, 0x7b, 0x1b, 0x5e, 0x12, 0xb1, 0x8c, 0xb2, 0xdf, 0xf2, 0x2c, 0x2b, 0xf7, 0x71, 0x29,
	0x1c, 0x8d, 0x4e, 0x64, 0x3d, 0x22, 0x79, 0xcb, 0xac, 0xd1, 0xf1, 0xc2, 0xcd, 0x94, 0xbb, 0x99,
	0x86, 0x8d, 0x7f, 0xc9, 0x98, 0x5e, 0x65, 0xe0, 0x0b, 0x76, 0x9c, 0x16, 0x93, 0xe5, 0xcc, 0x13,
	0x66, 0xb5, 0x55, 0xa9, 0xff, 0x6c, 0x39, 0x80, 0xd6, 0xdc, 0x24, 0x11, 0xd0, 0x27, 0xab, 0x2d,
	0x1d, 0x10, 0x86, 0x1d, 0x96, 0x2d, 0x5d, 0x24, 0x59, 0x52, 0xcc, 0x7c, 0x57, 0x5f, 0xb3, 0xfd,
	0x09, 0x61, 0x68, 0xb4, 0x35, 0x28, 0x8d, 0x67, 0xfe, 0x63, 0xe7, 0x7b, 0x68, 0x35, 0x7a, 0x68,
	0x9e, 0xaf, 0xfd, 0xc9, 0xf9, 0x44, 0x5e, 0xd5, 0x94, 0xb0, 0xd4, 0x77, 0x35, 0x26, 0x0d, 0xe1,
	0x26, 0x93, 0xde, 0xf6, 0x5f, 0x2a, 0x5e, 0xb3, 0x01, 0xce, 0x00, 0xa4, 0x29, 0x55, 0xe5, 0x2f,
	0x51, 0xa5, 0xd2, 0xd4, 0x6b, 0xf6, 0xff, 0xaa, 0x3f, 0x8f, 0x18, 0x2e, 0xb4, 0x41, 0x3f, 0x49,
	0x0e, 0x48, 0x1a, 0x65, 0x29, 0x67, 0x8f, 0x80, 0xf8, 0xc0, 0xfa, 0x12, 0xee, 0xcf, 0x17, 0x1b,
	0x97, 0xed, 0x1b, 0xd6, 0x1e, 0x2f, 0x36, 0xff, 0xfc, 0x8d, 0xa1, 0x64, 0xe7, 0x8b, 0x8d, 0xc4,
	0x6d, 0x4c, 0x35, 0x5e, 0x6c, 0xaa, 0x54, 0x04, 0xc4, 0x6f, 0xa4, 0x68, 0x8e, 0x06, 0xac, 0xcb,
	0x7f, 0xc0, 0x21, 0x45, 0xe4, 0xf3, 0xfd, 0xff, 0x93, 0x7c, 0x95, 0xab, 0xf4, 0x8e, 0x9f, 0x39,
	0x24, 0xd0, 0x53, 0xbc, 0xd6, 0x71, 0x32, 0xd9, 0xbc, 0xd5, 0xd9, 0x24, 0x99, 0xf2, 0xc7, 0xac,
	0x5d, 0x09, 0x0e, 0x2e, 0xf1, 0xb1, 0xe8, 0xbc, 0xd4, 0x09, 0x9d, 0x63, 0xaa, 0xa5, 0x4a, 0x17,
	0xe0, 0x29, 0x74, 0x00, 0x1f, 0xc5, 0x1c, 0xf3, 0x24, 0x60, 0xfc, 0x3c, 0x6e, 0xf1, 0x78, 0x97,
	0x7e, 0xee, 0x5e, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xfc, 0xf1, 0xe5, 0x37, 0x0a, 0x00,
	0x00,
}
