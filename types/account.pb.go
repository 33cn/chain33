// Code generated by protoc-gen-go. DO NOT EDIT.
// source: account.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	account.proto
	blockchain.proto
	common.proto
	config.proto
	db.proto
	executor.proto
	executorTrade.proto
	p2p.proto
	pbft.proto
	rpc.proto
	transaction.proto
	wallet.proto

It has these top-level messages:
	Account
	ReceiptExecAccountTransfer
	ReceiptAccountTransfer
	ReqBalance
	Accounts
	ReqTokenBalance
	TotalFee
	ReqGetTotalCoins
	ReplyGetTotalCoins
	IterateRangeByStateHash
	ReqAccountTokenAssets
	TokenAsset
	ReplyAccountTokenAssets
	Header
	Block
	Blocks
	BlockPid
	BlockDetails
	Headers
	HeadersPid
	BlockOverview
	BlockDetail
	Receipts
	ReceiptCheckTxList
	ChainStatus
	ReqBlocks
	MempoolSize
	ReplyBlockHeight
	BlockBody
	IsCaughtUp
	IsNtpClockSync
	BlockChainQuery
	Reply
	ReqString
	ReplyString
	ReplyStrings
	ReqInt
	Int64
	ReqHash
	ReplyHash
	ReqNil
	ReqHashes
	ReplyHashes
	KeyValue
	Config
	Log
	MemPool
	Consensus
	Wallet
	Store
	BlockChain
	P2P
	Rpc
	Exec
	LeafNode
	InnerNode
	MAVLProof
	StoreNode
	LocalDBSet
	LocalDBList
	LocalDBGet
	LocalReplyValue
	StoreSet
	StoreSetWithSync
	StoreGet
	StoreReplyValue
	Genesis
	CoinsAction
	CoinsGenesis
	CoinsTransfer
	CoinsTransferToExec
	CoinsWithdraw
	Hashlock
	HashlockAction
	HashlockLock
	HashlockUnlock
	HashlockSend
	HashRecv
	Hashlockquery
	Ticket
	TicketAction
	TicketMiner
	TicketBind
	TicketOpen
	TicketGenesis
	TicketClose
	TicketList
	TicketInfos
	ReplyTicketList
	ReplyWalletTickets
	ReceiptTicket
	ReceiptTicketBind
	ExecTxList
	Query
	Norm
	NormAction
	NormPut
	RetrievePara
	Retrieve
	RetrieveAction
	BackupRetrieve
	PreRetrieve
	PerformRetrieve
	CancelRetrieve
	ReqRetrieveInfo
	RetrieveQuery
	TokenAction
	TokenPreCreate
	TokenFinishCreate
	TokenRevokeCreate
	Token
	ReqTokens
	ReplyTokens
	ReceiptToken
	TokenRecv
	ReplyAddrRecvForTokens
	ArrayConfig
	StringConfig
	Int32Config
	ConfigItem
	ModifyConfig
	ManageAction
	ReceiptConfig
	ReplyConfig
	Trade
	TradeForSell
	TradeForBuy
	TradeForRevokeSell
	TradeForBuyLimit
	TradeForSellMarket
	TradeForRevokeBuy
	SellOrder
	BuyLimitOrder
	ReceiptBuyBase
	ReceiptSellBase
	ReceiptTradeBuyMarket
	ReceiptTradeBuyLimit
	ReceiptTradeBuyRevoke
	ReceiptTradeSell
	ReceiptSellMarket
	ReceiptTradeRevoke
	ReqAddrTokens
	ReqTokenSellOrder
	ReqTokenBuyOrder
	ReplyBuyOrder
	ReplySellOrder
	ReplySellOrders
	ReplyBuyOrders
	ReplyTradeOrder
	ReplyTradeOrders
	P2PGetPeerInfo
	P2PPeerInfo
	P2PVersion
	P2PVerAck
	P2PPing
	P2PPong
	P2PGetAddr
	P2PAddr
	P2PAddrList
	P2PExternalInfo
	P2PGetBlocks
	P2PGetMempool
	P2PInv
	Inventory
	P2PGetData
	P2PTx
	P2PBlock
	BroadCastData
	P2PGetHeaders
	P2PHeaders
	InvData
	InvDatas
	Peer
	PeerList
	NodeNetInfo
	Operation
	Checkpoint
	Entry
	ViewChange
	Summary
	Result
	Request
	RequestClient
	RequestPrePrepare
	RequestPrepare
	RequestCommit
	RequestCheckpoint
	RequestViewChange
	RequestAck
	RequestNewView
	ClientReply
	CreateTx
	UnsignTx
	SignedTx
	Transaction
	Transactions
	Signature
	AddrOverview
	ReqAddr
	HexTx
	ReplyTxInfo
	ReqTxList
	ReplyTxList
	TxHashList
	ReplyTxInfos
	ReceiptLog
	Receipt
	ReceiptData
	TxResult
	TransactionDetail
	TransactionDetails
	ReqAddrs
	WalletTxDetail
	WalletTxDetails
	WalletAccountStore
	WalletPwHash
	WalletStatus
	WalletAccounts
	WalletAccount
	WalletUnLock
	GenSeedLang
	GetSeedByPw
	SaveSeedByPw
	ReplySeed
	ReqWalletSetPasswd
	ReqNewAccount
	MinerFlag
	ReqWalletTransactionList
	ReqWalletImportPrivKey
	ReqWalletSendToAddress
	ReqWalletSetFee
	ReqWalletSetLabel
	ReqWalletMergeBalance
	ReqStr
	ReplyStr
	ReqTokenPreCreate
	ReqTokenFinishCreate
	ReqTokenRevokeCreate
	ReqSellToken
	ReqBuyToken
	ReqRevokeSell
	ReqModifyConfig
	ReqSignRawTx
	ReplySignRawTx
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Account 的信息
type Account struct {
	// coins标识，目前只有0 一个值
	Currency int32 `protobuf:"varint,1,opt,name=currency" json:"currency,omitempty"`
	// 账户可用余额
	Balance int64 `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	// 账户冻结余额
	Frozen int64 `protobuf:"varint,3,opt,name=frozen" json:"frozen,omitempty"`
	// 账户的地址
	Addr string `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Account) GetCurrency() int32 {
	if m != nil {
		return m.Currency
	}
	return 0
}

func (m *Account) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Account) GetFrozen() int64 {
	if m != nil {
		return m.Frozen
	}
	return 0
}

func (m *Account) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

// 账户余额改变的一个交易回报（合约内）
type ReceiptExecAccountTransfer struct {
	// 合约地址
	ExecAddr string `protobuf:"bytes,1,opt,name=execAddr" json:"execAddr,omitempty"`
	// 转移前
	Prev *Account `protobuf:"bytes,2,opt,name=prev" json:"prev,omitempty"`
	// 转移后
	Current *Account `protobuf:"bytes,3,opt,name=current" json:"current,omitempty"`
}

func (m *ReceiptExecAccountTransfer) Reset()                    { *m = ReceiptExecAccountTransfer{} }
func (m *ReceiptExecAccountTransfer) String() string            { return proto.CompactTextString(m) }
func (*ReceiptExecAccountTransfer) ProtoMessage()               {}
func (*ReceiptExecAccountTransfer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReceiptExecAccountTransfer) GetExecAddr() string {
	if m != nil {
		return m.ExecAddr
	}
	return ""
}

func (m *ReceiptExecAccountTransfer) GetPrev() *Account {
	if m != nil {
		return m.Prev
	}
	return nil
}

func (m *ReceiptExecAccountTransfer) GetCurrent() *Account {
	if m != nil {
		return m.Current
	}
	return nil
}

// 账户余额改变的一个交易回报（coins内）
type ReceiptAccountTransfer struct {
	// 转移前
	Prev *Account `protobuf:"bytes,1,opt,name=prev" json:"prev,omitempty"`
	// 转移后
	Current *Account `protobuf:"bytes,2,opt,name=current" json:"current,omitempty"`
}

func (m *ReceiptAccountTransfer) Reset()                    { *m = ReceiptAccountTransfer{} }
func (m *ReceiptAccountTransfer) String() string            { return proto.CompactTextString(m) }
func (*ReceiptAccountTransfer) ProtoMessage()               {}
func (*ReceiptAccountTransfer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReceiptAccountTransfer) GetPrev() *Account {
	if m != nil {
		return m.Prev
	}
	return nil
}

func (m *ReceiptAccountTransfer) GetCurrent() *Account {
	if m != nil {
		return m.Current
	}
	return nil
}

// 查询一个地址列表在某个执行器中余额
type ReqBalance struct {
	// 地址列表
	Addresses []string `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
	// 执行器名称
	Execer    string `protobuf:"bytes,2,opt,name=execer" json:"execer,omitempty"`
	StateHash string `protobuf:"bytes,3,opt,name=stateHash" json:"stateHash,omitempty"`
}

func (m *ReqBalance) Reset()                    { *m = ReqBalance{} }
func (m *ReqBalance) String() string            { return proto.CompactTextString(m) }
func (*ReqBalance) ProtoMessage()               {}
func (*ReqBalance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReqBalance) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *ReqBalance) GetExecer() string {
	if m != nil {
		return m.Execer
	}
	return ""
}

func (m *ReqBalance) GetStateHash() string {
	if m != nil {
		return m.StateHash
	}
	return ""
}

// Account 的列表
type Accounts struct {
	Acc []*Account `protobuf:"bytes,1,rep,name=acc" json:"acc,omitempty"`
}

func (m *Accounts) Reset()                    { *m = Accounts{} }
func (m *Accounts) String() string            { return proto.CompactTextString(m) }
func (*Accounts) ProtoMessage()               {}
func (*Accounts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Accounts) GetAcc() []*Account {
	if m != nil {
		return m.Acc
	}
	return nil
}

type ReqTokenBalance struct {
	Addresses   []string `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
	TokenSymbol string   `protobuf:"bytes,2,opt,name=tokenSymbol" json:"tokenSymbol,omitempty"`
	Execer      string   `protobuf:"bytes,3,opt,name=execer" json:"execer,omitempty"`
}

func (m *ReqTokenBalance) Reset()                    { *m = ReqTokenBalance{} }
func (m *ReqTokenBalance) String() string            { return proto.CompactTextString(m) }
func (*ReqTokenBalance) ProtoMessage()               {}
func (*ReqTokenBalance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReqTokenBalance) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *ReqTokenBalance) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *ReqTokenBalance) GetExecer() string {
	if m != nil {
		return m.Execer
	}
	return ""
}

// 手续费
type TotalFee struct {
	Fee     int64 `protobuf:"varint,1,opt,name=fee" json:"fee,omitempty"`
	TxCount int64 `protobuf:"varint,2,opt,name=txCount" json:"txCount,omitempty"`
}

func (m *TotalFee) Reset()                    { *m = TotalFee{} }
func (m *TotalFee) String() string            { return proto.CompactTextString(m) }
func (*TotalFee) ProtoMessage()               {}
func (*TotalFee) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TotalFee) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *TotalFee) GetTxCount() int64 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

// 查询symbol代币总额
type ReqGetTotalCoins struct {
	Symbol    string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	StateHash []byte `protobuf:"bytes,2,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	StartKey  []byte `protobuf:"bytes,3,opt,name=startKey,proto3" json:"startKey,omitempty"`
	Count     int64  `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Execer    string `protobuf:"bytes,5,opt,name=execer" json:"execer,omitempty"`
}

func (m *ReqGetTotalCoins) Reset()                    { *m = ReqGetTotalCoins{} }
func (m *ReqGetTotalCoins) String() string            { return proto.CompactTextString(m) }
func (*ReqGetTotalCoins) ProtoMessage()               {}
func (*ReqGetTotalCoins) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ReqGetTotalCoins) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ReqGetTotalCoins) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *ReqGetTotalCoins) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *ReqGetTotalCoins) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqGetTotalCoins) GetExecer() string {
	if m != nil {
		return m.Execer
	}
	return ""
}

// 查询symbol代币总额应答
type ReplyGetTotalCoins struct {
	Count   int64  `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Num     int64  `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	Amount  int64  `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	NextKey []byte `protobuf:"bytes,4,opt,name=nextKey,proto3" json:"nextKey,omitempty"`
}

func (m *ReplyGetTotalCoins) Reset()                    { *m = ReplyGetTotalCoins{} }
func (m *ReplyGetTotalCoins) String() string            { return proto.CompactTextString(m) }
func (*ReplyGetTotalCoins) ProtoMessage()               {}
func (*ReplyGetTotalCoins) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReplyGetTotalCoins) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReplyGetTotalCoins) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *ReplyGetTotalCoins) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ReplyGetTotalCoins) GetNextKey() []byte {
	if m != nil {
		return m.NextKey
	}
	return nil
}

// 迭代查询symbol代币总额
type IterateRangeByStateHash struct {
	StateHash []byte `protobuf:"bytes,1,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Start     []byte `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End       []byte `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	Count     int64  `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (m *IterateRangeByStateHash) Reset()                    { *m = IterateRangeByStateHash{} }
func (m *IterateRangeByStateHash) String() string            { return proto.CompactTextString(m) }
func (*IterateRangeByStateHash) ProtoMessage()               {}
func (*IterateRangeByStateHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *IterateRangeByStateHash) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *IterateRangeByStateHash) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *IterateRangeByStateHash) GetEnd() []byte {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *IterateRangeByStateHash) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReqAccountTokenAssets struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Execer  string `protobuf:"bytes,2,opt,name=execer" json:"execer,omitempty"`
}

func (m *ReqAccountTokenAssets) Reset()                    { *m = ReqAccountTokenAssets{} }
func (m *ReqAccountTokenAssets) String() string            { return proto.CompactTextString(m) }
func (*ReqAccountTokenAssets) ProtoMessage()               {}
func (*ReqAccountTokenAssets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ReqAccountTokenAssets) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ReqAccountTokenAssets) GetExecer() string {
	if m != nil {
		return m.Execer
	}
	return ""
}

type TokenAsset struct {
	Symbol  string   `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Account *Account `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
}

func (m *TokenAsset) Reset()                    { *m = TokenAsset{} }
func (m *TokenAsset) String() string            { return proto.CompactTextString(m) }
func (*TokenAsset) ProtoMessage()               {}
func (*TokenAsset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *TokenAsset) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *TokenAsset) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type ReplyAccountTokenAssets struct {
	TokenAssets []*TokenAsset `protobuf:"bytes,1,rep,name=tokenAssets" json:"tokenAssets,omitempty"`
}

func (m *ReplyAccountTokenAssets) Reset()                    { *m = ReplyAccountTokenAssets{} }
func (m *ReplyAccountTokenAssets) String() string            { return proto.CompactTextString(m) }
func (*ReplyAccountTokenAssets) ProtoMessage()               {}
func (*ReplyAccountTokenAssets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ReplyAccountTokenAssets) GetTokenAssets() []*TokenAsset {
	if m != nil {
		return m.TokenAssets
	}
	return nil
}

func init() {
	proto.RegisterType((*Account)(nil), "types.Account")
	proto.RegisterType((*ReceiptExecAccountTransfer)(nil), "types.ReceiptExecAccountTransfer")
	proto.RegisterType((*ReceiptAccountTransfer)(nil), "types.ReceiptAccountTransfer")
	proto.RegisterType((*ReqBalance)(nil), "types.ReqBalance")
	proto.RegisterType((*Accounts)(nil), "types.Accounts")
	proto.RegisterType((*ReqTokenBalance)(nil), "types.ReqTokenBalance")
	proto.RegisterType((*TotalFee)(nil), "types.TotalFee")
	proto.RegisterType((*ReqGetTotalCoins)(nil), "types.ReqGetTotalCoins")
	proto.RegisterType((*ReplyGetTotalCoins)(nil), "types.ReplyGetTotalCoins")
	proto.RegisterType((*IterateRangeByStateHash)(nil), "types.IterateRangeByStateHash")
	proto.RegisterType((*ReqAccountTokenAssets)(nil), "types.ReqAccountTokenAssets")
	proto.RegisterType((*TokenAsset)(nil), "types.TokenAsset")
	proto.RegisterType((*ReplyAccountTokenAssets)(nil), "types.ReplyAccountTokenAssets")
}

func init() { proto.RegisterFile("account.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x6e, 0x1a, 0x31,
	0x10, 0xc6, 0xb5, 0x59, 0x08, 0x30, 0x49, 0x5b, 0x6a, 0xa5, 0xc9, 0x2a, 0xea, 0x61, 0xe5, 0xd3,
	0x1e, 0x2a, 0x0e, 0x8d, 0xd4, 0x7b, 0x12, 0xf5, 0x4f, 0x54, 0x29, 0x07, 0x87, 0x07, 0xa8, 0x59,
	0x86, 0x16, 0x05, 0xbc, 0x60, 0x9b, 0x8a, 0xed, 0x03, 0xf4, 0x01, 0xfa, 0xc4, 0x95, 0x67, 0x67,
	0x61, 0x49, 0x42, 0x94, 0x9b, 0x3f, 0x7b, 0x3c, 0xf3, 0x9b, 0xcf, 0xb3, 0x0b, 0xaf, 0x74, 0x9e,
	0x17, 0x2b, 0xe3, 0x07, 0x0b, 0x5b, 0xf8, 0x42, 0xb4, 0x7d, 0xb9, 0x40, 0x27, 0xef, 0xa1, 0x73,
	0x59, 0xed, 0x8b, 0x73, 0xe8, 0xe6, 0x2b, 0x6b, 0xd1, 0xe4, 0x65, 0x12, 0xa5, 0x51, 0xd6, 0x56,
	0x1b, 0x2d, 0x12, 0xe8, 0x8c, 0xf4, 0x4c, 0x9b, 0x1c, 0x93, 0x83, 0x34, 0xca, 0x62, 0x55, 0x4b,
	0x71, 0x0a, 0x87, 0x13, 0x5b, 0xfc, 0x41, 0x93, 0xc4, 0x74, 0xc0, 0x4a, 0x08, 0x68, 0xe9, 0xf1,
	0xd8, 0x26, 0xad, 0x34, 0xca, 0x7a, 0x8a, 0xd6, 0xf2, 0x6f, 0x04, 0xe7, 0x0a, 0x73, 0x9c, 0x2e,
	0xfc, 0xe7, 0x35, 0xe6, 0x5c, 0x78, 0x68, 0xb5, 0x71, 0x13, 0xb4, 0x01, 0x00, 0xc3, 0x76, 0xb8,
	0x16, 0xd1, 0xb5, 0x8d, 0x16, 0x12, 0x5a, 0x0b, 0x8b, 0xbf, 0xa9, 0xfa, 0xd1, 0xc7, 0xd7, 0x03,
	0xa2, 0x1f, 0x70, 0x06, 0x45, 0x67, 0x22, 0x83, 0x4e, 0x05, 0xec, 0x89, 0xe5, 0x71, 0x58, 0x7d,
	0x2c, 0x27, 0x70, 0xca, 0x1c, 0x0f, 0x19, 0xea, 0x3a, 0xd1, 0xcb, 0xea, 0x1c, 0x3c, 0x5f, 0xe7,
	0x07, 0x80, 0xc2, 0xe5, 0x15, 0x5b, 0xf5, 0x1e, 0x7a, 0xc1, 0x06, 0x74, 0x0e, 0x5d, 0x12, 0xa5,
	0x71, 0xd6, 0x53, 0xdb, 0x8d, 0x60, 0x64, 0xe8, 0x16, 0x2d, 0x25, 0xed, 0x29, 0x56, 0xe1, 0x96,
	0xf3, 0xda, 0xe3, 0x37, 0xed, 0x7e, 0x51, 0x5f, 0x3d, 0xb5, 0xdd, 0x90, 0x1f, 0xa0, 0xcb, 0x55,
	0x9d, 0x48, 0x21, 0xd6, 0x79, 0x4e, 0x99, 0x1f, 0x33, 0x85, 0x23, 0x39, 0x85, 0x37, 0x0a, 0x97,
	0xc3, 0xe2, 0x1e, 0xcd, 0xcb, 0xa0, 0x52, 0x38, 0xf2, 0x21, 0xfa, 0xae, 0x9c, 0x8f, 0x8a, 0x19,
	0x93, 0x35, 0xb7, 0x1a, 0xd8, 0x71, 0x13, 0x5b, 0x7e, 0x82, 0xee, 0xb0, 0xf0, 0x7a, 0xf6, 0x05,
	0x51, 0xf4, 0x21, 0x9e, 0x20, 0x92, 0xa7, 0xb1, 0x0a, 0xcb, 0x30, 0x4f, 0x7e, 0x7d, 0x1d, 0xc0,
	0xea, 0x79, 0x62, 0x29, 0xff, 0x45, 0xd0, 0x57, 0xb8, 0xfc, 0x8a, 0x9e, 0xae, 0x5f, 0x17, 0x53,
	0x43, 0xde, 0xb8, 0x8a, 0xa0, 0x9a, 0x0b, 0x56, 0xbb, 0xde, 0x84, 0x44, 0xc7, 0x0d, 0x6f, 0xc2,
	0x3c, 0x39, 0xaf, 0xad, 0xff, 0x8e, 0x25, 0xc1, 0x1d, 0xab, 0x8d, 0x16, 0x27, 0xd0, 0x26, 0x5f,
	0x68, 0x3e, 0x63, 0x55, 0x89, 0x46, 0x33, 0xed, 0x9d, 0x66, 0x0c, 0x08, 0x85, 0x8b, 0x59, 0xb9,
	0x4b, 0xb5, 0xc9, 0x11, 0x35, 0x73, 0xf4, 0x21, 0x36, 0xab, 0x39, 0xb7, 0x15, 0x96, 0x21, 0xab,
	0x9e, 0x53, 0x20, 0x7f, 0x22, 0x95, 0x0a, 0x26, 0x18, 0x5c, 0x13, 0x5e, 0x8b, 0xf0, 0x6a, 0x29,
	0x57, 0x70, 0x76, 0xe3, 0xd1, 0x6a, 0x8f, 0x4a, 0x9b, 0x9f, 0x78, 0x55, 0xde, 0x6d, 0x9a, 0xda,
	0x69, 0x39, 0x7a, 0xd8, 0xf2, 0x09, 0xb4, 0xa9, 0x45, 0x36, 0xa3, 0x12, 0x01, 0x09, 0xcd, 0x98,
	0x3d, 0x08, 0xcb, 0xa7, 0xdb, 0x97, 0x37, 0xf0, 0x4e, 0xe1, 0xb2, 0xfe, 0x24, 0xc2, 0x23, 0x5f,
	0x3a, 0x87, 0xde, 0x05, 0x52, 0x9e, 0x09, 0x7e, 0x80, 0x5a, 0xee, 0x9b, 0x5a, 0x79, 0x0b, 0xb0,
	0x4d, 0xb0, 0xf7, 0xfd, 0x32, 0xe8, 0xf0, 0x5f, 0x69, 0xdf, 0x97, 0xc4, 0xc7, 0xf2, 0x16, 0xce,
	0xe8, 0x05, 0x9e, 0x80, 0xbb, 0xe0, 0x19, 0xad, 0x24, 0x8f, 0xff, 0x5b, 0x4e, 0xb4, 0x0d, 0x54,
	0xcd, 0xa8, 0xd1, 0x21, 0xfd, 0x05, 0x2f, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x27, 0x39,
	0xf7, 0x16, 0x05, 0x00, 0x00,
}
