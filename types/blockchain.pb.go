// Code generated by protoc-gen-go.
// source: blockchain.proto
// DO NOT EDIT!

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Header struct {
	Version    int64      `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ParentHash []byte     `protobuf:"bytes,2,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	TxHash     []byte     `protobuf:"bytes,3,opt,name=txHash,proto3" json:"txHash,omitempty"`
	StateHash  []byte     `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Height     int64      `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	BlockTime  int64      `protobuf:"varint,6,opt,name=blockTime" json:"blockTime,omitempty"`
	TxCount    int64      `protobuf:"varint,9,opt,name=txCount" json:"txCount,omitempty"`
	Hash       []byte     `protobuf:"bytes,10,opt,name=hash,proto3" json:"hash,omitempty"`
	Difficulty uint32     `protobuf:"varint,11,opt,name=difficulty" json:"difficulty,omitempty"`
	Signature  *Signature `protobuf:"bytes,8,opt,name=signature" json:"signature,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Header) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Header) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *Header) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Header) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *Header) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Header) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *Header) GetTxCount() int64 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *Header) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Header) GetDifficulty() uint32 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

func (m *Header) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Block struct {
	Version    int64          `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ParentHash []byte         `protobuf:"bytes,2,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	TxHash     []byte         `protobuf:"bytes,3,opt,name=txHash,proto3" json:"txHash,omitempty"`
	StateHash  []byte         `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Height     int64          `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	BlockTime  int64          `protobuf:"varint,6,opt,name=blockTime" json:"blockTime,omitempty"`
	Difficulty uint32         `protobuf:"varint,11,opt,name=difficulty" json:"difficulty,omitempty"`
	Signature  *Signature     `protobuf:"bytes,8,opt,name=signature" json:"signature,omitempty"`
	Txs        []*Transaction `protobuf:"bytes,7,rep,name=txs" json:"txs,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Block) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Block) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *Block) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *Block) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *Block) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *Block) GetDifficulty() uint32 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

func (m *Block) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Block) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

type Blocks struct {
	Items []*Block `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Blocks) Reset()                    { *m = Blocks{} }
func (m *Blocks) String() string            { return proto.CompactTextString(m) }
func (*Blocks) ProtoMessage()               {}
func (*Blocks) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Blocks) GetItems() []*Block {
	if m != nil {
		return m.Items
	}
	return nil
}

// resp
type BlockDetails struct {
	Items []*BlockDetail `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *BlockDetails) Reset()                    { *m = BlockDetails{} }
func (m *BlockDetails) String() string            { return proto.CompactTextString(m) }
func (*BlockDetails) ProtoMessage()               {}
func (*BlockDetails) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *BlockDetails) GetItems() []*BlockDetail {
	if m != nil {
		return m.Items
	}
	return nil
}

// resp
type Headers struct {
	Items []*Header `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Headers) Reset()                    { *m = Headers{} }
func (m *Headers) String() string            { return proto.CompactTextString(m) }
func (*Headers) ProtoMessage()               {}
func (*Headers) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *Headers) GetItems() []*Header {
	if m != nil {
		return m.Items
	}
	return nil
}

type BlockOverview struct {
	Head     *Header  `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
	TxCount  int64    `protobuf:"varint,2,opt,name=txCount" json:"txCount,omitempty"`
	TxHashes [][]byte `protobuf:"bytes,3,rep,name=txHashes,proto3" json:"txHashes,omitempty"`
}

func (m *BlockOverview) Reset()                    { *m = BlockOverview{} }
func (m *BlockOverview) String() string            { return proto.CompactTextString(m) }
func (*BlockOverview) ProtoMessage()               {}
func (*BlockOverview) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *BlockOverview) GetHead() *Header {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *BlockOverview) GetTxCount() int64 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *BlockOverview) GetTxHashes() [][]byte {
	if m != nil {
		return m.TxHashes
	}
	return nil
}

type ReceiptLog struct {
	Ty  int32  `protobuf:"varint,1,opt,name=ty" json:"ty,omitempty"`
	Log []byte `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
}

func (m *ReceiptLog) Reset()                    { *m = ReceiptLog{} }
func (m *ReceiptLog) String() string            { return proto.CompactTextString(m) }
func (*ReceiptLog) ProtoMessage()               {}
func (*ReceiptLog) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ReceiptLog) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *ReceiptLog) GetLog() []byte {
	if m != nil {
		return m.Log
	}
	return nil
}

// ty = 0 -> error Receipt
// ty = 1 -> CutFee //cut fee ,bug exec not ok
// ty = 2 -> exec ok
type Receipt struct {
	Ty   int32         `protobuf:"varint,1,opt,name=ty" json:"ty,omitempty"`
	KV   []*KeyValue   `protobuf:"bytes,2,rep,name=KV" json:"KV,omitempty"`
	Logs []*ReceiptLog `protobuf:"bytes,3,rep,name=logs" json:"logs,omitempty"`
}

func (m *Receipt) Reset()                    { *m = Receipt{} }
func (m *Receipt) String() string            { return proto.CompactTextString(m) }
func (*Receipt) ProtoMessage()               {}
func (*Receipt) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *Receipt) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *Receipt) GetKV() []*KeyValue {
	if m != nil {
		return m.KV
	}
	return nil
}

func (m *Receipt) GetLogs() []*ReceiptLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

type ReceiptData struct {
	Ty   int32         `protobuf:"varint,1,opt,name=ty" json:"ty,omitempty"`
	Logs []*ReceiptLog `protobuf:"bytes,3,rep,name=logs" json:"logs,omitempty"`
}

func (m *ReceiptData) Reset()                    { *m = ReceiptData{} }
func (m *ReceiptData) String() string            { return proto.CompactTextString(m) }
func (*ReceiptData) ProtoMessage()               {}
func (*ReceiptData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ReceiptData) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *ReceiptData) GetLogs() []*ReceiptLog {
	if m != nil {
		return m.Logs
	}
	return nil
}

type BlockDetail struct {
	Block    *Block         `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Receipts []*ReceiptData `protobuf:"bytes,2,rep,name=receipts" json:"receipts,omitempty"`
}

func (m *BlockDetail) Reset()                    { *m = BlockDetail{} }
func (m *BlockDetail) String() string            { return proto.CompactTextString(m) }
func (*BlockDetail) ProtoMessage()               {}
func (*BlockDetail) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *BlockDetail) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockDetail) GetReceipts() []*ReceiptData {
	if m != nil {
		return m.Receipts
	}
	return nil
}

type Receipts struct {
	Receipts []*Receipt `protobuf:"bytes,1,rep,name=receipts" json:"receipts,omitempty"`
}

func (m *Receipts) Reset()                    { *m = Receipts{} }
func (m *Receipts) String() string            { return proto.CompactTextString(m) }
func (*Receipts) ProtoMessage()               {}
func (*Receipts) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *Receipts) GetReceipts() []*Receipt {
	if m != nil {
		return m.Receipts
	}
	return nil
}

type ReceiptCheckTxList struct {
	Errs []string `protobuf:"bytes,1,rep,name=errs" json:"errs,omitempty"`
}

func (m *ReceiptCheckTxList) Reset()                    { *m = ReceiptCheckTxList{} }
func (m *ReceiptCheckTxList) String() string            { return proto.CompactTextString(m) }
func (*ReceiptCheckTxList) ProtoMessage()               {}
func (*ReceiptCheckTxList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *ReceiptCheckTxList) GetErrs() []string {
	if m != nil {
		return m.Errs
	}
	return nil
}

type ChainStatus struct {
	CurrentHeight int64 `protobuf:"varint,1,opt,name=currentHeight" json:"currentHeight,omitempty"`
	MempoolSize   int64 `protobuf:"varint,2,opt,name=mempoolSize" json:"mempoolSize,omitempty"`
	MsgQueueSize  int64 `protobuf:"varint,3,opt,name=msgQueueSize" json:"msgQueueSize,omitempty"`
}

func (m *ChainStatus) Reset()                    { *m = ChainStatus{} }
func (m *ChainStatus) String() string            { return proto.CompactTextString(m) }
func (*ChainStatus) ProtoMessage()               {}
func (*ChainStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *ChainStatus) GetCurrentHeight() int64 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *ChainStatus) GetMempoolSize() int64 {
	if m != nil {
		return m.MempoolSize
	}
	return 0
}

func (m *ChainStatus) GetMsgQueueSize() int64 {
	if m != nil {
		return m.MsgQueueSize
	}
	return 0
}

// req
type ReqBlocks struct {
	Start    int64  `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End      int64  `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	Isdetail bool   `protobuf:"varint,3,opt,name=Isdetail" json:"Isdetail,omitempty"`
	Pid      string `protobuf:"bytes,4,opt,name=pid" json:"pid,omitempty"`
}

func (m *ReqBlocks) Reset()                    { *m = ReqBlocks{} }
func (m *ReqBlocks) String() string            { return proto.CompactTextString(m) }
func (*ReqBlocks) ProtoMessage()               {}
func (*ReqBlocks) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *ReqBlocks) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ReqBlocks) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *ReqBlocks) GetIsdetail() bool {
	if m != nil {
		return m.Isdetail
	}
	return false
}

func (m *ReqBlocks) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

type MempoolSize struct {
	Size int64 `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
}

func (m *MempoolSize) Reset()                    { *m = MempoolSize{} }
func (m *MempoolSize) String() string            { return proto.CompactTextString(m) }
func (*MempoolSize) ProtoMessage()               {}
func (*MempoolSize) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *MempoolSize) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type ReplyBlockHeight struct {
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *ReplyBlockHeight) Reset()                    { *m = ReplyBlockHeight{} }
func (m *ReplyBlockHeight) String() string            { return proto.CompactTextString(m) }
func (*ReplyBlockHeight) ProtoMessage()               {}
func (*ReplyBlockHeight) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *ReplyBlockHeight) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type TxResult struct {
	Height      int64        `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Index       int32        `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Tx          *Transaction `protobuf:"bytes,3,opt,name=tx" json:"tx,omitempty"`
	Receiptdate *ReceiptData `protobuf:"bytes,4,opt,name=receiptdate" json:"receiptdate,omitempty"`
	Blocktime   int64        `protobuf:"varint,5,opt,name=blocktime" json:"blocktime,omitempty"`
	ActionName  string       `protobuf:"bytes,6,opt,name=actionName" json:"actionName,omitempty"`
}

func (m *TxResult) Reset()                    { *m = TxResult{} }
func (m *TxResult) String() string            { return proto.CompactTextString(m) }
func (*TxResult) ProtoMessage()               {}
func (*TxResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *TxResult) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TxResult) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TxResult) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TxResult) GetReceiptdate() *ReceiptData {
	if m != nil {
		return m.Receiptdate
	}
	return nil
}

func (m *TxResult) GetBlocktime() int64 {
	if m != nil {
		return m.Blocktime
	}
	return 0
}

func (m *TxResult) GetActionName() string {
	if m != nil {
		return m.ActionName
	}
	return ""
}

type TransactionDetail struct {
	Tx         *Transaction `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
	Receipt    *ReceiptData `protobuf:"bytes,2,opt,name=receipt" json:"receipt,omitempty"`
	Proofs     [][]byte     `protobuf:"bytes,3,rep,name=proofs,proto3" json:"proofs,omitempty"`
	Height     int64        `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
	Index      int64        `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Blocktime  int64        `protobuf:"varint,6,opt,name=blocktime" json:"blocktime,omitempty"`
	Amount     int64        `protobuf:"varint,7,opt,name=amount" json:"amount,omitempty"`
	Fromaddr   string       `protobuf:"bytes,8,opt,name=fromaddr" json:"fromaddr,omitempty"`
	ActionName string       `protobuf:"bytes,9,opt,name=actionName" json:"actionName,omitempty"`
}

func (m *TransactionDetail) Reset()                    { *m = TransactionDetail{} }
func (m *TransactionDetail) String() string            { return proto.CompactTextString(m) }
func (*TransactionDetail) ProtoMessage()               {}
func (*TransactionDetail) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *TransactionDetail) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TransactionDetail) GetReceipt() *ReceiptData {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func (m *TransactionDetail) GetProofs() [][]byte {
	if m != nil {
		return m.Proofs
	}
	return nil
}

func (m *TransactionDetail) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TransactionDetail) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TransactionDetail) GetBlocktime() int64 {
	if m != nil {
		return m.Blocktime
	}
	return 0
}

func (m *TransactionDetail) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransactionDetail) GetFromaddr() string {
	if m != nil {
		return m.Fromaddr
	}
	return ""
}

func (m *TransactionDetail) GetActionName() string {
	if m != nil {
		return m.ActionName
	}
	return ""
}

type TransactionDetails struct {
	Txs []*TransactionDetail `protobuf:"bytes,1,rep,name=txs" json:"txs,omitempty"`
}

func (m *TransactionDetails) Reset()                    { *m = TransactionDetails{} }
func (m *TransactionDetails) String() string            { return proto.CompactTextString(m) }
func (*TransactionDetails) ProtoMessage()               {}
func (*TransactionDetails) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *TransactionDetails) GetTxs() []*TransactionDetail {
	if m != nil {
		return m.Txs
	}
	return nil
}

type BlockBody struct {
	Txs      []*Transaction `protobuf:"bytes,1,rep,name=txs" json:"txs,omitempty"`
	Receipts []*ReceiptData `protobuf:"bytes,2,rep,name=receipts" json:"receipts,omitempty"`
}

func (m *BlockBody) Reset()                    { *m = BlockBody{} }
func (m *BlockBody) String() string            { return proto.CompactTextString(m) }
func (*BlockBody) ProtoMessage()               {}
func (*BlockBody) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *BlockBody) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *BlockBody) GetReceipts() []*ReceiptData {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func init() {
	proto.RegisterType((*Header)(nil), "types.Header")
	proto.RegisterType((*Block)(nil), "types.Block")
	proto.RegisterType((*Blocks)(nil), "types.Blocks")
	proto.RegisterType((*BlockDetails)(nil), "types.BlockDetails")
	proto.RegisterType((*Headers)(nil), "types.Headers")
	proto.RegisterType((*BlockOverview)(nil), "types.BlockOverview")
	proto.RegisterType((*ReceiptLog)(nil), "types.ReceiptLog")
	proto.RegisterType((*Receipt)(nil), "types.Receipt")
	proto.RegisterType((*ReceiptData)(nil), "types.ReceiptData")
	proto.RegisterType((*BlockDetail)(nil), "types.BlockDetail")
	proto.RegisterType((*Receipts)(nil), "types.Receipts")
	proto.RegisterType((*ReceiptCheckTxList)(nil), "types.ReceiptCheckTxList")
	proto.RegisterType((*ChainStatus)(nil), "types.ChainStatus")
	proto.RegisterType((*ReqBlocks)(nil), "types.ReqBlocks")
	proto.RegisterType((*MempoolSize)(nil), "types.MempoolSize")
	proto.RegisterType((*ReplyBlockHeight)(nil), "types.ReplyBlockHeight")
	proto.RegisterType((*TxResult)(nil), "types.TxResult")
	proto.RegisterType((*TransactionDetail)(nil), "types.TransactionDetail")
	proto.RegisterType((*TransactionDetails)(nil), "types.TransactionDetails")
	proto.RegisterType((*BlockBody)(nil), "types.BlockBody")
}

func init() { proto.RegisterFile("blockchain.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 865 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x56, 0x4f, 0x6f, 0xe4, 0x34,
	0x14, 0x57, 0x32, 0x7f, 0xf3, 0x32, 0x5d, 0x5a, 0x0b, 0xad, 0xa2, 0x0a, 0xc1, 0xac, 0x59, 0xa4,
	0xd1, 0x6a, 0x35, 0x87, 0x82, 0x10, 0x47, 0xb4, 0xed, 0x61, 0x51, 0x17, 0x10, 0x6e, 0xd5, 0xbb,
	0x77, 0xe2, 0xce, 0x58, 0x9b, 0x8c, 0x43, 0xec, 0x94, 0x84, 0xef, 0xc2, 0x89, 0x2b, 0x1f, 0x86,
	0x8f, 0x84, 0xfc, 0xec, 0xcc, 0x24, 0x9d, 0xa1, 0x02, 0x89, 0x0b, 0x37, 0xbf, 0x7f, 0x7e, 0xbf,
	0xf7, 0xc7, 0xbf, 0x04, 0x4e, 0xdf, 0x67, 0x6a, 0xf5, 0x61, 0xb5, 0xe1, 0x72, 0xbb, 0x2c, 0x4a,
	0x65, 0x14, 0x19, 0x99, 0xa6, 0x10, 0xfa, 0xfc, 0xcc, 0x94, 0x7c, 0xab, 0xf9, 0xca, 0x48, 0xe5,
	0x2d, 0xe7, 0xb3, 0x95, 0xca, 0xf3, 0x56, 0xa2, 0x7f, 0x84, 0x30, 0x7e, 0x2b, 0x78, 0x2a, 0x4a,
	0x92, 0xc0, 0xe4, 0x41, 0x94, 0x5a, 0xaa, 0x6d, 0x12, 0xcc, 0x83, 0xc5, 0x80, 0xb5, 0x22, 0xf9,
	0x14, 0xa0, 0xe0, 0xa5, 0xd8, 0x9a, 0xb7, 0x5c, 0x6f, 0x92, 0x70, 0x1e, 0x2c, 0x66, 0xac, 0xa3,
	0x21, 0xcf, 0x61, 0x6c, 0x6a, 0xb4, 0x0d, 0xd0, 0xe6, 0x25, 0xf2, 0x09, 0x44, 0xda, 0x70, 0x23,
	0xd0, 0x34, 0x44, 0xd3, 0x5e, 0x61, 0xa3, 0x36, 0x42, 0xae, 0x37, 0x26, 0x19, 0x61, 0x3a, 0x2f,
	0xd9, 0x28, 0x2c, 0xe7, 0x56, 0xe6, 0x22, 0x19, 0xa3, 0x69, 0xaf, 0xb0, 0x28, 0x4d, 0x7d, 0xa9,
	0xaa, 0xad, 0x49, 0x22, 0x87, 0xd2, 0x8b, 0x84, 0xc0, 0x70, 0x63, 0x13, 0x01, 0x26, 0xc2, 0xb3,
	0x45, 0x9e, 0xca, 0xfb, 0x7b, 0xb9, 0xaa, 0x32, 0xd3, 0x24, 0xf1, 0x3c, 0x58, 0x9c, 0xb0, 0x8e,
	0x86, 0x2c, 0x21, 0xd2, 0x72, 0xbd, 0xe5, 0xa6, 0x2a, 0x45, 0x32, 0x9d, 0x07, 0x8b, 0xf8, 0xe2,
	0x74, 0x89, 0xad, 0x5b, 0xde, 0xb4, 0x7a, 0xb6, 0x77, 0xa1, 0xbf, 0x87, 0x30, 0x7a, 0x63, 0xb1,
	0xfc, 0x4f, 0xba, 0xf5, 0x1f, 0xd7, 0x4f, 0x5e, 0xc2, 0xc0, 0xd4, 0x3a, 0x99, 0xcc, 0x07, 0x8b,
	0xf8, 0x82, 0x78, 0xcf, 0xdb, 0xfd, 0x8e, 0x31, 0x6b, 0xa6, 0xaf, 0x61, 0x8c, 0x4d, 0xd2, 0x84,
	0xc2, 0x48, 0x1a, 0x91, 0xeb, 0x24, 0xc0, 0x88, 0x99, 0x8f, 0x40, 0x2b, 0x73, 0x26, 0xfa, 0x0d,
	0xcc, 0x50, 0xbe, 0x12, 0x86, 0xcb, 0x4c, 0x93, 0x45, 0x3f, 0x86, 0x74, 0x63, 0x9c, 0x4f, 0x1b,
	0xb9, 0x84, 0x89, 0xdb, 0x5d, 0x4d, 0x3e, 0xef, 0x07, 0x9d, 0xf8, 0x20, 0x67, 0x6e, 0xfd, 0x37,
	0x70, 0x82, 0xb7, 0xfc, 0xf8, 0x20, 0xca, 0x07, 0x29, 0x7e, 0x21, 0x2f, 0x60, 0xb8, 0x11, 0x3c,
	0xc5, 0x09, 0x1e, 0x04, 0xa1, 0xa9, 0xbb, 0x6f, 0x61, 0x7f, 0xdf, 0xce, 0x61, 0xea, 0x26, 0x27,
	0x74, 0x32, 0x98, 0x0f, 0x16, 0x33, 0xb6, 0x93, 0xe9, 0x12, 0x80, 0x89, 0x95, 0x90, 0x85, 0x79,
	0xa7, 0xd6, 0xe4, 0x19, 0x84, 0xa6, 0xc1, 0x24, 0x23, 0x16, 0x9a, 0x86, 0x9c, 0xc2, 0x20, 0x53,
	0x6b, 0xbf, 0x1a, 0xf6, 0x48, 0x39, 0x4c, 0xbc, 0xff, 0x81, 0xf3, 0x67, 0x10, 0x5e, 0xdf, 0x25,
	0x21, 0x96, 0xf5, 0x91, 0x47, 0x78, 0x2d, 0x9a, 0x3b, 0x9e, 0x55, 0x82, 0x85, 0xd7, 0x77, 0xe4,
	0x0b, 0x18, 0x66, 0x6a, 0xed, 0x30, 0xc4, 0x17, 0x67, 0xde, 0x65, 0x9f, 0x9e, 0xa1, 0x99, 0x5e,
	0x41, 0xec, 0x75, 0x57, 0xdc, 0xf0, 0x83, 0x34, 0xff, 0xf0, 0x16, 0x0e, 0x71, 0x67, 0x10, 0x76,
	0xbe, 0xb8, 0x6c, 0xbe, 0x83, 0x8f, 0xe6, 0x8b, 0x26, 0xb2, 0x84, 0x69, 0xe9, 0xae, 0xd1, 0xbe,
	0x0c, 0xd2, 0xbf, 0xdd, 0xe2, 0x61, 0x3b, 0x1f, 0xfa, 0x35, 0x4c, 0xbd, 0x41, 0x93, 0x57, 0x9d,
	0x58, 0x37, 0xd9, 0x67, 0xfd, 0xd8, 0x4e, 0xdc, 0x02, 0x88, 0x57, 0x5e, 0x6e, 0xc4, 0xea, 0xc3,
	0x6d, 0xfd, 0x4e, 0x6a, 0x64, 0x05, 0x51, 0x96, 0x2e, 0x3a, 0x62, 0x78, 0xa6, 0x0d, 0xc4, 0x97,
	0x96, 0x2b, 0x6f, 0x0c, 0x37, 0x95, 0x26, 0x2f, 0xe1, 0x64, 0x55, 0x95, 0xf8, 0x3e, 0xdd, 0x0b,
	0x73, 0x0f, 0xba, 0xaf, 0x24, 0x73, 0x88, 0x73, 0x91, 0x17, 0x4a, 0x65, 0x37, 0xf2, 0x57, 0xe1,
	0x97, 0xa1, 0xab, 0x22, 0x14, 0x66, 0xb9, 0x5e, 0xff, 0x54, 0x89, 0x4a, 0xa0, 0xcb, 0x00, 0x5d,
	0x7a, 0x3a, 0xca, 0x21, 0x62, 0xe2, 0x67, 0xff, 0x3a, 0x3e, 0x86, 0x91, 0x36, 0xbc, 0x6c, 0x13,
	0x3a, 0xc1, 0x6e, 0x87, 0xd8, 0xa6, 0x3e, 0x81, 0x3d, 0xda, 0x4d, 0xfb, 0x4e, 0xa7, 0xd8, 0x71,
	0xbc, 0x74, 0xca, 0x76, 0xb2, 0xf5, 0x2e, 0x64, 0x8a, 0x7c, 0x11, 0x31, 0x7b, 0xa4, 0x2f, 0x20,
	0xfe, 0xbe, 0x83, 0x8a, 0xc0, 0x50, 0x5b, 0x34, 0x2e, 0x07, 0x9e, 0xe9, 0x2b, 0x38, 0x65, 0xa2,
	0xc8, 0x1a, 0xc4, 0xe1, 0xeb, 0xdb, 0x13, 0x4c, 0xd0, 0x25, 0x18, 0xfa, 0x67, 0x00, 0xd3, 0xdb,
	0x9a, 0x09, 0x5d, 0x65, 0x7f, 0xeb, 0x64, 0x2b, 0x91, 0xdb, 0x54, 0xd4, 0x88, 0x7a, 0xc4, 0x9c,
	0x40, 0x28, 0x84, 0xa6, 0x46, 0xc4, 0xc7, 0xc9, 0x22, 0x34, 0x35, 0xf9, 0x0a, 0x62, 0x3f, 0xc1,
	0x94, 0x1b, 0x81, 0x75, 0x1c, 0x5f, 0x90, 0xae, 0xdb, 0x8e, 0xf5, 0x8c, 0x65, 0xbd, 0x51, 0x87,
	0xf5, 0x8c, 0x67, 0x3d, 0x97, 0xe1, 0x07, 0xee, 0x49, 0x31, 0x62, 0x1d, 0x0d, 0xfd, 0x2d, 0x84,
	0xb3, 0x0e, 0x8e, 0xdd, 0x2e, 0x5b, 0xb4, 0xc1, 0x93, 0x68, 0x5f, 0xc3, 0xc4, 0xc3, 0xc0, 0x4a,
	0x8f, 0x23, 0x6d, 0x5d, 0x6c, 0xb7, 0x8a, 0x52, 0xa9, 0xfb, 0x96, 0x1f, 0xbc, 0xd4, 0xe9, 0xe2,
	0xf0, 0x78, 0x17, 0x5d, 0x45, 0xbe, 0x8b, 0xbd, 0x5a, 0xc7, 0x8f, 0x6b, 0x7d, 0x0e, 0x63, 0x9e,
	0x23, 0x3d, 0x4d, 0xdc, 0x5d, 0x4e, 0xb2, 0x3b, 0x73, 0x5f, 0xaa, 0x9c, 0xa7, 0x69, 0x89, 0xc4,
	0x1e, 0xb1, 0x9d, 0xfc, 0xa8, 0x3f, 0xd1, 0x41, 0x7f, 0xbe, 0x05, 0x72, 0xd0, 0x1e, 0xfb, 0x16,
	0x91, 0xfb, 0xdd, 0x33, 0x4c, 0x0e, 0x1b, 0xe4, 0xb9, 0x19, 0xbf, 0x00, 0x1c, 0x22, 0xdc, 0xad,
	0x37, 0x2a, 0x6d, 0xda, 0x8f, 0x46, 0xf0, 0xe4, 0x47, 0xe3, 0xdf, 0xd2, 0xc4, 0xfb, 0x31, 0xfe,
	0xc0, 0x7c, 0xf9, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x70, 0x36, 0x2e, 0xfc, 0x08, 0x00,
	0x00,
}
