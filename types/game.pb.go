// Code generated by protoc-gen-go.
// source: game.proto
// DO NOT EDIT!

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Game struct {
	GameId string `protobuf:"bytes,1,opt,name=gameId" json:"gameId,omitempty"`
	// 0 -> 未成熟 1 -> 可挖矿 2 -> 已挖成功 3-> 已关闭
	Status int32 `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	// 创建时间
	CreateTime int64 `protobuf:"varint,3,opt,name=createTime" json:"createTime,omitempty"`
	// 挖矿时间(匹配时间)
	MatchTime int64 `protobuf:"varint,4,opt,name=matchTime" json:"matchTime,omitempty"`
	// 状态close的时间（包括cancel）
	Closetime int64 `protobuf:"varint,5,opt,name=closetime" json:"closetime,omitempty"`
	// 赌注
	Value        int64  `protobuf:"varint,6,opt,name=value" json:"value,omitempty"`
	MatchAddress string `protobuf:"bytes,7,opt,name=matchAddress" json:"matchAddress,omitempty"`
	Hash         []byte `protobuf:"bytes,8,opt,name=hash,proto3" json:"hash,omitempty"`
	HashValue    []byte `protobuf:"bytes,9,opt,name=hashValue,proto3" json:"hashValue,omitempty"`
	Secret       []byte `protobuf:"bytes,10,opt,name=secret,proto3" json:"secret,omitempty"`
	Result       int32  `protobuf:"varint,11,opt,name=result" json:"result,omitempty"`
	Guess        int32  `protobuf:"varint,12,opt,name=guess" json:"guess,omitempty"`
}

func (m *Game) Reset()                    { *m = Game{} }
func (m *Game) String() string            { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()               {}
func (*Game) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *Game) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *Game) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Game) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Game) GetMatchTime() int64 {
	if m != nil {
		return m.MatchTime
	}
	return 0
}

func (m *Game) GetClosetime() int64 {
	if m != nil {
		return m.Closetime
	}
	return 0
}

func (m *Game) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Game) GetMatchAddress() string {
	if m != nil {
		return m.MatchAddress
	}
	return ""
}

func (m *Game) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Game) GetHashValue() []byte {
	if m != nil {
		return m.HashValue
	}
	return nil
}

func (m *Game) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *Game) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *Game) GetGuess() int32 {
	if m != nil {
		return m.Guess
	}
	return 0
}

// message for execs.ticket
type GameAction struct {
	// Types that are valid to be assigned to Value:
	//	*GameAction_Open
	//	*GameAction_Cancel
	//	*GameAction_Close
	//	*GameAction_Match
	Value isGameAction_Value `protobuf_oneof:"value"`
	Ty    int32              `protobuf:"varint,10,opt,name=ty" json:"ty,omitempty"`
}

func (m *GameAction) Reset()                    { *m = GameAction{} }
func (m *GameAction) String() string            { return proto.CompactTextString(m) }
func (*GameAction) ProtoMessage()               {}
func (*GameAction) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

type isGameAction_Value interface {
	isGameAction_Value()
}

type GameAction_Open struct {
	Open *GameOpen `protobuf:"bytes,1,opt,name=open,oneof"`
}
type GameAction_Cancel struct {
	Cancel *GameCancel `protobuf:"bytes,2,opt,name=cancel,oneof"`
}
type GameAction_Close struct {
	Close *GameClose `protobuf:"bytes,3,opt,name=close,oneof"`
}
type GameAction_Match struct {
	Match *GameMatch `protobuf:"bytes,4,opt,name=match,oneof"`
}

func (*GameAction_Open) isGameAction_Value()   {}
func (*GameAction_Cancel) isGameAction_Value() {}
func (*GameAction_Close) isGameAction_Value()  {}
func (*GameAction_Match) isGameAction_Value()  {}

func (m *GameAction) GetValue() isGameAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *GameAction) GetOpen() *GameOpen {
	if x, ok := m.GetValue().(*GameAction_Open); ok {
		return x.Open
	}
	return nil
}

func (m *GameAction) GetCancel() *GameCancel {
	if x, ok := m.GetValue().(*GameAction_Cancel); ok {
		return x.Cancel
	}
	return nil
}

func (m *GameAction) GetClose() *GameClose {
	if x, ok := m.GetValue().(*GameAction_Close); ok {
		return x.Close
	}
	return nil
}

func (m *GameAction) GetMatch() *GameMatch {
	if x, ok := m.GetValue().(*GameAction_Match); ok {
		return x.Match
	}
	return nil
}

func (m *GameAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GameAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GameAction_OneofMarshaler, _GameAction_OneofUnmarshaler, _GameAction_OneofSizer, []interface{}{
		(*GameAction_Open)(nil),
		(*GameAction_Cancel)(nil),
		(*GameAction_Close)(nil),
		(*GameAction_Match)(nil),
	}
}

func _GameAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GameAction)
	// value
	switch x := m.Value.(type) {
	case *GameAction_Open:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Open); err != nil {
			return err
		}
	case *GameAction_Cancel:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cancel); err != nil {
			return err
		}
	case *GameAction_Close:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Close); err != nil {
			return err
		}
	case *GameAction_Match:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Match); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GameAction.Value has unexpected type %T", x)
	}
	return nil
}

func _GameAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GameAction)
	switch tag {
	case 1: // value.open
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GameOpen)
		err := b.DecodeMessage(msg)
		m.Value = &GameAction_Open{msg}
		return true, err
	case 2: // value.cancel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GameCancel)
		err := b.DecodeMessage(msg)
		m.Value = &GameAction_Cancel{msg}
		return true, err
	case 3: // value.close
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GameClose)
		err := b.DecodeMessage(msg)
		m.Value = &GameAction_Close{msg}
		return true, err
	case 4: // value.match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GameMatch)
		err := b.DecodeMessage(msg)
		m.Value = &GameAction_Match{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GameAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GameAction)
	// value
	switch x := m.Value.(type) {
	case *GameAction_Open:
		s := proto.Size(x.Open)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GameAction_Cancel:
		s := proto.Size(x.Cancel)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GameAction_Close:
		s := proto.Size(x.Close)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GameAction_Match:
		s := proto.Size(x.Match)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GameMatch struct {
	GameId string `protobuf:"bytes,1,opt,name=gameId" json:"gameId,omitempty"`
	Guess  int32  `protobuf:"varint,2,opt,name=guess" json:"guess,omitempty"`
}

func (m *GameMatch) Reset()                    { *m = GameMatch{} }
func (m *GameMatch) String() string            { return proto.CompactTextString(m) }
func (*GameMatch) ProtoMessage()               {}
func (*GameMatch) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *GameMatch) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *GameMatch) GetGuess() int32 {
	if m != nil {
		return m.Guess
	}
	return 0
}

type GameCancel struct {
	GameId string `protobuf:"bytes,1,opt,name=gameId" json:"gameId,omitempty"`
}

func (m *GameCancel) Reset()                    { *m = GameCancel{} }
func (m *GameCancel) String() string            { return proto.CompactTextString(m) }
func (*GameCancel) ProtoMessage()               {}
func (*GameCancel) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *GameCancel) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

type GameClose struct {
	GameId string `protobuf:"bytes,1,opt,name=gameId" json:"gameId,omitempty"`
	Secret []byte `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	Result int32  `protobuf:"varint,3,opt,name=result" json:"result,omitempty"`
}

func (m *GameClose) Reset()                    { *m = GameClose{} }
func (m *GameClose) String() string            { return proto.CompactTextString(m) }
func (*GameClose) ProtoMessage()               {}
func (*GameClose) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *GameClose) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *GameClose) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *GameClose) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type GameOpen struct {
	Value     int64  `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Hash      []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	HashValue []byte `protobuf:"bytes,3,opt,name=hashValue,proto3" json:"hashValue,omitempty"`
}

func (m *GameOpen) Reset()                    { *m = GameOpen{} }
func (m *GameOpen) String() string            { return proto.CompactTextString(m) }
func (*GameOpen) ProtoMessage()               {}
func (*GameOpen) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *GameOpen) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *GameOpen) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *GameOpen) GetHashValue() []byte {
	if m != nil {
		return m.HashValue
	}
	return nil
}

type GameList struct {
	Addr   string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Status int32  `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (m *GameList) Reset()                    { *m = GameList{} }
func (m *GameList) String() string            { return proto.CompactTextString(m) }
func (*GameList) ProtoMessage()               {}
func (*GameList) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

func (m *GameList) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *GameList) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type GameInfos struct {
	GameIds []string `protobuf:"bytes,1,rep,name=gameIds" json:"gameIds,omitempty"`
}

func (m *GameInfos) Reset()                    { *m = GameInfos{} }
func (m *GameInfos) String() string            { return proto.CompactTextString(m) }
func (*GameInfos) ProtoMessage()               {}
func (*GameInfos) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

func (m *GameInfos) GetGameIds() []string {
	if m != nil {
		return m.GameIds
	}
	return nil
}

type ReplyGameList struct {
	Games []*Game `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
}

func (m *ReplyGameList) Reset()                    { *m = ReplyGameList{} }
func (m *ReplyGameList) String() string            { return proto.CompactTextString(m) }
func (*ReplyGameList) ProtoMessage()               {}
func (*ReplyGameList) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{8} }

func (m *ReplyGameList) GetGames() []*Game {
	if m != nil {
		return m.Games
	}
	return nil
}

type ReceiptGame struct {
	GameId     string `protobuf:"bytes,1,opt,name=gameId" json:"gameId,omitempty"`
	Status     int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	PrevStatus int32  `protobuf:"varint,3,opt,name=prevStatus" json:"prevStatus,omitempty"`
	Addr       string `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
}

func (m *ReceiptGame) Reset()                    { *m = ReceiptGame{} }
func (m *ReceiptGame) String() string            { return proto.CompactTextString(m) }
func (*ReceiptGame) ProtoMessage()               {}
func (*ReceiptGame) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{9} }

func (m *ReceiptGame) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *ReceiptGame) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReceiptGame) GetPrevStatus() int32 {
	if m != nil {
		return m.PrevStatus
	}
	return 0
}

func (m *ReceiptGame) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func init() {
	proto.RegisterType((*Game)(nil), "types.Game")
	proto.RegisterType((*GameAction)(nil), "types.GameAction")
	proto.RegisterType((*GameMatch)(nil), "types.GameMatch")
	proto.RegisterType((*GameCancel)(nil), "types.GameCancel")
	proto.RegisterType((*GameClose)(nil), "types.GameClose")
	proto.RegisterType((*GameOpen)(nil), "types.GameOpen")
	proto.RegisterType((*GameList)(nil), "types.GameList")
	proto.RegisterType((*GameInfos)(nil), "types.GameInfos")
	proto.RegisterType((*ReplyGameList)(nil), "types.ReplyGameList")
	proto.RegisterType((*ReceiptGame)(nil), "types.ReceiptGame")
}

func init() { proto.RegisterFile("game.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x8b, 0xdb, 0x30,
	0x10, 0x8d, 0xbf, 0x92, 0xf5, 0x38, 0xfd, 0x12, 0xa5, 0xe8, 0x50, 0x8a, 0x2b, 0xba, 0x60, 0x28,
	0xe4, 0xe0, 0x42, 0xa1, 0xc7, 0x6d, 0x0f, 0xcd, 0x42, 0x4b, 0x41, 0x5b, 0x7a, 0x57, 0xed, 0xe9,
	0x26, 0xe0, 0xd8, 0xae, 0xa5, 0x2c, 0xe4, 0xff, 0xf5, 0xda, 0xff, 0x54, 0x34, 0x72, 0x1c, 0x6d,
	0x21, 0x3d, 0xf4, 0x14, 0xcf, 0x7b, 0x4f, 0x9a, 0x99, 0x37, 0xa3, 0x00, 0xdc, 0xaa, 0x1d, 0xae,
	0xfa, 0xa1, 0x33, 0x1d, 0x4b, 0xcc, 0xa1, 0x47, 0x2d, 0x7e, 0x85, 0x10, 0x7f, 0x54, 0x3b, 0x64,
	0xcf, 0x60, 0x6e, 0xd9, 0xeb, 0x9a, 0x07, 0x79, 0x50, 0xa4, 0x72, 0x8c, 0x2c, 0xae, 0x8d, 0x32,
	0x7b, 0xcd, 0xc3, 0x3c, 0x28, 0x12, 0x39, 0x46, 0xec, 0x05, 0x40, 0x35, 0xa0, 0x32, 0xf8, 0x75,
	0xbb, 0x43, 0x1e, 0xe5, 0x41, 0x11, 0x49, 0x0f, 0x61, 0xcf, 0x21, 0xdd, 0x29, 0x53, 0x6d, 0x88,
	0x8e, 0x89, 0x3e, 0x01, 0x96, 0xad, 0x9a, 0x4e, 0xa3, 0xb1, 0x6c, 0xe2, 0xd8, 0x09, 0x60, 0x4f,
	0x21, 0xb9, 0x53, 0xcd, 0x1e, 0xf9, 0x9c, 0x18, 0x17, 0x30, 0x01, 0x4b, 0xba, 0xe0, 0xaa, 0xae,
	0x07, 0xd4, 0x9a, 0x2f, 0xa8, 0xce, 0x7b, 0x18, 0x63, 0x10, 0x6f, 0x94, 0xde, 0xf0, 0x8b, 0x3c,
	0x28, 0x96, 0x92, 0xbe, 0x6d, 0x2e, 0xfb, 0xfb, 0x8d, 0x6e, 0x4c, 0x89, 0x38, 0x01, 0xd4, 0x1f,
	0x56, 0x03, 0x1a, 0x0e, 0x44, 0x8d, 0x91, 0xc5, 0x07, 0xd4, 0xfb, 0xc6, 0xf0, 0xcc, 0xf5, 0xed,
	0x22, 0x5b, 0xdb, 0xed, 0xde, 0xa6, 0x5f, 0x12, 0xec, 0x02, 0xf1, 0x3b, 0x00, 0xb0, 0x36, 0x5e,
	0x55, 0x66, 0xdb, 0xb5, 0xec, 0x12, 0xe2, 0xae, 0xc7, 0x96, 0xac, 0xcc, 0xca, 0x47, 0x2b, 0xf2,
	0x7a, 0x65, 0x05, 0x5f, 0x7a, 0x6c, 0xd7, 0x33, 0x49, 0x34, 0x7b, 0x0d, 0xf3, 0x4a, 0xb5, 0x15,
	0x36, 0xe4, 0x6d, 0x56, 0x3e, 0xf1, 0x84, 0x1f, 0x88, 0x58, 0xcf, 0xe4, 0x28, 0x61, 0x05, 0x24,
	0xe4, 0x10, 0x79, 0x9d, 0x95, 0x8f, 0x7d, 0xad, 0xc5, 0xd7, 0x33, 0xe9, 0x04, 0x56, 0x49, 0xa6,
	0x90, 0xed, 0xf7, 0x95, 0x9f, 0x2d, 0x6e, 0x95, 0x24, 0x60, 0x0f, 0x21, 0x34, 0x07, 0x6a, 0x3c,
	0x91, 0xa1, 0x39, 0xbc, 0x5f, 0x8c, 0xc6, 0x8b, 0x77, 0x90, 0x4e, 0xf2, 0xb3, 0xab, 0x31, 0x59,
	0x11, 0xfa, 0x56, 0xbc, 0x72, 0x4e, 0xb8, 0xfa, 0xcf, 0x9d, 0x15, 0x37, 0x2e, 0x01, 0x55, 0xfe,
	0xcf, 0xdd, 0x73, 0xb3, 0x09, 0xcf, 0xcc, 0x26, 0xf2, 0x67, 0x23, 0x24, 0x5c, 0x1c, 0x3d, 0x3e,
	0xed, 0x50, 0xe0, 0xef, 0xd0, 0x71, 0x3f, 0xc2, 0x73, 0xfb, 0x11, 0xfd, 0xb5, 0x1f, 0xe2, 0xad,
	0xbb, 0xf3, 0xd3, 0x56, 0x1b, 0x7b, 0x5a, 0xd5, 0xf5, 0x30, 0x56, 0x49, 0xdf, 0xde, 0xfb, 0x88,
	0xfc, 0xf7, 0x21, 0x2e, 0x5d, 0x83, 0xd7, 0xed, 0x8f, 0x4e, 0x33, 0x0e, 0x0b, 0xd7, 0x92, 0xe6,
	0x41, 0x1e, 0x15, 0xa9, 0x3c, 0x86, 0xa2, 0x84, 0x07, 0x12, 0xfb, 0xe6, 0x30, 0xe5, 0x78, 0x09,
	0x89, 0xe5, 0x9c, 0x30, 0x2b, 0x33, 0x6f, 0x78, 0xd2, 0x31, 0xe2, 0x27, 0x64, 0x12, 0x2b, 0xdc,
	0xf6, 0xe6, 0x7f, 0x5f, 0x6e, 0x3f, 0xe0, 0xdd, 0x8d, 0x5f, 0xb5, 0x87, 0x4c, 0x5d, 0xc6, 0xa7,
	0x2e, 0xbf, 0xcf, 0xe9, 0x4f, 0xe3, 0xcd, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x87, 0x9d, 0x8a,
	0xe5, 0x42, 0x04, 0x00, 0x00,
}
