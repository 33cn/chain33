syntax = "proto3";

import "transaction.proto";
import "tendermint.proto";

package types;
option go_package = "gitlab.33.cn/chain33/chain33/types";

message Genesis {
    bool isrun = 1;
}

message Ticket {
    string ticketId = 1;
    // 0 -> 未成熟 1 -> 可挖矿 2 -> 已挖成功 3-> 已关闭
    int32 status = 2;
    // genesis 创建的私钥比较特殊
    bool isGenesis = 3;
    //创建时间
    int64 createTime = 4;
    //挖矿时间
    int64 minerTime = 5;
    //挖到的币的数目
    int64  minerValue   = 8;
    string minerAddress = 6;
    // return wallet
    string returnAddress = 7;
}

// message for execs.ticket
message TicketAction {
    oneof value {
        TicketBind    tbind   = 5;
        TicketOpen    topen   = 1;
        TicketGenesis genesis = 2;
        TicketClose   tclose  = 3;
        TicketMiner   miner   = 4;
    }
    int32 ty = 10;
}

message TicketMiner {
    uint32 bits     = 1;
    int64  reward   = 2;
    string ticketId = 3;
    bytes  modify   = 4;
}

message TicketBind {
    string minerAddress  = 1;
    string returnAddress = 2;
}

message TicketOpen {
    //用户挖矿的ticket 地址
    string minerAddress = 1;
    //购买ticket的数目
    int32 count = 2;
    //币实际存储的地址
    string returnAddress = 3;
}

message TicketGenesis {
    string minerAddress  = 1;
    string returnAddress = 2;
    int32  count         = 3;
}

message TicketClose {
    repeated string ticketId = 1;
}

message TicketList {
    string addr   = 1;
    int32  status = 3;
}

message TicketInfos {
    repeated string ticketIds = 1;
}

message ReplyTicketList {
    repeated Ticket tickets = 1;
}

message ReplyWalletTickets {
    repeated Ticket tickets = 1;
    repeated bytes privkeys = 2;
}

message ReceiptTicket {
    string ticketId   = 1;
    int32  status     = 2;
    int32  prevStatus = 3;
    string addr       = 4;
}

message ReceiptTicketBind {
    string oldMinerAddress = 1;
    string newMinerAddress = 2;
    string returnAddress   = 3;
}

message ExecTxList {
    bytes    stateHash              = 1;
    repeated Transaction txs        = 2;
    int64                blockTime  = 3;
    int64                height     = 4;
    uint64               difficulty = 5;
}

message Query {
    bytes  execer   = 1;
    string funcName = 2;
    bytes  payload  = 3;
}

message Norm {
    bytes  normId     = 1;
    int64  createTime = 2;
    string key        = 3;
    bytes  value      = 4;
}

message NormAction {
    oneof value {
        NormPut nput = 1;
    }
    int32 ty = 5;
}

message NormPut {
    string key   = 1;
    bytes  value = 2;
}

// message for retrieve start
message RetrievePara {
    string defaultAddress = 1;
    int32  status         = 2;
    int64  createTime     = 3;
    int64  prepareTime    = 4;
    int64  delayPeriod    = 5;
}

message Retrieve {
    // used as key
    string   backupAddress        = 1;
    repeated RetrievePara retPara = 2;
}

message RetrieveAction {
    oneof value {
        PreRetrieve     preRet  = 1;
        PerformRetrieve perfRet = 2;
        BackupRetrieve  backup  = 3;
        CancelRetrieve  cancel  = 4;
    }
    int32 ty = 5;
}

message BackupRetrieve {
    string backupAddress  = 1;
    string defaultAddress = 2;
    int64  delayPeriod    = 3;
}

message PreRetrieve {
    string backupAddress  = 1;
    string defaultAddress = 2;
}

message PerformRetrieve {
    string backupAddress  = 1;
    string defaultAddress = 2;
}

message CancelRetrieve {
    string backupAddress  = 1;
    string defaultAddress = 2;
}

message ReqRetrieveInfo {
    string backupAddress  = 1;
    string defaultAddress = 2;
}

message RetrieveQuery {
    string backupAddress  = 1;
    string defaultAddress = 2;
    int64  delayPeriod    = 3;
    int64  prepareTime    = 4;
    int64  remainTime     = 5;
    int32  status         = 6;
}
// message for retrieve end

//////////////////////////////////////////////////////////////////////////////
// message for token start/////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
message TokenAction {
    oneof value {
        TokenPreCreate       tokenprecreate    = 1;
        TokenFinishCreate    tokenfinishcreate = 2;
        TokenRevokeCreate    tokenrevokecreate = 3;
        AssetsTransfer       transfer          = 4;
        AssetsWithdraw       withdraw          = 5;
        AssetsGenesis        genesis           = 6;
        AssetsTransferToExec transferToExec    = 8;
    }
    int32 Ty = 7;
}

//创建token，支持最大精确度是6位小数,即存入数据库的实际总额需要放大1e6倍
message TokenPreCreate {
    string name         = 1;
    string symbol       = 2;
    string introduction = 3;
    int64  total        = 4;
    int64  price        = 5;
    string owner        = 6;
}

message TokenFinishCreate {
    string symbol = 1;
    string owner  = 2;
}

message TokenRevokeCreate {
    string symbol = 1;
    string owner  = 2;
}

message Token {
    string name         = 1;
    string symbol       = 2;
    string introduction = 3;
    int64  total        = 4;
    int64  price        = 5;
    string owner        = 6;
    string creator      = 7;
    int32  status       = 8;
}

message ReqTokens {
    bool     queryAll          = 1;
    int32    status            = 2;
    repeated string tokens     = 3;
    bool            symbolOnly = 4;
}

message ReplyTokens {
    repeated Token tokens = 1;
}

message ReceiptToken {
    string symbol = 1;
    string owner  = 2;
    int32  status = 3;
}

message TokenRecv {
    string token = 1;
    int64  recv  = 2;
}
message ReplyAddrRecvForTokens {
    repeated TokenRecv tokenRecvs = 1;
}

// 配置修改部分
message ArrayConfig {
    repeated string value = 3;
}
message StringConfig {
    string value = 3;
}
message Int32Config {
    int32 value = 3;
}

message ConfigItem {
    string key  = 1;
    string addr = 2;
    oneof  value {
        ArrayConfig  arr = 3;
        StringConfig str = 4;
        Int32Config int  = 5;
    }
    int32 Ty = 11;
}

message ModifyConfig {
    string key   = 1;
    string value = 2;
    string op    = 3;
    string addr  = 4;
}

message ManageAction {
    oneof value {
        ModifyConfig modify = 1;
    }
    int32 Ty = 2;
}

message ReceiptConfig {
    ConfigItem prev    = 1;
    ConfigItem current = 2;
}

message ReplyConfig {
    string key   = 1;
    string value = 2;
}

message HistoryCertStore {
    repeated bytes rootcerts         = 1;
    repeated bytes intermediateCerts = 2;
    repeated bytes revocationList    = 3;
    int64          curHeigth         = 4;
    int64          nxtHeight         = 5;
}

//////////////////////////////////////////////////////////////////////////////
// message for Privacy start/////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
message PrivacyAction {
    oneof value {
        Public2Privacy  public2privacy  = 1;
        Privacy2Privacy privacy2privacy = 2;
        Privacy2Public  privacy2public  = 3;
    }
    int32 ty = 4;
}

message Public2Privacy {
    string        tokenname = 1;
    int64         amount    = 2;
    string        note      = 5;
    PrivacyOutput output    = 7;
}

message Privacy2Privacy {
    string        tokenname = 1;
    int64         amount    = 2;
    string        note      = 5;
    PrivacyInput  input     = 6;
    PrivacyOutput output    = 7;
}

message Privacy2Public {
    string        tokenname = 1;
    int64         amount    = 2;
    string        note      = 3;
    PrivacyInput  input     = 4;
    PrivacyOutput output    = 5;
}

message UTXOGlobalIndex {
    //	int64 height   = 1;
    //	int32 txindex  = 2;
    bytes txhash   = 3;
    int32 outindex = 4;
}

// privacy input
message KeyInput {
    int64    amount                          = 1;
    repeated UTXOGlobalIndex utxoGlobalIndex = 2;
    bytes                    keyImage        = 3;
}

message PrivacyInput {
    repeated KeyInput keyinput = 1;
}

// privacy output
message keyOutput {
    int64 amount        = 1;
    bytes onetimepubkey = 2;
}

message PrivacyOutput {
    bytes    RpubKeytx           = 1;
    repeated keyOutput keyoutput = 2;
}

message GroupUTXOGlobalIndex {
    int64    amount                          = 1;
    repeated UTXOGlobalIndex utxoGlobalIndex = 2;
}

message LocalUTXOItem {
    int64 height        = 1;
    int32 txindex       = 2;
    int32 outindex      = 3;
    bytes txhash        = 4;
    bytes onetimepubkey = 5;
}

message ReqUTXOPubKeys {
    string   tokenName                                 = 1;
    repeated GroupUTXOGlobalIndex groupUTXOGlobalIndex = 2;
}

// 一个公钥信息
message PublicKeyData {
    repeated bytes data = 1;
}

message GroupUTXOPubKey {
    int64 amount = 1;
    // 输出签名的所有公钥
    repeated bytes pubkey = 2;
}

message ResUTXOPubKeys {
    repeated GroupUTXOPubKey groupUTXOPubKeys = 1;
}

message ReqPrivacyToken {
    string token  = 1;
    int64  amount = 2;
}

message AmountDetail {
    int64 amount = 1;
    int64 count  = 2;
}

message ReplyPrivacyAmounts {
    repeated AmountDetail amountDetail = 1;
}

message replyUTXOsOfAmount {
    repeated LocalUTXOItem localUTXOItems = 1;
}

message ReceiptPrivacyOutput {
    string   token               = 1;
    repeated keyOutput keyoutput = 2;
}
//各种amount额度的UTXO在链上的数量
message AmountsOfUTXO {
    map<int64, int64> amountMap = 1;
}

message TokenNamesOfUTXO {
    map<string, string> tokensMap = 1;
}

// 用以转换成json后继续可见的结构
message UTXOGlobalIndex4Print {
    string txhash   = 1;
    int32  outindex = 2;
}

message KeyInput4Print {
    int64    amount                                = 1;
    repeated UTXOGlobalIndex4Print utxoGlobalIndex = 2;
    string                         keyImage        = 3;
}

message keyOutput4Print {
    int64  amount        = 1;
    string onetimepubkey = 2;
}

message PrivacyInput4Print {
    repeated KeyInput4Print keyinput = 1;
}

message PrivacyOutput4Print {
    string   RpubKeytx                 = 1;
    repeated keyOutput4Print keyoutput = 2;
}

message Public2Privacy4Print {
    string              tokenname = 1;
    int64               amount    = 2;
    string              note      = 5;
    PrivacyOutput4Print output    = 7;
}

message Privacy2Privacy4Print {
    string              tokenname = 1;
    int64               amount    = 2;
    string              note      = 5;
    PrivacyInput4Print  input     = 6;
    PrivacyOutput4Print output    = 7;
}

message Privacy2Public4Print {
    string              tokenname = 1;
    int64               amount    = 2;
    string              note      = 3;
    PrivacyInput4Print  input     = 4;
    PrivacyOutput4Print output    = 5;
}

message PrivacyAction4Print {
    oneof value {
        Public2Privacy4Print  public2privacy  = 1;
        Privacy2Privacy4Print privacy2privacy = 2;
        Privacy2Public4Print  privacy2public  = 3;
    }
    int32 ty = 4;
}

message ValNode {
    bytes pubKey = 1;
    int64 power  = 2;
}

message ValNodes {
    repeated ValNode nodes = 1;
}

message ValNodeAction {
    oneof value {
        ValNode             node      = 1;
        TendermintBlockInfo blockInfo = 2;
    }
    int32 Ty = 3;
}