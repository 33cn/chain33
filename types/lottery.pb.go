// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lottery.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PurchaseRecord struct {
	HashValue string `protobuf:"bytes,1,opt,name=hashValue" json:"hashValue,omitempty"`
	Amount    int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	TxHash    string `protobuf:"bytes,3,opt,name=txHash" json:"txHash,omitempty"`
	IsShowed  bool   `protobuf:"varint,4,opt,name=isShowed" json:"isShowed,omitempty"`
	Number    int64  `protobuf:"varint,5,opt,name=number" json:"number,omitempty"`
}

func (m *PurchaseRecord) Reset()                    { *m = PurchaseRecord{} }
func (m *PurchaseRecord) String() string            { return proto.CompactTextString(m) }
func (*PurchaseRecord) ProtoMessage()               {}
func (*PurchaseRecord) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *PurchaseRecord) GetHashValue() string {
	if m != nil {
		return m.HashValue
	}
	return ""
}

func (m *PurchaseRecord) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PurchaseRecord) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *PurchaseRecord) GetIsShowed() bool {
	if m != nil {
		return m.IsShowed
	}
	return false
}

func (m *PurchaseRecord) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type PurchaseRecords struct {
	Record         []*PurchaseRecord `protobuf:"bytes,1,rep,name=record" json:"record,omitempty"`
	FundWin        int64             `protobuf:"varint,2,opt,name=fundWin" json:"fundWin,omitempty"`
	AmountOneRound int64             `protobuf:"varint,3,opt,name=amountOneRound" json:"amountOneRound,omitempty"`
}

func (m *PurchaseRecords) Reset()                    { *m = PurchaseRecords{} }
func (m *PurchaseRecords) String() string            { return proto.CompactTextString(m) }
func (*PurchaseRecords) ProtoMessage()               {}
func (*PurchaseRecords) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *PurchaseRecords) GetRecord() []*PurchaseRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *PurchaseRecords) GetFundWin() int64 {
	if m != nil {
		return m.FundWin
	}
	return 0
}

func (m *PurchaseRecords) GetAmountOneRound() int64 {
	if m != nil {
		return m.AmountOneRound
	}
	return 0
}

type Lottery struct {
	LotteryId            string                      `protobuf:"bytes,1,opt,name=lotteryId" json:"lotteryId,omitempty"`
	Status               int32                       `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	CreateTime           int64                       `protobuf:"varint,3,opt,name=createTime" json:"createTime,omitempty"`
	MatchTime            int64                       `protobuf:"varint,4,opt,name=matchTime" json:"matchTime,omitempty"`
	Fund                 int64                       `protobuf:"varint,5,opt,name=fund" json:"fund,omitempty"`
	PurchasePeriod       int64                       `protobuf:"varint,6,opt,name=purchasePeriod" json:"purchasePeriod,omitempty"`
	ShowPeriod           int64                       `protobuf:"varint,7,opt,name=showPeriod" json:"showPeriod,omitempty"`
	MaxPurchaseNum       int64                       `protobuf:"varint,8,opt,name=maxPurchaseNum" json:"maxPurchaseNum,omitempty"`
	LastTransToPurState  int64                       `protobuf:"varint,9,opt,name=lastTransToPurState" json:"lastTransToPurState,omitempty"`
	LastTransToShowState int64                       `protobuf:"varint,10,opt,name=lastTransToShowState" json:"lastTransToShowState,omitempty"`
	Records              map[string]*PurchaseRecords `protobuf:"bytes,11,rep,name=records" json:"records,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TotalPurchasedTxNum  int64                       `protobuf:"varint,12,opt,name=totalPurchasedTxNum" json:"totalPurchasedTxNum,omitempty"`
	TotalShowedNum       int64                       `protobuf:"varint,13,opt,name=totalShowedNum" json:"totalShowedNum,omitempty"`
	CreateAddr           string                      `protobuf:"bytes,14,opt,name=createAddr" json:"createAddr,omitempty"`
	Round                int64                       `protobuf:"varint,15,opt,name=round" json:"round,omitempty"`
	LuckyNumber          []int64                     `protobuf:"varint,16,rep,packed,name=luckyNumber" json:"luckyNumber,omitempty"`
}

func (m *Lottery) Reset()                    { *m = Lottery{} }
func (m *Lottery) String() string            { return proto.CompactTextString(m) }
func (*Lottery) ProtoMessage()               {}
func (*Lottery) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *Lottery) GetLotteryId() string {
	if m != nil {
		return m.LotteryId
	}
	return ""
}

func (m *Lottery) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Lottery) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Lottery) GetMatchTime() int64 {
	if m != nil {
		return m.MatchTime
	}
	return 0
}

func (m *Lottery) GetFund() int64 {
	if m != nil {
		return m.Fund
	}
	return 0
}

func (m *Lottery) GetPurchasePeriod() int64 {
	if m != nil {
		return m.PurchasePeriod
	}
	return 0
}

func (m *Lottery) GetShowPeriod() int64 {
	if m != nil {
		return m.ShowPeriod
	}
	return 0
}

func (m *Lottery) GetMaxPurchaseNum() int64 {
	if m != nil {
		return m.MaxPurchaseNum
	}
	return 0
}

func (m *Lottery) GetLastTransToPurState() int64 {
	if m != nil {
		return m.LastTransToPurState
	}
	return 0
}

func (m *Lottery) GetLastTransToShowState() int64 {
	if m != nil {
		return m.LastTransToShowState
	}
	return 0
}

func (m *Lottery) GetRecords() map[string]*PurchaseRecords {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *Lottery) GetTotalPurchasedTxNum() int64 {
	if m != nil {
		return m.TotalPurchasedTxNum
	}
	return 0
}

func (m *Lottery) GetTotalShowedNum() int64 {
	if m != nil {
		return m.TotalShowedNum
	}
	return 0
}

func (m *Lottery) GetCreateAddr() string {
	if m != nil {
		return m.CreateAddr
	}
	return ""
}

func (m *Lottery) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Lottery) GetLuckyNumber() []int64 {
	if m != nil {
		return m.LuckyNumber
	}
	return nil
}

// message for execs.game
type LotteryAction struct {
	// Types that are valid to be assigned to Value:
	//	*LotteryAction_Create
	//	*LotteryAction_Buy
	//	*LotteryAction_Show
	//	*LotteryAction_Draw
	//	*LotteryAction_Close
	Value isLotteryAction_Value `protobuf_oneof:"value"`
	Ty    int32                 `protobuf:"varint,10,opt,name=ty" json:"ty,omitempty"`
}

func (m *LotteryAction) Reset()                    { *m = LotteryAction{} }
func (m *LotteryAction) String() string            { return proto.CompactTextString(m) }
func (*LotteryAction) ProtoMessage()               {}
func (*LotteryAction) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{3} }

type isLotteryAction_Value interface {
	isLotteryAction_Value()
}

type LotteryAction_Create struct {
	Create *LotteryCreate `protobuf:"bytes,1,opt,name=create,oneof"`
}
type LotteryAction_Buy struct {
	Buy *LotteryBuy `protobuf:"bytes,2,opt,name=buy,oneof"`
}
type LotteryAction_Show struct {
	Show *LotteryShow `protobuf:"bytes,3,opt,name=show,oneof"`
}
type LotteryAction_Draw struct {
	Draw *LotteryDraw `protobuf:"bytes,4,opt,name=draw,oneof"`
}
type LotteryAction_Close struct {
	Close *LotteryClose `protobuf:"bytes,5,opt,name=close,oneof"`
}

func (*LotteryAction_Create) isLotteryAction_Value() {}
func (*LotteryAction_Buy) isLotteryAction_Value()    {}
func (*LotteryAction_Show) isLotteryAction_Value()   {}
func (*LotteryAction_Draw) isLotteryAction_Value()   {}
func (*LotteryAction_Close) isLotteryAction_Value()  {}

func (m *LotteryAction) GetValue() isLotteryAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *LotteryAction) GetCreate() *LotteryCreate {
	if x, ok := m.GetValue().(*LotteryAction_Create); ok {
		return x.Create
	}
	return nil
}

func (m *LotteryAction) GetBuy() *LotteryBuy {
	if x, ok := m.GetValue().(*LotteryAction_Buy); ok {
		return x.Buy
	}
	return nil
}

func (m *LotteryAction) GetShow() *LotteryShow {
	if x, ok := m.GetValue().(*LotteryAction_Show); ok {
		return x.Show
	}
	return nil
}

func (m *LotteryAction) GetDraw() *LotteryDraw {
	if x, ok := m.GetValue().(*LotteryAction_Draw); ok {
		return x.Draw
	}
	return nil
}

func (m *LotteryAction) GetClose() *LotteryClose {
	if x, ok := m.GetValue().(*LotteryAction_Close); ok {
		return x.Close
	}
	return nil
}

func (m *LotteryAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LotteryAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LotteryAction_OneofMarshaler, _LotteryAction_OneofUnmarshaler, _LotteryAction_OneofSizer, []interface{}{
		(*LotteryAction_Create)(nil),
		(*LotteryAction_Buy)(nil),
		(*LotteryAction_Show)(nil),
		(*LotteryAction_Draw)(nil),
		(*LotteryAction_Close)(nil),
	}
}

func _LotteryAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LotteryAction)
	// value
	switch x := m.Value.(type) {
	case *LotteryAction_Create:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Create); err != nil {
			return err
		}
	case *LotteryAction_Buy:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Buy); err != nil {
			return err
		}
	case *LotteryAction_Show:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Show); err != nil {
			return err
		}
	case *LotteryAction_Draw:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Draw); err != nil {
			return err
		}
	case *LotteryAction_Close:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Close); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LotteryAction.Value has unexpected type %T", x)
	}
	return nil
}

func _LotteryAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LotteryAction)
	switch tag {
	case 1: // value.create
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LotteryCreate)
		err := b.DecodeMessage(msg)
		m.Value = &LotteryAction_Create{msg}
		return true, err
	case 2: // value.buy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LotteryBuy)
		err := b.DecodeMessage(msg)
		m.Value = &LotteryAction_Buy{msg}
		return true, err
	case 3: // value.show
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LotteryShow)
		err := b.DecodeMessage(msg)
		m.Value = &LotteryAction_Show{msg}
		return true, err
	case 4: // value.draw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LotteryDraw)
		err := b.DecodeMessage(msg)
		m.Value = &LotteryAction_Draw{msg}
		return true, err
	case 5: // value.close
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LotteryClose)
		err := b.DecodeMessage(msg)
		m.Value = &LotteryAction_Close{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LotteryAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LotteryAction)
	// value
	switch x := m.Value.(type) {
	case *LotteryAction_Create:
		s := proto.Size(x.Create)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LotteryAction_Buy:
		s := proto.Size(x.Buy)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LotteryAction_Show:
		s := proto.Size(x.Show)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LotteryAction_Draw:
		s := proto.Size(x.Draw)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LotteryAction_Close:
		s := proto.Size(x.Close)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type LotteryCreate struct {
	PurchasePeriod int64 `protobuf:"varint,1,opt,name=purchasePeriod" json:"purchasePeriod,omitempty"`
	ShowPeriod     int64 `protobuf:"varint,2,opt,name=showPeriod" json:"showPeriod,omitempty"`
	MaxPurchaseNum int64 `protobuf:"varint,3,opt,name=maxPurchaseNum" json:"maxPurchaseNum,omitempty"`
}

func (m *LotteryCreate) Reset()                    { *m = LotteryCreate{} }
func (m *LotteryCreate) String() string            { return proto.CompactTextString(m) }
func (*LotteryCreate) ProtoMessage()               {}
func (*LotteryCreate) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{4} }

func (m *LotteryCreate) GetPurchasePeriod() int64 {
	if m != nil {
		return m.PurchasePeriod
	}
	return 0
}

func (m *LotteryCreate) GetShowPeriod() int64 {
	if m != nil {
		return m.ShowPeriod
	}
	return 0
}

func (m *LotteryCreate) GetMaxPurchaseNum() int64 {
	if m != nil {
		return m.MaxPurchaseNum
	}
	return 0
}

type LotteryBuy struct {
	LotteryId string `protobuf:"bytes,1,opt,name=lotteryId" json:"lotteryId,omitempty"`
	Amount    int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	HashValue string `protobuf:"bytes,3,opt,name=hashValue" json:"hashValue,omitempty"`
	Way       int64  `protobuf:"varint,4,opt,name=way" json:"way,omitempty"`
}

func (m *LotteryBuy) Reset()                    { *m = LotteryBuy{} }
func (m *LotteryBuy) String() string            { return proto.CompactTextString(m) }
func (*LotteryBuy) ProtoMessage()               {}
func (*LotteryBuy) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{5} }

func (m *LotteryBuy) GetLotteryId() string {
	if m != nil {
		return m.LotteryId
	}
	return ""
}

func (m *LotteryBuy) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *LotteryBuy) GetHashValue() string {
	if m != nil {
		return m.HashValue
	}
	return ""
}

func (m *LotteryBuy) GetWay() int64 {
	if m != nil {
		return m.Way
	}
	return 0
}

type LotteryShow struct {
	LotteryId string `protobuf:"bytes,1,opt,name=lotteryId" json:"lotteryId,omitempty"`
	Secret    string `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	TxHash    string `protobuf:"bytes,3,opt,name=txHash" json:"txHash,omitempty"`
	Number    int64  `protobuf:"varint,4,opt,name=number" json:"number,omitempty"`
}

func (m *LotteryShow) Reset()                    { *m = LotteryShow{} }
func (m *LotteryShow) String() string            { return proto.CompactTextString(m) }
func (*LotteryShow) ProtoMessage()               {}
func (*LotteryShow) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{6} }

func (m *LotteryShow) GetLotteryId() string {
	if m != nil {
		return m.LotteryId
	}
	return ""
}

func (m *LotteryShow) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *LotteryShow) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *LotteryShow) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type LotteryDraw struct {
	LotteryId string `protobuf:"bytes,1,opt,name=lotteryId" json:"lotteryId,omitempty"`
}

func (m *LotteryDraw) Reset()                    { *m = LotteryDraw{} }
func (m *LotteryDraw) String() string            { return proto.CompactTextString(m) }
func (*LotteryDraw) ProtoMessage()               {}
func (*LotteryDraw) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{7} }

func (m *LotteryDraw) GetLotteryId() string {
	if m != nil {
		return m.LotteryId
	}
	return ""
}

type LotteryClose struct {
	LotteryId string `protobuf:"bytes,1,opt,name=lotteryId" json:"lotteryId,omitempty"`
}

func (m *LotteryClose) Reset()                    { *m = LotteryClose{} }
func (m *LotteryClose) String() string            { return proto.CompactTextString(m) }
func (*LotteryClose) ProtoMessage()               {}
func (*LotteryClose) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{8} }

func (m *LotteryClose) GetLotteryId() string {
	if m != nil {
		return m.LotteryId
	}
	return ""
}

type ReceiptLottery struct {
	LotteryId  string `protobuf:"bytes,1,opt,name=lotteryId" json:"lotteryId,omitempty"`
	Status     int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	PrevStatus int32  `protobuf:"varint,3,opt,name=prevStatus" json:"prevStatus,omitempty"`
	Addr       string `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
	Round      int64  `protobuf:"varint,5,opt,name=round" json:"round,omitempty"`
	Number     int64  `protobuf:"varint,6,opt,name=number" json:"number,omitempty"`
	Amount     int64  `protobuf:"varint,7,opt,name=amount" json:"amount,omitempty"`
}

func (m *ReceiptLottery) Reset()                    { *m = ReceiptLottery{} }
func (m *ReceiptLottery) String() string            { return proto.CompactTextString(m) }
func (*ReceiptLottery) ProtoMessage()               {}
func (*ReceiptLottery) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{9} }

func (m *ReceiptLottery) GetLotteryId() string {
	if m != nil {
		return m.LotteryId
	}
	return ""
}

func (m *ReceiptLottery) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReceiptLottery) GetPrevStatus() int32 {
	if m != nil {
		return m.PrevStatus
	}
	return 0
}

func (m *ReceiptLottery) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReceiptLottery) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *ReceiptLottery) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ReceiptLottery) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type ReqLotteryInfo struct {
	LotteryId string `protobuf:"bytes,1,opt,name=lotteryId" json:"lotteryId,omitempty"`
}

func (m *ReqLotteryInfo) Reset()                    { *m = ReqLotteryInfo{} }
func (m *ReqLotteryInfo) String() string            { return proto.CompactTextString(m) }
func (*ReqLotteryInfo) ProtoMessage()               {}
func (*ReqLotteryInfo) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{10} }

func (m *ReqLotteryInfo) GetLotteryId() string {
	if m != nil {
		return m.LotteryId
	}
	return ""
}

type ReqLotteryShowInfo struct {
	LotteryId string `protobuf:"bytes,1,opt,name=lotteryId" json:"lotteryId,omitempty"`
	Addr      string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	Round     int64  `protobuf:"varint,3,opt,name=round" json:"round,omitempty"`
}

func (m *ReqLotteryShowInfo) Reset()                    { *m = ReqLotteryShowInfo{} }
func (m *ReqLotteryShowInfo) String() string            { return proto.CompactTextString(m) }
func (*ReqLotteryShowInfo) ProtoMessage()               {}
func (*ReqLotteryShowInfo) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{11} }

func (m *ReqLotteryShowInfo) GetLotteryId() string {
	if m != nil {
		return m.LotteryId
	}
	return ""
}

func (m *ReqLotteryShowInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReqLotteryShowInfo) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type ReplyLotteryNormalInfo struct {
	CreateTime     int64  `protobuf:"varint,1,opt,name=createTime" json:"createTime,omitempty"`
	PurchasePeriod int64  `protobuf:"varint,2,opt,name=purchasePeriod" json:"purchasePeriod,omitempty"`
	ShowPeriod     int64  `protobuf:"varint,3,opt,name=showPeriod" json:"showPeriod,omitempty"`
	MaxPurchaseNum int64  `protobuf:"varint,4,opt,name=maxPurchaseNum" json:"maxPurchaseNum,omitempty"`
	CreateAddr     string `protobuf:"bytes,5,opt,name=createAddr" json:"createAddr,omitempty"`
}

func (m *ReplyLotteryNormalInfo) Reset()                    { *m = ReplyLotteryNormalInfo{} }
func (m *ReplyLotteryNormalInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyLotteryNormalInfo) ProtoMessage()               {}
func (*ReplyLotteryNormalInfo) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{12} }

func (m *ReplyLotteryNormalInfo) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *ReplyLotteryNormalInfo) GetPurchasePeriod() int64 {
	if m != nil {
		return m.PurchasePeriod
	}
	return 0
}

func (m *ReplyLotteryNormalInfo) GetShowPeriod() int64 {
	if m != nil {
		return m.ShowPeriod
	}
	return 0
}

func (m *ReplyLotteryNormalInfo) GetMaxPurchaseNum() int64 {
	if m != nil {
		return m.MaxPurchaseNum
	}
	return 0
}

func (m *ReplyLotteryNormalInfo) GetCreateAddr() string {
	if m != nil {
		return m.CreateAddr
	}
	return ""
}

type ReplyLotteryCurrentInfo struct {
	Status               int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Fund                 int64 `protobuf:"varint,2,opt,name=fund" json:"fund,omitempty"`
	LastTransToPurState  int64 `protobuf:"varint,3,opt,name=lastTransToPurState" json:"lastTransToPurState,omitempty"`
	LastTransToShowState int64 `protobuf:"varint,4,opt,name=lastTransToShowState" json:"lastTransToShowState,omitempty"`
	TotalPurchasedTxNum  int64 `protobuf:"varint,5,opt,name=totalPurchasedTxNum" json:"totalPurchasedTxNum,omitempty"`
	TotalShowedNum       int64 `protobuf:"varint,6,opt,name=totalShowedNum" json:"totalShowedNum,omitempty"`
	Round                int64 `protobuf:"varint,7,opt,name=round" json:"round,omitempty"`
}

func (m *ReplyLotteryCurrentInfo) Reset()                    { *m = ReplyLotteryCurrentInfo{} }
func (m *ReplyLotteryCurrentInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyLotteryCurrentInfo) ProtoMessage()               {}
func (*ReplyLotteryCurrentInfo) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{13} }

func (m *ReplyLotteryCurrentInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReplyLotteryCurrentInfo) GetFund() int64 {
	if m != nil {
		return m.Fund
	}
	return 0
}

func (m *ReplyLotteryCurrentInfo) GetLastTransToPurState() int64 {
	if m != nil {
		return m.LastTransToPurState
	}
	return 0
}

func (m *ReplyLotteryCurrentInfo) GetLastTransToShowState() int64 {
	if m != nil {
		return m.LastTransToShowState
	}
	return 0
}

func (m *ReplyLotteryCurrentInfo) GetTotalPurchasedTxNum() int64 {
	if m != nil {
		return m.TotalPurchasedTxNum
	}
	return 0
}

func (m *ReplyLotteryCurrentInfo) GetTotalShowedNum() int64 {
	if m != nil {
		return m.TotalShowedNum
	}
	return 0
}

func (m *ReplyLotteryCurrentInfo) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type ReplyLotteryHistoryLuckyNumber struct {
	LuckyNumber []int64 `protobuf:"varint,1,rep,packed,name=luckyNumber" json:"luckyNumber,omitempty"`
}

func (m *ReplyLotteryHistoryLuckyNumber) Reset()         { *m = ReplyLotteryHistoryLuckyNumber{} }
func (m *ReplyLotteryHistoryLuckyNumber) String() string { return proto.CompactTextString(m) }
func (*ReplyLotteryHistoryLuckyNumber) ProtoMessage()    {}
func (*ReplyLotteryHistoryLuckyNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor10, []int{14}
}

func (m *ReplyLotteryHistoryLuckyNumber) GetLuckyNumber() []int64 {
	if m != nil {
		return m.LuckyNumber
	}
	return nil
}

type ReplyLotteryShowInfo struct {
	Records []*LotteryShowRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *ReplyLotteryShowInfo) Reset()                    { *m = ReplyLotteryShowInfo{} }
func (m *ReplyLotteryShowInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyLotteryShowInfo) ProtoMessage()               {}
func (*ReplyLotteryShowInfo) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{15} }

func (m *ReplyLotteryShowInfo) GetRecords() []*LotteryShowRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

// used for execlocal for show
type LotteryShowRecord struct {
	Number int64 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Amount int64 `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *LotteryShowRecord) Reset()                    { *m = LotteryShowRecord{} }
func (m *LotteryShowRecord) String() string            { return proto.CompactTextString(m) }
func (*LotteryShowRecord) ProtoMessage()               {}
func (*LotteryShowRecord) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{16} }

func (m *LotteryShowRecord) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *LotteryShowRecord) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type LotteryShowRecords struct {
	Records []*LotteryShowRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *LotteryShowRecords) Reset()                    { *m = LotteryShowRecords{} }
func (m *LotteryShowRecords) String() string            { return proto.CompactTextString(m) }
func (*LotteryShowRecords) ProtoMessage()               {}
func (*LotteryShowRecords) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{17} }

func (m *LotteryShowRecords) GetRecords() []*LotteryShowRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func init() {
	proto.RegisterType((*PurchaseRecord)(nil), "types.PurchaseRecord")
	proto.RegisterType((*PurchaseRecords)(nil), "types.PurchaseRecords")
	proto.RegisterType((*Lottery)(nil), "types.Lottery")
	proto.RegisterType((*LotteryAction)(nil), "types.LotteryAction")
	proto.RegisterType((*LotteryCreate)(nil), "types.LotteryCreate")
	proto.RegisterType((*LotteryBuy)(nil), "types.LotteryBuy")
	proto.RegisterType((*LotteryShow)(nil), "types.LotteryShow")
	proto.RegisterType((*LotteryDraw)(nil), "types.LotteryDraw")
	proto.RegisterType((*LotteryClose)(nil), "types.LotteryClose")
	proto.RegisterType((*ReceiptLottery)(nil), "types.ReceiptLottery")
	proto.RegisterType((*ReqLotteryInfo)(nil), "types.ReqLotteryInfo")
	proto.RegisterType((*ReqLotteryShowInfo)(nil), "types.ReqLotteryShowInfo")
	proto.RegisterType((*ReplyLotteryNormalInfo)(nil), "types.ReplyLotteryNormalInfo")
	proto.RegisterType((*ReplyLotteryCurrentInfo)(nil), "types.ReplyLotteryCurrentInfo")
	proto.RegisterType((*ReplyLotteryHistoryLuckyNumber)(nil), "types.ReplyLotteryHistoryLuckyNumber")
	proto.RegisterType((*ReplyLotteryShowInfo)(nil), "types.ReplyLotteryShowInfo")
	proto.RegisterType((*LotteryShowRecord)(nil), "types.LotteryShowRecord")
	proto.RegisterType((*LotteryShowRecords)(nil), "types.LotteryShowRecords")
}

func init() { proto.RegisterFile("lottery.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 942 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xaf, 0xed, 0x38, 0x69, 0x9f, 0xdb, 0x6c, 0x77, 0xb6, 0x14, 0x6b, 0x41, 0xab, 0xc8, 0x12,
	0x28, 0xd2, 0x2e, 0x11, 0x0a, 0x42, 0x42, 0xdc, 0xb6, 0x05, 0x29, 0x8b, 0x56, 0xa5, 0x9a, 0x56,
	0x70, 0xe1, 0x32, 0xb5, 0x67, 0x95, 0x68, 0x1d, 0x4f, 0x98, 0x19, 0x6f, 0xeb, 0x13, 0x88, 0x8f,
	0xc0, 0x95, 0x2b, 0x1f, 0x84, 0x23, 0x1f, 0x0b, 0xcd, 0x9f, 0xc4, 0xe3, 0xc4, 0xdd, 0xa4, 0xec,
	0xcd, 0xf3, 0xde, 0x6f, 0xe6, 0xbd, 0xf7, 0x7b, 0xff, 0x0c, 0x47, 0x39, 0x93, 0x92, 0xf2, 0x6a,
	0xb4, 0xe0, 0x4c, 0x32, 0x14, 0xca, 0x6a, 0x41, 0x45, 0xf2, 0xa7, 0x07, 0xfd, 0xcb, 0x92, 0xa7,
	0x53, 0x22, 0x28, 0xa6, 0x29, 0xe3, 0x19, 0xfa, 0x14, 0x0e, 0xa6, 0x44, 0x4c, 0x7f, 0x22, 0x79,
	0x49, 0x63, 0x6f, 0xe0, 0x0d, 0x0f, 0x70, 0x2d, 0x40, 0xa7, 0xd0, 0x25, 0x73, 0x56, 0x16, 0x32,
	0xf6, 0x07, 0xde, 0x30, 0xc0, 0xf6, 0xa4, 0xe4, 0xf2, 0x6e, 0x42, 0xc4, 0x34, 0x0e, 0xf4, 0x15,
	0x7b, 0x42, 0x4f, 0x61, 0x7f, 0x26, 0xae, 0xa6, 0xec, 0x96, 0x66, 0x71, 0x67, 0xe0, 0x0d, 0xf7,
	0xf1, 0xea, 0xac, 0xee, 0x14, 0xe5, 0xfc, 0x86, 0xf2, 0x38, 0x34, 0x6f, 0x99, 0x53, 0xf2, 0x87,
	0x07, 0x8f, 0x9a, 0x4e, 0x09, 0xf4, 0x05, 0x74, 0xb9, 0xfe, 0x8c, 0xbd, 0x41, 0x30, 0x8c, 0xc6,
	0x1f, 0x8d, 0x74, 0x00, 0xa3, 0x26, 0x0e, 0x5b, 0x10, 0x8a, 0xa1, 0xf7, 0xa6, 0x2c, 0xb2, 0x9f,
	0x67, 0x85, 0xf5, 0x73, 0x79, 0x44, 0x9f, 0x43, 0xdf, 0xb8, 0xfc, 0x63, 0x41, 0x31, 0x2b, 0x8b,
	0x4c, 0x3b, 0x1c, 0xe0, 0x35, 0x69, 0xf2, 0x77, 0x08, 0xbd, 0xd7, 0x86, 0x32, 0x45, 0x89, 0x65,
	0xef, 0x55, 0xb6, 0xa4, 0x64, 0x25, 0x50, 0x61, 0x08, 0x49, 0x64, 0x29, 0xb4, 0xa9, 0x10, 0xdb,
	0x13, 0x7a, 0x06, 0x90, 0x72, 0x4a, 0x24, 0xbd, 0x9e, 0xcd, 0xa9, 0xb5, 0xe2, 0x48, 0xd4, 0xab,
	0x73, 0x22, 0xd3, 0xa9, 0x56, 0x77, 0xb4, 0xba, 0x16, 0x20, 0x04, 0x1d, 0xe5, 0xb2, 0xa5, 0x46,
	0x7f, 0x2b, 0xdf, 0x17, 0x36, 0xde, 0x4b, 0xca, 0x67, 0x2c, 0x8b, 0xbb, 0xc6, 0xf7, 0xa6, 0x54,
	0x59, 0x16, 0x53, 0x76, 0x6b, 0x31, 0x3d, 0x63, 0xb9, 0x96, 0xa8, 0x77, 0xe6, 0xe4, 0x6e, 0x49,
	0xdd, 0x45, 0x39, 0x8f, 0xf7, 0xcd, 0x3b, 0x4d, 0x29, 0xfa, 0x12, 0x9e, 0xe4, 0x44, 0xc8, 0x6b,
	0x4e, 0x0a, 0x71, 0xcd, 0x2e, 0x4b, 0x7e, 0x25, 0x89, 0xa4, 0xf1, 0x81, 0x06, 0xb7, 0xa9, 0xd0,
	0x18, 0x4e, 0x1c, 0xb1, 0xca, 0xb3, 0xb9, 0x02, 0xfa, 0x4a, 0xab, 0x0e, 0x7d, 0x0d, 0x3d, 0x93,
	0x35, 0x11, 0x47, 0x3a, 0xb7, 0x9f, 0xd8, 0xdc, 0x5a, 0xfa, 0x47, 0xb6, 0x06, 0xbe, 0x2f, 0x24,
	0xaf, 0xf0, 0x12, 0xab, 0x9c, 0x93, 0x4c, 0x92, 0x7c, 0xe9, 0x70, 0x76, 0x7d, 0xa7, 0x22, 0x39,
	0x34, 0xce, 0xb5, 0xa8, 0x54, 0xd8, 0x5a, 0x6c, 0xca, 0x4f, 0x81, 0x8f, 0x4c, 0xd8, 0x4d, 0x69,
	0x9d, 0xb8, 0x97, 0x59, 0xc6, 0xe3, 0xbe, 0xce, 0xb7, 0x23, 0x41, 0x27, 0x10, 0x72, 0x5d, 0x39,
	0x8f, 0xf4, 0x75, 0x73, 0x40, 0x03, 0x88, 0xf2, 0x32, 0x7d, 0x5b, 0x5d, 0x98, 0x92, 0x3e, 0x1e,
	0x04, 0xc3, 0x00, 0xbb, 0xa2, 0xa7, 0x18, 0x0e, 0xdd, 0x50, 0xd0, 0x31, 0x04, 0x6f, 0x69, 0x65,
	0x0b, 0x4a, 0x7d, 0xa2, 0x17, 0x10, 0xbe, 0xd3, 0x7d, 0xa7, 0x2a, 0x29, 0x1a, 0x9f, 0xb6, 0x16,
	0xb9, 0xc0, 0x06, 0xf4, 0xad, 0xff, 0x8d, 0x97, 0xfc, 0xee, 0xc3, 0x91, 0xe5, 0xe9, 0x65, 0x2a,
	0x67, 0xac, 0x40, 0x23, 0xe8, 0x1a, 0x5f, 0xf5, 0xc3, 0xd1, 0xf8, 0xa4, 0xc9, 0xe6, 0xb9, 0xd6,
	0x4d, 0xf6, 0xb0, 0x45, 0xa1, 0xcf, 0x20, 0xb8, 0x29, 0x2b, 0x6b, 0xf1, 0x71, 0x13, 0x7c, 0x56,
	0x56, 0x93, 0x3d, 0xac, 0xf4, 0x68, 0x08, 0x1d, 0x55, 0x41, 0xba, 0x8e, 0xa3, 0x31, 0x6a, 0xe2,
	0x14, 0x77, 0x93, 0x3d, 0xac, 0x11, 0x0a, 0x99, 0x71, 0x72, 0xab, 0x4b, 0x7a, 0x03, 0xf9, 0x1d,
	0x27, 0x1a, 0xa9, 0x10, 0xe8, 0x39, 0x84, 0x69, 0xce, 0x04, 0xd5, 0x45, 0x1e, 0x8d, 0x9f, 0xac,
	0x79, 0xaa, 0x54, 0x93, 0x3d, 0x6c, 0x30, 0xa8, 0x0f, 0xbe, 0xac, 0x74, 0x21, 0x85, 0xd8, 0x97,
	0xd5, 0x59, 0xcf, 0x72, 0x95, 0xfc, 0xb6, 0x62, 0xc0, 0xc4, 0xd6, 0xd2, 0x26, 0xde, 0x0e, 0x6d,
	0xe2, 0xef, 0xd0, 0x26, 0x41, 0x5b, 0x9b, 0x24, 0x1c, 0xa0, 0xe6, 0x6b, 0xfb, 0xb0, 0x68, 0x9d,
	0x9f, 0x8d, 0xa9, 0x1b, 0xac, 0x4f, 0xdd, 0x63, 0x08, 0x6e, 0x49, 0x65, 0x87, 0x84, 0xfa, 0x4c,
	0x04, 0x44, 0x0e, 0xf7, 0x3b, 0x4c, 0x28, 0x9a, 0x72, 0x6a, 0x8c, 0x1e, 0x60, 0x7b, 0xba, 0x77,
	0x68, 0xd7, 0x83, 0xb9, 0xd3, 0x18, 0xcc, 0xcf, 0x57, 0x46, 0x55, 0x1a, 0xdf, 0x6f, 0x34, 0x79,
	0x01, 0x87, 0x6e, 0x22, 0xb7, 0xa0, 0xff, 0xf1, 0xa0, 0x8f, 0x69, 0x4a, 0x67, 0x0b, 0xf9, 0xc1,
	0x53, 0x77, 0xc1, 0xe9, 0xbb, 0x2b, 0xa3, 0x0b, 0xb4, 0xce, 0x91, 0xa8, 0xb9, 0x4a, 0x54, 0x5b,
	0x77, 0xf4, 0x83, 0xfa, 0xbb, 0x6e, 0xe8, 0xd0, 0x6d, 0xe8, 0x9a, 0x85, 0xae, 0xcb, 0x82, 0x93,
	0xc2, 0x9e, 0x9b, 0xc2, 0x64, 0xa4, 0x22, 0xf8, 0xd5, 0x7a, 0xff, 0xaa, 0x78, 0xc3, 0xb6, 0x84,
	0xfc, 0x0b, 0xa0, 0x1a, 0xaf, 0xb2, 0xb8, 0xfd, 0xce, 0xca, 0x7b, 0xbf, 0xcd, 0xfb, 0xc0, 0xf1,
	0x3e, 0xf9, 0xd7, 0x83, 0x53, 0x4c, 0x17, 0x79, 0x65, 0x0d, 0x5c, 0x30, 0x3e, 0x27, 0xb9, 0x36,
	0xd1, 0x5c, 0x4c, 0xde, 0xc6, 0x62, 0xda, 0xec, 0x1f, 0x7f, 0x87, 0xfe, 0x09, 0x76, 0xe8, 0x9f,
	0x4e, 0xeb, 0x9a, 0x69, 0xce, 0xdb, 0x70, 0x7d, 0xde, 0x26, 0x7f, 0xf9, 0xf0, 0xb1, 0x1b, 0xca,
	0x79, 0xc9, 0x39, 0x2d, 0xa4, 0x8e, 0xa5, 0x2e, 0x03, 0xaf, 0x51, 0x06, 0xcb, 0xf5, 0xe9, 0x3b,
	0xeb, 0xf3, 0x9e, 0x75, 0x16, 0x3c, 0x7c, 0x9d, 0x75, 0xde, 0xb3, 0xce, 0xee, 0xd9, 0x4b, 0xe1,
	0x43, 0xf6, 0x52, 0xb7, 0x75, 0x2f, 0xad, 0x12, 0xdd, 0x73, 0x13, 0x7d, 0x06, 0xcf, 0x5c, 0x72,
	0x26, 0x33, 0x21, 0x19, 0xaf, 0x5e, 0xd7, 0x7b, 0x67, 0x7d, 0x33, 0x79, 0x1b, 0x9b, 0x29, 0xf9,
	0x01, 0x4e, 0xdc, 0x37, 0x56, 0xc5, 0x38, 0xae, 0x57, 0xb3, 0xf9, 0xed, 0x8a, 0x37, 0xe7, 0xbe,
	0xfd, 0xf3, 0x5a, 0x02, 0x93, 0x73, 0x78, 0xbc, 0xa1, 0x75, 0x7a, 0xc9, 0xbb, 0xa7, 0x97, 0x1a,
	0xe3, 0x30, 0x99, 0x00, 0xda, 0x78, 0x44, 0xfc, 0x1f, 0x77, 0x6e, 0xba, 0xfa, 0x7f, 0xf7, 0xab,
	0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x16, 0x17, 0xcb, 0x00, 0x0b, 0x00, 0x00,
}
