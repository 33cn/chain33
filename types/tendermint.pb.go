// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tendermint.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BlockID struct {
	Hash []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *BlockID) Reset()                    { *m = BlockID{} }
func (m *BlockID) String() string            { return proto.CompactTextString(m) }
func (*BlockID) ProtoMessage()               {}
func (*BlockID) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *BlockID) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type TendermintBitArray struct {
	Bits  int32    `protobuf:"varint,1,opt,name=Bits" json:"Bits,omitempty"`
	Elems []uint64 `protobuf:"varint,2,rep,packed,name=Elems" json:"Elems,omitempty"`
}

func (m *TendermintBitArray) Reset()                    { *m = TendermintBitArray{} }
func (m *TendermintBitArray) String() string            { return proto.CompactTextString(m) }
func (*TendermintBitArray) ProtoMessage()               {}
func (*TendermintBitArray) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *TendermintBitArray) GetBits() int32 {
	if m != nil {
		return m.Bits
	}
	return 0
}

func (m *TendermintBitArray) GetElems() []uint64 {
	if m != nil {
		return m.Elems
	}
	return nil
}

type Vote struct {
	ValidatorAddress []byte   `protobuf:"bytes,1,opt,name=ValidatorAddress,proto3" json:"ValidatorAddress,omitempty"`
	ValidatorIndex   int32    `protobuf:"varint,2,opt,name=ValidatorIndex" json:"ValidatorIndex,omitempty"`
	Height           int64    `protobuf:"varint,3,opt,name=Height" json:"Height,omitempty"`
	Round            int32    `protobuf:"varint,4,opt,name=Round" json:"Round,omitempty"`
	Timestamp        int64    `protobuf:"varint,5,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Type             uint32   `protobuf:"varint,6,opt,name=Type" json:"Type,omitempty"`
	BlockID          *BlockID `protobuf:"bytes,7,opt,name=BlockID" json:"BlockID,omitempty"`
	Signature        []byte   `protobuf:"bytes,8,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *Vote) Reset()                    { *m = Vote{} }
func (m *Vote) String() string            { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()               {}
func (*Vote) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

func (m *Vote) GetValidatorAddress() []byte {
	if m != nil {
		return m.ValidatorAddress
	}
	return nil
}

func (m *Vote) GetValidatorIndex() int32 {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *Vote) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Vote) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Vote) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Vote) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Vote) GetBlockID() *BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

func (m *Vote) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type TendermintCommit struct {
	BlockID    *BlockID `protobuf:"bytes,1,opt,name=BlockID" json:"BlockID,omitempty"`
	Precommits []*Vote  `protobuf:"bytes,2,rep,name=Precommits" json:"Precommits,omitempty"`
}

func (m *TendermintCommit) Reset()                    { *m = TendermintCommit{} }
func (m *TendermintCommit) String() string            { return proto.CompactTextString(m) }
func (*TendermintCommit) ProtoMessage()               {}
func (*TendermintCommit) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

func (m *TendermintCommit) GetBlockID() *BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

func (m *TendermintCommit) GetPrecommits() []*Vote {
	if m != nil {
		return m.Precommits
	}
	return nil
}

type TendermintBlockInfo struct {
	SeenCommit *TendermintCommit `protobuf:"bytes,1,opt,name=SeenCommit" json:"SeenCommit,omitempty"`
	LastCommit *TendermintCommit `protobuf:"bytes,2,opt,name=LastCommit" json:"LastCommit,omitempty"`
	State      *State            `protobuf:"bytes,3,opt,name=State" json:"State,omitempty"`
	Proposal   []byte            `protobuf:"bytes,4,opt,name=Proposal,proto3" json:"Proposal,omitempty"`
}

func (m *TendermintBlockInfo) Reset()                    { *m = TendermintBlockInfo{} }
func (m *TendermintBlockInfo) String() string            { return proto.CompactTextString(m) }
func (*TendermintBlockInfo) ProtoMessage()               {}
func (*TendermintBlockInfo) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{4} }

func (m *TendermintBlockInfo) GetSeenCommit() *TendermintCommit {
	if m != nil {
		return m.SeenCommit
	}
	return nil
}

func (m *TendermintBlockInfo) GetLastCommit() *TendermintCommit {
	if m != nil {
		return m.LastCommit
	}
	return nil
}

func (m *TendermintBlockInfo) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *TendermintBlockInfo) GetProposal() []byte {
	if m != nil {
		return m.Proposal
	}
	return nil
}

type BlockSize struct {
	MaxBytes int32 `protobuf:"varint,1,opt,name=MaxBytes" json:"MaxBytes,omitempty"`
	MaxTxs   int32 `protobuf:"varint,2,opt,name=MaxTxs" json:"MaxTxs,omitempty"`
	MaxGas   int64 `protobuf:"varint,3,opt,name=MaxGas" json:"MaxGas,omitempty"`
}

func (m *BlockSize) Reset()                    { *m = BlockSize{} }
func (m *BlockSize) String() string            { return proto.CompactTextString(m) }
func (*BlockSize) ProtoMessage()               {}
func (*BlockSize) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{5} }

func (m *BlockSize) GetMaxBytes() int32 {
	if m != nil {
		return m.MaxBytes
	}
	return 0
}

func (m *BlockSize) GetMaxTxs() int32 {
	if m != nil {
		return m.MaxTxs
	}
	return 0
}

func (m *BlockSize) GetMaxGas() int64 {
	if m != nil {
		return m.MaxGas
	}
	return 0
}

type TxSize struct {
	MaxBytes int32 `protobuf:"varint,1,opt,name=MaxBytes" json:"MaxBytes,omitempty"`
	MaxGas   int64 `protobuf:"varint,2,opt,name=MaxGas" json:"MaxGas,omitempty"`
}

func (m *TxSize) Reset()                    { *m = TxSize{} }
func (m *TxSize) String() string            { return proto.CompactTextString(m) }
func (*TxSize) ProtoMessage()               {}
func (*TxSize) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{6} }

func (m *TxSize) GetMaxBytes() int32 {
	if m != nil {
		return m.MaxBytes
	}
	return 0
}

func (m *TxSize) GetMaxGas() int64 {
	if m != nil {
		return m.MaxGas
	}
	return 0
}

type BlockGossip struct {
	BlockPartSizeBytes int32 `protobuf:"varint,1,opt,name=BlockPartSizeBytes" json:"BlockPartSizeBytes,omitempty"`
}

func (m *BlockGossip) Reset()                    { *m = BlockGossip{} }
func (m *BlockGossip) String() string            { return proto.CompactTextString(m) }
func (*BlockGossip) ProtoMessage()               {}
func (*BlockGossip) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{7} }

func (m *BlockGossip) GetBlockPartSizeBytes() int32 {
	if m != nil {
		return m.BlockPartSizeBytes
	}
	return 0
}

type EvidenceParams struct {
	MaxAge int64 `protobuf:"varint,1,opt,name=MaxAge" json:"MaxAge,omitempty"`
}

func (m *EvidenceParams) Reset()                    { *m = EvidenceParams{} }
func (m *EvidenceParams) String() string            { return proto.CompactTextString(m) }
func (*EvidenceParams) ProtoMessage()               {}
func (*EvidenceParams) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{8} }

func (m *EvidenceParams) GetMaxAge() int64 {
	if m != nil {
		return m.MaxAge
	}
	return 0
}

type ConsensusParams struct {
	BlockSize      *BlockSize      `protobuf:"bytes,1,opt,name=BlockSize" json:"BlockSize,omitempty"`
	TxSize         *TxSize         `protobuf:"bytes,2,opt,name=TxSize" json:"TxSize,omitempty"`
	BlockGossip    *BlockGossip    `protobuf:"bytes,3,opt,name=BlockGossip" json:"BlockGossip,omitempty"`
	EvidenceParams *EvidenceParams `protobuf:"bytes,4,opt,name=EvidenceParams" json:"EvidenceParams,omitempty"`
}

func (m *ConsensusParams) Reset()                    { *m = ConsensusParams{} }
func (m *ConsensusParams) String() string            { return proto.CompactTextString(m) }
func (*ConsensusParams) ProtoMessage()               {}
func (*ConsensusParams) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{9} }

func (m *ConsensusParams) GetBlockSize() *BlockSize {
	if m != nil {
		return m.BlockSize
	}
	return nil
}

func (m *ConsensusParams) GetTxSize() *TxSize {
	if m != nil {
		return m.TxSize
	}
	return nil
}

func (m *ConsensusParams) GetBlockGossip() *BlockGossip {
	if m != nil {
		return m.BlockGossip
	}
	return nil
}

func (m *ConsensusParams) GetEvidenceParams() *EvidenceParams {
	if m != nil {
		return m.EvidenceParams
	}
	return nil
}

type Validator struct {
	Address     []byte `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	PubKey      []byte `protobuf:"bytes,2,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	VotingPower int64  `protobuf:"varint,3,opt,name=VotingPower" json:"VotingPower,omitempty"`
	Accum       int64  `protobuf:"varint,4,opt,name=Accum" json:"Accum,omitempty"`
}

func (m *Validator) Reset()                    { *m = Validator{} }
func (m *Validator) String() string            { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()               {}
func (*Validator) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{10} }

func (m *Validator) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Validator) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Validator) GetVotingPower() int64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

func (m *Validator) GetAccum() int64 {
	if m != nil {
		return m.Accum
	}
	return 0
}

type ValidatorSet struct {
	Validators []*Validator `protobuf:"bytes,1,rep,name=Validators" json:"Validators,omitempty"`
	Proposer   *Validator   `protobuf:"bytes,2,opt,name=Proposer" json:"Proposer,omitempty"`
}

func (m *ValidatorSet) Reset()                    { *m = ValidatorSet{} }
func (m *ValidatorSet) String() string            { return proto.CompactTextString(m) }
func (*ValidatorSet) ProtoMessage()               {}
func (*ValidatorSet) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{11} }

func (m *ValidatorSet) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *ValidatorSet) GetProposer() *Validator {
	if m != nil {
		return m.Proposer
	}
	return nil
}

type State struct {
	ChainID                          string           `protobuf:"bytes,1,opt,name=ChainID" json:"ChainID,omitempty"`
	LastBlockHeight                  int64            `protobuf:"varint,2,opt,name=LastBlockHeight" json:"LastBlockHeight,omitempty"`
	LastBlockTotalTx                 int64            `protobuf:"varint,3,opt,name=LastBlockTotalTx" json:"LastBlockTotalTx,omitempty"`
	LastBlockTime                    int64            `protobuf:"varint,4,opt,name=LastBlockTime" json:"LastBlockTime,omitempty"`
	Validators                       *ValidatorSet    `protobuf:"bytes,5,opt,name=Validators" json:"Validators,omitempty"`
	LastValidators                   *ValidatorSet    `protobuf:"bytes,6,opt,name=LastValidators" json:"LastValidators,omitempty"`
	LastHeightValidatorsChanged      int64            `protobuf:"varint,7,opt,name=LastHeightValidatorsChanged" json:"LastHeightValidatorsChanged,omitempty"`
	ConsensusParams                  *ConsensusParams `protobuf:"bytes,8,opt,name=ConsensusParams" json:"ConsensusParams,omitempty"`
	LastHeightConsensusParamsChanged int64            `protobuf:"varint,9,opt,name=LastHeightConsensusParamsChanged" json:"LastHeightConsensusParamsChanged,omitempty"`
	LastResultsHash                  []byte           `protobuf:"bytes,10,opt,name=LastResultsHash,proto3" json:"LastResultsHash,omitempty"`
	AppHash                          []byte           `protobuf:"bytes,11,opt,name=AppHash,proto3" json:"AppHash,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{12} }

func (m *State) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *State) GetLastBlockHeight() int64 {
	if m != nil {
		return m.LastBlockHeight
	}
	return 0
}

func (m *State) GetLastBlockTotalTx() int64 {
	if m != nil {
		return m.LastBlockTotalTx
	}
	return 0
}

func (m *State) GetLastBlockTime() int64 {
	if m != nil {
		return m.LastBlockTime
	}
	return 0
}

func (m *State) GetValidators() *ValidatorSet {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *State) GetLastValidators() *ValidatorSet {
	if m != nil {
		return m.LastValidators
	}
	return nil
}

func (m *State) GetLastHeightValidatorsChanged() int64 {
	if m != nil {
		return m.LastHeightValidatorsChanged
	}
	return 0
}

func (m *State) GetConsensusParams() *ConsensusParams {
	if m != nil {
		return m.ConsensusParams
	}
	return nil
}

func (m *State) GetLastHeightConsensusParamsChanged() int64 {
	if m != nil {
		return m.LastHeightConsensusParamsChanged
	}
	return 0
}

func (m *State) GetLastResultsHash() []byte {
	if m != nil {
		return m.LastResultsHash
	}
	return nil
}

func (m *State) GetAppHash() []byte {
	if m != nil {
		return m.AppHash
	}
	return nil
}

func init() {
	proto.RegisterType((*BlockID)(nil), "types.BlockID")
	proto.RegisterType((*TendermintBitArray)(nil), "types.TendermintBitArray")
	proto.RegisterType((*Vote)(nil), "types.Vote")
	proto.RegisterType((*TendermintCommit)(nil), "types.TendermintCommit")
	proto.RegisterType((*TendermintBlockInfo)(nil), "types.TendermintBlockInfo")
	proto.RegisterType((*BlockSize)(nil), "types.BlockSize")
	proto.RegisterType((*TxSize)(nil), "types.TxSize")
	proto.RegisterType((*BlockGossip)(nil), "types.BlockGossip")
	proto.RegisterType((*EvidenceParams)(nil), "types.EvidenceParams")
	proto.RegisterType((*ConsensusParams)(nil), "types.ConsensusParams")
	proto.RegisterType((*Validator)(nil), "types.Validator")
	proto.RegisterType((*ValidatorSet)(nil), "types.ValidatorSet")
	proto.RegisterType((*State)(nil), "types.State")
}

func init() { proto.RegisterFile("tendermint.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 789 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x6d, 0x6f, 0xd3, 0x48,
	0x10, 0x96, 0xf3, 0xd6, 0x66, 0x9c, 0xa6, 0xd1, 0xf6, 0xae, 0x67, 0xdd, 0xf5, 0xa4, 0xc8, 0xba,
	0x3b, 0x59, 0x07, 0x8a, 0x50, 0x8a, 0xc4, 0x07, 0x28, 0x6a, 0x12, 0xaa, 0xb6, 0x40, 0xa5, 0x68,
	0x13, 0x95, 0xcf, 0xdb, 0x78, 0x49, 0x2c, 0xe2, 0x17, 0x79, 0x37, 0x90, 0xf0, 0x91, 0xbf, 0xc2,
	0x8f, 0xe1, 0x57, 0xf0, 0x5f, 0xd0, 0x8e, 0xd7, 0x8e, 0xed, 0x40, 0xe1, 0x9b, 0xe7, 0x99, 0x67,
	0x66, 0x76, 0x9e, 0x99, 0x5d, 0x43, 0x47, 0xf2, 0xc0, 0xe5, 0xb1, 0xef, 0x05, 0xb2, 0x17, 0xc5,
	0xa1, 0x0c, 0x49, 0x5d, 0x6e, 0x22, 0x2e, 0xec, 0xbf, 0x61, 0x6f, 0xb8, 0x0c, 0x67, 0xef, 0xae,
	0x5f, 0x10, 0x02, 0xb5, 0x2b, 0x26, 0x16, 0x96, 0xd1, 0x35, 0x9c, 0x16, 0xc5, 0x6f, 0xfb, 0x39,
	0x90, 0x69, 0x16, 0x39, 0xf4, 0xe4, 0x20, 0x8e, 0xd9, 0x46, 0x31, 0x87, 0x9e, 0x14, 0xc8, 0xac,
	0x53, 0xfc, 0x26, 0xbf, 0x41, 0xfd, 0x62, 0xc9, 0x7d, 0x61, 0x55, 0xba, 0x55, 0xa7, 0x46, 0x13,
	0xc3, 0xfe, 0x54, 0x81, 0xda, 0x6d, 0x28, 0x39, 0xf9, 0x1f, 0x3a, 0xb7, 0x6c, 0xe9, 0xb9, 0x4c,
	0x86, 0xf1, 0xc0, 0x75, 0x63, 0x2e, 0x84, 0x2e, 0xb4, 0x83, 0x93, 0xff, 0xa0, 0x9d, 0x61, 0xd7,
	0x81, 0xcb, 0xd7, 0x56, 0x05, 0x0b, 0x95, 0x50, 0x72, 0x0c, 0x8d, 0x2b, 0xee, 0xcd, 0x17, 0xd2,
	0xaa, 0x76, 0x0d, 0xa7, 0x4a, 0xb5, 0xa5, 0x8e, 0x42, 0xc3, 0x55, 0xe0, 0x5a, 0x35, 0x0c, 0x4b,
	0x0c, 0x72, 0x02, 0xcd, 0xa9, 0xe7, 0x73, 0x21, 0x99, 0x1f, 0x59, 0x75, 0x0c, 0xd8, 0x02, 0xaa,
	0xa5, 0xe9, 0x26, 0xe2, 0x56, 0xa3, 0x6b, 0x38, 0x07, 0x14, 0xbf, 0x89, 0x93, 0x69, 0x63, 0xed,
	0x75, 0x0d, 0xc7, 0xec, 0xb7, 0x7b, 0x28, 0x5a, 0x4f, 0xa3, 0x34, 0x93, 0xee, 0x04, 0x9a, 0x13,
	0x6f, 0x1e, 0x30, 0xb9, 0x8a, 0xb9, 0xb5, 0x8f, 0x6d, 0x6d, 0x01, 0xdb, 0x83, 0xce, 0x56, 0xc4,
	0x51, 0xe8, 0xfb, 0x9e, 0xcc, 0xe7, 0x36, 0xee, 0xcf, 0xfd, 0x00, 0x60, 0x1c, 0xf3, 0x19, 0x86,
	0x25, 0xea, 0x9a, 0x7d, 0x53, 0x93, 0x95, 0xb4, 0x34, 0xe7, 0xb6, 0xbf, 0x18, 0x70, 0x94, 0x1b,
	0x18, 0xa6, 0x08, 0xde, 0x86, 0xe4, 0x09, 0xc0, 0x84, 0xf3, 0x20, 0x29, 0xae, 0x2b, 0xfe, 0xa1,
	0x93, 0x94, 0xcf, 0x46, 0x73, 0x54, 0x15, 0xf8, 0x9a, 0x09, 0xed, 0xc1, 0x39, 0xdc, 0x17, 0xb8,
	0xa5, 0x12, 0x1b, 0xea, 0x13, 0xc9, 0x24, 0xc7, 0xd9, 0x98, 0xfd, 0x96, 0x8e, 0x41, 0x8c, 0x26,
	0x2e, 0xf2, 0x27, 0xec, 0x8f, 0xe3, 0x30, 0x0a, 0x05, 0x5b, 0xe2, 0xac, 0x5a, 0x34, 0xb3, 0xed,
	0x37, 0xd0, 0xc4, 0xe3, 0x4f, 0xbc, 0x8f, 0x48, 0xbc, 0x61, 0xeb, 0xe1, 0x46, 0xf2, 0x74, 0xe9,
	0x32, 0x5b, 0x6d, 0xc1, 0x0d, 0x5b, 0x4f, 0xd7, 0x42, 0x6f, 0x89, 0xb6, 0x34, 0x7e, 0xc9, 0x44,
	0xba, 0x1d, 0x89, 0x65, 0x3f, 0x83, 0xc6, 0x74, 0xfd, 0x8b, 0x59, 0x55, 0x74, 0xa5, 0x10, 0x7d,
	0x06, 0x26, 0x1e, 0xeb, 0x32, 0x14, 0xc2, 0x8b, 0x48, 0x0f, 0x08, 0x9a, 0x63, 0x16, 0x4b, 0x95,
	0x33, 0x9f, 0xec, 0x3b, 0x1e, 0xdb, 0x81, 0xf6, 0xc5, 0x7b, 0xcf, 0xe5, 0xc1, 0x8c, 0x8f, 0x59,
	0xcc, 0xfc, 0xb4, 0xd0, 0x60, 0xce, 0x31, 0x2a, 0x29, 0x34, 0x98, 0x73, 0xfb, 0xab, 0x01, 0x87,
	0xa3, 0x30, 0x10, 0x3c, 0x10, 0x2b, 0xa1, 0xb9, 0xbd, 0x9c, 0x26, 0x7a, 0x88, 0x9d, 0xfc, 0xda,
	0x28, 0x9c, 0xe6, 0x64, 0xfb, 0x37, 0x6d, 0x55, 0x0f, 0xee, 0x20, 0x1d, 0x1c, 0x82, 0x34, 0xd5,
	0xe1, 0x71, 0xa1, 0x27, 0x3d, 0x30, 0x92, 0x4f, 0x9c, 0x78, 0x68, 0xa1, 0xf5, 0xb3, 0x72, 0x2b,
	0x38, 0x42, 0xb3, 0xff, 0xbb, 0x0e, 0x2c, 0x3a, 0x69, 0x89, 0x6c, 0xaf, 0xa0, 0x99, 0x5d, 0x67,
	0x62, 0xc1, 0x5e, 0xf1, 0x51, 0x48, 0x4d, 0x25, 0xcf, 0x78, 0x75, 0xf7, 0x8a, 0x6f, 0xb0, 0x85,
	0x16, 0xd5, 0x16, 0xe9, 0x82, 0x79, 0x1b, 0x4a, 0x2f, 0x98, 0x8f, 0xc3, 0x0f, 0x3c, 0xd6, 0x23,
	0xce, 0x43, 0xea, 0x15, 0x18, 0xcc, 0x66, 0x2b, 0x1f, 0x8f, 0x55, 0xa5, 0x89, 0x61, 0x07, 0xd0,
	0xca, 0xca, 0x4e, 0xb8, 0x24, 0x8f, 0x00, 0x32, 0x5b, 0x15, 0xaf, 0xe6, 0x34, 0xcd, 0x1c, 0x34,
	0xc7, 0x21, 0x0f, 0xd3, 0xa5, 0xe5, 0xb1, 0x96, 0x75, 0x97, 0x9f, 0x31, 0xec, 0xcf, 0x35, 0x7d,
	0x0f, 0x54, 0x8f, 0xa3, 0x05, 0xf3, 0x02, 0x7d, 0xe3, 0x9b, 0x34, 0x35, 0x89, 0x03, 0x87, 0xea,
	0xe2, 0xa0, 0xb8, 0xfa, 0x41, 0x4b, 0x96, 0xae, 0x0c, 0xab, 0x57, 0x34, 0x83, 0xa6, 0xa1, 0x64,
	0xcb, 0xe9, 0x5a, 0xb7, 0xbe, 0x83, 0x93, 0x7f, 0xe0, 0x60, 0x8b, 0x79, 0x3e, 0xd7, 0x3a, 0x14,
	0x41, 0x72, 0x5a, 0xe8, 0xbf, 0x8e, 0xfd, 0x1c, 0x95, 0xfb, 0x99, 0x70, 0x59, 0x90, 0xe0, 0x29,
	0xb4, 0x55, 0x96, 0x5c, 0x60, 0xe3, 0xc7, 0x81, 0x25, 0x2a, 0x39, 0x87, 0xbf, 0x14, 0x92, 0x74,
	0xb4, 0xc5, 0x47, 0x0b, 0x16, 0xcc, 0xb9, 0x8b, 0x2f, 0x6d, 0x95, 0xde, 0x47, 0x21, 0xe7, 0x3b,
	0x37, 0x03, 0xdf, 0x5c, 0xb3, 0x7f, 0xac, 0xeb, 0x97, 0xbc, 0x74, 0xe7, 0x22, 0xbd, 0x84, 0xee,
	0xb6, 0x40, 0xc9, 0x99, 0x1e, 0xa4, 0x89, 0x07, 0xf9, 0x29, 0x2f, 0x9d, 0x1e, 0xe5, 0x62, 0xb5,
	0x94, 0x02, 0xff, 0xa0, 0x80, 0xab, 0x5a, 0x86, 0x71, 0xcb, 0xa3, 0x08, 0x19, 0xa6, 0xde, 0xf2,
	0xc4, 0xbc, 0x6b, 0xe0, 0x3f, 0xf9, 0xf4, 0x5b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x22, 0xef,
	0x4e, 0xa7, 0x07, 0x00, 0x00,
}
