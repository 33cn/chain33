// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tendermint.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BlockID struct {
	Hash []byte `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *BlockID) Reset()                    { *m = BlockID{} }
func (m *BlockID) String() string            { return proto.CompactTextString(m) }
func (*BlockID) ProtoMessage()               {}
func (*BlockID) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

func (m *BlockID) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type TendermintBitArray struct {
	Bits  int32    `protobuf:"varint,1,opt,name=Bits" json:"Bits,omitempty"`
	Elems []uint64 `protobuf:"varint,2,rep,packed,name=Elems" json:"Elems,omitempty"`
}

func (m *TendermintBitArray) Reset()                    { *m = TendermintBitArray{} }
func (m *TendermintBitArray) String() string            { return proto.CompactTextString(m) }
func (*TendermintBitArray) ProtoMessage()               {}
func (*TendermintBitArray) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{1} }

func (m *TendermintBitArray) GetBits() int32 {
	if m != nil {
		return m.Bits
	}
	return 0
}

func (m *TendermintBitArray) GetElems() []uint64 {
	if m != nil {
		return m.Elems
	}
	return nil
}

type Vote struct {
	ValidatorAddress []byte   `protobuf:"bytes,1,opt,name=ValidatorAddress,proto3" json:"ValidatorAddress,omitempty"`
	ValidatorIndex   int32    `protobuf:"varint,2,opt,name=ValidatorIndex" json:"ValidatorIndex,omitempty"`
	Height           int64    `protobuf:"varint,3,opt,name=Height" json:"Height,omitempty"`
	Round            int32    `protobuf:"varint,4,opt,name=Round" json:"Round,omitempty"`
	Timestamp        int64    `protobuf:"varint,5,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Type             uint32   `protobuf:"varint,6,opt,name=Type" json:"Type,omitempty"`
	BlockID          *BlockID `protobuf:"bytes,7,opt,name=BlockID" json:"BlockID,omitempty"`
	Signature        []byte   `protobuf:"bytes,8,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *Vote) Reset()                    { *m = Vote{} }
func (m *Vote) String() string            { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()               {}
func (*Vote) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{2} }

func (m *Vote) GetValidatorAddress() []byte {
	if m != nil {
		return m.ValidatorAddress
	}
	return nil
}

func (m *Vote) GetValidatorIndex() int32 {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *Vote) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Vote) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Vote) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Vote) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Vote) GetBlockID() *BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

func (m *Vote) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type TendermintCommit struct {
	BlockID    *BlockID `protobuf:"bytes,1,opt,name=BlockID" json:"BlockID,omitempty"`
	Precommits []*Vote  `protobuf:"bytes,2,rep,name=Precommits" json:"Precommits,omitempty"`
}

func (m *TendermintCommit) Reset()                    { *m = TendermintCommit{} }
func (m *TendermintCommit) String() string            { return proto.CompactTextString(m) }
func (*TendermintCommit) ProtoMessage()               {}
func (*TendermintCommit) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{3} }

func (m *TendermintCommit) GetBlockID() *BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

func (m *TendermintCommit) GetPrecommits() []*Vote {
	if m != nil {
		return m.Precommits
	}
	return nil
}

type TendermintBlockInfo struct {
	SeenCommit *TendermintCommit `protobuf:"bytes,1,opt,name=SeenCommit" json:"SeenCommit,omitempty"`
	LastCommit *TendermintCommit `protobuf:"bytes,2,opt,name=LastCommit" json:"LastCommit,omitempty"`
	State      *State            `protobuf:"bytes,3,opt,name=State" json:"State,omitempty"`
	Proposal   *Proposal         `protobuf:"bytes,4,opt,name=Proposal" json:"Proposal,omitempty"`
	Block      *TendermintBlock  `protobuf:"bytes,5,opt,name=block" json:"block,omitempty"`
}

func (m *TendermintBlockInfo) Reset()                    { *m = TendermintBlockInfo{} }
func (m *TendermintBlockInfo) String() string            { return proto.CompactTextString(m) }
func (*TendermintBlockInfo) ProtoMessage()               {}
func (*TendermintBlockInfo) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{4} }

func (m *TendermintBlockInfo) GetSeenCommit() *TendermintCommit {
	if m != nil {
		return m.SeenCommit
	}
	return nil
}

func (m *TendermintBlockInfo) GetLastCommit() *TendermintCommit {
	if m != nil {
		return m.LastCommit
	}
	return nil
}

func (m *TendermintBlockInfo) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *TendermintBlockInfo) GetProposal() *Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

func (m *TendermintBlockInfo) GetBlock() *TendermintBlock {
	if m != nil {
		return m.Block
	}
	return nil
}

type BlockSize struct {
	MaxBytes int32 `protobuf:"varint,1,opt,name=MaxBytes" json:"MaxBytes,omitempty"`
	MaxTxs   int32 `protobuf:"varint,2,opt,name=MaxTxs" json:"MaxTxs,omitempty"`
	MaxGas   int64 `protobuf:"varint,3,opt,name=MaxGas" json:"MaxGas,omitempty"`
}

func (m *BlockSize) Reset()                    { *m = BlockSize{} }
func (m *BlockSize) String() string            { return proto.CompactTextString(m) }
func (*BlockSize) ProtoMessage()               {}
func (*BlockSize) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{5} }

func (m *BlockSize) GetMaxBytes() int32 {
	if m != nil {
		return m.MaxBytes
	}
	return 0
}

func (m *BlockSize) GetMaxTxs() int32 {
	if m != nil {
		return m.MaxTxs
	}
	return 0
}

func (m *BlockSize) GetMaxGas() int64 {
	if m != nil {
		return m.MaxGas
	}
	return 0
}

type TxSize struct {
	MaxBytes int32 `protobuf:"varint,1,opt,name=MaxBytes" json:"MaxBytes,omitempty"`
	MaxGas   int64 `protobuf:"varint,2,opt,name=MaxGas" json:"MaxGas,omitempty"`
}

func (m *TxSize) Reset()                    { *m = TxSize{} }
func (m *TxSize) String() string            { return proto.CompactTextString(m) }
func (*TxSize) ProtoMessage()               {}
func (*TxSize) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{6} }

func (m *TxSize) GetMaxBytes() int32 {
	if m != nil {
		return m.MaxBytes
	}
	return 0
}

func (m *TxSize) GetMaxGas() int64 {
	if m != nil {
		return m.MaxGas
	}
	return 0
}

type BlockGossip struct {
	BlockPartSizeBytes int32 `protobuf:"varint,1,opt,name=BlockPartSizeBytes" json:"BlockPartSizeBytes,omitempty"`
}

func (m *BlockGossip) Reset()                    { *m = BlockGossip{} }
func (m *BlockGossip) String() string            { return proto.CompactTextString(m) }
func (*BlockGossip) ProtoMessage()               {}
func (*BlockGossip) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{7} }

func (m *BlockGossip) GetBlockPartSizeBytes() int32 {
	if m != nil {
		return m.BlockPartSizeBytes
	}
	return 0
}

type EvidenceParams struct {
	MaxAge int64 `protobuf:"varint,1,opt,name=MaxAge" json:"MaxAge,omitempty"`
}

func (m *EvidenceParams) Reset()                    { *m = EvidenceParams{} }
func (m *EvidenceParams) String() string            { return proto.CompactTextString(m) }
func (*EvidenceParams) ProtoMessage()               {}
func (*EvidenceParams) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{8} }

func (m *EvidenceParams) GetMaxAge() int64 {
	if m != nil {
		return m.MaxAge
	}
	return 0
}

type ConsensusParams struct {
	BlockSize      *BlockSize      `protobuf:"bytes,1,opt,name=BlockSize" json:"BlockSize,omitempty"`
	TxSize         *TxSize         `protobuf:"bytes,2,opt,name=TxSize" json:"TxSize,omitempty"`
	BlockGossip    *BlockGossip    `protobuf:"bytes,3,opt,name=BlockGossip" json:"BlockGossip,omitempty"`
	EvidenceParams *EvidenceParams `protobuf:"bytes,4,opt,name=EvidenceParams" json:"EvidenceParams,omitempty"`
}

func (m *ConsensusParams) Reset()                    { *m = ConsensusParams{} }
func (m *ConsensusParams) String() string            { return proto.CompactTextString(m) }
func (*ConsensusParams) ProtoMessage()               {}
func (*ConsensusParams) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{9} }

func (m *ConsensusParams) GetBlockSize() *BlockSize {
	if m != nil {
		return m.BlockSize
	}
	return nil
}

func (m *ConsensusParams) GetTxSize() *TxSize {
	if m != nil {
		return m.TxSize
	}
	return nil
}

func (m *ConsensusParams) GetBlockGossip() *BlockGossip {
	if m != nil {
		return m.BlockGossip
	}
	return nil
}

func (m *ConsensusParams) GetEvidenceParams() *EvidenceParams {
	if m != nil {
		return m.EvidenceParams
	}
	return nil
}

type Validator struct {
	Address     []byte `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	PubKey      []byte `protobuf:"bytes,2,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	VotingPower int64  `protobuf:"varint,3,opt,name=VotingPower" json:"VotingPower,omitempty"`
	Accum       int64  `protobuf:"varint,4,opt,name=Accum" json:"Accum,omitempty"`
}

func (m *Validator) Reset()                    { *m = Validator{} }
func (m *Validator) String() string            { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()               {}
func (*Validator) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{10} }

func (m *Validator) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Validator) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *Validator) GetVotingPower() int64 {
	if m != nil {
		return m.VotingPower
	}
	return 0
}

func (m *Validator) GetAccum() int64 {
	if m != nil {
		return m.Accum
	}
	return 0
}

type ValidatorSet struct {
	Validators []*Validator `protobuf:"bytes,1,rep,name=Validators" json:"Validators,omitempty"`
	Proposer   *Validator   `protobuf:"bytes,2,opt,name=Proposer" json:"Proposer,omitempty"`
}

func (m *ValidatorSet) Reset()                    { *m = ValidatorSet{} }
func (m *ValidatorSet) String() string            { return proto.CompactTextString(m) }
func (*ValidatorSet) ProtoMessage()               {}
func (*ValidatorSet) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{11} }

func (m *ValidatorSet) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *ValidatorSet) GetProposer() *Validator {
	if m != nil {
		return m.Proposer
	}
	return nil
}

type State struct {
	ChainID                          string           `protobuf:"bytes,1,opt,name=ChainID" json:"ChainID,omitempty"`
	LastBlockHeight                  int64            `protobuf:"varint,2,opt,name=LastBlockHeight" json:"LastBlockHeight,omitempty"`
	LastBlockTotalTx                 int64            `protobuf:"varint,3,opt,name=LastBlockTotalTx" json:"LastBlockTotalTx,omitempty"`
	LastBlockID                      *BlockID         `protobuf:"bytes,4,opt,name=LastBlockID" json:"LastBlockID,omitempty"`
	LastBlockTime                    int64            `protobuf:"varint,5,opt,name=LastBlockTime" json:"LastBlockTime,omitempty"`
	Validators                       *ValidatorSet    `protobuf:"bytes,6,opt,name=Validators" json:"Validators,omitempty"`
	LastValidators                   *ValidatorSet    `protobuf:"bytes,7,opt,name=LastValidators" json:"LastValidators,omitempty"`
	LastHeightValidatorsChanged      int64            `protobuf:"varint,8,opt,name=LastHeightValidatorsChanged" json:"LastHeightValidatorsChanged,omitempty"`
	ConsensusParams                  *ConsensusParams `protobuf:"bytes,9,opt,name=ConsensusParams" json:"ConsensusParams,omitempty"`
	LastHeightConsensusParamsChanged int64            `protobuf:"varint,10,opt,name=LastHeightConsensusParamsChanged" json:"LastHeightConsensusParamsChanged,omitempty"`
	LastResultsHash                  []byte           `protobuf:"bytes,11,opt,name=LastResultsHash,proto3" json:"LastResultsHash,omitempty"`
	AppHash                          []byte           `protobuf:"bytes,12,opt,name=AppHash,proto3" json:"AppHash,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{12} }

func (m *State) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *State) GetLastBlockHeight() int64 {
	if m != nil {
		return m.LastBlockHeight
	}
	return 0
}

func (m *State) GetLastBlockTotalTx() int64 {
	if m != nil {
		return m.LastBlockTotalTx
	}
	return 0
}

func (m *State) GetLastBlockID() *BlockID {
	if m != nil {
		return m.LastBlockID
	}
	return nil
}

func (m *State) GetLastBlockTime() int64 {
	if m != nil {
		return m.LastBlockTime
	}
	return 0
}

func (m *State) GetValidators() *ValidatorSet {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *State) GetLastValidators() *ValidatorSet {
	if m != nil {
		return m.LastValidators
	}
	return nil
}

func (m *State) GetLastHeightValidatorsChanged() int64 {
	if m != nil {
		return m.LastHeightValidatorsChanged
	}
	return 0
}

func (m *State) GetConsensusParams() *ConsensusParams {
	if m != nil {
		return m.ConsensusParams
	}
	return nil
}

func (m *State) GetLastHeightConsensusParamsChanged() int64 {
	if m != nil {
		return m.LastHeightConsensusParamsChanged
	}
	return 0
}

func (m *State) GetLastResultsHash() []byte {
	if m != nil {
		return m.LastResultsHash
	}
	return nil
}

func (m *State) GetAppHash() []byte {
	if m != nil {
		return m.AppHash
	}
	return nil
}

type DuplicateVoteEvidence struct {
	PubKey string `protobuf:"bytes,1,opt,name=pubKey" json:"pubKey,omitempty"`
	VoteA  *Vote  `protobuf:"bytes,2,opt,name=voteA" json:"voteA,omitempty"`
	VoteB  *Vote  `protobuf:"bytes,3,opt,name=voteB" json:"voteB,omitempty"`
}

func (m *DuplicateVoteEvidence) Reset()                    { *m = DuplicateVoteEvidence{} }
func (m *DuplicateVoteEvidence) String() string            { return proto.CompactTextString(m) }
func (*DuplicateVoteEvidence) ProtoMessage()               {}
func (*DuplicateVoteEvidence) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{13} }

func (m *DuplicateVoteEvidence) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *DuplicateVoteEvidence) GetVoteA() *Vote {
	if m != nil {
		return m.VoteA
	}
	return nil
}

func (m *DuplicateVoteEvidence) GetVoteB() *Vote {
	if m != nil {
		return m.VoteB
	}
	return nil
}

type EvidenceEnvelope struct {
	TypeName string `protobuf:"bytes,1,opt,name=typeName" json:"typeName,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *EvidenceEnvelope) Reset()                    { *m = EvidenceEnvelope{} }
func (m *EvidenceEnvelope) String() string            { return proto.CompactTextString(m) }
func (*EvidenceEnvelope) ProtoMessage()               {}
func (*EvidenceEnvelope) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{14} }

func (m *EvidenceEnvelope) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *EvidenceEnvelope) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type EvidenceData struct {
	Evidence []*EvidenceEnvelope `protobuf:"bytes,1,rep,name=evidence" json:"evidence,omitempty"`
}

func (m *EvidenceData) Reset()                    { *m = EvidenceData{} }
func (m *EvidenceData) String() string            { return proto.CompactTextString(m) }
func (*EvidenceData) ProtoMessage()               {}
func (*EvidenceData) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{15} }

func (m *EvidenceData) GetEvidence() []*EvidenceEnvelope {
	if m != nil {
		return m.Evidence
	}
	return nil
}

type TendermintBlockHeader struct {
	ChainID         string   `protobuf:"bytes,1,opt,name=chainID" json:"chainID,omitempty"`
	Height          int64    `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Round           int64    `protobuf:"varint,3,opt,name=round" json:"round,omitempty"`
	Time            int64    `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	NumTxs          int64    `protobuf:"varint,5,opt,name=numTxs" json:"numTxs,omitempty"`
	LastBlockID     *BlockID `protobuf:"bytes,6,opt,name=lastBlockID" json:"lastBlockID,omitempty"`
	TotalTxs        int64    `protobuf:"varint,7,opt,name=totalTxs" json:"totalTxs,omitempty"`
	LastCommitHash  []byte   `protobuf:"bytes,8,opt,name=lastCommitHash,proto3" json:"lastCommitHash,omitempty"`
	ValidatorsHash  []byte   `protobuf:"bytes,9,opt,name=validatorsHash,proto3" json:"validatorsHash,omitempty"`
	ConsensusHash   []byte   `protobuf:"bytes,10,opt,name=consensusHash,proto3" json:"consensusHash,omitempty"`
	AppHash         []byte   `protobuf:"bytes,11,opt,name=appHash,proto3" json:"appHash,omitempty"`
	LastResultsHash []byte   `protobuf:"bytes,12,opt,name=lastResultsHash,proto3" json:"lastResultsHash,omitempty"`
	EvidenceHash    []byte   `protobuf:"bytes,13,opt,name=evidenceHash,proto3" json:"evidenceHash,omitempty"`
}

func (m *TendermintBlockHeader) Reset()                    { *m = TendermintBlockHeader{} }
func (m *TendermintBlockHeader) String() string            { return proto.CompactTextString(m) }
func (*TendermintBlockHeader) ProtoMessage()               {}
func (*TendermintBlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{16} }

func (m *TendermintBlockHeader) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *TendermintBlockHeader) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TendermintBlockHeader) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *TendermintBlockHeader) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *TendermintBlockHeader) GetNumTxs() int64 {
	if m != nil {
		return m.NumTxs
	}
	return 0
}

func (m *TendermintBlockHeader) GetLastBlockID() *BlockID {
	if m != nil {
		return m.LastBlockID
	}
	return nil
}

func (m *TendermintBlockHeader) GetTotalTxs() int64 {
	if m != nil {
		return m.TotalTxs
	}
	return 0
}

func (m *TendermintBlockHeader) GetLastCommitHash() []byte {
	if m != nil {
		return m.LastCommitHash
	}
	return nil
}

func (m *TendermintBlockHeader) GetValidatorsHash() []byte {
	if m != nil {
		return m.ValidatorsHash
	}
	return nil
}

func (m *TendermintBlockHeader) GetConsensusHash() []byte {
	if m != nil {
		return m.ConsensusHash
	}
	return nil
}

func (m *TendermintBlockHeader) GetAppHash() []byte {
	if m != nil {
		return m.AppHash
	}
	return nil
}

func (m *TendermintBlockHeader) GetLastResultsHash() []byte {
	if m != nil {
		return m.LastResultsHash
	}
	return nil
}

func (m *TendermintBlockHeader) GetEvidenceHash() []byte {
	if m != nil {
		return m.EvidenceHash
	}
	return nil
}

type TendermintBlock struct {
	Header       *TendermintBlockHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Txs          []*Transaction         `protobuf:"bytes,2,rep,name=txs" json:"txs,omitempty"`
	Evidence     *EvidenceData          `protobuf:"bytes,3,opt,name=evidence" json:"evidence,omitempty"`
	LastCommit   *TendermintCommit      `protobuf:"bytes,4,opt,name=lastCommit" json:"lastCommit,omitempty"`
	ProposerAddr []byte                 `protobuf:"bytes,5,opt,name=proposerAddr,proto3" json:"proposerAddr,omitempty"`
}

func (m *TendermintBlock) Reset()                    { *m = TendermintBlock{} }
func (m *TendermintBlock) String() string            { return proto.CompactTextString(m) }
func (*TendermintBlock) ProtoMessage()               {}
func (*TendermintBlock) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{17} }

func (m *TendermintBlock) GetHeader() *TendermintBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TendermintBlock) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *TendermintBlock) GetEvidence() *EvidenceData {
	if m != nil {
		return m.Evidence
	}
	return nil
}

func (m *TendermintBlock) GetLastCommit() *TendermintCommit {
	if m != nil {
		return m.LastCommit
	}
	return nil
}

func (m *TendermintBlock) GetProposerAddr() []byte {
	if m != nil {
		return m.ProposerAddr
	}
	return nil
}

type Proposal struct {
	Height     int64    `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round      int32    `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Timestamp  int64    `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	POLRound   int32    `protobuf:"varint,4,opt,name=POLRound" json:"POLRound,omitempty"`
	POLBlockID *BlockID `protobuf:"bytes,5,opt,name=POLBlockID" json:"POLBlockID,omitempty"`
	Signature  []byte   `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Blockhash  []byte   `protobuf:"bytes,7,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
}

func (m *Proposal) Reset()                    { *m = Proposal{} }
func (m *Proposal) String() string            { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()               {}
func (*Proposal) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{18} }

func (m *Proposal) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Proposal) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Proposal) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Proposal) GetPOLRound() int32 {
	if m != nil {
		return m.POLRound
	}
	return 0
}

func (m *Proposal) GetPOLBlockID() *BlockID {
	if m != nil {
		return m.POLBlockID
	}
	return nil
}

func (m *Proposal) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Proposal) GetBlockhash() []byte {
	if m != nil {
		return m.Blockhash
	}
	return nil
}

type NewRoundStepMsg struct {
	Height                int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round                 int32 `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Step                  int32 `protobuf:"varint,3,opt,name=step" json:"step,omitempty"`
	SecondsSinceStartTime int32 `protobuf:"varint,4,opt,name=secondsSinceStartTime" json:"secondsSinceStartTime,omitempty"`
	LastCommitRound       int32 `protobuf:"varint,5,opt,name=lastCommitRound" json:"lastCommitRound,omitempty"`
}

func (m *NewRoundStepMsg) Reset()                    { *m = NewRoundStepMsg{} }
func (m *NewRoundStepMsg) String() string            { return proto.CompactTextString(m) }
func (*NewRoundStepMsg) ProtoMessage()               {}
func (*NewRoundStepMsg) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{19} }

func (m *NewRoundStepMsg) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *NewRoundStepMsg) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *NewRoundStepMsg) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *NewRoundStepMsg) GetSecondsSinceStartTime() int32 {
	if m != nil {
		return m.SecondsSinceStartTime
	}
	return 0
}

func (m *NewRoundStepMsg) GetLastCommitRound() int32 {
	if m != nil {
		return m.LastCommitRound
	}
	return 0
}

type CommitStepMsg struct {
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *CommitStepMsg) Reset()                    { *m = CommitStepMsg{} }
func (m *CommitStepMsg) String() string            { return proto.CompactTextString(m) }
func (*CommitStepMsg) ProtoMessage()               {}
func (*CommitStepMsg) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{20} }

func (m *CommitStepMsg) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ProposalPOLMsg struct {
	Height           int64               `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	ProposalPOLRound int32               `protobuf:"varint,2,opt,name=proposalPOLRound" json:"proposalPOLRound,omitempty"`
	ProposalPOL      *TendermintBitArray `protobuf:"bytes,3,opt,name=proposalPOL" json:"proposalPOL,omitempty"`
}

func (m *ProposalPOLMsg) Reset()                    { *m = ProposalPOLMsg{} }
func (m *ProposalPOLMsg) String() string            { return proto.CompactTextString(m) }
func (*ProposalPOLMsg) ProtoMessage()               {}
func (*ProposalPOLMsg) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{21} }

func (m *ProposalPOLMsg) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ProposalPOLMsg) GetProposalPOLRound() int32 {
	if m != nil {
		return m.ProposalPOLRound
	}
	return 0
}

func (m *ProposalPOLMsg) GetProposalPOL() *TendermintBitArray {
	if m != nil {
		return m.ProposalPOL
	}
	return nil
}

type HasVoteMsg struct {
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round  int32 `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Type   int32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Index  int32 `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
}

func (m *HasVoteMsg) Reset()                    { *m = HasVoteMsg{} }
func (m *HasVoteMsg) String() string            { return proto.CompactTextString(m) }
func (*HasVoteMsg) ProtoMessage()               {}
func (*HasVoteMsg) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{22} }

func (m *HasVoteMsg) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *HasVoteMsg) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *HasVoteMsg) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *HasVoteMsg) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type VoteSetMaj23Msg struct {
	Height  int64    `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round   int32    `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Type    int32    `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	BlockID *BlockID `protobuf:"bytes,4,opt,name=blockID" json:"blockID,omitempty"`
}

func (m *VoteSetMaj23Msg) Reset()                    { *m = VoteSetMaj23Msg{} }
func (m *VoteSetMaj23Msg) String() string            { return proto.CompactTextString(m) }
func (*VoteSetMaj23Msg) ProtoMessage()               {}
func (*VoteSetMaj23Msg) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{23} }

func (m *VoteSetMaj23Msg) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *VoteSetMaj23Msg) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *VoteSetMaj23Msg) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *VoteSetMaj23Msg) GetBlockID() *BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

type VoteSetBitsMsg struct {
	Height  int64               `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Round   int32               `protobuf:"varint,2,opt,name=round" json:"round,omitempty"`
	Type    int32               `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	BlockID *BlockID            `protobuf:"bytes,4,opt,name=blockID" json:"blockID,omitempty"`
	Votes   *TendermintBitArray `protobuf:"bytes,5,opt,name=votes" json:"votes,omitempty"`
}

func (m *VoteSetBitsMsg) Reset()                    { *m = VoteSetBitsMsg{} }
func (m *VoteSetBitsMsg) String() string            { return proto.CompactTextString(m) }
func (*VoteSetBitsMsg) ProtoMessage()               {}
func (*VoteSetBitsMsg) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{24} }

func (m *VoteSetBitsMsg) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *VoteSetBitsMsg) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *VoteSetBitsMsg) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *VoteSetBitsMsg) GetBlockID() *BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

func (m *VoteSetBitsMsg) GetVotes() *TendermintBitArray {
	if m != nil {
		return m.Votes
	}
	return nil
}

type Heartbeat struct {
	ValidatorAddress []byte `protobuf:"bytes,1,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
	ValidatorIndex   int32  `protobuf:"varint,2,opt,name=validatorIndex" json:"validatorIndex,omitempty"`
	Height           int64  `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Round            int32  `protobuf:"varint,4,opt,name=round" json:"round,omitempty"`
	Sequence         int32  `protobuf:"varint,5,opt,name=sequence" json:"sequence,omitempty"`
	Signature        []byte `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Heartbeat) Reset()                    { *m = Heartbeat{} }
func (m *Heartbeat) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()               {}
func (*Heartbeat) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{25} }

func (m *Heartbeat) GetValidatorAddress() []byte {
	if m != nil {
		return m.ValidatorAddress
	}
	return nil
}

func (m *Heartbeat) GetValidatorIndex() int32 {
	if m != nil {
		return m.ValidatorIndex
	}
	return 0
}

func (m *Heartbeat) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Heartbeat) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *Heartbeat) GetSequence() int32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Heartbeat) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ValNodes struct {
	Nodes []*ValNode `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *ValNodes) Reset()                    { *m = ValNodes{} }
func (m *ValNodes) String() string            { return proto.CompactTextString(m) }
func (*ValNodes) ProtoMessage()               {}
func (*ValNodes) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{26} }

func (m *ValNodes) GetNodes() []*ValNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*BlockID)(nil), "types.BlockID")
	proto.RegisterType((*TendermintBitArray)(nil), "types.TendermintBitArray")
	proto.RegisterType((*Vote)(nil), "types.Vote")
	proto.RegisterType((*TendermintCommit)(nil), "types.TendermintCommit")
	proto.RegisterType((*TendermintBlockInfo)(nil), "types.TendermintBlockInfo")
	proto.RegisterType((*BlockSize)(nil), "types.BlockSize")
	proto.RegisterType((*TxSize)(nil), "types.TxSize")
	proto.RegisterType((*BlockGossip)(nil), "types.BlockGossip")
	proto.RegisterType((*EvidenceParams)(nil), "types.EvidenceParams")
	proto.RegisterType((*ConsensusParams)(nil), "types.ConsensusParams")
	proto.RegisterType((*Validator)(nil), "types.Validator")
	proto.RegisterType((*ValidatorSet)(nil), "types.ValidatorSet")
	proto.RegisterType((*State)(nil), "types.State")
	proto.RegisterType((*DuplicateVoteEvidence)(nil), "types.DuplicateVoteEvidence")
	proto.RegisterType((*EvidenceEnvelope)(nil), "types.EvidenceEnvelope")
	proto.RegisterType((*EvidenceData)(nil), "types.EvidenceData")
	proto.RegisterType((*TendermintBlockHeader)(nil), "types.TendermintBlockHeader")
	proto.RegisterType((*TendermintBlock)(nil), "types.TendermintBlock")
	proto.RegisterType((*Proposal)(nil), "types.Proposal")
	proto.RegisterType((*NewRoundStepMsg)(nil), "types.NewRoundStepMsg")
	proto.RegisterType((*CommitStepMsg)(nil), "types.CommitStepMsg")
	proto.RegisterType((*ProposalPOLMsg)(nil), "types.ProposalPOLMsg")
	proto.RegisterType((*HasVoteMsg)(nil), "types.HasVoteMsg")
	proto.RegisterType((*VoteSetMaj23Msg)(nil), "types.VoteSetMaj23Msg")
	proto.RegisterType((*VoteSetBitsMsg)(nil), "types.VoteSetBitsMsg")
	proto.RegisterType((*Heartbeat)(nil), "types.Heartbeat")
	proto.RegisterType((*ValNodes)(nil), "types.ValNodes")
}

func init() { proto.RegisterFile("tendermint.proto", fileDescriptor14) }

var fileDescriptor14 = []byte{
	// 1482 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xd7, 0xc6, 0x71, 0x12, 0x3f, 0x3b, 0x4e, 0x98, 0x92, 0xd6, 0x84, 0x20, 0x85, 0x51, 0x01,
	0xab, 0xad, 0xd2, 0x2a, 0xa9, 0xc4, 0xa1, 0x14, 0x35, 0x4e, 0xaa, 0xa6, 0x90, 0xb4, 0xd6, 0xd8,
	0x0a, 0xe7, 0x89, 0x3d, 0xd8, 0x0b, 0xf6, 0xee, 0xb2, 0x33, 0x76, 0x1d, 0x24, 0x2e, 0x1c, 0xb8,
	0xf3, 0x41, 0x38, 0x71, 0xe0, 0x23, 0xf0, 0x09, 0x38, 0xc2, 0x17, 0xe1, 0x82, 0xe6, 0xcd, 0xcc,
	0xfe, 0xb3, 0xeb, 0x02, 0x42, 0xdc, 0xf6, 0xbd, 0xf7, 0x9b, 0x79, 0xf3, 0xfe, 0xce, 0x9b, 0x85,
	0x6d, 0x25, 0x82, 0xbe, 0x88, 0xc7, 0x7e, 0xa0, 0x0e, 0xa2, 0x38, 0x54, 0x21, 0x29, 0xab, 0xeb,
	0x48, 0xc8, 0xdd, 0xb7, 0x54, 0xcc, 0x03, 0xc9, 0x7b, 0xca, 0x0f, 0x03, 0x23, 0xd9, 0xad, 0x8b,
	0x99, 0xe8, 0x4d, 0x54, 0x18, 0x1b, 0x9a, 0xbe, 0x07, 0xeb, 0xad, 0x51, 0xd8, 0xfb, 0xfa, 0xf9,
	0x29, 0x21, 0xb0, 0x7a, 0xc6, 0xe5, 0xb0, 0xe1, 0xed, 0x7b, 0xcd, 0x1a, 0xc3, 0x6f, 0xfa, 0x29,
	0x90, 0x6e, 0xb2, 0x79, 0xcb, 0x57, 0xc7, 0x71, 0xcc, 0xaf, 0x35, 0xb2, 0xe5, 0x2b, 0x89, 0xc8,
	0x32, 0xc3, 0x6f, 0xf2, 0x36, 0x94, 0x9f, 0x8e, 0xc4, 0x58, 0x36, 0x56, 0xf6, 0x4b, 0xcd, 0x55,
	0x66, 0x08, 0xfa, 0xfd, 0x0a, 0xac, 0x5e, 0x86, 0x4a, 0x90, 0x3b, 0xb0, 0x7d, 0xc9, 0x47, 0x7e,
	0x9f, 0xab, 0x30, 0x3e, 0xee, 0xf7, 0x63, 0x21, 0xa5, 0x55, 0x34, 0xc7, 0x27, 0x1f, 0x42, 0x3d,
	0xe1, 0x3d, 0x0f, 0xfa, 0x62, 0xd6, 0x58, 0x41, 0x45, 0x05, 0x2e, 0xb9, 0x09, 0x6b, 0x67, 0xc2,
	0x1f, 0x0c, 0x55, 0xa3, 0xb4, 0xef, 0x35, 0x4b, 0xcc, 0x52, 0xfa, 0x28, 0x2c, 0x9c, 0x04, 0xfd,
	0xc6, 0x2a, 0x2e, 0x33, 0x04, 0xd9, 0x83, 0x4a, 0xd7, 0x1f, 0x0b, 0xa9, 0xf8, 0x38, 0x6a, 0x94,
	0x71, 0x41, 0xca, 0xd0, 0x26, 0x75, 0xaf, 0x23, 0xd1, 0x58, 0xdb, 0xf7, 0x9a, 0x9b, 0x0c, 0xbf,
	0x49, 0x33, 0xf1, 0x4d, 0x63, 0x7d, 0xdf, 0x6b, 0x56, 0x0f, 0xeb, 0x07, 0xe8, 0xd7, 0x03, 0xcb,
	0x65, 0x89, 0xeb, 0xf6, 0xa0, 0xd2, 0xf1, 0x07, 0x01, 0x57, 0x93, 0x58, 0x34, 0x36, 0xd0, 0xac,
	0x94, 0x41, 0x7d, 0xd8, 0x4e, 0x9d, 0x78, 0x12, 0x8e, 0xc7, 0xbe, 0xca, 0xee, 0xed, 0x2d, 0xdf,
	0xfb, 0x2e, 0x40, 0x3b, 0x16, 0x3d, 0x5c, 0x66, 0xbc, 0x5b, 0x3d, 0xac, 0x5a, 0xb0, 0x76, 0x2d,
	0xcb, 0x88, 0xe9, 0x0f, 0x2b, 0x70, 0x23, 0x13, 0x30, 0xdc, 0x22, 0xf8, 0x32, 0x24, 0x1f, 0x03,
	0x74, 0x84, 0x08, 0x8c, 0x72, 0xab, 0xf1, 0x96, 0xdd, 0xa4, 0x78, 0x36, 0x96, 0x81, 0xea, 0x85,
	0xe7, 0x5c, 0x5a, 0x09, 0xc6, 0x61, 0xd9, 0xc2, 0x14, 0x4a, 0x28, 0x94, 0x3b, 0x8a, 0x2b, 0x81,
	0xb1, 0xa9, 0x1e, 0xd6, 0xec, 0x1a, 0xe4, 0x31, 0x23, 0x22, 0x77, 0x61, 0xa3, 0x1d, 0x87, 0x51,
	0x28, 0xf9, 0x08, 0x63, 0x55, 0x3d, 0xdc, 0xb2, 0x30, 0xc7, 0x66, 0x09, 0x80, 0xdc, 0x83, 0xf2,
	0x95, 0xb6, 0x07, 0x63, 0x57, 0x3d, 0xbc, 0x39, 0x77, 0x08, 0xb4, 0x96, 0x19, 0x10, 0xfd, 0x02,
	0x2a, 0x48, 0x77, 0xfc, 0x6f, 0x05, 0xd9, 0x85, 0x8d, 0x0b, 0x3e, 0x6b, 0x5d, 0x2b, 0xe1, 0x72,
	0x36, 0xa1, 0x75, 0x12, 0x5d, 0xf0, 0x59, 0x77, 0x26, 0x6d, 0x92, 0x59, 0xca, 0xf2, 0x9f, 0x71,
	0xe9, 0x92, 0xcb, 0x50, 0xf4, 0x13, 0x58, 0xeb, 0xce, 0xfe, 0xe6, 0xae, 0x7a, 0xf5, 0x4a, 0x6e,
	0xf5, 0x63, 0xa8, 0xe2, 0xb1, 0x9e, 0x85, 0x52, 0xfa, 0x11, 0x39, 0x00, 0x82, 0x64, 0x9b, 0xc7,
	0x4a, 0xef, 0x99, 0xdd, 0x6c, 0x81, 0x84, 0x36, 0xa1, 0xfe, 0x74, 0xea, 0xf7, 0x45, 0xd0, 0x13,
	0x6d, 0x1e, 0xf3, 0xb1, 0x53, 0x74, 0x3c, 0x10, 0xb8, 0xca, 0x28, 0x3a, 0x1e, 0x08, 0xfa, 0xbb,
	0x07, 0x5b, 0x27, 0x61, 0x20, 0x45, 0x20, 0x27, 0xd2, 0x62, 0x0f, 0x32, 0x3e, 0xb1, 0x39, 0xb0,
	0x9d, 0xcd, 0x3a, 0xcd, 0x67, 0x19, 0xb7, 0x7d, 0xe0, 0x4c, 0xb5, 0x71, 0xdf, 0x74, 0x2e, 0x47,
	0x26, 0x73, 0x7e, 0x78, 0x98, 0xb3, 0xc9, 0xc6, 0x9b, 0x64, 0x37, 0x36, 0x12, 0x96, 0x33, 0xfd,
	0x71, 0xd1, 0x14, 0x9b, 0x01, 0x3b, 0x76, 0x61, 0x5e, 0xc8, 0x0a, 0x60, 0x3a, 0x81, 0x4a, 0xd2,
	0x0d, 0x48, 0x03, 0xd6, 0xf3, 0x3d, 0xc5, 0x91, 0xda, 0x3d, 0xed, 0xc9, 0xd5, 0xe7, 0xe2, 0x1a,
	0x4d, 0xa8, 0x31, 0x4b, 0x91, 0x7d, 0xa8, 0x5e, 0x86, 0xca, 0x0f, 0x06, 0xed, 0xf0, 0x95, 0x88,
	0x6d, 0x88, 0xb3, 0x2c, 0xdd, 0x44, 0x8e, 0x7b, 0xbd, 0xc9, 0x18, 0x8f, 0x55, 0x62, 0x86, 0xa0,
	0x01, 0xd4, 0x12, 0xb5, 0x1d, 0xa1, 0xc8, 0x03, 0x80, 0x84, 0xd6, 0xca, 0x4b, 0x19, 0x9f, 0x26,
	0x02, 0x96, 0xc1, 0x90, 0x7b, 0x2e, 0xe7, 0x45, 0x6c, 0xdd, 0x3a, 0x8f, 0x4f, 0x10, 0xf4, 0xb7,
	0x55, 0x5b, 0x46, 0xda, 0xc6, 0x93, 0x21, 0xf7, 0x03, 0xdb, 0x30, 0x2a, 0xcc, 0x91, 0xa4, 0x09,
	0x5b, 0xba, 0xee, 0xd0, 0xb9, 0xb6, 0x1f, 0x9a, 0xa4, 0x2b, 0xb2, 0x75, 0x13, 0x4e, 0x58, 0xdd,
	0x50, 0xf1, 0x51, 0x77, 0x66, 0x4d, 0x9f, 0xe3, 0x93, 0x07, 0x50, 0x4d, 0x78, 0xcf, 0x4f, 0x6d,
	0x70, 0x8a, 0x4d, 0x2a, 0x0b, 0x21, 0xb7, 0x61, 0x33, 0xdd, 0xc5, 0x1f, 0x0b, 0xdb, 0x64, 0xf3,
	0x4c, 0x72, 0x94, 0xf3, 0xd8, 0x1a, 0x6e, 0x7b, 0xa3, 0xe8, 0x81, 0x8e, 0x50, 0x39, 0xa7, 0x3d,
	0x82, 0xba, 0xde, 0x25, 0xb3, 0x70, 0xfd, 0xf5, 0x0b, 0x0b, 0x50, 0xf2, 0x04, 0xde, 0xd5, 0x1c,
	0xe3, 0x83, 0x94, 0x7f, 0x32, 0xe4, 0xc1, 0x40, 0xf4, 0xb1, 0x5d, 0x97, 0xd8, 0x32, 0x08, 0x79,
	0x32, 0x57, 0x4b, 0x8d, 0x4a, 0xae, 0x09, 0x15, 0xa4, 0x6c, 0xae, 0xf4, 0x3e, 0x83, 0xfd, 0x54,
	0x41, 0x41, 0xe8, 0x0e, 0x02, 0x78, 0x90, 0x37, 0xe2, 0x5c, 0xbc, 0x99, 0x90, 0x93, 0x91, 0x92,
	0x78, 0x65, 0x57, 0x31, 0xb9, 0x8b, 0x6c, 0xac, 0x8b, 0x28, 0x42, 0x44, 0xcd, 0xd6, 0x85, 0x21,
	0xe9, 0x04, 0x76, 0x4e, 0x27, 0xd1, 0xc8, 0xef, 0x71, 0x25, 0xf4, 0x25, 0xe2, 0xaa, 0x4b, 0x17,
	0x4c, 0x64, 0x0a, 0xc6, 0x64, 0x99, 0xa5, 0xc8, 0xfb, 0x50, 0x9e, 0x86, 0x4a, 0x1c, 0xdb, 0x9c,
	0xcd, 0x5d, 0x40, 0x46, 0xe2, 0x20, 0x2d, 0xdb, 0x01, 0xe6, 0x21, 0x2d, 0xda, 0x82, 0x6d, 0xa7,
	0xe9, 0x69, 0x30, 0x15, 0xa3, 0x30, 0xc2, 0x36, 0xaa, 0x81, 0x2f, 0xf8, 0x58, 0x58, 0x9d, 0x09,
	0xad, 0x6f, 0xe5, 0x3e, 0x57, 0xdc, 0x16, 0x2f, 0x7e, 0xd3, 0x13, 0xa8, 0xb9, 0x3d, 0x4e, 0xb9,
	0xe2, 0xe4, 0x08, 0x36, 0x84, 0xa5, 0x6d, 0x01, 0xde, 0x2a, 0xb4, 0x10, 0xa7, 0x8a, 0x25, 0x40,
	0xfa, 0x4b, 0x09, 0x76, 0x0a, 0x37, 0xc7, 0x99, 0xe0, 0x7d, 0x81, 0xbd, 0xa4, 0x97, 0xaf, 0x33,
	0x4b, 0x6a, 0xd7, 0x0c, 0xb3, 0xe5, 0x65, 0x29, 0xdd, 0x29, 0x62, 0x1c, 0x37, 0x4c, 0x29, 0x19,
	0x42, 0x1f, 0x5d, 0xe9, 0x22, 0x30, 0xed, 0x03, 0xbf, 0xf5, 0x0e, 0xc1, 0x64, 0xac, 0xef, 0x1a,
	0x53, 0x1a, 0x96, 0xd2, 0xb5, 0x36, 0xca, 0xd4, 0xda, 0xda, 0xe2, 0x5a, 0xcb, 0x40, 0xd0, 0x69,
	0xa6, 0x50, 0x4d, 0x29, 0x94, 0x58, 0x42, 0xeb, 0xf1, 0x69, 0x94, 0xdc, 0xc3, 0x18, 0x7c, 0x33,
	0x91, 0x14, 0xb8, 0x1a, 0x37, 0x4d, 0x52, 0x1d, 0x71, 0x15, 0x83, 0xcb, 0x73, 0x75, 0x5d, 0xf7,
	0x5c, 0x26, 0x22, 0x0c, 0x10, 0x96, 0x67, 0x6a, 0xbf, 0x71, 0x9b, 0x6b, 0x26, 0x1b, 0x1d, 0xa9,
	0xf3, 0x75, 0x54, 0xc8, 0x57, 0x93, 0x8d, 0x45, 0x36, 0xa1, 0x50, 0x73, 0x11, 0x42, 0xd8, 0x26,
	0xc2, 0x72, 0x3c, 0xfa, 0xa7, 0x07, 0x5b, 0x85, 0xc8, 0x91, 0x87, 0x3a, 0x32, 0x3a, 0x7a, 0xf6,
	0x56, 0xdb, 0x5b, 0x3c, 0x1b, 0x98, 0x08, 0x33, 0x8b, 0x25, 0xb7, 0xa1, 0xa4, 0x66, 0x6e, 0xa2,
	0x72, 0xf7, 0x55, 0x37, 0x9d, 0x98, 0x99, 0x16, 0x93, 0xfb, 0x99, 0xf4, 0x2a, 0xe5, 0x9a, 0x4e,
	0x36, 0x0b, 0xd3, 0xd4, 0xd2, 0x13, 0x53, 0xea, 0x68, 0xdb, 0x37, 0x5f, 0x3f, 0x31, 0x8d, 0xb2,
	0x13, 0x53, 0x2d, 0xb2, 0x7d, 0x5f, 0x5f, 0x5f, 0x98, 0x23, 0x35, 0x96, 0xe3, 0xd1, 0x3f, 0xbc,
	0x74, 0x64, 0xca, 0x24, 0xa4, 0xb7, 0x38, 0x21, 0xcd, 0x44, 0x63, 0x13, 0x72, 0x0f, 0x2a, 0x2a,
	0x99, 0x7f, 0x4d, 0xaa, 0xa6, 0x0c, 0x9d, 0x50, 0xed, 0x97, 0xe7, 0xd9, 0xb1, 0x39, 0xa1, 0xc9,
	0x01, 0x40, 0xfb, 0xe5, 0xb9, 0xcb, 0xce, 0xf2, 0xc2, 0xec, 0xcc, 0x20, 0xb4, 0x26, 0x99, 0x4c,
	0xc3, 0x6b, 0x66, 0x1a, 0x4e, 0x18, 0x5a, 0x8a, 0x23, 0xda, 0x50, 0x47, 0x78, 0xdd, 0x48, 0x13,
	0x06, 0xfd, 0xd9, 0x83, 0xad, 0x17, 0xe2, 0x15, 0x2a, 0xee, 0x28, 0x11, 0x5d, 0xc8, 0xc1, 0x3f,
	0xb4, 0x93, 0xc0, 0xaa, 0x54, 0xc2, 0x98, 0x58, 0x66, 0xf8, 0x4d, 0x1e, 0xc2, 0x8e, 0x14, 0xbd,
	0x30, 0xe8, 0xcb, 0x8e, 0x1f, 0xf4, 0x44, 0x47, 0xf1, 0x58, 0x75, 0x5d, 0x75, 0x96, 0xd9, 0x62,
	0xa1, 0x4b, 0x5c, 0x1b, 0x2a, 0xd4, 0x54, 0x46, 0x7c, 0x91, 0x4d, 0x3f, 0x82, 0x4d, 0x43, 0xbe,
	0xe1, 0xc8, 0xf4, 0x47, 0x0f, 0xea, 0x2e, 0x7e, 0xed, 0x97, 0xe7, 0xcb, 0xac, 0xbb, 0x03, 0xdb,
	0x51, 0x8a, 0x64, 0x19, 0x43, 0xe7, 0xf8, 0xe4, 0x11, 0x54, 0x33, 0x3c, 0x9b, 0xa7, 0xef, 0xcc,
	0x57, 0x81, 0x7d, 0xc0, 0xb1, 0x2c, 0x9a, 0xf6, 0x01, 0xce, 0xb8, 0xd4, 0x6d, 0xfa, 0x5f, 0x39,
	0x5b, 0x2b, 0x71, 0xce, 0xd6, 0xdf, 0x1a, 0xe9, 0xe3, 0xab, 0xcd, 0x3e, 0xbf, 0x90, 0xa0, 0xdf,
	0xc1, 0x96, 0x56, 0xd1, 0x11, 0xea, 0x82, 0x7f, 0x75, 0x78, 0xf4, 0xdf, 0xa8, 0x6a, 0xc2, 0xfa,
	0xd5, 0xd2, 0x01, 0xc5, 0x89, 0xe9, 0x4f, 0x1e, 0xd4, 0xad, 0x7e, 0xfd, 0x5c, 0xfd, 0x9f, 0xd5,
	0x93, 0xfb, 0xe6, 0x6e, 0x94, 0xb6, 0x7a, 0x96, 0x84, 0xc6, 0xe0, 0xe8, 0xaf, 0x1e, 0x54, 0xce,
	0x04, 0x8f, 0xd5, 0x95, 0xe0, 0x98, 0x0b, 0xd3, 0xd7, 0xbc, 0x9e, 0xa7, 0x0b, 0x5e, 0xcf, 0xd3,
	0x85, 0xaf, 0xe7, 0xe9, 0xdc, 0xeb, 0x79, 0x98, 0x7b, 0x3d, 0x17, 0xcd, 0x5f, 0xcd, 0x9a, 0xbf,
	0x0b, 0x1b, 0x52, 0x7c, 0x33, 0xc1, 0x36, 0x68, 0x8a, 0x20, 0xa1, 0x97, 0xd7, 0x3b, 0x7d, 0x00,
	0x1b, 0x97, 0x7c, 0xf4, 0x22, 0xec, 0x0b, 0x49, 0x6e, 0x43, 0x39, 0xd0, 0x1f, 0xf6, 0xa2, 0xae,
	0xa7, 0xe3, 0x9b, 0x96, 0x33, 0x23, 0xbc, 0x5a, 0xc3, 0x5f, 0x13, 0x47, 0x7f, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x2e, 0xa6, 0xcb, 0xaf, 0xd8, 0x10, 0x00, 0x00,
}
