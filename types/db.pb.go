// Code generated by protoc-gen-go. DO NOT EDIT.
// source: db.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// merkle avl tree
type LeafNode struct {
	Key    []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value  []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Height int32  `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Size   int32  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *LeafNode) Reset()                    { *m = LeafNode{} }
func (m *LeafNode) String() string            { return proto.CompactTextString(m) }
func (*LeafNode) ProtoMessage()               {}
func (*LeafNode) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *LeafNode) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *LeafNode) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *LeafNode) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *LeafNode) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type InnerNode struct {
	LeftHash  []byte `protobuf:"bytes,1,opt,name=leftHash,proto3" json:"leftHash,omitempty"`
	RightHash []byte `protobuf:"bytes,2,opt,name=rightHash,proto3" json:"rightHash,omitempty"`
	Height    int32  `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Size      int32  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *InnerNode) Reset()                    { *m = InnerNode{} }
func (m *InnerNode) String() string            { return proto.CompactTextString(m) }
func (*InnerNode) ProtoMessage()               {}
func (*InnerNode) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *InnerNode) GetLeftHash() []byte {
	if m != nil {
		return m.LeftHash
	}
	return nil
}

func (m *InnerNode) GetRightHash() []byte {
	if m != nil {
		return m.RightHash
	}
	return nil
}

func (m *InnerNode) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *InnerNode) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type MAVLProof struct {
	LeafHash   []byte       `protobuf:"bytes,1,opt,name=leafHash,proto3" json:"leafHash,omitempty"`
	InnerNodes []*InnerNode `protobuf:"bytes,2,rep,name=innerNodes" json:"innerNodes,omitempty"`
	RootHash   []byte       `protobuf:"bytes,3,opt,name=rootHash,proto3" json:"rootHash,omitempty"`
}

func (m *MAVLProof) Reset()                    { *m = MAVLProof{} }
func (m *MAVLProof) String() string            { return proto.CompactTextString(m) }
func (*MAVLProof) ProtoMessage()               {}
func (*MAVLProof) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *MAVLProof) GetLeafHash() []byte {
	if m != nil {
		return m.LeafHash
	}
	return nil
}

func (m *MAVLProof) GetInnerNodes() []*InnerNode {
	if m != nil {
		return m.InnerNodes
	}
	return nil
}

func (m *MAVLProof) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

type StoreNode struct {
	Key       []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	LeftHash  []byte `protobuf:"bytes,3,opt,name=leftHash,proto3" json:"leftHash,omitempty"`
	RightHash []byte `protobuf:"bytes,4,opt,name=rightHash,proto3" json:"rightHash,omitempty"`
	Height    int32  `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	Size      int32  `protobuf:"varint,6,opt,name=size" json:"size,omitempty"`
}

func (m *StoreNode) Reset()                    { *m = StoreNode{} }
func (m *StoreNode) String() string            { return proto.CompactTextString(m) }
func (*StoreNode) ProtoMessage()               {}
func (*StoreNode) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *StoreNode) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *StoreNode) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *StoreNode) GetLeftHash() []byte {
	if m != nil {
		return m.LeftHash
	}
	return nil
}

func (m *StoreNode) GetRightHash() []byte {
	if m != nil {
		return m.RightHash
	}
	return nil
}

func (m *StoreNode) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StoreNode) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type LocalDBSet struct {
	KV []*KeyValue `protobuf:"bytes,2,rep,name=KV" json:"KV,omitempty"`
}

func (m *LocalDBSet) Reset()                    { *m = LocalDBSet{} }
func (m *LocalDBSet) String() string            { return proto.CompactTextString(m) }
func (*LocalDBSet) ProtoMessage()               {}
func (*LocalDBSet) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *LocalDBSet) GetKV() []*KeyValue {
	if m != nil {
		return m.KV
	}
	return nil
}

type LocalDBList struct {
	Prefix    []byte `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Key       []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Direction int32  `protobuf:"varint,3,opt,name=direction" json:"direction,omitempty"`
	Count     int32  `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (m *LocalDBList) Reset()                    { *m = LocalDBList{} }
func (m *LocalDBList) String() string            { return proto.CompactTextString(m) }
func (*LocalDBList) ProtoMessage()               {}
func (*LocalDBList) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *LocalDBList) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *LocalDBList) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *LocalDBList) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *LocalDBList) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type LocalDBGet struct {
	Keys [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *LocalDBGet) Reset()                    { *m = LocalDBGet{} }
func (m *LocalDBGet) String() string            { return proto.CompactTextString(m) }
func (*LocalDBGet) ProtoMessage()               {}
func (*LocalDBGet) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *LocalDBGet) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

type LocalReplyValue struct {
	Values [][]byte `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *LocalReplyValue) Reset()                    { *m = LocalReplyValue{} }
func (m *LocalReplyValue) String() string            { return proto.CompactTextString(m) }
func (*LocalReplyValue) ProtoMessage()               {}
func (*LocalReplyValue) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *LocalReplyValue) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

type StoreSet struct {
	StateHash []byte      `protobuf:"bytes,1,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	KV        []*KeyValue `protobuf:"bytes,2,rep,name=KV" json:"KV,omitempty"`
	Height    int64       `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
}

func (m *StoreSet) Reset()                    { *m = StoreSet{} }
func (m *StoreSet) String() string            { return proto.CompactTextString(m) }
func (*StoreSet) ProtoMessage()               {}
func (*StoreSet) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *StoreSet) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *StoreSet) GetKV() []*KeyValue {
	if m != nil {
		return m.KV
	}
	return nil
}

func (m *StoreSet) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type StoreDel struct {
	StateHash []byte `protobuf:"bytes,1,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Height    int64  `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
}

func (m *StoreDel) Reset()                    { *m = StoreDel{} }
func (m *StoreDel) String() string            { return proto.CompactTextString(m) }
func (*StoreDel) ProtoMessage()               {}
func (*StoreDel) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *StoreDel) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *StoreDel) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type StoreSetWithSync struct {
	Storeset *StoreSet `protobuf:"bytes,1,opt,name=storeset" json:"storeset,omitempty"`
	Sync     bool      `protobuf:"varint,2,opt,name=sync" json:"sync,omitempty"`
}

func (m *StoreSetWithSync) Reset()                    { *m = StoreSetWithSync{} }
func (m *StoreSetWithSync) String() string            { return proto.CompactTextString(m) }
func (*StoreSetWithSync) ProtoMessage()               {}
func (*StoreSetWithSync) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *StoreSetWithSync) GetStoreset() *StoreSet {
	if m != nil {
		return m.Storeset
	}
	return nil
}

func (m *StoreSetWithSync) GetSync() bool {
	if m != nil {
		return m.Sync
	}
	return false
}

type StoreGet struct {
	StateHash []byte   `protobuf:"bytes,1,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Keys      [][]byte `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *StoreGet) Reset()                    { *m = StoreGet{} }
func (m *StoreGet) String() string            { return proto.CompactTextString(m) }
func (*StoreGet) ProtoMessage()               {}
func (*StoreGet) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

func (m *StoreGet) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *StoreGet) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

type StoreReplyValue struct {
	Values [][]byte `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *StoreReplyValue) Reset()                    { *m = StoreReplyValue{} }
func (m *StoreReplyValue) String() string            { return proto.CompactTextString(m) }
func (*StoreReplyValue) ProtoMessage()               {}
func (*StoreReplyValue) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{12} }

func (m *StoreReplyValue) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

type PruneData struct {
	// 对应keyHash下的区块高度
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	// hash+prefix的长度
	Lenth int32 `protobuf:"varint,2,opt,name=lenth" json:"lenth,omitempty"`
	// 该叶子节点的roothash
	RHash []byte `protobuf:"bytes,3,opt,name=rHash,proto3" json:"rHash,omitempty"`
}

func (m *PruneData) Reset()                    { *m = PruneData{} }
func (m *PruneData) String() string            { return proto.CompactTextString(m) }
func (*PruneData) ProtoMessage()               {}
func (*PruneData) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{13} }

func (m *PruneData) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *PruneData) GetLenth() int32 {
	if m != nil {
		return m.Lenth
	}
	return 0
}

func (m *PruneData) GetRHash() []byte {
	if m != nil {
		return m.RHash
	}
	return nil
}

type PruneRootNode struct {
	// 标记是否对hash节点进行裁剪
	NeedPruning  bool   `protobuf:"varint,1,opt,name=needPruning" json:"needPruning,omitempty"`
	PruneLeafNum int32  `protobuf:"varint,2,opt,name=pruneLeafNum" json:"pruneLeafNum,omitempty"`
	Height       int64  `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	LeftHash     []byte `protobuf:"bytes,4,opt,name=leftHash,proto3" json:"leftHash,omitempty"`
	RightHash    []byte `protobuf:"bytes,5,opt,name=rightHash,proto3" json:"rightHash,omitempty"`
}

func (m *PruneRootNode) Reset()                    { *m = PruneRootNode{} }
func (m *PruneRootNode) String() string            { return proto.CompactTextString(m) }
func (*PruneRootNode) ProtoMessage()               {}
func (*PruneRootNode) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{14} }

func (m *PruneRootNode) GetNeedPruning() bool {
	if m != nil {
		return m.NeedPruning
	}
	return false
}

func (m *PruneRootNode) GetPruneLeafNum() int32 {
	if m != nil {
		return m.PruneLeafNum
	}
	return 0
}

func (m *PruneRootNode) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *PruneRootNode) GetLeftHash() []byte {
	if m != nil {
		return m.LeftHash
	}
	return nil
}

func (m *PruneRootNode) GetRightHash() []byte {
	if m != nil {
		return m.RightHash
	}
	return nil
}

func init() {
	proto.RegisterType((*LeafNode)(nil), "types.LeafNode")
	proto.RegisterType((*InnerNode)(nil), "types.InnerNode")
	proto.RegisterType((*MAVLProof)(nil), "types.MAVLProof")
	proto.RegisterType((*StoreNode)(nil), "types.StoreNode")
	proto.RegisterType((*LocalDBSet)(nil), "types.LocalDBSet")
	proto.RegisterType((*LocalDBList)(nil), "types.LocalDBList")
	proto.RegisterType((*LocalDBGet)(nil), "types.LocalDBGet")
	proto.RegisterType((*LocalReplyValue)(nil), "types.LocalReplyValue")
	proto.RegisterType((*StoreSet)(nil), "types.StoreSet")
	proto.RegisterType((*StoreDel)(nil), "types.StoreDel")
	proto.RegisterType((*StoreSetWithSync)(nil), "types.StoreSetWithSync")
	proto.RegisterType((*StoreGet)(nil), "types.StoreGet")
	proto.RegisterType((*StoreReplyValue)(nil), "types.StoreReplyValue")
	proto.RegisterType((*PruneData)(nil), "types.PruneData")
	proto.RegisterType((*PruneRootNode)(nil), "types.PruneRootNode")
}

func init() { proto.RegisterFile("db.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 566 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x51, 0x8b, 0xda, 0x4c,
	0x14, 0x25, 0x89, 0x59, 0x92, 0xab, 0x1f, 0x2b, 0xe1, 0xa3, 0xc8, 0x22, 0x54, 0x86, 0x3e, 0x58,
	0x4a, 0x6d, 0xa9, 0xaf, 0x7d, 0x68, 0x17, 0x61, 0x5b, 0xb4, 0xed, 0x12, 0xc1, 0x42, 0x1f, 0x0a,
	0x31, 0x5e, 0x35, 0x18, 0x67, 0x6c, 0x32, 0x96, 0xa6, 0xff, 0xa4, 0xbf, 0xa0, 0x7f, 0xb3, 0xcc,
	0x9d, 0x89, 0x89, 0x4b, 0x5d, 0xbb, 0x4f, 0xce, 0x39, 0xde, 0xdc, 0x73, 0xee, 0xb9, 0x99, 0x80,
	0xb7, 0x98, 0x0f, 0x76, 0x99, 0x90, 0x22, 0x70, 0x65, 0xb1, 0xc3, 0xfc, 0xaa, 0x15, 0x8b, 0xed,
	0x56, 0x70, 0x4d, 0xb2, 0xaf, 0xe0, 0x4d, 0x30, 0x5a, 0x7e, 0x14, 0x0b, 0x0c, 0xda, 0xe0, 0x6c,
	0xb0, 0xe8, 0x58, 0x3d, 0xab, 0xdf, 0x0a, 0xd5, 0x31, 0xf8, 0x1f, 0xdc, 0xef, 0x51, 0xba, 0xc7,
	0x8e, 0x4d, 0x9c, 0x06, 0xc1, 0x23, 0xb8, 0x58, 0x63, 0xb2, 0x5a, 0xcb, 0x8e, 0xd3, 0xb3, 0xfa,
	0x6e, 0x68, 0x50, 0x10, 0x40, 0x23, 0x4f, 0x7e, 0x62, 0xa7, 0x41, 0x2c, 0x9d, 0xd9, 0x37, 0xf0,
	0xdf, 0x73, 0x8e, 0x19, 0x09, 0x5c, 0x81, 0x97, 0xe2, 0x52, 0xbe, 0x8b, 0xf2, 0xb5, 0x51, 0x39,
	0xe0, 0xa0, 0x0b, 0x7e, 0xa6, 0xba, 0xd0, 0x9f, 0x5a, 0xae, 0x22, 0x1e, 0x24, 0xb9, 0x07, 0xff,
	0xc3, 0xdb, 0xd9, 0xe4, 0x36, 0x13, 0x62, 0xa9, 0x25, 0xa3, 0xe5, 0xb1, 0xa4, 0xc6, 0xc1, 0x4b,
	0x80, 0xa4, 0xf4, 0x96, 0x77, 0xec, 0x9e, 0xd3, 0x6f, 0xbe, 0x6a, 0x0f, 0x28, 0xa5, 0xc1, 0xc1,
	0x74, 0x58, 0xab, 0x51, 0xdd, 0x32, 0x21, 0xb4, 0x47, 0x47, 0x77, 0x2b, 0x31, 0xfb, 0x65, 0x81,
	0x3f, 0x95, 0x22, 0xc3, 0x07, 0x65, 0x59, 0x8f, 0xc4, 0xb9, 0x2f, 0x92, 0xc6, 0xe9, 0x48, 0xdc,
	0xbf, 0x46, 0x72, 0x51, 0x8b, 0xe4, 0x39, 0xc0, 0x44, 0xc4, 0x51, 0x3a, 0xba, 0x9e, 0xa2, 0x0c,
	0x1e, 0x83, 0x3d, 0x9e, 0x99, 0x79, 0x2f, 0xcd, 0xbc, 0x63, 0x2c, 0x66, 0xca, 0x50, 0x68, 0x8f,
	0x67, 0x6c, 0x03, 0x4d, 0x53, 0x3e, 0x49, 0x72, 0xa9, 0x94, 0x76, 0x19, 0x2e, 0x93, 0x1f, 0x66,
	0x1c, 0x83, 0xca, 0x19, 0xed, 0x6a, 0xc6, 0x2e, 0xf8, 0x8b, 0x24, 0xc3, 0x58, 0x26, 0x82, 0x9b,
	0x4d, 0x55, 0x84, 0x4a, 0x20, 0x16, 0x7b, 0x2e, 0xcd, 0xb6, 0x34, 0x60, 0xbd, 0x83, 0xb7, 0x1b,
	0x24, 0xf7, 0x1b, 0x2c, 0xf4, 0x36, 0x5a, 0x21, 0x9d, 0xd9, 0x53, 0xb8, 0xa4, 0x8a, 0x10, 0x77,
	0xa9, 0x76, 0xa9, 0x2c, 0x51, 0x7e, 0x65, 0xa1, 0x41, 0x2c, 0x02, 0x8f, 0x76, 0xa0, 0xc6, 0xec,
	0x82, 0x9f, 0xcb, 0x48, 0x62, 0x6d, 0xf7, 0x15, 0x71, 0x36, 0x84, 0x3b, 0xaf, 0x9c, 0x53, 0xe6,
	0xcb, 0xde, 0x18, 0x89, 0x11, 0xa6, 0x67, 0x24, 0xaa, 0x0e, 0xf6, 0x51, 0x87, 0x29, 0xb4, 0x4b,
	0x93, 0x9f, 0x13, 0xb9, 0x9e, 0x16, 0x3c, 0x0e, 0x9e, 0x81, 0x97, 0x2b, 0x2e, 0x47, 0x49, 0x8d,
	0x2a, 0x53, 0x65, 0x69, 0x78, 0x28, 0xa0, 0x15, 0x17, 0x3c, 0xa6, 0xb6, 0x5e, 0x48, 0x67, 0xf6,
	0xda, 0xd8, 0xba, 0x39, 0x3b, 0xf9, 0x89, 0x88, 0xe9, 0xe9, 0x7f, 0x88, 0xf8, 0x13, 0xf8, 0xb7,
	0xd9, 0x9e, 0xe3, 0x28, 0x92, 0x51, 0x6d, 0x44, 0xab, 0x3e, 0xa2, 0x5a, 0x75, 0x8a, 0x5c, 0xea,
	0x9b, 0xec, 0x86, 0x1a, 0x28, 0x36, 0xab, 0xbd, 0xe9, 0x1a, 0xb0, 0xdf, 0x16, 0xfc, 0x47, 0x1d,
	0x43, 0x21, 0x24, 0x5d, 0x9e, 0x1e, 0x34, 0x39, 0xe2, 0x42, 0x91, 0x09, 0x5f, 0x51, 0x6b, 0x2f,
	0xac, 0x53, 0x01, 0x83, 0xd6, 0x4e, 0x3d, 0x42, 0xdf, 0xae, 0xfd, 0xd6, 0xc8, 0x1c, 0x71, 0xa7,
	0x16, 0x78, 0x74, 0xe5, 0x1a, 0xf7, 0x5d, 0x39, 0xf7, 0xce, 0x95, 0xbb, 0x7e, 0xf2, 0x85, 0xad,
	0x12, 0x99, 0x46, 0xf3, 0xc1, 0x70, 0x38, 0x88, 0xf9, 0x8b, 0x78, 0x1d, 0x25, 0x7c, 0x38, 0x3c,
	0xfc, 0xd2, 0xc2, 0xe6, 0x17, 0xf4, 0x65, 0x1d, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x69, 0xe5,
	0x4a, 0x74, 0x7a, 0x05, 0x00, 0x00,
}
