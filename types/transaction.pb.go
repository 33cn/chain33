// Code generated by protoc-gen-go.
// source: transaction.proto
// DO NOT EDIT!

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateTx struct {
	To     string `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	Amount int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Fee    int64  `protobuf:"varint,3,opt,name=fee" json:"fee,omitempty"`
	Note   string `protobuf:"bytes,4,opt,name=note" json:"note,omitempty"`
}

func (m *CreateTx) Reset()                    { *m = CreateTx{} }
func (m *CreateTx) String() string            { return proto.CompactTextString(m) }
func (*CreateTx) ProtoMessage()               {}
func (*CreateTx) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *CreateTx) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *CreateTx) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CreateTx) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *CreateTx) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type UnsignTx struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *UnsignTx) Reset()                    { *m = UnsignTx{} }
func (m *UnsignTx) String() string            { return proto.CompactTextString(m) }
func (*UnsignTx) ProtoMessage()               {}
func (*UnsignTx) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *UnsignTx) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SignedTx struct {
	Unsign []byte `protobuf:"bytes,1,opt,name=unsign,proto3" json:"unsign,omitempty"`
	Sign   []byte `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
	Pubkey []byte `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Ty     int32  `protobuf:"varint,4,opt,name=ty" json:"ty,omitempty"`
}

func (m *SignedTx) Reset()                    { *m = SignedTx{} }
func (m *SignedTx) String() string            { return proto.CompactTextString(m) }
func (*SignedTx) ProtoMessage()               {}
func (*SignedTx) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *SignedTx) GetUnsign() []byte {
	if m != nil {
		return m.Unsign
	}
	return nil
}

func (m *SignedTx) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *SignedTx) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *SignedTx) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

type Transaction struct {
	Execer    []byte     `protobuf:"bytes,1,opt,name=execer,proto3" json:"execer,omitempty"`
	Payload   []byte     `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature *Signature `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
	Fee       int64      `protobuf:"varint,4,opt,name=fee" json:"fee,omitempty"`
	Expire    int64      `protobuf:"varint,5,opt,name=expire" json:"expire,omitempty"`
	Nonce     int64      `protobuf:"varint,6,opt,name=nonce" json:"nonce,omitempty"`
	To        string     `protobuf:"bytes,7,opt,name=to" json:"to,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *Transaction) GetExecer() []byte {
	if m != nil {
		return m.Execer
	}
	return nil
}

func (m *Transaction) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Transaction) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Transaction) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *Transaction) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *Transaction) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

// 三种签名支持
// ty = 1 -> secp256k1
// ty = 2 -> ed25519
// ty = 3 -> sm2
type Signature struct {
	Ty        int32  `protobuf:"varint,1,opt,name=ty" json:"ty,omitempty"`
	Pubkey    []byte `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *Signature) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *Signature) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type AddrOverview struct {
	Reciver int64 `protobuf:"varint,1,opt,name=reciver" json:"reciver,omitempty"`
	Balance int64 `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	TxCount int64 `protobuf:"varint,3,opt,name=txCount" json:"txCount,omitempty"`
}

func (m *AddrOverview) Reset()                    { *m = AddrOverview{} }
func (m *AddrOverview) String() string            { return proto.CompactTextString(m) }
func (*AddrOverview) ProtoMessage()               {}
func (*AddrOverview) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *AddrOverview) GetReciver() int64 {
	if m != nil {
		return m.Reciver
	}
	return 0
}

func (m *AddrOverview) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *AddrOverview) GetTxCount() int64 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

type ReqAddr struct {
	Addr      string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Flag      int32  `protobuf:"varint,2,opt,name=flag" json:"flag,omitempty"`
	Count     int32  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Direction int32  `protobuf:"varint,4,opt,name=direction" json:"direction,omitempty"`
	Height    int64  `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	Index     int64  `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
}

func (m *ReqAddr) Reset()                    { *m = ReqAddr{} }
func (m *ReqAddr) String() string            { return proto.CompactTextString(m) }
func (*ReqAddr) ProtoMessage()               {}
func (*ReqAddr) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

func (m *ReqAddr) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReqAddr) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *ReqAddr) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReqAddr) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *ReqAddr) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ReqAddr) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type HexTx struct {
	Tx string `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
}

func (m *HexTx) Reset()                    { *m = HexTx{} }
func (m *HexTx) String() string            { return proto.CompactTextString(m) }
func (*HexTx) ProtoMessage()               {}
func (*HexTx) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

func (m *HexTx) GetTx() string {
	if m != nil {
		return m.Tx
	}
	return ""
}

type ReplyTxInfo struct {
	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height int64  `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Index  int64  `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
}

func (m *ReplyTxInfo) Reset()                    { *m = ReplyTxInfo{} }
func (m *ReplyTxInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyTxInfo) ProtoMessage()               {}
func (*ReplyTxInfo) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{8} }

func (m *ReplyTxInfo) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ReplyTxInfo) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ReplyTxInfo) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type ReqTxList struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *ReqTxList) Reset()                    { *m = ReqTxList{} }
func (m *ReqTxList) String() string            { return proto.CompactTextString(m) }
func (*ReqTxList) ProtoMessage()               {}
func (*ReqTxList) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{9} }

func (m *ReqTxList) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReplyTxList struct {
	Txs []*Transaction `protobuf:"bytes,1,rep,name=txs" json:"txs,omitempty"`
}

func (m *ReplyTxList) Reset()                    { *m = ReplyTxList{} }
func (m *ReplyTxList) String() string            { return proto.CompactTextString(m) }
func (*ReplyTxList) ProtoMessage()               {}
func (*ReplyTxList) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{10} }

func (m *ReplyTxList) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

type TxHashList struct {
	Hashes [][]byte `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (m *TxHashList) Reset()                    { *m = TxHashList{} }
func (m *TxHashList) String() string            { return proto.CompactTextString(m) }
func (*TxHashList) ProtoMessage()               {}
func (*TxHashList) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{11} }

func (m *TxHashList) GetHashes() [][]byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type ReplyTxInfos struct {
	TxInfos []*ReplyTxInfo `protobuf:"bytes,1,rep,name=txInfos" json:"txInfos,omitempty"`
}

func (m *ReplyTxInfos) Reset()                    { *m = ReplyTxInfos{} }
func (m *ReplyTxInfos) String() string            { return proto.CompactTextString(m) }
func (*ReplyTxInfos) ProtoMessage()               {}
func (*ReplyTxInfos) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{12} }

func (m *ReplyTxInfos) GetTxInfos() []*ReplyTxInfo {
	if m != nil {
		return m.TxInfos
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateTx)(nil), "types.CreateTx")
	proto.RegisterType((*UnsignTx)(nil), "types.UnsignTx")
	proto.RegisterType((*SignedTx)(nil), "types.SignedTx")
	proto.RegisterType((*Transaction)(nil), "types.Transaction")
	proto.RegisterType((*Signature)(nil), "types.Signature")
	proto.RegisterType((*AddrOverview)(nil), "types.AddrOverview")
	proto.RegisterType((*ReqAddr)(nil), "types.ReqAddr")
	proto.RegisterType((*HexTx)(nil), "types.HexTx")
	proto.RegisterType((*ReplyTxInfo)(nil), "types.ReplyTxInfo")
	proto.RegisterType((*ReqTxList)(nil), "types.ReqTxList")
	proto.RegisterType((*ReplyTxList)(nil), "types.ReplyTxList")
	proto.RegisterType((*TxHashList)(nil), "types.TxHashList")
	proto.RegisterType((*ReplyTxInfos)(nil), "types.ReplyTxInfos")
}

func init() { proto.RegisterFile("transaction.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0xed, 0x38, 0x3f, 0x13, 0x0b, 0x15, 0x0b, 0x15, 0x1f, 0x10, 0x0a, 0xab, 0x1e, 0x72,
	0x40, 0x39, 0xb4, 0x57, 0x2e, 0xa8, 0x97, 0x22, 0x21, 0x55, 0x6c, 0x8d, 0xc4, 0x01, 0x21, 0x6d,
	0xe2, 0x49, 0x6c, 0x11, 0x6c, 0x77, 0xbd, 0x09, 0xeb, 0xe7, 0xe0, 0x81, 0x78, 0x35, 0xb4, 0xb3,
	0xbb, 0x89, 0xa9, 0x7a, 0x9b, 0x6f, 0x76, 0x66, 0xbe, 0x99, 0x6f, 0x46, 0x0b, 0x2f, 0x95, 0x14,
	0x75, 0x27, 0x36, 0xaa, 0x6a, 0xea, 0x55, 0x2b, 0x1b, 0xd5, 0xa4, 0xb1, 0xea, 0x5b, 0xec, 0xd8,
	0x37, 0x98, 0xde, 0x4a, 0x14, 0x0a, 0x73, 0x9d, 0xbe, 0x80, 0x50, 0x35, 0x59, 0xb0, 0x08, 0x96,
	0x33, 0x1e, 0xaa, 0x26, 0xbd, 0x84, 0xb1, 0xf8, 0xd5, 0x1c, 0x6a, 0x95, 0x85, 0x8b, 0x60, 0x19,
	0x71, 0x87, 0xd2, 0x0b, 0x88, 0xb6, 0x88, 0x59, 0x44, 0x4e, 0x63, 0xa6, 0x29, 0x8c, 0xea, 0x46,
	0x61, 0x36, 0xa2, 0x5c, 0xb2, 0xd9, 0x5b, 0x98, 0x7e, 0xad, 0xbb, 0x6a, 0x57, 0xe7, 0xda, 0xbc,
	0x17, 0x42, 0x09, 0xaa, 0x9d, 0x70, 0xb2, 0xd9, 0x0f, 0x98, 0x3e, 0x54, 0xbb, 0x1a, 0x8b, 0x5c,
	0x1b, 0xa6, 0x03, 0xc5, 0xba, 0x08, 0x87, 0x4c, 0x1e, 0x79, 0x43, 0x9b, 0x47, 0xbe, 0x4b, 0x18,
	0xb7, 0x87, 0xf5, 0x4f, 0xec, 0xa9, 0x81, 0x84, 0x3b, 0x44, 0xdd, 0xf7, 0xd4, 0x41, 0xcc, 0x43,
	0xd5, 0xb3, 0xbf, 0x01, 0xcc, 0xf3, 0xf3, 0xd8, 0x26, 0x0f, 0x35, 0x6e, 0x50, 0x7a, 0x0e, 0x8b,
	0xd2, 0x0c, 0x26, 0xad, 0xe8, 0xf7, 0x8d, 0x28, 0x1c, 0x8d, 0x87, 0xe9, 0x0a, 0x66, 0x86, 0x51,
	0xa8, 0x83, 0xb4, 0xd3, 0xce, 0xaf, 0x2f, 0x56, 0x24, 0xdb, 0xea, 0xc1, 0xfb, 0xf9, 0x39, 0xc4,
	0xeb, 0x32, 0x3a, 0xeb, 0x42, 0x9c, 0x6d, 0x25, 0x31, 0x8b, 0xad, 0x82, 0x16, 0xa5, 0xaf, 0x20,
	0xae, 0x9b, 0x7a, 0x83, 0xd9, 0x98, 0xdc, 0x16, 0x38, 0xfd, 0x27, 0x5e, 0x7f, 0xf6, 0x05, 0x66,
	0x27, 0x1e, 0x37, 0x5e, 0xe0, 0xc7, 0x1b, 0xc8, 0x10, 0xfe, 0x27, 0xc3, 0x9b, 0xa7, 0x4d, 0x27,
	0x83, 0x16, 0xd9, 0x77, 0x48, 0x3e, 0x16, 0x85, 0xbc, 0x3f, 0xa2, 0x3c, 0x56, 0xf8, 0xdb, 0x0c,
	0x2f, 0x71, 0x53, 0x1d, 0x9d, 0x2a, 0x11, 0xf7, 0xd0, 0xbc, 0xac, 0xc5, 0x5e, 0x98, 0x26, 0xed,
	0xf6, 0x3d, 0x34, 0x2f, 0x4a, 0xdf, 0xd2, 0x5d, 0xd8, 0x13, 0xf0, 0x90, 0xfd, 0x09, 0x60, 0xc2,
	0xf1, 0xd1, 0x30, 0x98, 0xd5, 0x89, 0xa2, 0x90, 0xee, 0x9c, 0xc8, 0x36, 0xbe, 0xed, 0x5e, 0xec,
	0xa8, 0x60, 0xcc, 0xc9, 0x36, 0x52, 0x6c, 0x4e, 0xb5, 0x62, 0x6e, 0x81, 0x99, 0xa2, 0xa8, 0x24,
	0xd2, 0xe6, 0xdc, 0x4e, 0xcf, 0x0e, 0x33, 0x7b, 0x89, 0xd5, 0xae, 0x54, 0x5e, 0x56, 0x8b, 0x4c,
	0xad, 0xaa, 0x2e, 0x50, 0x7b, 0x59, 0x09, 0xb0, 0xd7, 0x10, 0xdf, 0xa1, 0x76, 0xf7, 0xad, 0x4f,
	0xf7, 0xad, 0xd9, 0x3d, 0xcc, 0x39, 0xb6, 0xfb, 0x3e, 0xd7, 0x9f, 0xea, 0x6d, 0x63, 0xba, 0x2b,
	0x45, 0x57, 0xfa, 0x23, 0x35, 0xf6, 0x80, 0x29, 0x7c, 0x9e, 0x29, 0x1a, 0x32, 0xbd, 0x83, 0x19,
	0xc7, 0xc7, 0x5c, 0x7f, 0xae, 0x3a, 0x75, 0x1e, 0xcc, 0x0a, 0x6b, 0x01, 0xbb, 0x39, 0x71, 0x52,
	0xd0, 0x15, 0x44, 0x4a, 0x77, 0x59, 0xb0, 0x88, 0x96, 0xf3, 0xeb, 0xd4, 0x1d, 0xd7, 0xe0, 0x6a,
	0xb9, 0x79, 0x66, 0x57, 0x00, 0xb9, 0xbe, 0x13, 0x5d, 0x49, 0x39, 0xa6, 0x27, 0xd1, 0x95, 0x68,
	0xd3, 0x12, 0xee, 0x10, 0xfb, 0x00, 0xc9, 0x60, 0x9c, 0x2e, 0x7d, 0x6f, 0xf6, 0x44, 0xe6, 0x93,
	0xfa, 0x83, 0x28, 0xee, 0x43, 0xd6, 0x63, 0xfa, 0x16, 0x6e, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x48, 0x8d, 0xd2, 0xb5, 0x2b, 0x04, 0x00, 0x00,
}
