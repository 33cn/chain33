// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transaction.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateTx struct {
	To     string `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	Amount int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Fee    int64  `protobuf:"varint,3,opt,name=fee" json:"fee,omitempty"`
	Note   string `protobuf:"bytes,4,opt,name=note" json:"note,omitempty"`
}

func (m *CreateTx) Reset()                    { *m = CreateTx{} }
func (m *CreateTx) String() string            { return proto.CompactTextString(m) }
func (*CreateTx) ProtoMessage()               {}
func (*CreateTx) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *CreateTx) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *CreateTx) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CreateTx) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *CreateTx) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type UnsignTx struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *UnsignTx) Reset()                    { *m = UnsignTx{} }
func (m *UnsignTx) String() string            { return proto.CompactTextString(m) }
func (*UnsignTx) ProtoMessage()               {}
func (*UnsignTx) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *UnsignTx) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SignedTx struct {
	Unsign []byte `protobuf:"bytes,1,opt,name=unsign,proto3" json:"unsign,omitempty"`
	Sign   []byte `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
	Pubkey []byte `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Ty     int32  `protobuf:"varint,4,opt,name=ty" json:"ty,omitempty"`
}

func (m *SignedTx) Reset()                    { *m = SignedTx{} }
func (m *SignedTx) String() string            { return proto.CompactTextString(m) }
func (*SignedTx) ProtoMessage()               {}
func (*SignedTx) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *SignedTx) GetUnsign() []byte {
	if m != nil {
		return m.Unsign
	}
	return nil
}

func (m *SignedTx) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *SignedTx) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *SignedTx) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

type Transaction struct {
	Execer    []byte     `protobuf:"bytes,1,opt,name=execer,proto3" json:"execer,omitempty"`
	Payload   []byte     `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature *Signature `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
	Fee       int64      `protobuf:"varint,4,opt,name=fee" json:"fee,omitempty"`
	Expire    int64      `protobuf:"varint,5,opt,name=expire" json:"expire,omitempty"`
	Nonce     int64      `protobuf:"varint,6,opt,name=nonce" json:"nonce,omitempty"`
	To        string     `protobuf:"bytes,7,opt,name=to" json:"to,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *Transaction) GetExecer() []byte {
	if m != nil {
		return m.Execer
	}
	return nil
}

func (m *Transaction) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Transaction) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Transaction) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *Transaction) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *Transaction) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

// 三种签名支持
// ty = 1 -> secp256k1
// ty = 2 -> ed25519
// ty = 3 -> sm2
type Signature struct {
	Ty        int32  `protobuf:"varint,1,opt,name=ty" json:"ty,omitempty"`
	Pubkey    []byte `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *Signature) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *Signature) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateTx)(nil), "types.CreateTx")
	proto.RegisterType((*UnsignTx)(nil), "types.UnsignTx")
	proto.RegisterType((*SignedTx)(nil), "types.SignedTx")
	proto.RegisterType((*Transaction)(nil), "types.Transaction")
	proto.RegisterType((*Signature)(nil), "types.Signature")
}

func init() { proto.RegisterFile("transaction.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x51, 0x4d, 0x4e, 0xf3, 0x30,
	0x10, 0x55, 0xd2, 0x26, 0x6d, 0xa7, 0xd5, 0xa7, 0x7e, 0x16, 0xaa, 0xbc, 0x40, 0xa8, 0xca, 0xaa,
	0xab, 0x2c, 0xe0, 0x08, 0x9c, 0x80, 0x34, 0x48, 0xac, 0x90, 0xdc, 0x76, 0xa8, 0x22, 0xc0, 0x8e,
	0xdc, 0x89, 0x94, 0x9c, 0x8e, 0xab, 0x21, 0x8f, 0x6d, 0x52, 0xd8, 0xcd, 0x7b, 0x99, 0xc9, 0xfb,
	0x31, 0xfc, 0x27, 0xab, 0xf4, 0x45, 0x1d, 0xa9, 0x31, 0xba, 0x6c, 0xad, 0x21, 0x23, 0x32, 0x1a,
	0x5a, 0xbc, 0x14, 0x2f, 0x30, 0x7f, 0xb4, 0xa8, 0x08, 0xeb, 0x5e, 0xfc, 0x83, 0x94, 0x8c, 0x4c,
	0xb6, 0xc9, 0x6e, 0x51, 0xa5, 0x64, 0xc4, 0x06, 0x72, 0xf5, 0x69, 0x3a, 0x4d, 0x32, 0xdd, 0x26,
	0xbb, 0x49, 0x15, 0x90, 0x58, 0xc3, 0xe4, 0x0d, 0x51, 0x4e, 0x98, 0x74, 0xa3, 0x10, 0x30, 0xd5,
	0x86, 0x50, 0x4e, 0xf9, 0x96, 0xe7, 0xe2, 0x0e, 0xe6, 0xcf, 0xfa, 0xd2, 0x9c, 0x75, 0xdd, 0xbb,
	0xef, 0x27, 0x45, 0x8a, 0xff, 0xbd, 0xaa, 0x78, 0x2e, 0x5e, 0x61, 0xbe, 0x6f, 0xce, 0x1a, 0x4f,
	0x75, 0xef, 0x94, 0x3a, 0xde, 0x0d, 0x1b, 0x01, 0xb9, 0x3b, 0x66, 0x53, 0x7f, 0xc7, 0xdc, 0x06,
	0xf2, 0xb6, 0x3b, 0xbc, 0xe3, 0xc0, 0x06, 0x56, 0x55, 0x40, 0xec, 0x7e, 0x60, 0x07, 0x59, 0x95,
	0xd2, 0x50, 0x7c, 0x25, 0xb0, 0xac, 0xc7, 0xd8, 0xee, 0x0e, 0x7b, 0x3c, 0xa2, 0x8d, 0x1a, 0x1e,
	0x09, 0x09, 0xb3, 0x56, 0x0d, 0x1f, 0x46, 0x9d, 0x82, 0x4c, 0x84, 0xa2, 0x84, 0x85, 0x53, 0x54,
	0xd4, 0x59, 0x9f, 0x76, 0x79, 0xbf, 0x2e, 0xb9, 0xb6, 0x72, 0x1f, 0xf9, 0x6a, 0x5c, 0x89, 0xbd,
	0x4c, 0xc7, 0x5e, 0x58, 0xb3, 0x6d, 0x2c, 0xca, 0xcc, 0x37, 0xe8, 0x91, 0xb8, 0x81, 0x4c, 0x1b,
	0x7d, 0x44, 0x99, 0x33, 0xed, 0x41, 0xe8, 0x7f, 0x16, 0xfb, 0x2f, 0x9e, 0x60, 0xf1, 0xa3, 0x13,
	0xe2, 0x25, 0x31, 0xde, 0x55, 0x0d, 0xe9, 0xaf, 0x1a, 0x6e, 0xff, 0x9a, 0x5e, 0x5d, 0x59, 0x3c,
	0xe4, 0xfc, 0xf8, 0x0f, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x36, 0x91, 0xaa, 0xd1, 0x11, 0x02,
	0x00, 0x00,
}
