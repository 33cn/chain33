// Code generated by protoc-gen-go. DO NOT EDIT.
// source: paracross.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// stateDB
type ParacrossStatusDetails struct {
	Addrs     []string `protobuf:"bytes,1,rep,name=addrs" json:"addrs,omitempty"`
	BlockHash [][]byte `protobuf:"bytes,2,rep,name=blockHash,proto3" json:"blockHash,omitempty"`
}

func (m *ParacrossStatusDetails) Reset()                    { *m = ParacrossStatusDetails{} }
func (m *ParacrossStatusDetails) String() string            { return proto.CompactTextString(m) }
func (*ParacrossStatusDetails) ProtoMessage()               {}
func (*ParacrossStatusDetails) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *ParacrossStatusDetails) GetAddrs() []string {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *ParacrossStatusDetails) GetBlockHash() [][]byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type ParacrossHeightStatus struct {
	// ing, done
	Status  int32                   `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Title   string                  `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Height  int64                   `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	Details *ParacrossStatusDetails `protobuf:"bytes,4,opt,name=details" json:"details,omitempty"`
}

func (m *ParacrossHeightStatus) Reset()                    { *m = ParacrossHeightStatus{} }
func (m *ParacrossHeightStatus) String() string            { return proto.CompactTextString(m) }
func (*ParacrossHeightStatus) ProtoMessage()               {}
func (*ParacrossHeightStatus) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *ParacrossHeightStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ParacrossHeightStatus) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ParacrossHeightStatus) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ParacrossHeightStatus) GetDetails() *ParacrossStatusDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

type ParacrossStatus struct {
	Title     string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Height    int64  `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	BlockHash []byte `protobuf:"bytes,3,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
}

func (m *ParacrossStatus) Reset()                    { *m = ParacrossStatus{} }
func (m *ParacrossStatus) String() string            { return proto.CompactTextString(m) }
func (*ParacrossStatus) ProtoMessage()               {}
func (*ParacrossStatus) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *ParacrossStatus) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ParacrossStatus) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ParacrossStatus) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

// action
type ParacrossNodeStatus struct {
	MainBlockHash   []byte   `protobuf:"bytes,1,opt,name=mainBlockHash,proto3" json:"mainBlockHash,omitempty"`
	MainBlockHeight int64    `protobuf:"varint,2,opt,name=mainBlockHeight" json:"mainBlockHeight,omitempty"`
	Title           string   `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Height          int64    `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
	PreBlockHash    []byte   `protobuf:"bytes,5,opt,name=preBlockHash,proto3" json:"preBlockHash,omitempty"`
	BlockHash       []byte   `protobuf:"bytes,6,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	PreStateHash    []byte   `protobuf:"bytes,7,opt,name=preStateHash,proto3" json:"preStateHash,omitempty"`
	StateHash       []byte   `protobuf:"bytes,8,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	TxCounts        uint32   `protobuf:"varint,9,opt,name=txCounts" json:"txCounts,omitempty"`
	TxResult        []byte   `protobuf:"bytes,10,opt,name=txResult,proto3" json:"txResult,omitempty"`
	TxHashs         [][]byte `protobuf:"bytes,11,rep,name=txHashs,proto3" json:"txHashs,omitempty"`
	CrossTxResult   []byte   `protobuf:"bytes,12,opt,name=crossTxResult,proto3" json:"crossTxResult,omitempty"`
	CrossTxHashs    [][]byte `protobuf:"bytes,13,rep,name=crossTxHashs,proto3" json:"crossTxHashs,omitempty"`
}

func (m *ParacrossNodeStatus) Reset()                    { *m = ParacrossNodeStatus{} }
func (m *ParacrossNodeStatus) String() string            { return proto.CompactTextString(m) }
func (*ParacrossNodeStatus) ProtoMessage()               {}
func (*ParacrossNodeStatus) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{3} }

func (m *ParacrossNodeStatus) GetMainBlockHash() []byte {
	if m != nil {
		return m.MainBlockHash
	}
	return nil
}

func (m *ParacrossNodeStatus) GetMainBlockHeight() int64 {
	if m != nil {
		return m.MainBlockHeight
	}
	return 0
}

func (m *ParacrossNodeStatus) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ParacrossNodeStatus) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ParacrossNodeStatus) GetPreBlockHash() []byte {
	if m != nil {
		return m.PreBlockHash
	}
	return nil
}

func (m *ParacrossNodeStatus) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *ParacrossNodeStatus) GetPreStateHash() []byte {
	if m != nil {
		return m.PreStateHash
	}
	return nil
}

func (m *ParacrossNodeStatus) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *ParacrossNodeStatus) GetTxCounts() uint32 {
	if m != nil {
		return m.TxCounts
	}
	return 0
}

func (m *ParacrossNodeStatus) GetTxResult() []byte {
	if m != nil {
		return m.TxResult
	}
	return nil
}

func (m *ParacrossNodeStatus) GetTxHashs() [][]byte {
	if m != nil {
		return m.TxHashs
	}
	return nil
}

func (m *ParacrossNodeStatus) GetCrossTxResult() []byte {
	if m != nil {
		return m.CrossTxResult
	}
	return nil
}

func (m *ParacrossNodeStatus) GetCrossTxHashs() [][]byte {
	if m != nil {
		return m.CrossTxHashs
	}
	return nil
}

type ParacrossCommitAction struct {
	Status *ParacrossNodeStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *ParacrossCommitAction) Reset()                    { *m = ParacrossCommitAction{} }
func (m *ParacrossCommitAction) String() string            { return proto.CompactTextString(m) }
func (*ParacrossCommitAction) ProtoMessage()               {}
func (*ParacrossCommitAction) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{4} }

func (m *ParacrossCommitAction) GetStatus() *ParacrossNodeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type ParacrossVoteAction struct {
	Status *ParacrossNodeStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *ParacrossVoteAction) Reset()                    { *m = ParacrossVoteAction{} }
func (m *ParacrossVoteAction) String() string            { return proto.CompactTextString(m) }
func (*ParacrossVoteAction) ProtoMessage()               {}
func (*ParacrossVoteAction) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{5} }

func (m *ParacrossVoteAction) GetStatus() *ParacrossNodeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type ParacrossAction struct {
	// Types that are valid to be assigned to Value:
	//	*ParacrossAction_Commit
	//	*ParacrossAction_Vote
	//	*ParacrossAction_AssetTransfer
	//	*ParacrossAction_AssetWithdraw
	Value isParacrossAction_Value `protobuf_oneof:"value"`
	Ty    int32                   `protobuf:"varint,2,opt,name=ty" json:"ty,omitempty"`
}

func (m *ParacrossAction) Reset()                    { *m = ParacrossAction{} }
func (m *ParacrossAction) String() string            { return proto.CompactTextString(m) }
func (*ParacrossAction) ProtoMessage()               {}
func (*ParacrossAction) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{6} }

type isParacrossAction_Value interface {
	isParacrossAction_Value()
}

type ParacrossAction_Commit struct {
	Commit *ParacrossCommitAction `protobuf:"bytes,1,opt,name=commit,oneof"`
}
type ParacrossAction_Vote struct {
	Vote *ParacrossVoteAction `protobuf:"bytes,3,opt,name=vote,oneof"`
}
type ParacrossAction_AssetTransfer struct {
	AssetTransfer *CoinsTransfer `protobuf:"bytes,4,opt,name=assetTransfer,oneof"`
}
type ParacrossAction_AssetWithdraw struct {
	AssetWithdraw *CoinsWithdraw `protobuf:"bytes,5,opt,name=assetWithdraw,oneof"`
}

func (*ParacrossAction_Commit) isParacrossAction_Value()        {}
func (*ParacrossAction_Vote) isParacrossAction_Value()          {}
func (*ParacrossAction_AssetTransfer) isParacrossAction_Value() {}
func (*ParacrossAction_AssetWithdraw) isParacrossAction_Value() {}

func (m *ParacrossAction) GetValue() isParacrossAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ParacrossAction) GetCommit() *ParacrossCommitAction {
	if x, ok := m.GetValue().(*ParacrossAction_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *ParacrossAction) GetVote() *ParacrossVoteAction {
	if x, ok := m.GetValue().(*ParacrossAction_Vote); ok {
		return x.Vote
	}
	return nil
}

func (m *ParacrossAction) GetAssetTransfer() *CoinsTransfer {
	if x, ok := m.GetValue().(*ParacrossAction_AssetTransfer); ok {
		return x.AssetTransfer
	}
	return nil
}

func (m *ParacrossAction) GetAssetWithdraw() *CoinsWithdraw {
	if x, ok := m.GetValue().(*ParacrossAction_AssetWithdraw); ok {
		return x.AssetWithdraw
	}
	return nil
}

func (m *ParacrossAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ParacrossAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ParacrossAction_OneofMarshaler, _ParacrossAction_OneofUnmarshaler, _ParacrossAction_OneofSizer, []interface{}{
		(*ParacrossAction_Commit)(nil),
		(*ParacrossAction_Vote)(nil),
		(*ParacrossAction_AssetTransfer)(nil),
		(*ParacrossAction_AssetWithdraw)(nil),
	}
}

func _ParacrossAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ParacrossAction)
	// value
	switch x := m.Value.(type) {
	case *ParacrossAction_Commit:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *ParacrossAction_Vote:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vote); err != nil {
			return err
		}
	case *ParacrossAction_AssetTransfer:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AssetTransfer); err != nil {
			return err
		}
	case *ParacrossAction_AssetWithdraw:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AssetWithdraw); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ParacrossAction.Value has unexpected type %T", x)
	}
	return nil
}

func _ParacrossAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ParacrossAction)
	switch tag {
	case 1: // value.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ParacrossCommitAction)
		err := b.DecodeMessage(msg)
		m.Value = &ParacrossAction_Commit{msg}
		return true, err
	case 3: // value.vote
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ParacrossVoteAction)
		err := b.DecodeMessage(msg)
		m.Value = &ParacrossAction_Vote{msg}
		return true, err
	case 4: // value.assetTransfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoinsTransfer)
		err := b.DecodeMessage(msg)
		m.Value = &ParacrossAction_AssetTransfer{msg}
		return true, err
	case 5: // value.assetWithdraw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoinsWithdraw)
		err := b.DecodeMessage(msg)
		m.Value = &ParacrossAction_AssetWithdraw{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ParacrossAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ParacrossAction)
	// value
	switch x := m.Value.(type) {
	case *ParacrossAction_Commit:
		s := proto.Size(x.Commit)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ParacrossAction_Vote:
		s := proto.Size(x.Vote)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ParacrossAction_AssetTransfer:
		s := proto.Size(x.AssetTransfer)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ParacrossAction_AssetWithdraw:
		s := proto.Size(x.AssetWithdraw)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// logs
type ReceiptParacrossCommit struct {
	Addr    string                 `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Status  *ParacrossNodeStatus   `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Prev    *ParacrossHeightStatus `protobuf:"bytes,3,opt,name=prev" json:"prev,omitempty"`
	Current *ParacrossHeightStatus `protobuf:"bytes,4,opt,name=current" json:"current,omitempty"`
}

func (m *ReceiptParacrossCommit) Reset()                    { *m = ReceiptParacrossCommit{} }
func (m *ReceiptParacrossCommit) String() string            { return proto.CompactTextString(m) }
func (*ReceiptParacrossCommit) ProtoMessage()               {}
func (*ReceiptParacrossCommit) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{7} }

func (m *ReceiptParacrossCommit) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReceiptParacrossCommit) GetStatus() *ParacrossNodeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ReceiptParacrossCommit) GetPrev() *ParacrossHeightStatus {
	if m != nil {
		return m.Prev
	}
	return nil
}

func (m *ReceiptParacrossCommit) GetCurrent() *ParacrossHeightStatus {
	if m != nil {
		return m.Current
	}
	return nil
}

type ReceiptParacrossVote struct {
	Status *ParacrossNodeStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *ReceiptParacrossVote) Reset()                    { *m = ReceiptParacrossVote{} }
func (m *ReceiptParacrossVote) String() string            { return proto.CompactTextString(m) }
func (*ReceiptParacrossVote) ProtoMessage()               {}
func (*ReceiptParacrossVote) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{8} }

func (m *ReceiptParacrossVote) GetStatus() *ParacrossNodeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type ReceiptParacrossDone struct {
	TotalNodes     int32  `protobuf:"varint,1,opt,name=totalNodes" json:"totalNodes,omitempty"`
	TotalCommit    int32  `protobuf:"varint,2,opt,name=totalCommit" json:"totalCommit,omitempty"`
	MostSameCommit int32  `protobuf:"varint,3,opt,name=mostSameCommit" json:"mostSameCommit,omitempty"`
	Title          string `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	Height         int64  `protobuf:"varint,5,opt,name=height" json:"height,omitempty"`
	StateHash      []byte `protobuf:"bytes,6,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	TxCounts       uint32 `protobuf:"varint,7,opt,name=txCounts" json:"txCounts,omitempty"`
	TxResult       []byte `protobuf:"bytes,8,opt,name=txResult,proto3" json:"txResult,omitempty"`
}

func (m *ReceiptParacrossDone) Reset()                    { *m = ReceiptParacrossDone{} }
func (m *ReceiptParacrossDone) String() string            { return proto.CompactTextString(m) }
func (*ReceiptParacrossDone) ProtoMessage()               {}
func (*ReceiptParacrossDone) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{9} }

func (m *ReceiptParacrossDone) GetTotalNodes() int32 {
	if m != nil {
		return m.TotalNodes
	}
	return 0
}

func (m *ReceiptParacrossDone) GetTotalCommit() int32 {
	if m != nil {
		return m.TotalCommit
	}
	return 0
}

func (m *ReceiptParacrossDone) GetMostSameCommit() int32 {
	if m != nil {
		return m.MostSameCommit
	}
	return 0
}

func (m *ReceiptParacrossDone) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReceiptParacrossDone) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ReceiptParacrossDone) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *ReceiptParacrossDone) GetTxCounts() uint32 {
	if m != nil {
		return m.TxCounts
	}
	return 0
}

func (m *ReceiptParacrossDone) GetTxResult() []byte {
	if m != nil {
		return m.TxResult
	}
	return nil
}

type ReceiptParacrossRecord struct {
	Addr   string               `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Status *ParacrossNodeStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *ReceiptParacrossRecord) Reset()                    { *m = ReceiptParacrossRecord{} }
func (m *ReceiptParacrossRecord) String() string            { return proto.CompactTextString(m) }
func (*ReceiptParacrossRecord) ProtoMessage()               {}
func (*ReceiptParacrossRecord) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{10} }

func (m *ReceiptParacrossRecord) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReceiptParacrossRecord) GetStatus() *ParacrossNodeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// LocalDB
// title-height-addr : txHash
type ParacrossTx struct {
	TxHash string `protobuf:"bytes,1,opt,name=txHash" json:"txHash,omitempty"`
}

func (m *ParacrossTx) Reset()                    { *m = ParacrossTx{} }
func (m *ParacrossTx) String() string            { return proto.CompactTextString(m) }
func (*ParacrossTx) ProtoMessage()               {}
func (*ParacrossTx) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{11} }

func (m *ParacrossTx) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

// query
type ReqParacrossTitleHeight struct {
	Title  string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Height int64  `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
}

func (m *ReqParacrossTitleHeight) Reset()                    { *m = ReqParacrossTitleHeight{} }
func (m *ReqParacrossTitleHeight) String() string            { return proto.CompactTextString(m) }
func (*ReqParacrossTitleHeight) ProtoMessage()               {}
func (*ReqParacrossTitleHeight) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{12} }

func (m *ReqParacrossTitleHeight) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ReqParacrossTitleHeight) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type RespParacrossTitles struct {
	Titles []*ReceiptParacrossDone `protobuf:"bytes,1,rep,name=titles" json:"titles,omitempty"`
}

func (m *RespParacrossTitles) Reset()                    { *m = RespParacrossTitles{} }
func (m *RespParacrossTitles) String() string            { return proto.CompactTextString(m) }
func (*RespParacrossTitles) ProtoMessage()               {}
func (*RespParacrossTitles) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{13} }

func (m *RespParacrossTitles) GetTitles() []*ReceiptParacrossDone {
	if m != nil {
		return m.Titles
	}
	return nil
}

// 跨链转账相关
type ParacrossAsset struct {
	// input
	From       string `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To         string `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	IsWithdraw bool   `protobuf:"varint,3,opt,name=isWithdraw" json:"isWithdraw,omitempty"`
	TxHash     []byte `protobuf:"bytes,4,opt,name=txHash,proto3" json:"txHash,omitempty"`
	Amount     int64  `protobuf:"varint,5,opt,name=amount" json:"amount,omitempty"`
	// 主链部分
	Height int64 `protobuf:"varint,10,opt,name=height" json:"height,omitempty"`
	// 平行链部分
	CommitDoneHeight int64 `protobuf:"varint,21,opt,name=commitDoneHeight" json:"commitDoneHeight,omitempty"`
	ParaHeight       int64 `protobuf:"varint,22,opt,name=paraHeight" json:"paraHeight,omitempty"`
	Success          bool  `protobuf:"varint,23,opt,name=success" json:"success,omitempty"`
}

func (m *ParacrossAsset) Reset()                    { *m = ParacrossAsset{} }
func (m *ParacrossAsset) String() string            { return proto.CompactTextString(m) }
func (*ParacrossAsset) ProtoMessage()               {}
func (*ParacrossAsset) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{14} }

func (m *ParacrossAsset) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ParacrossAsset) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ParacrossAsset) GetIsWithdraw() bool {
	if m != nil {
		return m.IsWithdraw
	}
	return false
}

func (m *ParacrossAsset) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *ParacrossAsset) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ParacrossAsset) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ParacrossAsset) GetCommitDoneHeight() int64 {
	if m != nil {
		return m.CommitDoneHeight
	}
	return 0
}

func (m *ParacrossAsset) GetParaHeight() int64 {
	if m != nil {
		return m.ParaHeight
	}
	return 0
}

func (m *ParacrossAsset) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*ParacrossStatusDetails)(nil), "types.ParacrossStatusDetails")
	proto.RegisterType((*ParacrossHeightStatus)(nil), "types.ParacrossHeightStatus")
	proto.RegisterType((*ParacrossStatus)(nil), "types.ParacrossStatus")
	proto.RegisterType((*ParacrossNodeStatus)(nil), "types.ParacrossNodeStatus")
	proto.RegisterType((*ParacrossCommitAction)(nil), "types.ParacrossCommitAction")
	proto.RegisterType((*ParacrossVoteAction)(nil), "types.ParacrossVoteAction")
	proto.RegisterType((*ParacrossAction)(nil), "types.ParacrossAction")
	proto.RegisterType((*ReceiptParacrossCommit)(nil), "types.ReceiptParacrossCommit")
	proto.RegisterType((*ReceiptParacrossVote)(nil), "types.ReceiptParacrossVote")
	proto.RegisterType((*ReceiptParacrossDone)(nil), "types.ReceiptParacrossDone")
	proto.RegisterType((*ReceiptParacrossRecord)(nil), "types.ReceiptParacrossRecord")
	proto.RegisterType((*ParacrossTx)(nil), "types.ParacrossTx")
	proto.RegisterType((*ReqParacrossTitleHeight)(nil), "types.ReqParacrossTitleHeight")
	proto.RegisterType((*RespParacrossTitles)(nil), "types.RespParacrossTitles")
	proto.RegisterType((*ParacrossAsset)(nil), "types.ParacrossAsset")
}

func init() { proto.RegisterFile("paracross.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 846 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xae, 0x9d, 0xdf, 0x9e, 0x34, 0xe9, 0xd5, 0xb4, 0x4d, 0xad, 0xde, 0xde, 0x2b, 0xcb, 0x2a,
	0x28, 0x62, 0x11, 0x50, 0x22, 0x95, 0x0d, 0x1b, 0xda, 0x4a, 0x84, 0x82, 0x10, 0x9a, 0x56, 0x20,
	0x21, 0x21, 0x31, 0x75, 0xa6, 0x8d, 0x45, 0xe2, 0x09, 0x9e, 0x71, 0x49, 0xb7, 0x88, 0x07, 0x60,
	0xc5, 0x8b, 0xf0, 0x16, 0x3c, 0x15, 0x9a, 0xf1, 0xf8, 0x67, 0x9c, 0xa8, 0xaa, 0x80, 0x55, 0x7c,
	0x3e, 0x7f, 0xe7, 0x3b, 0x3f, 0x73, 0x7c, 0x26, 0xb0, 0x39, 0x27, 0x11, 0xf1, 0x23, 0xc6, 0x79,
	0x7f, 0x1e, 0x31, 0xc1, 0x50, 0x4d, 0xdc, 0xcc, 0x29, 0xdf, 0xeb, 0xd0, 0x05, 0xf5, 0x63, 0xc1,
	0xa2, 0x04, 0xf6, 0x5e, 0x42, 0xf7, 0x75, 0xca, 0x3c, 0x13, 0x44, 0xc4, 0xfc, 0x84, 0x0a, 0x12,
	0x4c, 0x39, 0xda, 0x86, 0x1a, 0x19, 0x8f, 0x23, 0xee, 0x58, 0x6e, 0xa5, 0xb7, 0x8e, 0x13, 0x03,
	0xed, 0xc3, 0xfa, 0xc5, 0x94, 0xf9, 0x1f, 0x47, 0x84, 0x4f, 0x1c, 0xdb, 0xad, 0xf4, 0x36, 0x70,
	0x0e, 0x78, 0xdf, 0x2d, 0xd8, 0xc9, 0xe4, 0x46, 0x34, 0xb8, 0x9a, 0x88, 0x44, 0x14, 0x75, 0xa1,
	0xce, 0xd5, 0x93, 0x63, 0xb9, 0x56, 0xaf, 0x86, 0xb5, 0x25, 0xa3, 0x88, 0x40, 0x4c, 0xa9, 0x63,
	0xbb, 0x96, 0x8c, 0xa2, 0x0c, 0xc9, 0x9e, 0x28, 0x6f, 0xa7, 0xe2, 0x5a, 0xbd, 0x0a, 0xd6, 0x16,
	0x7a, 0x0c, 0x8d, 0x71, 0x92, 0x9e, 0x53, 0x75, 0xad, 0x5e, 0x6b, 0xf0, 0x5f, 0x5f, 0x95, 0xd5,
	0x5f, 0x5d, 0x03, 0x4e, 0xd9, 0xde, 0x7b, 0xd8, 0x2c, 0x51, 0xf2, 0xc8, 0xd6, 0xea, 0xc8, 0xb6,
	0x11, 0xd9, 0xa8, 0x5b, 0x26, 0x65, 0xd4, 0xfd, 0xa3, 0x02, 0x5b, 0x99, 0xfe, 0x2b, 0x36, 0xa6,
	0x3a, 0xc6, 0x01, 0xb4, 0x67, 0x24, 0x08, 0x8f, 0x32, 0x4f, 0x4b, 0x79, 0x9a, 0x20, 0xea, 0xc1,
	0x66, 0x0e, 0x14, 0x83, 0x97, 0xe1, 0x3c, 0xe7, 0xca, 0xea, 0x9c, 0xab, 0x46, 0xce, 0x1e, 0x6c,
	0xcc, 0x23, 0x9a, 0x07, 0xaf, 0xa9, 0xe0, 0x06, 0x66, 0xd6, 0x55, 0x2f, 0xd5, 0xa5, 0x15, 0x64,
	0x31, 0x54, 0x11, 0x1a, 0x99, 0x42, 0x86, 0x49, 0x05, 0x9e, 0x11, 0x9a, 0x89, 0x42, 0x06, 0xa0,
	0x3d, 0x68, 0x8a, 0xc5, 0x31, 0x8b, 0x43, 0xc1, 0x9d, 0x75, 0xd7, 0xea, 0xb5, 0x71, 0x66, 0x27,
	0xef, 0x30, 0xe5, 0xf1, 0x54, 0x38, 0xa0, 0x1c, 0x33, 0x1b, 0x39, 0xd0, 0x10, 0x0b, 0xa9, 0xc0,
	0x9d, 0x96, 0x9a, 0xb2, 0xd4, 0x94, 0x3d, 0x55, 0x6d, 0x3e, 0x4f, 0x5d, 0x37, 0x92, 0x9e, 0x1a,
	0xa0, 0xcc, 0x5c, 0x03, 0x89, 0x48, 0x5b, 0x89, 0x18, 0x98, 0xf7, 0xa2, 0x30, 0xac, 0xc7, 0x6c,
	0x36, 0x0b, 0xc4, 0x53, 0x5f, 0x04, 0x2c, 0x44, 0x03, 0x63, 0x58, 0x5b, 0x83, 0xbd, 0xf2, 0x94,
	0xe5, 0x47, 0x9c, 0x0e, 0xb2, 0xf7, 0xbc, 0x30, 0x01, 0x6f, 0x98, 0xa0, 0x7f, 0x20, 0xf5, 0xcd,
	0x2e, 0x4c, 0xab, 0xd6, 0x39, 0x84, 0xba, 0xaf, 0x52, 0xd4, 0x3a, 0xfb, 0x65, 0x9d, 0x62, 0x01,
	0xa3, 0x35, 0xac, 0xd9, 0xe8, 0x11, 0x54, 0xaf, 0x99, 0x48, 0x06, 0x66, 0x45, 0xf4, 0x3c, 0xd3,
	0xd1, 0x1a, 0x56, 0x4c, 0xf4, 0x04, 0xda, 0x84, 0x73, 0x2a, 0xce, 0x23, 0x12, 0xf2, 0x4b, 0x1a,
	0xe9, 0x2f, 0x6d, 0x5b, 0xbb, 0x1e, 0xb3, 0x20, 0xe4, 0xe9, 0xbb, 0xd1, 0x1a, 0x36, 0xc9, 0x99,
	0xf7, 0xdb, 0x40, 0x4c, 0xc6, 0x11, 0xf9, 0xac, 0x86, 0xae, 0xe4, 0x9d, 0xbe, 0xcb, 0xbc, 0x53,
	0x00, 0x75, 0xc0, 0x16, 0x37, 0x6a, 0xf8, 0x6b, 0xd8, 0x16, 0x37, 0x47, 0x0d, 0xa8, 0x5d, 0x93,
	0x69, 0x4c, 0xbd, 0x9f, 0x16, 0x74, 0x31, 0xf5, 0x69, 0x30, 0x17, 0xa5, 0x8a, 0x11, 0x82, 0xaa,
	0x5c, 0x4d, 0xfa, 0x33, 0x56, 0xcf, 0x85, 0xae, 0xdb, 0x77, 0xed, 0xba, 0xec, 0xd4, 0x3c, 0xa2,
	0xd7, 0xba, 0x53, 0x4b, 0xfd, 0x2d, 0x6e, 0x33, 0xac, 0x98, 0xe8, 0x10, 0x1a, 0x7e, 0x1c, 0x45,
	0x34, 0x14, 0xba, 0x47, 0xb7, 0x3b, 0xa5, 0x64, 0xef, 0x14, 0xb6, 0xcb, 0xb5, 0xc8, 0x73, 0xf8,
	0xad, 0x59, 0xf9, 0x6a, 0x2f, 0x8b, 0x9d, 0xb0, 0x90, 0xa2, 0xff, 0x01, 0x04, 0x13, 0x64, 0x2a,
	0x7d, 0xd2, 0xa5, 0x5b, 0x40, 0x90, 0x0b, 0x2d, 0x65, 0x25, 0x5d, 0xd4, 0x3d, 0x2f, 0x42, 0xe8,
	0x3e, 0x74, 0x66, 0x8c, 0x8b, 0x33, 0x32, 0xa3, 0x9a, 0x54, 0x51, 0xa4, 0x12, 0x9a, 0x2f, 0xa5,
	0xea, 0xea, 0xa5, 0x54, 0x2b, 0x2f, 0xd2, 0x7c, 0x5d, 0xd4, 0x6f, 0x5b, 0x17, 0x8d, 0x5b, 0xd6,
	0x45, 0xd3, 0x5c, 0x17, 0xde, 0x87, 0xe5, 0xf1, 0xc0, 0xd4, 0x67, 0xd1, 0xf8, 0x6f, 0x8d, 0x87,
	0x77, 0x0f, 0x5a, 0xd9, 0xeb, 0xf3, 0x85, 0x2c, 0x2f, 0x59, 0x48, 0x5a, 0x58, 0x5b, 0xde, 0x33,
	0xd8, 0xc5, 0xf4, 0x53, 0xce, 0x94, 0xbd, 0x28, 0x2f, 0xef, 0xbb, 0x5c, 0x38, 0xde, 0x29, 0x6c,
	0x61, 0xca, 0xe7, 0xa6, 0x12, 0x47, 0x43, 0xa8, 0x2b, 0xbf, 0xe4, 0x5a, 0x6e, 0x0d, 0xfe, 0xd5,
	0xa9, 0xaf, 0x9a, 0x01, 0xac, 0xa9, 0xde, 0x17, 0x1b, 0x3a, 0xf9, 0x42, 0x91, 0x5f, 0x9c, 0x6c,
	0xcb, 0x65, 0xc4, 0x66, 0x69, 0x5b, 0xe4, 0xb3, 0xfa, 0xfa, 0x98, 0xbe, 0x88, 0x6d, 0xc1, 0xe4,
	0x08, 0x05, 0xd9, 0xc7, 0xaa, 0x0e, 0xbf, 0x89, 0x0b, 0x48, 0xa1, 0x07, 0x55, 0x75, 0x1c, 0xda,
	0x92, 0x38, 0x99, 0xc9, 0x33, 0x4b, 0x8f, 0x3e, 0xb1, 0x0a, 0xa5, 0x82, 0x31, 0x12, 0x0f, 0xe0,
	0x9f, 0x64, 0x5b, 0xc9, 0xa4, 0xf5, 0x05, 0xb8, 0xa3, 0x18, 0x4b, 0xb8, 0xcc, 0x49, 0xfe, 0xb3,
	0xd1, 0xac, 0xae, 0x62, 0x15, 0x10, 0x79, 0x6f, 0xf0, 0xd8, 0xf7, 0x29, 0xe7, 0xce, 0xae, 0x4a,
	0x38, 0x35, 0x8f, 0x0e, 0xde, 0x79, 0x57, 0x81, 0x98, 0x92, 0x8b, 0xfe, 0x70, 0xd8, 0xf7, 0xc3,
	0x87, 0xfe, 0x84, 0x04, 0xe1, 0x70, 0x98, 0xfd, 0xaa, 0x3e, 0x5e, 0xd4, 0xd5, 0xdf, 0xa2, 0xe1,
	0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0x65, 0x1e, 0xd1, 0x40, 0x09, 0x00, 0x00,
}
