// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Config struct {
	Title      string      `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Log        *Log        `protobuf:"bytes,2,opt,name=log" json:"log,omitempty"`
	Store      *Store      `protobuf:"bytes,3,opt,name=store" json:"store,omitempty"`
	Consensus  *Consensus  `protobuf:"bytes,5,opt,name=consensus" json:"consensus,omitempty"`
	MemPool    *MemPool    `protobuf:"bytes,6,opt,name=memPool" json:"memPool,omitempty"`
	BlockChain *BlockChain `protobuf:"bytes,7,opt,name=blockChain" json:"blockChain,omitempty"`
	Wallet     *Wallet     `protobuf:"bytes,8,opt,name=wallet" json:"wallet,omitempty"`
	P2P        *P2P        `protobuf:"bytes,9,opt,name=p2p" json:"p2p,omitempty"`
	Rpc        *Rpc        `protobuf:"bytes,10,opt,name=rpc" json:"rpc,omitempty"`
	Exec       *Exec       `protobuf:"bytes,11,opt,name=exec" json:"exec,omitempty"`
	TestNet    bool        `protobuf:"varint,12,opt,name=testNet" json:"testNet,omitempty"`
	FixTime    bool        `protobuf:"varint,13,opt,name=fixTime" json:"fixTime,omitempty"`
	Pprof      *Pprof      `protobuf:"bytes,14,opt,name=pprof" json:"pprof,omitempty"`
	Auth       *Authority  `protobuf:"bytes,15,opt,name=auth" json:"auth,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Config) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Config) GetLog() *Log {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *Config) GetStore() *Store {
	if m != nil {
		return m.Store
	}
	return nil
}

func (m *Config) GetConsensus() *Consensus {
	if m != nil {
		return m.Consensus
	}
	return nil
}

func (m *Config) GetMemPool() *MemPool {
	if m != nil {
		return m.MemPool
	}
	return nil
}

func (m *Config) GetBlockChain() *BlockChain {
	if m != nil {
		return m.BlockChain
	}
	return nil
}

func (m *Config) GetWallet() *Wallet {
	if m != nil {
		return m.Wallet
	}
	return nil
}

func (m *Config) GetP2P() *P2P {
	if m != nil {
		return m.P2P
	}
	return nil
}

func (m *Config) GetRpc() *Rpc {
	if m != nil {
		return m.Rpc
	}
	return nil
}

func (m *Config) GetExec() *Exec {
	if m != nil {
		return m.Exec
	}
	return nil
}

func (m *Config) GetTestNet() bool {
	if m != nil {
		return m.TestNet
	}
	return false
}

func (m *Config) GetFixTime() bool {
	if m != nil {
		return m.FixTime
	}
	return false
}

func (m *Config) GetPprof() *Pprof {
	if m != nil {
		return m.Pprof
	}
	return nil
}

func (m *Config) GetAuth() *Authority {
	if m != nil {
		return m.Auth
	}
	return nil
}

type Log struct {
	// 日志级别，支持debug(dbug)/info/warn/error(eror)/crit
	Loglevel        string `protobuf:"bytes,1,opt,name=loglevel" json:"loglevel,omitempty"`
	LogConsoleLevel string `protobuf:"bytes,2,opt,name=logConsoleLevel" json:"logConsoleLevel,omitempty"`
	// 日志文件名，可带目录，所有生成的日志文件都放到此目录下
	LogFile string `protobuf:"bytes,3,opt,name=logFile" json:"logFile,omitempty"`
	// 单个日志文件的最大值（单位：兆）
	MaxFileSize uint32 `protobuf:"varint,4,opt,name=maxFileSize" json:"maxFileSize,omitempty"`
	// 最多保存的历史日志文件个数
	MaxBackups uint32 `protobuf:"varint,5,opt,name=maxBackups" json:"maxBackups,omitempty"`
	// 最多保存的历史日志消息（单位：天）
	MaxAge uint32 `protobuf:"varint,6,opt,name=maxAge" json:"maxAge,omitempty"`
	// 日志文件名是否使用本地事件（否则使用UTC时间）
	LocalTime bool `protobuf:"varint,7,opt,name=localTime" json:"localTime,omitempty"`
	// 历史日志文件是否压缩（压缩格式为gz）
	Compress bool `protobuf:"varint,8,opt,name=compress" json:"compress,omitempty"`
	// 是否打印调用源文件和行号
	CallerFile bool `protobuf:"varint,9,opt,name=callerFile" json:"callerFile,omitempty"`
	// 是否打印调用方法
	CallerFunction bool `protobuf:"varint,10,opt,name=callerFunction" json:"callerFunction,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Log) GetLoglevel() string {
	if m != nil {
		return m.Loglevel
	}
	return ""
}

func (m *Log) GetLogConsoleLevel() string {
	if m != nil {
		return m.LogConsoleLevel
	}
	return ""
}

func (m *Log) GetLogFile() string {
	if m != nil {
		return m.LogFile
	}
	return ""
}

func (m *Log) GetMaxFileSize() uint32 {
	if m != nil {
		return m.MaxFileSize
	}
	return 0
}

func (m *Log) GetMaxBackups() uint32 {
	if m != nil {
		return m.MaxBackups
	}
	return 0
}

func (m *Log) GetMaxAge() uint32 {
	if m != nil {
		return m.MaxAge
	}
	return 0
}

func (m *Log) GetLocalTime() bool {
	if m != nil {
		return m.LocalTime
	}
	return false
}

func (m *Log) GetCompress() bool {
	if m != nil {
		return m.Compress
	}
	return false
}

func (m *Log) GetCallerFile() bool {
	if m != nil {
		return m.CallerFile
	}
	return false
}

func (m *Log) GetCallerFunction() bool {
	if m != nil {
		return m.CallerFunction
	}
	return false
}

type MemPool struct {
	PoolCacheSize      int64 `protobuf:"varint,1,opt,name=poolCacheSize" json:"poolCacheSize,omitempty"`
	MinTxFee           int64 `protobuf:"varint,2,opt,name=minTxFee" json:"minTxFee,omitempty"`
	ForceAccept        bool  `protobuf:"varint,3,opt,name=forceAccept" json:"forceAccept,omitempty"`
	MaxTxNumPerAccount int64 `protobuf:"varint,4,opt,name=maxTxNumPerAccount" json:"maxTxNumPerAccount,omitempty"`
}

func (m *MemPool) Reset()                    { *m = MemPool{} }
func (m *MemPool) String() string            { return proto.CompactTextString(m) }
func (*MemPool) ProtoMessage()               {}
func (*MemPool) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *MemPool) GetPoolCacheSize() int64 {
	if m != nil {
		return m.PoolCacheSize
	}
	return 0
}

func (m *MemPool) GetMinTxFee() int64 {
	if m != nil {
		return m.MinTxFee
	}
	return 0
}

func (m *MemPool) GetForceAccept() bool {
	if m != nil {
		return m.ForceAccept
	}
	return false
}

func (m *MemPool) GetMaxTxNumPerAccount() int64 {
	if m != nil {
		return m.MaxTxNumPerAccount
	}
	return 0
}

type Consensus struct {
	Name                      string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Genesis                   string   `protobuf:"bytes,2,opt,name=genesis" json:"genesis,omitempty"`
	Minerstart                bool     `protobuf:"varint,3,opt,name=minerstart" json:"minerstart,omitempty"`
	GenesisBlockTime          int64    `protobuf:"varint,4,opt,name=genesisBlockTime" json:"genesisBlockTime,omitempty"`
	HotkeyAddr                string   `protobuf:"bytes,5,opt,name=hotkeyAddr" json:"hotkeyAddr,omitempty"`
	ForceMining               bool     `protobuf:"varint,6,opt,name=forceMining" json:"forceMining,omitempty"`
	NodeId                    int64    `protobuf:"varint,7,opt,name=NodeId" json:"NodeId,omitempty"`
	PeersURL                  string   `protobuf:"bytes,8,opt,name=PeersURL" json:"PeersURL,omitempty"`
	ClientAddr                string   `protobuf:"bytes,9,opt,name=ClientAddr" json:"ClientAddr,omitempty"`
	RaftApiPort               int64    `protobuf:"varint,15,opt,name=raftApiPort" json:"raftApiPort,omitempty"`
	IsNewJoinNode             bool     `protobuf:"varint,16,opt,name=isNewJoinNode" json:"isNewJoinNode,omitempty"`
	ReadOnlyPeersURL          string   `protobuf:"bytes,17,opt,name=readOnlyPeersURL" json:"readOnlyPeersURL,omitempty"`
	AddPeersURL               string   `protobuf:"bytes,18,opt,name=addPeersURL" json:"addPeersURL,omitempty"`
	DefaultSnapCount          int64    `protobuf:"varint,19,opt,name=defaultSnapCount" json:"defaultSnapCount,omitempty"`
	WriteBlockSeconds         int64    `protobuf:"varint,20,opt,name=writeBlockSeconds" json:"writeBlockSeconds,omitempty"`
	HeartbeatTick             int32    `protobuf:"varint,21,opt,name=heartbeatTick" json:"heartbeatTick,omitempty"`
	ParaRemoteGrpcClient      string   `protobuf:"bytes,22,opt,name=paraRemoteGrpcClient" json:"paraRemoteGrpcClient,omitempty"`
	StartHeight               int64    `protobuf:"varint,23,opt,name=startHeight" json:"startHeight,omitempty"`
	EmptyBlockInterval        int64    `protobuf:"varint,24,opt,name=emptyBlockInterval" json:"emptyBlockInterval,omitempty"`
	TimeoutPropose            int32    `protobuf:"varint,25,opt,name=timeoutPropose" json:"timeoutPropose,omitempty"`
	TimeoutProposeDelta       int32    `protobuf:"varint,26,opt,name=timeoutProposeDelta" json:"timeoutProposeDelta,omitempty"`
	TimeoutPrevote            int32    `protobuf:"varint,27,opt,name=timeoutPrevote" json:"timeoutPrevote,omitempty"`
	TimeoutPrevoteDelta       int32    `protobuf:"varint,28,opt,name=timeoutPrevoteDelta" json:"timeoutPrevoteDelta,omitempty"`
	TimeoutPrecommit          int32    `protobuf:"varint,29,opt,name=timeoutPrecommit" json:"timeoutPrecommit,omitempty"`
	TimeoutPrecommitDelta     int32    `protobuf:"varint,30,opt,name=timeoutPrecommitDelta" json:"timeoutPrecommitDelta,omitempty"`
	TimeoutCommit             int32    `protobuf:"varint,31,opt,name=timeoutCommit" json:"timeoutCommit,omitempty"`
	SkipTimeoutCommit         bool     `protobuf:"varint,32,opt,name=skipTimeoutCommit" json:"skipTimeoutCommit,omitempty"`
	CreateEmptyBlocks         bool     `protobuf:"varint,33,opt,name=createEmptyBlocks" json:"createEmptyBlocks,omitempty"`
	CreateEmptyBlocksInterval int32    `protobuf:"varint,34,opt,name=createEmptyBlocksInterval" json:"createEmptyBlocksInterval,omitempty"`
	Seeds                     []string `protobuf:"bytes,35,rep,name=seeds" json:"seeds,omitempty"`
}

func (m *Consensus) Reset()                    { *m = Consensus{} }
func (m *Consensus) String() string            { return proto.CompactTextString(m) }
func (*Consensus) ProtoMessage()               {}
func (*Consensus) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Consensus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Consensus) GetGenesis() string {
	if m != nil {
		return m.Genesis
	}
	return ""
}

func (m *Consensus) GetMinerstart() bool {
	if m != nil {
		return m.Minerstart
	}
	return false
}

func (m *Consensus) GetGenesisBlockTime() int64 {
	if m != nil {
		return m.GenesisBlockTime
	}
	return 0
}

func (m *Consensus) GetHotkeyAddr() string {
	if m != nil {
		return m.HotkeyAddr
	}
	return ""
}

func (m *Consensus) GetForceMining() bool {
	if m != nil {
		return m.ForceMining
	}
	return false
}

func (m *Consensus) GetNodeId() int64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *Consensus) GetPeersURL() string {
	if m != nil {
		return m.PeersURL
	}
	return ""
}

func (m *Consensus) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

func (m *Consensus) GetRaftApiPort() int64 {
	if m != nil {
		return m.RaftApiPort
	}
	return 0
}

func (m *Consensus) GetIsNewJoinNode() bool {
	if m != nil {
		return m.IsNewJoinNode
	}
	return false
}

func (m *Consensus) GetReadOnlyPeersURL() string {
	if m != nil {
		return m.ReadOnlyPeersURL
	}
	return ""
}

func (m *Consensus) GetAddPeersURL() string {
	if m != nil {
		return m.AddPeersURL
	}
	return ""
}

func (m *Consensus) GetDefaultSnapCount() int64 {
	if m != nil {
		return m.DefaultSnapCount
	}
	return 0
}

func (m *Consensus) GetWriteBlockSeconds() int64 {
	if m != nil {
		return m.WriteBlockSeconds
	}
	return 0
}

func (m *Consensus) GetHeartbeatTick() int32 {
	if m != nil {
		return m.HeartbeatTick
	}
	return 0
}

func (m *Consensus) GetParaRemoteGrpcClient() string {
	if m != nil {
		return m.ParaRemoteGrpcClient
	}
	return ""
}

func (m *Consensus) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *Consensus) GetEmptyBlockInterval() int64 {
	if m != nil {
		return m.EmptyBlockInterval
	}
	return 0
}

func (m *Consensus) GetTimeoutPropose() int32 {
	if m != nil {
		return m.TimeoutPropose
	}
	return 0
}

func (m *Consensus) GetTimeoutProposeDelta() int32 {
	if m != nil {
		return m.TimeoutProposeDelta
	}
	return 0
}

func (m *Consensus) GetTimeoutPrevote() int32 {
	if m != nil {
		return m.TimeoutPrevote
	}
	return 0
}

func (m *Consensus) GetTimeoutPrevoteDelta() int32 {
	if m != nil {
		return m.TimeoutPrevoteDelta
	}
	return 0
}

func (m *Consensus) GetTimeoutPrecommit() int32 {
	if m != nil {
		return m.TimeoutPrecommit
	}
	return 0
}

func (m *Consensus) GetTimeoutPrecommitDelta() int32 {
	if m != nil {
		return m.TimeoutPrecommitDelta
	}
	return 0
}

func (m *Consensus) GetTimeoutCommit() int32 {
	if m != nil {
		return m.TimeoutCommit
	}
	return 0
}

func (m *Consensus) GetSkipTimeoutCommit() bool {
	if m != nil {
		return m.SkipTimeoutCommit
	}
	return false
}

func (m *Consensus) GetCreateEmptyBlocks() bool {
	if m != nil {
		return m.CreateEmptyBlocks
	}
	return false
}

func (m *Consensus) GetCreateEmptyBlocksInterval() int32 {
	if m != nil {
		return m.CreateEmptyBlocksInterval
	}
	return 0
}

func (m *Consensus) GetSeeds() []string {
	if m != nil {
		return m.Seeds
	}
	return nil
}

type Wallet struct {
	MinFee         int64    `protobuf:"varint,1,opt,name=minFee" json:"minFee,omitempty"`
	Driver         string   `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	DbPath         string   `protobuf:"bytes,3,opt,name=dbPath" json:"dbPath,omitempty"`
	DbCache        int32    `protobuf:"varint,4,opt,name=dbCache" json:"dbCache,omitempty"`
	SignType       string   `protobuf:"bytes,5,opt,name=signType" json:"signType,omitempty"`
	ForceMining    bool     `protobuf:"varint,6,opt,name=forceMining" json:"forceMining,omitempty"`
	Minerdisable   bool     `protobuf:"varint,7,opt,name=minerdisable" json:"minerdisable,omitempty"`
	Minerwhitelist []string `protobuf:"bytes,8,rep,name=minerwhitelist" json:"minerwhitelist,omitempty"`
}

func (m *Wallet) Reset()                    { *m = Wallet{} }
func (m *Wallet) String() string            { return proto.CompactTextString(m) }
func (*Wallet) ProtoMessage()               {}
func (*Wallet) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *Wallet) GetMinFee() int64 {
	if m != nil {
		return m.MinFee
	}
	return 0
}

func (m *Wallet) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Wallet) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *Wallet) GetDbCache() int32 {
	if m != nil {
		return m.DbCache
	}
	return 0
}

func (m *Wallet) GetSignType() string {
	if m != nil {
		return m.SignType
	}
	return ""
}

func (m *Wallet) GetForceMining() bool {
	if m != nil {
		return m.ForceMining
	}
	return false
}

func (m *Wallet) GetMinerdisable() bool {
	if m != nil {
		return m.Minerdisable
	}
	return false
}

func (m *Wallet) GetMinerwhitelist() []string {
	if m != nil {
		return m.Minerwhitelist
	}
	return nil
}

type Store struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Driver  string `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	DbPath  string `protobuf:"bytes,3,opt,name=dbPath" json:"dbPath,omitempty"`
	DbCache int32  `protobuf:"varint,4,opt,name=dbCache" json:"dbCache,omitempty"`
}

func (m *Store) Reset()                    { *m = Store{} }
func (m *Store) String() string            { return proto.CompactTextString(m) }
func (*Store) ProtoMessage()               {}
func (*Store) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *Store) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Store) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Store) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *Store) GetDbCache() int32 {
	if m != nil {
		return m.DbCache
	}
	return 0
}

type BlockChain struct {
	DefCacheSize          int64  `protobuf:"varint,1,opt,name=defCacheSize" json:"defCacheSize,omitempty"`
	MaxFetchBlockNum      int64  `protobuf:"varint,2,opt,name=maxFetchBlockNum" json:"maxFetchBlockNum,omitempty"`
	TimeoutSeconds        int64  `protobuf:"varint,3,opt,name=timeoutSeconds" json:"timeoutSeconds,omitempty"`
	BatchBlockNum         int64  `protobuf:"varint,4,opt,name=batchBlockNum" json:"batchBlockNum,omitempty"`
	Driver                string `protobuf:"bytes,5,opt,name=driver" json:"driver,omitempty"`
	DbPath                string `protobuf:"bytes,6,opt,name=dbPath" json:"dbPath,omitempty"`
	DbCache               int32  `protobuf:"varint,7,opt,name=dbCache" json:"dbCache,omitempty"`
	IsStrongConsistency   bool   `protobuf:"varint,8,opt,name=isStrongConsistency" json:"isStrongConsistency,omitempty"`
	SingleMode            bool   `protobuf:"varint,9,opt,name=singleMode" json:"singleMode,omitempty"`
	Batchsync             bool   `protobuf:"varint,10,opt,name=batchsync" json:"batchsync,omitempty"`
	IsRecordBlockSequence bool   `protobuf:"varint,11,opt,name=isRecordBlockSequence" json:"isRecordBlockSequence,omitempty"`
	IsParaChain           bool   `protobuf:"varint,12,opt,name=isParaChain" json:"isParaChain,omitempty"`
	EnableTxQuickIndex    bool   `protobuf:"varint,13,opt,name=enableTxQuickIndex" json:"enableTxQuickIndex,omitempty"`
}

func (m *BlockChain) Reset()                    { *m = BlockChain{} }
func (m *BlockChain) String() string            { return proto.CompactTextString(m) }
func (*BlockChain) ProtoMessage()               {}
func (*BlockChain) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *BlockChain) GetDefCacheSize() int64 {
	if m != nil {
		return m.DefCacheSize
	}
	return 0
}

func (m *BlockChain) GetMaxFetchBlockNum() int64 {
	if m != nil {
		return m.MaxFetchBlockNum
	}
	return 0
}

func (m *BlockChain) GetTimeoutSeconds() int64 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *BlockChain) GetBatchBlockNum() int64 {
	if m != nil {
		return m.BatchBlockNum
	}
	return 0
}

func (m *BlockChain) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *BlockChain) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *BlockChain) GetDbCache() int32 {
	if m != nil {
		return m.DbCache
	}
	return 0
}

func (m *BlockChain) GetIsStrongConsistency() bool {
	if m != nil {
		return m.IsStrongConsistency
	}
	return false
}

func (m *BlockChain) GetSingleMode() bool {
	if m != nil {
		return m.SingleMode
	}
	return false
}

func (m *BlockChain) GetBatchsync() bool {
	if m != nil {
		return m.Batchsync
	}
	return false
}

func (m *BlockChain) GetIsRecordBlockSequence() bool {
	if m != nil {
		return m.IsRecordBlockSequence
	}
	return false
}

func (m *BlockChain) GetIsParaChain() bool {
	if m != nil {
		return m.IsParaChain
	}
	return false
}

func (m *BlockChain) GetEnableTxQuickIndex() bool {
	if m != nil {
		return m.EnableTxQuickIndex
	}
	return false
}

type P2P struct {
	SeedPort        int32    `protobuf:"varint,1,opt,name=seedPort" json:"seedPort,omitempty"`
	Driver          string   `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	DbPath          string   `protobuf:"bytes,3,opt,name=dbPath" json:"dbPath,omitempty"`
	DbCache         int32    `protobuf:"varint,4,opt,name=dbCache" json:"dbCache,omitempty"`
	GrpcLogFile     string   `protobuf:"bytes,5,opt,name=grpcLogFile" json:"grpcLogFile,omitempty"`
	IsSeed          bool     `protobuf:"varint,6,opt,name=isSeed" json:"isSeed,omitempty"`
	ServerStart     bool     `protobuf:"varint,7,opt,name=serverStart" json:"serverStart,omitempty"`
	Seeds           []string `protobuf:"bytes,8,rep,name=seeds" json:"seeds,omitempty"`
	Enable          bool     `protobuf:"varint,9,opt,name=enable" json:"enable,omitempty"`
	MsgCacheSize    int32    `protobuf:"varint,10,opt,name=msgCacheSize" json:"msgCacheSize,omitempty"`
	Version         int32    `protobuf:"varint,11,opt,name=version" json:"version,omitempty"`
	VerMix          int32    `protobuf:"varint,12,opt,name=verMix" json:"verMix,omitempty"`
	VerMax          int32    `protobuf:"varint,13,opt,name=verMax" json:"verMax,omitempty"`
	InnerSeedEnable bool     `protobuf:"varint,14,opt,name=innerSeedEnable" json:"innerSeedEnable,omitempty"`
	InnerBounds     int32    `protobuf:"varint,15,opt,name=innerBounds" json:"innerBounds,omitempty"`
	UseGithub       bool     `protobuf:"varint,16,opt,name=useGithub" json:"useGithub,omitempty"`
}

func (m *P2P) Reset()                    { *m = P2P{} }
func (m *P2P) String() string            { return proto.CompactTextString(m) }
func (*P2P) ProtoMessage()               {}
func (*P2P) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *P2P) GetSeedPort() int32 {
	if m != nil {
		return m.SeedPort
	}
	return 0
}

func (m *P2P) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *P2P) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *P2P) GetDbCache() int32 {
	if m != nil {
		return m.DbCache
	}
	return 0
}

func (m *P2P) GetGrpcLogFile() string {
	if m != nil {
		return m.GrpcLogFile
	}
	return ""
}

func (m *P2P) GetIsSeed() bool {
	if m != nil {
		return m.IsSeed
	}
	return false
}

func (m *P2P) GetServerStart() bool {
	if m != nil {
		return m.ServerStart
	}
	return false
}

func (m *P2P) GetSeeds() []string {
	if m != nil {
		return m.Seeds
	}
	return nil
}

func (m *P2P) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *P2P) GetMsgCacheSize() int32 {
	if m != nil {
		return m.MsgCacheSize
	}
	return 0
}

func (m *P2P) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2P) GetVerMix() int32 {
	if m != nil {
		return m.VerMix
	}
	return 0
}

func (m *P2P) GetVerMax() int32 {
	if m != nil {
		return m.VerMax
	}
	return 0
}

func (m *P2P) GetInnerSeedEnable() bool {
	if m != nil {
		return m.InnerSeedEnable
	}
	return false
}

func (m *P2P) GetInnerBounds() int32 {
	if m != nil {
		return m.InnerBounds
	}
	return 0
}

func (m *P2P) GetUseGithub() bool {
	if m != nil {
		return m.UseGithub
	}
	return false
}

type Rpc struct {
	JrpcBindAddr      string   `protobuf:"bytes,1,opt,name=jrpcBindAddr" json:"jrpcBindAddr,omitempty"`
	GrpcBindAddr      string   `protobuf:"bytes,2,opt,name=grpcBindAddr" json:"grpcBindAddr,omitempty"`
	Whitlist          []string `protobuf:"bytes,3,rep,name=whitlist" json:"whitlist,omitempty"`
	Whitelist         []string `protobuf:"bytes,4,rep,name=whitelist" json:"whitelist,omitempty"`
	JrpcFuncWhitelist []string `protobuf:"bytes,5,rep,name=jrpcFuncWhitelist" json:"jrpcFuncWhitelist,omitempty"`
	GrpcFuncWhitelist []string `protobuf:"bytes,6,rep,name=grpcFuncWhitelist" json:"grpcFuncWhitelist,omitempty"`
	JrpcFuncBlacklist []string `protobuf:"bytes,7,rep,name=jrpcFuncBlacklist" json:"jrpcFuncBlacklist,omitempty"`
	GrpcFuncBlacklist []string `protobuf:"bytes,8,rep,name=grpcFuncBlacklist" json:"grpcFuncBlacklist,omitempty"`
	MainnetJrpcAddr   string   `protobuf:"bytes,9,opt,name=mainnetJrpcAddr" json:"mainnetJrpcAddr,omitempty"`
}

func (m *Rpc) Reset()                    { *m = Rpc{} }
func (m *Rpc) String() string            { return proto.CompactTextString(m) }
func (*Rpc) ProtoMessage()               {}
func (*Rpc) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *Rpc) GetJrpcBindAddr() string {
	if m != nil {
		return m.JrpcBindAddr
	}
	return ""
}

func (m *Rpc) GetGrpcBindAddr() string {
	if m != nil {
		return m.GrpcBindAddr
	}
	return ""
}

func (m *Rpc) GetWhitlist() []string {
	if m != nil {
		return m.Whitlist
	}
	return nil
}

func (m *Rpc) GetWhitelist() []string {
	if m != nil {
		return m.Whitelist
	}
	return nil
}

func (m *Rpc) GetJrpcFuncWhitelist() []string {
	if m != nil {
		return m.JrpcFuncWhitelist
	}
	return nil
}

func (m *Rpc) GetGrpcFuncWhitelist() []string {
	if m != nil {
		return m.GrpcFuncWhitelist
	}
	return nil
}

func (m *Rpc) GetJrpcFuncBlacklist() []string {
	if m != nil {
		return m.JrpcFuncBlacklist
	}
	return nil
}

func (m *Rpc) GetGrpcFuncBlacklist() []string {
	if m != nil {
		return m.GrpcFuncBlacklist
	}
	return nil
}

func (m *Rpc) GetMainnetJrpcAddr() string {
	if m != nil {
		return m.MainnetJrpcAddr
	}
	return ""
}

type Exec struct {
	MinExecFee int64 `protobuf:"varint,1,opt,name=minExecFee" json:"minExecFee,omitempty"`
	IsFree     bool  `protobuf:"varint,2,opt,name=isFree" json:"isFree,omitempty"`
	EnableStat bool  `protobuf:"varint,3,opt,name=enableStat" json:"enableStat,omitempty"`
	EnableMVCC bool  `protobuf:"varint,4,opt,name=enableMVCC" json:"enableMVCC,omitempty"`
}

func (m *Exec) Reset()                    { *m = Exec{} }
func (m *Exec) String() string            { return proto.CompactTextString(m) }
func (*Exec) ProtoMessage()               {}
func (*Exec) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *Exec) GetMinExecFee() int64 {
	if m != nil {
		return m.MinExecFee
	}
	return 0
}

func (m *Exec) GetIsFree() bool {
	if m != nil {
		return m.IsFree
	}
	return false
}

func (m *Exec) GetEnableStat() bool {
	if m != nil {
		return m.EnableStat
	}
	return false
}

func (m *Exec) GetEnableMVCC() bool {
	if m != nil {
		return m.EnableMVCC
	}
	return false
}

type Authority struct {
	Enable     bool   `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	CryptoPath string `protobuf:"bytes,2,opt,name=cryptoPath" json:"cryptoPath,omitempty"`
	SignType   string `protobuf:"bytes,3,opt,name=signType" json:"signType,omitempty"`
}

func (m *Authority) Reset()                    { *m = Authority{} }
func (m *Authority) String() string            { return proto.CompactTextString(m) }
func (*Authority) ProtoMessage()               {}
func (*Authority) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *Authority) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *Authority) GetCryptoPath() string {
	if m != nil {
		return m.CryptoPath
	}
	return ""
}

func (m *Authority) GetSignType() string {
	if m != nil {
		return m.SignType
	}
	return ""
}

type Pprof struct {
	ListenAddr string `protobuf:"bytes,1,opt,name=listenAddr" json:"listenAddr,omitempty"`
}

func (m *Pprof) Reset()                    { *m = Pprof{} }
func (m *Pprof) String() string            { return proto.CompactTextString(m) }
func (*Pprof) ProtoMessage()               {}
func (*Pprof) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

func (m *Pprof) GetListenAddr() string {
	if m != nil {
		return m.ListenAddr
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "types.Config")
	proto.RegisterType((*Log)(nil), "types.Log")
	proto.RegisterType((*MemPool)(nil), "types.MemPool")
	proto.RegisterType((*Consensus)(nil), "types.Consensus")
	proto.RegisterType((*Wallet)(nil), "types.Wallet")
	proto.RegisterType((*Store)(nil), "types.Store")
	proto.RegisterType((*BlockChain)(nil), "types.BlockChain")
	proto.RegisterType((*P2P)(nil), "types.P2P")
	proto.RegisterType((*Rpc)(nil), "types.Rpc")
	proto.RegisterType((*Exec)(nil), "types.Exec")
	proto.RegisterType((*Authority)(nil), "types.Authority")
	proto.RegisterType((*Pprof)(nil), "types.Pprof")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 1593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x72, 0x23, 0x49,
	0x11, 0x0e, 0x4d, 0x5b, 0xb6, 0x54, 0x1e, 0xcf, 0x4f, 0xcf, 0xec, 0xd2, 0xbb, 0x0c, 0xbb, 0x42,
	0x2c, 0xe0, 0x20, 0x08, 0xc7, 0x62, 0x38, 0x72, 0xb1, 0xc5, 0xcc, 0xb2, 0x1b, 0xb6, 0x11, 0x25,
	0xc3, 0x1e, 0x89, 0x52, 0x75, 0xba, 0x55, 0xb8, 0xbb, 0xab, 0xa9, 0x2a, 0xd9, 0x12, 0x07, 0xde,
	0x84, 0x13, 0x4f, 0xc2, 0x03, 0xf0, 0x20, 0x44, 0x10, 0xc1, 0x85, 0x07, 0x20, 0x32, 0xab, 0xd4,
	0x3f, 0x92, 0x26, 0x62, 0x0f, 0x73, 0x73, 0x7e, 0xf9, 0x29, 0x2b, 0xff, 0x2a, 0x2b, 0xdb, 0xec,
	0xa9, 0xd4, 0xe5, 0x9d, 0xca, 0xce, 0x2a, 0xa3, 0x9d, 0x8e, 0xfb, 0x6e, 0x5d, 0x81, 0x1d, 0xff,
	0x37, 0x62, 0x87, 0x13, 0xc2, 0xe3, 0xd7, 0xac, 0xef, 0x94, 0xcb, 0x21, 0xe9, 0x8d, 0x7a, 0xa7,
	0x43, 0xee, 0x85, 0xf8, 0x0d, 0x8b, 0x72, 0x9d, 0x25, 0x4f, 0x46, 0xbd, 0xd3, 0xe3, 0x73, 0x76,
	0x46, 0xbf, 0x3a, 0xbb, 0xd2, 0x19, 0x47, 0x38, 0x1e, 0xb3, 0xbe, 0x75, 0xda, 0x40, 0x12, 0x91,
	0xfe, 0x69, 0xd0, 0xcf, 0x10, 0xe3, 0x5e, 0x15, 0x9f, 0xb1, 0xa1, 0xd4, 0xa5, 0x85, 0xd2, 0x2e,
	0x6d, 0xd2, 0x27, 0xde, 0x8b, 0xc0, 0x9b, 0x6c, 0x70, 0xde, 0x50, 0xe2, 0x53, 0x76, 0x54, 0x40,
	0x31, 0xd5, 0x3a, 0x4f, 0x0e, 0x89, 0xfd, 0x2c, 0xb0, 0xaf, 0x3d, 0xca, 0x37, 0xea, 0xf8, 0x17,
	0x8c, 0xcd, 0x73, 0x2d, 0xef, 0x27, 0x0b, 0xa1, 0xca, 0xe4, 0x88, 0xc8, 0x2f, 0x03, 0xf9, 0xb2,
	0x56, 0xf0, 0x16, 0x29, 0xfe, 0x31, 0x3b, 0x7c, 0x14, 0x79, 0x0e, 0x2e, 0x19, 0x10, 0xfd, 0x24,
	0xd0, 0xbf, 0x25, 0x90, 0x07, 0x25, 0x46, 0x5d, 0x9d, 0x57, 0xc9, 0xb0, 0x13, 0xf5, 0xf4, 0x7c,
	0xca, 0x11, 0x46, 0xad, 0xa9, 0x64, 0xc2, 0x3a, 0x5a, 0x5e, 0x49, 0x8e, 0x70, 0xfc, 0x39, 0x3b,
	0x80, 0x15, 0xc8, 0xe4, 0x98, 0xd4, 0xc7, 0x41, 0xfd, 0x76, 0x05, 0x92, 0x93, 0x22, 0x4e, 0xd8,
	0x91, 0x03, 0xeb, 0x6e, 0xc0, 0x25, 0x4f, 0x47, 0xbd, 0xd3, 0x01, 0xdf, 0x88, 0xa8, 0xb9, 0x53,
	0xab, 0x5b, 0x55, 0x40, 0x72, 0xe2, 0x35, 0x41, 0xc4, 0x44, 0x57, 0x95, 0xd1, 0x77, 0xc9, 0xb3,
	0x4e, 0xa2, 0xa7, 0x88, 0x71, 0xaf, 0x8a, 0xbf, 0x60, 0x07, 0x62, 0xe9, 0x16, 0xc9, 0xf3, 0x4e,
	0x8e, 0x2f, 0x96, 0x6e, 0xa1, 0x8d, 0x72, 0x6b, 0x4e, 0xda, 0xf1, 0x3f, 0x9f, 0xb0, 0xe8, 0x4a,
	0x67, 0xf1, 0xa7, 0x6c, 0x90, 0xeb, 0x2c, 0x87, 0x07, 0xc8, 0x43, 0xc5, 0x6b, 0x39, 0x3e, 0x65,
	0xcf, 0x73, 0x9d, 0x61, 0x75, 0x74, 0x0e, 0x57, 0x44, 0x79, 0x42, 0x94, 0x6d, 0x18, 0x3d, 0xce,
	0x75, 0xf6, 0x4e, 0xe5, 0xbe, 0x05, 0x86, 0x7c, 0x23, 0xc6, 0x23, 0x76, 0x5c, 0x88, 0x15, 0xfe,
	0x39, 0x53, 0x7f, 0x85, 0xe4, 0x60, 0xd4, 0x3b, 0x3d, 0xe1, 0x6d, 0x28, 0xfe, 0x8c, 0xb1, 0x42,
	0xac, 0x2e, 0x85, 0xbc, 0x5f, 0x56, 0xbe, 0x33, 0x4e, 0x78, 0x0b, 0x89, 0x3f, 0x66, 0x87, 0x85,
	0x58, 0x5d, 0x64, 0x40, 0x7d, 0x70, 0xc2, 0x83, 0x14, 0xbf, 0x61, 0xc3, 0x5c, 0x4b, 0x91, 0x53,
	0x9e, 0x8e, 0x28, 0x4f, 0x0d, 0x80, 0x71, 0x49, 0x5d, 0x54, 0x06, 0xac, 0xa5, 0x1a, 0x0f, 0x78,
	0x2d, 0xe3, 0x89, 0x12, 0x0b, 0x6c, 0xc8, 0xe1, 0x21, 0x69, 0x5b, 0x48, 0xfc, 0x13, 0xf6, 0x2c,
	0x48, 0xcb, 0x52, 0x3a, 0xa5, 0x4b, 0xaa, 0xf1, 0x80, 0x6f, 0xa1, 0xe3, 0xbf, 0xf7, 0xd8, 0x51,
	0xe8, 0xc6, 0xf8, 0x0b, 0x76, 0x52, 0x69, 0x9d, 0x4f, 0x84, 0x5c, 0xf8, 0x48, 0x31, 0x99, 0x11,
	0xef, 0x82, 0xe8, 0x55, 0xa1, 0xca, 0xdb, 0xd5, 0x3b, 0x00, 0x4a, 0x65, 0xc4, 0x6b, 0x19, 0x33,
	0x75, 0xa7, 0x8d, 0x84, 0x0b, 0x29, 0xa1, 0x72, 0x94, 0xc7, 0x01, 0x6f, 0x43, 0xf1, 0x19, 0x8b,
	0x0b, 0xb1, 0xba, 0x5d, 0xdd, 0x2c, 0x8b, 0x29, 0x98, 0x0b, 0x29, 0xf5, 0xb2, 0x74, 0x94, 0xd2,
	0x88, 0xef, 0xd1, 0x8c, 0xff, 0x31, 0x64, 0xc3, 0xfa, 0x6e, 0xc5, 0x31, 0x3b, 0x28, 0x45, 0xb1,
	0xb9, 0xd7, 0xf4, 0x37, 0xd6, 0x2d, 0x83, 0x12, 0xac, 0xb2, 0xa1, 0xb2, 0x1b, 0x91, 0xaa, 0xa2,
	0x4a, 0x30, 0xd6, 0x09, 0xb3, 0x71, 0xa6, 0x85, 0xc4, 0x3f, 0x63, 0x2f, 0x02, 0x95, 0xae, 0x18,
	0x15, 0xc1, 0x7b, 0xb2, 0x83, 0xa3, 0xad, 0x85, 0x76, 0xf7, 0xb0, 0xbe, 0x48, 0x53, 0x43, 0x15,
	0x1e, 0xf2, 0x16, 0x52, 0x47, 0x7e, 0xad, 0x4a, 0x55, 0x66, 0x54, 0xe6, 0x4d, 0xe4, 0x1e, 0xc2,
	0x1e, 0xb8, 0xd1, 0x29, 0x7c, 0x9d, 0x52, 0xa1, 0x23, 0x1e, 0x24, 0xcc, 0xe7, 0x14, 0xc0, 0xd8,
	0x3f, 0xf0, 0x2b, 0xaa, 0xf2, 0x90, 0xd7, 0x32, 0x9e, 0x3a, 0xc9, 0x15, 0x94, 0x8e, 0x4e, 0x1d,
	0xfa, 0x53, 0x1b, 0x04, 0x4f, 0x35, 0xe2, 0xce, 0x5d, 0x54, 0x6a, 0xaa, 0x8d, 0xa3, 0xeb, 0x12,
	0xf1, 0x36, 0x84, 0x35, 0x55, 0xf6, 0x06, 0x1e, 0xbf, 0xd1, 0xaa, 0xc4, 0x03, 0x93, 0x17, 0xe4,
	0x59, 0x17, 0xc4, 0x4c, 0x18, 0x10, 0xe9, 0xef, 0xca, 0x7c, 0x5d, 0xfb, 0xf2, 0x92, 0x4e, 0xdb,
	0xc1, 0xf1, 0x4c, 0x91, 0xa6, 0x35, 0x2d, 0x26, 0x5a, 0x1b, 0x42, 0x6b, 0x29, 0xdc, 0x89, 0x65,
	0xee, 0x66, 0xa5, 0xa8, 0x26, 0x54, 0xe1, 0x57, 0x3e, 0xaf, 0xdb, 0x78, 0xfc, 0x73, 0xf6, 0xf2,
	0xd1, 0x28, 0x07, 0x94, 0xe9, 0x19, 0x48, 0x5d, 0xa6, 0x36, 0x79, 0x4d, 0xe4, 0x5d, 0x05, 0x46,
	0xb3, 0x00, 0x61, 0xdc, 0x1c, 0x84, 0xbb, 0x55, 0xf2, 0x3e, 0xf9, 0x68, 0xd4, 0x3b, 0xed, 0xf3,
	0x2e, 0x18, 0x9f, 0xb3, 0xd7, 0x95, 0x30, 0x82, 0x43, 0xa1, 0x1d, 0x7c, 0x65, 0x2a, 0xe9, 0x33,
	0x96, 0x7c, 0x4c, 0xae, 0xee, 0xd5, 0x61, 0x54, 0xd4, 0x14, 0xbf, 0x05, 0x95, 0x2d, 0x5c, 0xf2,
	0x3d, 0x9f, 0xc9, 0x16, 0x84, 0x9d, 0x0b, 0x45, 0xe5, 0xd6, 0xe4, 0xd0, 0xd7, 0xa5, 0x03, 0xf3,
	0x20, 0xf2, 0x24, 0xf1, 0x9d, 0xbb, 0xab, 0xc1, 0x1b, 0xe8, 0x54, 0x01, 0x7a, 0xe9, 0xa6, 0x46,
	0x57, 0xda, 0x42, 0xf2, 0x09, 0x39, 0xbb, 0x85, 0xc6, 0x5f, 0xb2, 0x57, 0x5d, 0xe4, 0x37, 0x90,
	0x3b, 0x91, 0x7c, 0x4a, 0xe4, 0x7d, 0xaa, 0x8e, 0x65, 0x78, 0xd0, 0x0e, 0x92, 0xef, 0x6f, 0x59,
	0x26, 0xb4, 0x63, 0x99, 0x10, 0x6f, 0xf9, 0xcd, 0x96, 0xe5, 0x46, 0x85, 0x95, 0x6b, 0x60, 0xa9,
	0x8b, 0x42, 0xb9, 0xe4, 0x07, 0x44, 0xdf, 0xc1, 0xe3, 0x5f, 0xb1, 0x8f, 0xb6, 0x31, 0x6f, 0xff,
	0x33, 0xfa, 0xc1, 0x7e, 0x25, 0x56, 0x30, 0x28, 0x26, 0xde, 0xfc, 0xe7, 0xbe, 0x82, 0x1d, 0x10,
	0xbb, 0xc2, 0xde, 0xab, 0xea, 0xb6, 0xc3, 0x1c, 0x51, 0xe7, 0xee, 0x2a, 0x90, 0x2d, 0x0d, 0x08,
	0x07, 0x6f, 0xeb, 0x2a, 0xd8, 0xe4, 0x87, 0x9e, 0xbd, 0xa3, 0x88, 0x7f, 0xcd, 0x3e, 0xd9, 0x01,
	0xeb, 0x72, 0x8e, 0xc9, 0x9b, 0xf7, 0x13, 0x70, 0xb5, 0xb0, 0x00, 0xa9, 0x4d, 0x7e, 0x34, 0x8a,
	0x70, 0xb5, 0x20, 0x61, 0xfc, 0xbf, 0x1e, 0x3b, 0xf4, 0xef, 0x2e, 0x8d, 0x7a, 0x55, 0xe2, 0x70,
	0xf4, 0xd3, 0x33, 0x48, 0x88, 0xa7, 0x46, 0x3d, 0x80, 0x09, 0x53, 0x2a, 0x48, 0x84, 0xcf, 0xa7,
	0xc2, 0x2d, 0xc2, 0xab, 0x13, 0x24, 0x1c, 0x6b, 0xe9, 0x9c, 0xa6, 0x2e, 0xcd, 0xa4, 0x3e, 0xdf,
	0x88, 0x38, 0x30, 0xac, 0xca, 0xca, 0xdb, 0x75, 0x05, 0x61, 0x10, 0xd5, 0xf2, 0x77, 0x18, 0x43,
	0x63, 0xf6, 0x94, 0x46, 0x60, 0xaa, 0xac, 0x98, 0xe7, 0x9b, 0x57, 0xa7, 0x83, 0x61, 0x83, 0x91,
	0xfc, 0xb8, 0x50, 0x0e, 0x72, 0x65, 0x71, 0xc5, 0xc0, 0x68, 0xb7, 0xd0, 0x31, 0xb0, 0x3e, 0xed,
	0x47, 0x7b, 0xe7, 0xf2, 0x07, 0x0b, 0x78, 0xfc, 0x9f, 0x88, 0xb1, 0x66, 0x09, 0xc2, 0x08, 0x52,
	0xb8, 0xdb, 0x7e, 0xa5, 0x3a, 0x18, 0x36, 0x32, 0xbe, 0xcf, 0xe0, 0xe4, 0x82, 0x7e, 0x79, 0xb3,
	0x2c, 0xc2, 0x63, 0xb5, 0x83, 0xb7, 0xae, 0xd3, 0x66, 0xfe, 0x44, 0xc4, 0xdc, 0x42, 0xb1, 0x75,
	0xe7, 0xa2, 0x6d, 0xd0, 0xbf, 0x15, 0x5d, 0xb0, 0x15, 0x76, 0xff, 0x3d, 0x61, 0x1f, 0xbe, 0x2f,
	0xec, 0xa3, 0x6e, 0x9d, 0xbf, 0x64, 0xaf, 0x94, 0x9d, 0x39, 0xa3, 0x4b, 0x5a, 0x54, 0x94, 0x75,
	0x50, 0xca, 0x75, 0xd8, 0x04, 0xf6, 0xa9, 0xf0, 0xb9, 0xb0, 0xaa, 0xcc, 0x72, 0xb8, 0xc6, 0x49,
	0x1f, 0x96, 0x82, 0x06, 0xc1, 0x75, 0x83, 0x9c, 0xb5, 0xeb, 0x52, 0x86, 0x7d, 0xa0, 0x01, 0xf0,
	0x42, 0x2b, 0xcb, 0x41, 0x6a, 0x93, 0x86, 0xa1, 0xfb, 0x97, 0x25, 0x94, 0x12, 0x68, 0xfd, 0x1b,
	0xf0, 0xfd, 0x4a, 0xec, 0x38, 0x65, 0xa7, 0xc2, 0x08, 0xbf, 0xba, 0xfa, 0x35, 0xb0, 0x0d, 0xd1,
	0xe0, 0x2c, 0xb1, 0xaf, 0x6e, 0x57, 0xbf, 0x5f, 0x2a, 0x9c, 0x90, 0x29, 0xac, 0xc2, 0x56, 0xb8,
	0x47, 0x33, 0xfe, 0x57, 0xc4, 0xa2, 0xe9, 0xf9, 0x94, 0xfa, 0x1c, 0x20, 0xa5, 0x97, 0xad, 0x47,
	0xa9, 0xa9, 0xe5, 0x0f, 0x78, 0x9b, 0x46, 0xec, 0x38, 0x33, 0x95, 0xbc, 0x0a, 0xab, 0x9f, 0x2f,
	0x5a, 0x1b, 0x42, 0x9b, 0xca, 0xce, 0x00, 0xd2, 0x70, 0x9d, 0x82, 0x44, 0x4f, 0x06, 0x98, 0x07,
	0x30, 0x33, 0xda, 0x2f, 0xfc, 0x45, 0x6a, 0x43, 0xcd, 0xb0, 0x18, 0xb4, 0x86, 0x05, 0xda, 0xf3,
	0x51, 0x87, 0x0a, 0x05, 0x89, 0x6e, 0xa6, 0xcd, 0x9a, 0xbe, 0x66, 0xe4, 0x68, 0x07, 0xc3, 0x38,
	0x1e, 0xc0, 0x58, 0xdc, 0xe7, 0x8e, 0x7d, 0x1c, 0x41, 0x44, 0xab, 0x0f, 0x60, 0xae, 0xd5, 0x8a,
	0x4a, 0xd0, 0xe7, 0x41, 0xda, 0xe0, 0xc2, 0x67, 0x3c, 0xe0, 0x62, 0x85, 0x8b, 0xb1, 0x2a, 0x4b,
	0x30, 0x18, 0xca, 0x5b, 0xef, 0xce, 0x33, 0x72, 0x67, 0x1b, 0xa6, 0x0a, 0x23, 0x74, 0xa9, 0x97,
	0x78, 0x39, 0x9e, 0x93, 0x99, 0x36, 0x84, 0x7d, 0xb5, 0xb4, 0xf0, 0x95, 0x72, 0x8b, 0xe5, 0x3c,
	0x2c, 0x18, 0x0d, 0x30, 0xfe, 0xf7, 0x13, 0x16, 0xf1, 0x4a, 0x62, 0x7c, 0x7f, 0x36, 0x95, 0xbc,
	0x54, 0x65, 0x4a, 0xeb, 0x8c, 0x1f, 0x16, 0x1d, 0x0c, 0x39, 0x59, 0x9b, 0xe3, 0xab, 0xdb, 0xc1,
	0xb0, 0x2f, 0x70, 0x04, 0xd1, 0x5c, 0x8a, 0x28, 0xb1, 0xb5, 0x8c, 0x9e, 0x34, 0x43, 0xeb, 0x80,
	0x94, 0x0d, 0x80, 0x0f, 0x05, 0x9e, 0x86, 0xcb, 0xef, 0xb7, 0x35, 0xab, 0x4f, 0xac, 0x5d, 0x05,
	0xb2, 0xb3, 0x1d, 0xf6, 0xa1, 0x67, 0x67, 0xfb, 0xd8, 0x1b, 0x13, 0x97, 0xb9, 0x90, 0xf7, 0xc4,
	0x3e, 0xea, 0xda, 0xae, 0x15, 0x6d, 0xdb, 0x0d, 0x7b, 0xd0, 0xb5, 0xdd, 0xb0, 0x4f, 0xd9, 0xf3,
	0x42, 0x60, 0xc2, 0xdd, 0x37, 0xa6, 0x92, 0xad, 0x5d, 0x70, 0x1b, 0x1e, 0xff, 0x8d, 0x1d, 0xe0,
	0xe7, 0x59, 0x58, 0x7d, 0xf1, 0xcf, 0xe6, 0x25, 0x6a, 0x21, 0xbe, 0xa7, 0xdf, 0x99, 0xb0, 0xc2,
	0x53, 0x4f, 0xa3, 0x84, 0xbf, 0xf3, 0xdd, 0x38, 0x73, 0xa2, 0x5e, 0x99, 0x1b, 0xa4, 0xd1, 0x5f,
	0xff, 0x71, 0x32, 0xa1, 0xab, 0x54, 0xeb, 0x11, 0x19, 0xff, 0x89, 0x0d, 0xeb, 0xaf, 0xb4, 0x56,
	0xa3, 0xf7, 0x3a, 0x8d, 0x8e, 0xdf, 0x2e, 0x66, 0x5d, 0x39, 0x4d, 0x17, 0xd5, 0x97, 0xb8, 0x85,
	0x74, 0x1e, 0xb8, 0xa8, 0xfb, 0xc0, 0x8d, 0x7f, 0xca, 0xfa, 0xf4, 0xa5, 0x88, 0x46, 0x72, 0x9a,
	0x7b, 0xad, 0x5e, 0x6a, 0x21, 0xf3, 0x43, 0xfa, 0xe7, 0xc0, 0x2f, 0xff, 0x1f, 0x00, 0x00, 0xff,
	0xff, 0xb9, 0x40, 0xb4, 0x0d, 0x2c, 0x10, 0x00, 0x00,
}
