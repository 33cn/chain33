// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Config struct {
	Title           string      `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Loglevel        string      `protobuf:"bytes,2,opt,name=loglevel" json:"loglevel,omitempty"`
	LogConsoleLevel string      `protobuf:"bytes,10,opt,name=logConsoleLevel" json:"logConsoleLevel,omitempty"`
	LogFile         string      `protobuf:"bytes,9,opt,name=logFile" json:"logFile,omitempty"`
	Store           *Store      `protobuf:"bytes,3,opt,name=store" json:"store,omitempty"`
	LocalStore      *LocalStore `protobuf:"bytes,11,opt,name=localStore" json:"localStore,omitempty"`
	Consensus       *Consensus  `protobuf:"bytes,4,opt,name=consensus" json:"consensus,omitempty"`
	MemPool         *MemPool    `protobuf:"bytes,5,opt,name=memPool" json:"memPool,omitempty"`
	BlockChain      *BlockChain `protobuf:"bytes,6,opt,name=blockChain" json:"blockChain,omitempty"`
	Wallet          *Wallet     `protobuf:"bytes,7,opt,name=wallet" json:"wallet,omitempty"`
	P2P             *P2P        `protobuf:"bytes,8,opt,name=p2p" json:"p2p,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Config) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Config) GetLoglevel() string {
	if m != nil {
		return m.Loglevel
	}
	return ""
}

func (m *Config) GetLogConsoleLevel() string {
	if m != nil {
		return m.LogConsoleLevel
	}
	return ""
}

func (m *Config) GetLogFile() string {
	if m != nil {
		return m.LogFile
	}
	return ""
}

func (m *Config) GetStore() *Store {
	if m != nil {
		return m.Store
	}
	return nil
}

func (m *Config) GetLocalStore() *LocalStore {
	if m != nil {
		return m.LocalStore
	}
	return nil
}

func (m *Config) GetConsensus() *Consensus {
	if m != nil {
		return m.Consensus
	}
	return nil
}

func (m *Config) GetMemPool() *MemPool {
	if m != nil {
		return m.MemPool
	}
	return nil
}

func (m *Config) GetBlockChain() *BlockChain {
	if m != nil {
		return m.BlockChain
	}
	return nil
}

func (m *Config) GetWallet() *Wallet {
	if m != nil {
		return m.Wallet
	}
	return nil
}

func (m *Config) GetP2P() *P2P {
	if m != nil {
		return m.P2P
	}
	return nil
}

type MemPool struct {
	PoolCacheSize int64 `protobuf:"varint,1,opt,name=poolCacheSize" json:"poolCacheSize,omitempty"`
	MinTxFee      int64 `protobuf:"varint,2,opt,name=minTxFee" json:"minTxFee,omitempty"`
}

func (m *MemPool) Reset()                    { *m = MemPool{} }
func (m *MemPool) String() string            { return proto.CompactTextString(m) }
func (*MemPool) ProtoMessage()               {}
func (*MemPool) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *MemPool) GetPoolCacheSize() int64 {
	if m != nil {
		return m.PoolCacheSize
	}
	return 0
}

func (m *MemPool) GetMinTxFee() int64 {
	if m != nil {
		return m.MinTxFee
	}
	return 0
}

type Consensus struct {
	Name             string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Genesis          string `protobuf:"bytes,2,opt,name=genesis" json:"genesis,omitempty"`
	Minerstart       bool   `protobuf:"varint,3,opt,name=minerstart" json:"minerstart,omitempty"`
	NodeId           int64  `protobuf:"varint,4,opt,name=nodeId" json:"nodeId,omitempty"`
	RaftApiPort      int64  `protobuf:"varint,5,opt,name=raftApiPort" json:"raftApiPort,omitempty"`
	IsNewJoinNode    bool   `protobuf:"varint,6,opt,name=isNewJoinNode" json:"isNewJoinNode,omitempty"`
	PeersURL         string `protobuf:"bytes,7,opt,name=peersURL" json:"peersURL,omitempty"`
	ReadOnlyPeersURL string `protobuf:"bytes,8,opt,name=readOnlyPeersURL" json:"readOnlyPeersURL,omitempty"`
	AddPeersURL      string `protobuf:"bytes,9,opt,name=addPeersURL" json:"addPeersURL,omitempty"`
	GenesisBlockTime int64  `protobuf:"varint,10,opt,name=genesisBlockTime" json:"genesisBlockTime,omitempty"`
	HotkeyAddr       string `protobuf:"bytes,11,opt,name=hotkeyAddr" json:"hotkeyAddr,omitempty"`
}

func (m *Consensus) Reset()                    { *m = Consensus{} }
func (m *Consensus) String() string            { return proto.CompactTextString(m) }
func (*Consensus) ProtoMessage()               {}
func (*Consensus) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *Consensus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Consensus) GetGenesis() string {
	if m != nil {
		return m.Genesis
	}
	return ""
}

func (m *Consensus) GetMinerstart() bool {
	if m != nil {
		return m.Minerstart
	}
	return false
}

func (m *Consensus) GetNodeId() int64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *Consensus) GetRaftApiPort() int64 {
	if m != nil {
		return m.RaftApiPort
	}
	return 0
}

func (m *Consensus) GetIsNewJoinNode() bool {
	if m != nil {
		return m.IsNewJoinNode
	}
	return false
}

func (m *Consensus) GetPeersURL() string {
	if m != nil {
		return m.PeersURL
	}
	return ""
}

func (m *Consensus) GetReadOnlyPeersURL() string {
	if m != nil {
		return m.ReadOnlyPeersURL
	}
	return ""
}

func (m *Consensus) GetAddPeersURL() string {
	if m != nil {
		return m.AddPeersURL
	}
	return ""
}

func (m *Consensus) GetGenesisBlockTime() int64 {
	if m != nil {
		return m.GenesisBlockTime
	}
	return 0
}

func (m *Consensus) GetHotkeyAddr() string {
	if m != nil {
		return m.HotkeyAddr
	}
	return ""
}

type Wallet struct {
	MinFee   int64  `protobuf:"varint,1,opt,name=minFee" json:"minFee,omitempty"`
	DbPath   string `protobuf:"bytes,2,opt,name=dbPath" json:"dbPath,omitempty"`
	SignType string `protobuf:"bytes,3,opt,name=signType" json:"signType,omitempty"`
}

func (m *Wallet) Reset()                    { *m = Wallet{} }
func (m *Wallet) String() string            { return proto.CompactTextString(m) }
func (*Wallet) ProtoMessage()               {}
func (*Wallet) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Wallet) GetMinFee() int64 {
	if m != nil {
		return m.MinFee
	}
	return 0
}

func (m *Wallet) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *Wallet) GetSignType() string {
	if m != nil {
		return m.SignType
	}
	return ""
}

type Store struct {
	Driver string `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	DbPath string `protobuf:"bytes,2,opt,name=dbPath" json:"dbPath,omitempty"`
}

func (m *Store) Reset()                    { *m = Store{} }
func (m *Store) String() string            { return proto.CompactTextString(m) }
func (*Store) ProtoMessage()               {}
func (*Store) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *Store) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Store) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

type LocalStore struct {
	Driver string `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	DbPath string `protobuf:"bytes,2,opt,name=dbPath" json:"dbPath,omitempty"`
}

func (m *LocalStore) Reset()                    { *m = LocalStore{} }
func (m *LocalStore) String() string            { return proto.CompactTextString(m) }
func (*LocalStore) ProtoMessage()               {}
func (*LocalStore) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *LocalStore) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *LocalStore) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

type BlockChain struct {
	DefCacheSize        int64  `protobuf:"varint,1,opt,name=defCacheSize" json:"defCacheSize,omitempty"`
	MaxFetchBlockNum    int64  `protobuf:"varint,2,opt,name=maxFetchBlockNum" json:"maxFetchBlockNum,omitempty"`
	TimeoutSeconds      int64  `protobuf:"varint,3,opt,name=timeoutSeconds" json:"timeoutSeconds,omitempty"`
	BatchBlockNum       int64  `protobuf:"varint,4,opt,name=batchBlockNum" json:"batchBlockNum,omitempty"`
	Driver              string `protobuf:"bytes,5,opt,name=driver" json:"driver,omitempty"`
	DbPath              string `protobuf:"bytes,6,opt,name=dbPath" json:"dbPath,omitempty"`
	IsStrongConsistency bool   `protobuf:"varint,7,opt,name=isStrongConsistency" json:"isStrongConsistency,omitempty"`
	SingleMode          bool   `protobuf:"varint,8,opt,name=singleMode" json:"singleMode,omitempty"`
}

func (m *BlockChain) Reset()                    { *m = BlockChain{} }
func (m *BlockChain) String() string            { return proto.CompactTextString(m) }
func (*BlockChain) ProtoMessage()               {}
func (*BlockChain) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *BlockChain) GetDefCacheSize() int64 {
	if m != nil {
		return m.DefCacheSize
	}
	return 0
}

func (m *BlockChain) GetMaxFetchBlockNum() int64 {
	if m != nil {
		return m.MaxFetchBlockNum
	}
	return 0
}

func (m *BlockChain) GetTimeoutSeconds() int64 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *BlockChain) GetBatchBlockNum() int64 {
	if m != nil {
		return m.BatchBlockNum
	}
	return 0
}

func (m *BlockChain) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *BlockChain) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *BlockChain) GetIsStrongConsistency() bool {
	if m != nil {
		return m.IsStrongConsistency
	}
	return false
}

func (m *BlockChain) GetSingleMode() bool {
	if m != nil {
		return m.SingleMode
	}
	return false
}

type P2P struct {
	SeedPort     int32    `protobuf:"varint,1,opt,name=seedPort" json:"seedPort,omitempty"`
	DbPath       string   `protobuf:"bytes,2,opt,name=dbPath" json:"dbPath,omitempty"`
	GrpcLogFile  string   `protobuf:"bytes,3,opt,name=grpcLogFile" json:"grpcLogFile,omitempty"`
	IsSeed       bool     `protobuf:"varint,4,opt,name=isSeed" json:"isSeed,omitempty"`
	Seeds        []string `protobuf:"bytes,5,rep,name=seeds" json:"seeds,omitempty"`
	Enable       bool     `protobuf:"varint,6,opt,name=enable" json:"enable,omitempty"`
	MsgCacheSize int32    `protobuf:"varint,7,opt,name=msgCacheSize" json:"msgCacheSize,omitempty"`
	Version      int32    `protobuf:"varint,8,opt,name=version" json:"version,omitempty"`
	VerMix       int32    `protobuf:"varint,9,opt,name=verMix" json:"verMix,omitempty"`
	VerMax       int32    `protobuf:"varint,10,opt,name=verMax" json:"verMax,omitempty"`
}

func (m *P2P) Reset()                    { *m = P2P{} }
func (m *P2P) String() string            { return proto.CompactTextString(m) }
func (*P2P) ProtoMessage()               {}
func (*P2P) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *P2P) GetSeedPort() int32 {
	if m != nil {
		return m.SeedPort
	}
	return 0
}

func (m *P2P) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *P2P) GetGrpcLogFile() string {
	if m != nil {
		return m.GrpcLogFile
	}
	return ""
}

func (m *P2P) GetIsSeed() bool {
	if m != nil {
		return m.IsSeed
	}
	return false
}

func (m *P2P) GetSeeds() []string {
	if m != nil {
		return m.Seeds
	}
	return nil
}

func (m *P2P) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *P2P) GetMsgCacheSize() int32 {
	if m != nil {
		return m.MsgCacheSize
	}
	return 0
}

func (m *P2P) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2P) GetVerMix() int32 {
	if m != nil {
		return m.VerMix
	}
	return 0
}

func (m *P2P) GetVerMax() int32 {
	if m != nil {
		return m.VerMax
	}
	return 0
}

func init() {
	proto.RegisterType((*Config)(nil), "types.Config")
	proto.RegisterType((*MemPool)(nil), "types.MemPool")
	proto.RegisterType((*Consensus)(nil), "types.Consensus")
	proto.RegisterType((*Wallet)(nil), "types.Wallet")
	proto.RegisterType((*Store)(nil), "types.Store")
	proto.RegisterType((*LocalStore)(nil), "types.LocalStore")
	proto.RegisterType((*BlockChain)(nil), "types.BlockChain")
	proto.RegisterType((*P2P)(nil), "types.P2P")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 756 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xc1, 0x6e, 0xeb, 0x44,
	0x14, 0x55, 0xeb, 0xe7, 0xc4, 0xb9, 0xed, 0x7b, 0x3c, 0x06, 0x84, 0x2c, 0x84, 0x50, 0x64, 0x01,
	0x8a, 0x58, 0x44, 0x10, 0x16, 0x6c, 0xd8, 0x3c, 0x22, 0x55, 0x02, 0xd2, 0x62, 0x4d, 0x82, 0x58,
	0x3b, 0xf6, 0xad, 0x33, 0x7a, 0xe3, 0x19, 0xcb, 0x33, 0x4d, 0x13, 0x7e, 0x82, 0xcf, 0x60, 0xc3,
	0xbf, 0xf1, 0x0b, 0x68, 0xae, 0xc7, 0x8e, 0xd3, 0xd2, 0x05, 0xbb, 0x9c, 0x73, 0xcf, 0x58, 0x73,
	0xef, 0x39, 0x77, 0x02, 0xd7, 0xb9, 0x56, 0xf7, 0xa2, 0x9c, 0xd7, 0x8d, 0xb6, 0x9a, 0x85, 0xf6,
	0x58, 0xa3, 0x49, 0xfe, 0x0a, 0x60, 0xb4, 0x24, 0x9e, 0x7d, 0x0c, 0xa1, 0x15, 0x56, 0x62, 0x7c,
	0x31, 0xbd, 0x98, 0x4d, 0x78, 0x0b, 0xd8, 0xa7, 0x10, 0x49, 0x5d, 0x4a, 0xdc, 0xa3, 0x8c, 0x2f,
	0xa9, 0xd0, 0x63, 0x36, 0x83, 0x0f, 0xa4, 0x2e, 0x97, 0x5a, 0x19, 0x2d, 0x71, 0x45, 0x12, 0x20,
	0xc9, 0x53, 0x9a, 0xc5, 0x30, 0x96, 0xba, 0xbc, 0x11, 0x12, 0xe3, 0x09, 0x29, 0x3a, 0xc8, 0x12,
	0x08, 0x8d, 0xd5, 0x0d, 0xc6, 0xc1, 0xf4, 0x62, 0x76, 0xb5, 0xb8, 0x9e, 0xd3, 0xbd, 0xe6, 0x6b,
	0xc7, 0xf1, 0xb6, 0xc4, 0xbe, 0x05, 0x90, 0x3a, 0xcf, 0x24, 0x91, 0xf1, 0x15, 0x09, 0x3f, 0xf4,
	0xc2, 0x55, 0x5f, 0xe0, 0x03, 0x11, 0x9b, 0xc3, 0x24, 0xd7, 0xca, 0xa0, 0x32, 0x0f, 0x26, 0x7e,
	0x45, 0x27, 0xde, 0xfa, 0x13, 0xcb, 0x8e, 0xe7, 0x27, 0x09, 0x9b, 0xc1, 0xb8, 0xc2, 0x2a, 0xd5,
	0x5a, 0xc6, 0x21, 0xa9, 0xdf, 0x78, 0xf5, 0x6d, 0xcb, 0xf2, 0xae, 0xec, 0x2e, 0xb3, 0x95, 0x3a,
	0x7f, 0xbf, 0xdc, 0x65, 0x42, 0xc5, 0xa3, 0xb3, 0xcb, 0xfc, 0xd8, 0x17, 0xf8, 0x40, 0xc4, 0xbe,
	0x84, 0xd1, 0x63, 0x26, 0x25, 0xda, 0x78, 0x4c, 0xf2, 0xd7, 0x5e, 0xfe, 0x3b, 0x91, 0xdc, 0x17,
	0xd9, 0x67, 0x10, 0xd4, 0x8b, 0x3a, 0x8e, 0x48, 0x03, 0x5e, 0x93, 0x2e, 0x52, 0xee, 0xe8, 0xe4,
	0x17, 0x18, 0xfb, 0xbb, 0xb0, 0x2f, 0xe0, 0x75, 0xad, 0xb5, 0x5c, 0x66, 0xf9, 0x0e, 0xd7, 0xe2,
	0x8f, 0xd6, 0xb1, 0x80, 0x9f, 0x93, 0xce, 0xb9, 0x4a, 0xa8, 0xcd, 0xe1, 0x06, 0x91, 0x9c, 0x0b,
	0x78, 0x8f, 0x93, 0x7f, 0x2e, 0x61, 0xd2, 0xcf, 0x81, 0x31, 0x78, 0xa5, 0xb2, 0xaa, 0x33, 0x9e,
	0x7e, 0x3b, 0xc7, 0x4a, 0x54, 0x68, 0x84, 0xf1, 0xb6, 0x77, 0x90, 0x7d, 0x0e, 0x50, 0x09, 0x85,
	0x8d, 0xb1, 0x59, 0x63, 0xc9, 0xb6, 0x88, 0x0f, 0x18, 0xf6, 0x09, 0x8c, 0x94, 0x2e, 0xf0, 0xa7,
	0x82, 0xe6, 0x1e, 0x70, 0x8f, 0xd8, 0x14, 0xae, 0x9a, 0xec, 0xde, 0xbe, 0xab, 0x45, 0xaa, 0x1b,
	0x4b, 0x63, 0x0e, 0xf8, 0x90, 0x72, 0x7d, 0x09, 0x73, 0x87, 0x8f, 0x3f, 0x6b, 0xa1, 0xee, 0x74,
	0x81, 0x34, 0xdd, 0x88, 0x9f, 0x93, 0xae, 0xaf, 0x1a, 0xb1, 0x31, 0xbf, 0xf1, 0x15, 0xcd, 0x73,
	0xc2, 0x7b, 0xcc, 0xbe, 0x86, 0xb7, 0x0d, 0x66, 0xc5, 0xaf, 0x4a, 0x1e, 0xd3, 0x4e, 0x13, 0x91,
	0xe6, 0x19, 0xef, 0xee, 0x93, 0x15, 0x45, 0x2f, 0x6b, 0x73, 0x39, 0xa4, 0xdc, 0xd7, 0x7c, 0xd3,
	0x64, 0xec, 0x46, 0x54, 0x48, 0x01, 0x0f, 0xf8, 0x33, 0xde, 0x4d, 0x65, 0xa7, 0xed, 0x7b, 0x3c,
	0xbe, 0x2b, 0x8a, 0x86, 0x32, 0x3a, 0xe1, 0x03, 0x26, 0xd9, 0xc0, 0xa8, 0xb5, 0xdb, 0xcd, 0xa7,
	0x12, 0xca, 0xb9, 0xd2, 0xda, 0xe6, 0x91, 0xe3, 0x8b, 0x6d, 0x9a, 0xd9, 0x9d, 0x1f, 0xb8, 0x47,
	0xae, 0x5f, 0x23, 0x4a, 0xb5, 0x39, 0xd6, 0xed, 0x92, 0x4c, 0x78, 0x8f, 0x93, 0xef, 0x21, 0x6c,
	0xf3, 0xee, 0x0e, 0x37, 0x62, 0x8f, 0x8d, 0x37, 0xd1, 0xa3, 0x97, 0x3e, 0x9a, 0xfc, 0x00, 0x70,
	0xda, 0x9c, 0xff, 0x7d, 0xfa, 0xef, 0x4b, 0x80, 0x53, 0xd6, 0x59, 0x02, 0xd7, 0x05, 0xde, 0x3f,
	0x8d, 0xe3, 0x19, 0xe7, 0x66, 0x59, 0x65, 0x87, 0x1b, 0xb4, 0xf9, 0x8e, 0x4e, 0xde, 0x3d, 0x54,
	0x3e, 0x95, 0xcf, 0x78, 0xf6, 0x15, 0xbc, 0xb1, 0xa2, 0x42, 0xfd, 0x60, 0xd7, 0x98, 0x6b, 0x55,
	0x18, 0xea, 0x3b, 0xe0, 0x4f, 0x58, 0x97, 0x97, 0x6d, 0x36, 0xfc, 0x60, 0x1b, 0xb8, 0x73, 0x72,
	0xd0, 0x5c, 0xf8, 0x42, 0x73, 0xa3, 0xb3, 0x79, 0x7f, 0x03, 0x1f, 0x09, 0xb3, 0xb6, 0x8d, 0x56,
	0xf4, 0x86, 0x09, 0x63, 0x51, 0xe5, 0x47, 0x8a, 0x5a, 0xc4, 0xff, 0xab, 0xe4, 0xbc, 0x37, 0x42,
	0x95, 0x12, 0x6f, 0x5d, 0x68, 0xa3, 0x76, 0x23, 0x4e, 0x4c, 0xf2, 0xe7, 0x25, 0x04, 0xe9, 0x22,
	0x25, 0x27, 0x11, 0x0b, 0x8a, 0xbf, 0x9b, 0x51, 0xc8, 0x7b, 0xfc, 0xa2, 0xfb, 0x53, 0xb8, 0x2a,
	0x9b, 0x3a, 0x5f, 0xf9, 0xd7, 0xb3, 0x0d, 0xc0, 0x90, 0x72, 0x27, 0x85, 0x59, 0x23, 0xb6, 0xfb,
	0x16, 0x71, 0x8f, 0xdc, 0x7b, 0xee, 0xbe, 0x6e, 0xe2, 0x70, 0x1a, 0xb8, 0xf7, 0x9c, 0x80, 0x53,
	0xa3, 0xca, 0xb6, 0xb2, 0x5b, 0x2e, 0x8f, 0x9c, 0x87, 0x95, 0x29, 0x4f, 0x1e, 0x8e, 0xe9, 0x7e,
	0x67, 0x9c, 0x7b, 0x13, 0xf6, 0xd8, 0x18, 0xa1, 0x15, 0x35, 0x19, 0xf2, 0x0e, 0xba, 0xaf, 0xee,
	0xb1, 0xb9, 0x15, 0x07, 0x5a, 0xa3, 0x90, 0x7b, 0xd4, 0xf1, 0xd9, 0x81, 0xf6, 0xc6, 0xf3, 0xd9,
	0x61, 0x3b, 0xa2, 0x3f, 0xa1, 0xef, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x52, 0xa3, 0xb5,
	0x94, 0x06, 0x00, 0x00,
}
