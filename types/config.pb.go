// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	config.proto

It has these top-level messages:
	Config
	Log
	MemPool
	Consensus
	Wallet
	Store
	BlockChain
	P2P
	Rpc
	Exec
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Config struct {
	Title      string      `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Log        *Log        `protobuf:"bytes,2,opt,name=log" json:"log,omitempty"`
	Store      *Store      `protobuf:"bytes,3,opt,name=store" json:"store,omitempty"`
	Consensus  *Consensus  `protobuf:"bytes,5,opt,name=consensus" json:"consensus,omitempty"`
	MemPool    *MemPool    `protobuf:"bytes,6,opt,name=memPool" json:"memPool,omitempty"`
	BlockChain *BlockChain `protobuf:"bytes,7,opt,name=blockChain" json:"blockChain,omitempty"`
	Wallet     *Wallet     `protobuf:"bytes,8,opt,name=wallet" json:"wallet,omitempty"`
	P2P        *P2P        `protobuf:"bytes,9,opt,name=p2p" json:"p2p,omitempty"`
	Rpc        *Rpc        `protobuf:"bytes,10,opt,name=rpc" json:"rpc,omitempty"`
	Exec       *Exec       `protobuf:"bytes,11,opt,name=exec" json:"exec,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Config) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Config) GetLog() *Log {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *Config) GetStore() *Store {
	if m != nil {
		return m.Store
	}
	return nil
}

func (m *Config) GetConsensus() *Consensus {
	if m != nil {
		return m.Consensus
	}
	return nil
}

func (m *Config) GetMemPool() *MemPool {
	if m != nil {
		return m.MemPool
	}
	return nil
}

func (m *Config) GetBlockChain() *BlockChain {
	if m != nil {
		return m.BlockChain
	}
	return nil
}

func (m *Config) GetWallet() *Wallet {
	if m != nil {
		return m.Wallet
	}
	return nil
}

func (m *Config) GetP2P() *P2P {
	if m != nil {
		return m.P2P
	}
	return nil
}

func (m *Config) GetRpc() *Rpc {
	if m != nil {
		return m.Rpc
	}
	return nil
}

func (m *Config) GetExec() *Exec {
	if m != nil {
		return m.Exec
	}
	return nil
}

type Log struct {
	// 日志级别，支持debug(dbug)/info/warn/error(eror)/crit
	Loglevel        string `protobuf:"bytes,1,opt,name=loglevel" json:"loglevel,omitempty"`
	LogConsoleLevel string `protobuf:"bytes,2,opt,name=logConsoleLevel" json:"logConsoleLevel,omitempty"`
	// 日志文件名，可带目录，所有生成的日志文件都放到此目录下
	LogFile string `protobuf:"bytes,3,opt,name=logFile" json:"logFile,omitempty"`
	// 单个日志文件的最大值（单位：兆）
	MaxFileSize uint32 `protobuf:"varint,4,opt,name=maxFileSize" json:"maxFileSize,omitempty"`
	// 最多保存的历史日志文件个数
	MaxBackups uint32 `protobuf:"varint,5,opt,name=maxBackups" json:"maxBackups,omitempty"`
	// 最多保存的历史日志消息（单位：天）
	MaxAge uint32 `protobuf:"varint,6,opt,name=maxAge" json:"maxAge,omitempty"`
	// 日志文件名是否使用本地事件（否则使用UTC时间）
	LocalTime bool `protobuf:"varint,7,opt,name=localTime" json:"localTime,omitempty"`
	// 历史日志文件是否压缩（压缩格式为gz）
	Compress bool `protobuf:"varint,8,opt,name=compress" json:"compress,omitempty"`
	// 是否打印调用源文件和行号
	CallerFile bool `protobuf:"varint,9,opt,name=callerFile" json:"callerFile,omitempty"`
	// 是否打印调用方法
	CallerFunction bool `protobuf:"varint,10,opt,name=callerFunction" json:"callerFunction,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Log) GetLoglevel() string {
	if m != nil {
		return m.Loglevel
	}
	return ""
}

func (m *Log) GetLogConsoleLevel() string {
	if m != nil {
		return m.LogConsoleLevel
	}
	return ""
}

func (m *Log) GetLogFile() string {
	if m != nil {
		return m.LogFile
	}
	return ""
}

func (m *Log) GetMaxFileSize() uint32 {
	if m != nil {
		return m.MaxFileSize
	}
	return 0
}

func (m *Log) GetMaxBackups() uint32 {
	if m != nil {
		return m.MaxBackups
	}
	return 0
}

func (m *Log) GetMaxAge() uint32 {
	if m != nil {
		return m.MaxAge
	}
	return 0
}

func (m *Log) GetLocalTime() bool {
	if m != nil {
		return m.LocalTime
	}
	return false
}

func (m *Log) GetCompress() bool {
	if m != nil {
		return m.Compress
	}
	return false
}

func (m *Log) GetCallerFile() bool {
	if m != nil {
		return m.CallerFile
	}
	return false
}

func (m *Log) GetCallerFunction() bool {
	if m != nil {
		return m.CallerFunction
	}
	return false
}

type MemPool struct {
	PoolCacheSize int64 `protobuf:"varint,1,opt,name=poolCacheSize" json:"poolCacheSize,omitempty"`
	MinTxFee      int64 `protobuf:"varint,2,opt,name=minTxFee" json:"minTxFee,omitempty"`
	ForceAccept   bool  `protobuf:"varint,3,opt,name=forceAccept" json:"forceAccept,omitempty"`
}

func (m *MemPool) Reset()                    { *m = MemPool{} }
func (m *MemPool) String() string            { return proto.CompactTextString(m) }
func (*MemPool) ProtoMessage()               {}
func (*MemPool) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *MemPool) GetPoolCacheSize() int64 {
	if m != nil {
		return m.PoolCacheSize
	}
	return 0
}

func (m *MemPool) GetMinTxFee() int64 {
	if m != nil {
		return m.MinTxFee
	}
	return 0
}

func (m *MemPool) GetForceAccept() bool {
	if m != nil {
		return m.ForceAccept
	}
	return false
}

type Consensus struct {
	Name                      string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Genesis                   string   `protobuf:"bytes,2,opt,name=genesis" json:"genesis,omitempty"`
	Minerstart                bool     `protobuf:"varint,3,opt,name=minerstart" json:"minerstart,omitempty"`
	GenesisBlockTime          int64    `protobuf:"varint,4,opt,name=genesisBlockTime" json:"genesisBlockTime,omitempty"`
	HotkeyAddr                string   `protobuf:"bytes,5,opt,name=hotkeyAddr" json:"hotkeyAddr,omitempty"`
	ForceMining               bool     `protobuf:"varint,6,opt,name=forceMining" json:"forceMining,omitempty"`
	NodeId                    int64    `protobuf:"varint,7,opt,name=NodeId" json:"NodeId,omitempty"`
	PeersURL                  string   `protobuf:"bytes,8,opt,name=PeersURL" json:"PeersURL,omitempty"`
	ClientAddr                string   `protobuf:"bytes,9,opt,name=ClientAddr" json:"ClientAddr,omitempty"`
	RaftApiPort               int64    `protobuf:"varint,15,opt,name=raftApiPort" json:"raftApiPort,omitempty"`
	IsNewJoinNode             bool     `protobuf:"varint,16,opt,name=isNewJoinNode" json:"isNewJoinNode,omitempty"`
	ReadOnlyPeersURL          string   `protobuf:"bytes,17,opt,name=readOnlyPeersURL" json:"readOnlyPeersURL,omitempty"`
	AddPeersURL               string   `protobuf:"bytes,18,opt,name=addPeersURL" json:"addPeersURL,omitempty"`
	DefaultSnapCount          int64    `protobuf:"varint,19,opt,name=defaultSnapCount" json:"defaultSnapCount,omitempty"`
	TimeoutPropose            int32    `protobuf:"varint,20,opt,name=timeoutPropose" json:"timeoutPropose,omitempty"`
	TimeoutProposeDelta       int32    `protobuf:"varint,21,opt,name=timeoutProposeDelta" json:"timeoutProposeDelta,omitempty"`
	TimeoutPrevote            int32    `protobuf:"varint,22,opt,name=timeoutPrevote" json:"timeoutPrevote,omitempty"`
	TimeoutPrevoteDelta       int32    `protobuf:"varint,23,opt,name=timeoutPrevoteDelta" json:"timeoutPrevoteDelta,omitempty"`
	TimeoutPrecommit          int32    `protobuf:"varint,24,opt,name=timeoutPrecommit" json:"timeoutPrecommit,omitempty"`
	TimeoutPrecommitDelta     int32    `protobuf:"varint,25,opt,name=timeoutPrecommitDelta" json:"timeoutPrecommitDelta,omitempty"`
	TimeoutCommit             int32    `protobuf:"varint,26,opt,name=timeoutCommit" json:"timeoutCommit,omitempty"`
	SkipTimeoutCommit         bool     `protobuf:"varint,27,opt,name=skipTimeoutCommit" json:"skipTimeoutCommit,omitempty"`
	CreateEmptyBlocks         bool     `protobuf:"varint,28,opt,name=createEmptyBlocks" json:"createEmptyBlocks,omitempty"`
	CreateEmptyBlocksInterval int32    `protobuf:"varint,29,opt,name=createEmptyBlocksInterval" json:"createEmptyBlocksInterval,omitempty"`
	Seeds                     []string `protobuf:"bytes,30,rep,name=seeds" json:"seeds,omitempty"`
}

func (m *Consensus) Reset()                    { *m = Consensus{} }
func (m *Consensus) String() string            { return proto.CompactTextString(m) }
func (*Consensus) ProtoMessage()               {}
func (*Consensus) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Consensus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Consensus) GetGenesis() string {
	if m != nil {
		return m.Genesis
	}
	return ""
}

func (m *Consensus) GetMinerstart() bool {
	if m != nil {
		return m.Minerstart
	}
	return false
}

func (m *Consensus) GetGenesisBlockTime() int64 {
	if m != nil {
		return m.GenesisBlockTime
	}
	return 0
}

func (m *Consensus) GetHotkeyAddr() string {
	if m != nil {
		return m.HotkeyAddr
	}
	return ""
}

func (m *Consensus) GetForceMining() bool {
	if m != nil {
		return m.ForceMining
	}
	return false
}

func (m *Consensus) GetNodeId() int64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *Consensus) GetPeersURL() string {
	if m != nil {
		return m.PeersURL
	}
	return ""
}

func (m *Consensus) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

func (m *Consensus) GetRaftApiPort() int64 {
	if m != nil {
		return m.RaftApiPort
	}
	return 0
}

func (m *Consensus) GetIsNewJoinNode() bool {
	if m != nil {
		return m.IsNewJoinNode
	}
	return false
}

func (m *Consensus) GetReadOnlyPeersURL() string {
	if m != nil {
		return m.ReadOnlyPeersURL
	}
	return ""
}

func (m *Consensus) GetAddPeersURL() string {
	if m != nil {
		return m.AddPeersURL
	}
	return ""
}

func (m *Consensus) GetDefaultSnapCount() int64 {
	if m != nil {
		return m.DefaultSnapCount
	}
	return 0
}

func (m *Consensus) GetTimeoutPropose() int32 {
	if m != nil {
		return m.TimeoutPropose
	}
	return 0
}

func (m *Consensus) GetTimeoutProposeDelta() int32 {
	if m != nil {
		return m.TimeoutProposeDelta
	}
	return 0
}

func (m *Consensus) GetTimeoutPrevote() int32 {
	if m != nil {
		return m.TimeoutPrevote
	}
	return 0
}

func (m *Consensus) GetTimeoutPrevoteDelta() int32 {
	if m != nil {
		return m.TimeoutPrevoteDelta
	}
	return 0
}

func (m *Consensus) GetTimeoutPrecommit() int32 {
	if m != nil {
		return m.TimeoutPrecommit
	}
	return 0
}

func (m *Consensus) GetTimeoutPrecommitDelta() int32 {
	if m != nil {
		return m.TimeoutPrecommitDelta
	}
	return 0
}

func (m *Consensus) GetTimeoutCommit() int32 {
	if m != nil {
		return m.TimeoutCommit
	}
	return 0
}

func (m *Consensus) GetSkipTimeoutCommit() bool {
	if m != nil {
		return m.SkipTimeoutCommit
	}
	return false
}

func (m *Consensus) GetCreateEmptyBlocks() bool {
	if m != nil {
		return m.CreateEmptyBlocks
	}
	return false
}

func (m *Consensus) GetCreateEmptyBlocksInterval() int32 {
	if m != nil {
		return m.CreateEmptyBlocksInterval
	}
	return 0
}

func (m *Consensus) GetSeeds() []string {
	if m != nil {
		return m.Seeds
	}
	return nil
}

type Wallet struct {
	MinFee       int64  `protobuf:"varint,1,opt,name=minFee" json:"minFee,omitempty"`
	Driver       string `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	DbPath       string `protobuf:"bytes,3,opt,name=dbPath" json:"dbPath,omitempty"`
	DbCache      int32  `protobuf:"varint,4,opt,name=dbCache" json:"dbCache,omitempty"`
	SignType     string `protobuf:"bytes,5,opt,name=signType" json:"signType,omitempty"`
	ForceMining  bool   `protobuf:"varint,6,opt,name=forceMining" json:"forceMining,omitempty"`
	Minerdisable bool   `protobuf:"varint,7,opt,name=minerdisable" json:"minerdisable,omitempty"`
}

func (m *Wallet) Reset()                    { *m = Wallet{} }
func (m *Wallet) String() string            { return proto.CompactTextString(m) }
func (*Wallet) ProtoMessage()               {}
func (*Wallet) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *Wallet) GetMinFee() int64 {
	if m != nil {
		return m.MinFee
	}
	return 0
}

func (m *Wallet) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Wallet) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *Wallet) GetDbCache() int32 {
	if m != nil {
		return m.DbCache
	}
	return 0
}

func (m *Wallet) GetSignType() string {
	if m != nil {
		return m.SignType
	}
	return ""
}

func (m *Wallet) GetForceMining() bool {
	if m != nil {
		return m.ForceMining
	}
	return false
}

func (m *Wallet) GetMinerdisable() bool {
	if m != nil {
		return m.Minerdisable
	}
	return false
}

type Store struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Driver  string `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	DbPath  string `protobuf:"bytes,3,opt,name=dbPath" json:"dbPath,omitempty"`
	DbCache int32  `protobuf:"varint,4,opt,name=dbCache" json:"dbCache,omitempty"`
}

func (m *Store) Reset()                    { *m = Store{} }
func (m *Store) String() string            { return proto.CompactTextString(m) }
func (*Store) ProtoMessage()               {}
func (*Store) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *Store) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Store) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Store) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *Store) GetDbCache() int32 {
	if m != nil {
		return m.DbCache
	}
	return 0
}

type BlockChain struct {
	DefCacheSize        int64  `protobuf:"varint,1,opt,name=defCacheSize" json:"defCacheSize,omitempty"`
	MaxFetchBlockNum    int64  `protobuf:"varint,2,opt,name=maxFetchBlockNum" json:"maxFetchBlockNum,omitempty"`
	TimeoutSeconds      int64  `protobuf:"varint,3,opt,name=timeoutSeconds" json:"timeoutSeconds,omitempty"`
	BatchBlockNum       int64  `protobuf:"varint,4,opt,name=batchBlockNum" json:"batchBlockNum,omitempty"`
	Driver              string `protobuf:"bytes,5,opt,name=driver" json:"driver,omitempty"`
	DbPath              string `protobuf:"bytes,6,opt,name=dbPath" json:"dbPath,omitempty"`
	DbCache             int32  `protobuf:"varint,7,opt,name=dbCache" json:"dbCache,omitempty"`
	IsStrongConsistency bool   `protobuf:"varint,8,opt,name=isStrongConsistency" json:"isStrongConsistency,omitempty"`
	SingleMode          bool   `protobuf:"varint,9,opt,name=singleMode" json:"singleMode,omitempty"`
	Batchsync           bool   `protobuf:"varint,10,opt,name=batchsync" json:"batchsync,omitempty"`
}

func (m *BlockChain) Reset()                    { *m = BlockChain{} }
func (m *BlockChain) String() string            { return proto.CompactTextString(m) }
func (*BlockChain) ProtoMessage()               {}
func (*BlockChain) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *BlockChain) GetDefCacheSize() int64 {
	if m != nil {
		return m.DefCacheSize
	}
	return 0
}

func (m *BlockChain) GetMaxFetchBlockNum() int64 {
	if m != nil {
		return m.MaxFetchBlockNum
	}
	return 0
}

func (m *BlockChain) GetTimeoutSeconds() int64 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *BlockChain) GetBatchBlockNum() int64 {
	if m != nil {
		return m.BatchBlockNum
	}
	return 0
}

func (m *BlockChain) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *BlockChain) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *BlockChain) GetDbCache() int32 {
	if m != nil {
		return m.DbCache
	}
	return 0
}

func (m *BlockChain) GetIsStrongConsistency() bool {
	if m != nil {
		return m.IsStrongConsistency
	}
	return false
}

func (m *BlockChain) GetSingleMode() bool {
	if m != nil {
		return m.SingleMode
	}
	return false
}

func (m *BlockChain) GetBatchsync() bool {
	if m != nil {
		return m.Batchsync
	}
	return false
}

type P2P struct {
	SeedPort     int32    `protobuf:"varint,1,opt,name=seedPort" json:"seedPort,omitempty"`
	Driver       string   `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	DbPath       string   `protobuf:"bytes,3,opt,name=dbPath" json:"dbPath,omitempty"`
	DbCache      int32    `protobuf:"varint,4,opt,name=dbCache" json:"dbCache,omitempty"`
	GrpcLogFile  string   `protobuf:"bytes,5,opt,name=grpcLogFile" json:"grpcLogFile,omitempty"`
	IsSeed       bool     `protobuf:"varint,6,opt,name=isSeed" json:"isSeed,omitempty"`
	ServerStart  bool     `protobuf:"varint,7,opt,name=serverStart" json:"serverStart,omitempty"`
	Seeds        []string `protobuf:"bytes,8,rep,name=seeds" json:"seeds,omitempty"`
	Enable       bool     `protobuf:"varint,9,opt,name=enable" json:"enable,omitempty"`
	MsgCacheSize int32    `protobuf:"varint,10,opt,name=msgCacheSize" json:"msgCacheSize,omitempty"`
	Version      int32    `protobuf:"varint,11,opt,name=version" json:"version,omitempty"`
	VerMix       int32    `protobuf:"varint,12,opt,name=verMix" json:"verMix,omitempty"`
	VerMax       int32    `protobuf:"varint,13,opt,name=verMax" json:"verMax,omitempty"`
}

func (m *P2P) Reset()                    { *m = P2P{} }
func (m *P2P) String() string            { return proto.CompactTextString(m) }
func (*P2P) ProtoMessage()               {}
func (*P2P) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *P2P) GetSeedPort() int32 {
	if m != nil {
		return m.SeedPort
	}
	return 0
}

func (m *P2P) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *P2P) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *P2P) GetDbCache() int32 {
	if m != nil {
		return m.DbCache
	}
	return 0
}

func (m *P2P) GetGrpcLogFile() string {
	if m != nil {
		return m.GrpcLogFile
	}
	return ""
}

func (m *P2P) GetIsSeed() bool {
	if m != nil {
		return m.IsSeed
	}
	return false
}

func (m *P2P) GetServerStart() bool {
	if m != nil {
		return m.ServerStart
	}
	return false
}

func (m *P2P) GetSeeds() []string {
	if m != nil {
		return m.Seeds
	}
	return nil
}

func (m *P2P) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *P2P) GetMsgCacheSize() int32 {
	if m != nil {
		return m.MsgCacheSize
	}
	return 0
}

func (m *P2P) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2P) GetVerMix() int32 {
	if m != nil {
		return m.VerMix
	}
	return 0
}

func (m *P2P) GetVerMax() int32 {
	if m != nil {
		return m.VerMax
	}
	return 0
}

type Rpc struct {
	JrpcBindAddr string   `protobuf:"bytes,1,opt,name=jrpcBindAddr" json:"jrpcBindAddr,omitempty"`
	GrpcBindAddr string   `protobuf:"bytes,2,opt,name=grpcBindAddr" json:"grpcBindAddr,omitempty"`
	Whitlist     []string `protobuf:"bytes,3,rep,name=whitlist" json:"whitlist,omitempty"`
}

func (m *Rpc) Reset()                    { *m = Rpc{} }
func (m *Rpc) String() string            { return proto.CompactTextString(m) }
func (*Rpc) ProtoMessage()               {}
func (*Rpc) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *Rpc) GetJrpcBindAddr() string {
	if m != nil {
		return m.JrpcBindAddr
	}
	return ""
}

func (m *Rpc) GetGrpcBindAddr() string {
	if m != nil {
		return m.GrpcBindAddr
	}
	return ""
}

func (m *Rpc) GetWhitlist() []string {
	if m != nil {
		return m.Whitlist
	}
	return nil
}

type Exec struct {
	MinExecFee int64 `protobuf:"varint,1,opt,name=minExecFee" json:"minExecFee,omitempty"`
	IsFree     bool  `protobuf:"varint,2,opt,name=isFree" json:"isFree,omitempty"`
}

func (m *Exec) Reset()                    { *m = Exec{} }
func (m *Exec) String() string            { return proto.CompactTextString(m) }
func (*Exec) ProtoMessage()               {}
func (*Exec) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *Exec) GetMinExecFee() int64 {
	if m != nil {
		return m.MinExecFee
	}
	return 0
}

func (m *Exec) GetIsFree() bool {
	if m != nil {
		return m.IsFree
	}
	return false
}

func init() {
	proto.RegisterType((*Config)(nil), "types.Config")
	proto.RegisterType((*Log)(nil), "types.Log")
	proto.RegisterType((*MemPool)(nil), "types.MemPool")
	proto.RegisterType((*Consensus)(nil), "types.Consensus")
	proto.RegisterType((*Wallet)(nil), "types.Wallet")
	proto.RegisterType((*Store)(nil), "types.Store")
	proto.RegisterType((*BlockChain)(nil), "types.BlockChain")
	proto.RegisterType((*P2P)(nil), "types.P2P")
	proto.RegisterType((*Rpc)(nil), "types.Rpc")
	proto.RegisterType((*Exec)(nil), "types.Exec")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 1189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xdb, 0x6e, 0x1b, 0x37,
	0x13, 0x80, 0x21, 0xcb, 0x92, 0x25, 0xda, 0xce, 0x81, 0x39, 0xfc, 0x4c, 0xfe, 0x34, 0x15, 0x84,
	0xb6, 0x30, 0x8a, 0xc2, 0x48, 0xdd, 0x5e, 0x16, 0x05, 0x1c, 0x35, 0x01, 0x52, 0xd8, 0xa9, 0x40,
	0xb9, 0xe8, 0xf5, 0x9a, 0x3b, 0x5e, 0xb3, 0xde, 0x25, 0x17, 0x24, 0xa5, 0x48, 0x7d, 0xbb, 0x5e,
	0x16, 0xe8, 0x5b, 0xb4, 0x2f, 0xd0, 0x37, 0x28, 0x66, 0x96, 0x92, 0x76, 0x25, 0x1b, 0xe8, 0x45,
	0xee, 0x34, 0xdf, 0x8c, 0x86, 0x9c, 0x03, 0x67, 0x96, 0x1d, 0x28, 0x6b, 0xae, 0x74, 0x76, 0x5c,
	0x3a, 0x1b, 0x2c, 0xef, 0x84, 0x45, 0x09, 0x7e, 0xf8, 0xcf, 0x0e, 0xeb, 0x8e, 0x88, 0xf3, 0xc7,
	0xac, 0x13, 0x74, 0xc8, 0x41, 0xb4, 0x06, 0xad, 0xa3, 0xbe, 0xac, 0x04, 0xfe, 0x82, 0xb5, 0x73,
	0x9b, 0x89, 0x9d, 0x41, 0xeb, 0x68, 0xff, 0x84, 0x1d, 0xd3, 0xbf, 0x8e, 0xcf, 0x6c, 0x26, 0x11,
	0xf3, 0x21, 0xeb, 0xf8, 0x60, 0x1d, 0x88, 0x36, 0xe9, 0x0f, 0xa2, 0x7e, 0x82, 0x4c, 0x56, 0x2a,
	0x7e, 0xcc, 0xfa, 0xca, 0x1a, 0x0f, 0xc6, 0x4f, 0xbd, 0xe8, 0x90, 0xdd, 0x83, 0x68, 0x37, 0x5a,
	0x72, 0xb9, 0x36, 0xe1, 0x47, 0x6c, 0xaf, 0x80, 0x62, 0x6c, 0x6d, 0x2e, 0xba, 0x64, 0x7d, 0x2f,
	0x5a, 0x9f, 0x57, 0x54, 0x2e, 0xd5, 0xfc, 0x6b, 0xc6, 0x2e, 0x73, 0xab, 0x6e, 0x46, 0xd7, 0x89,
	0x36, 0x62, 0x8f, 0x8c, 0x1f, 0x46, 0xe3, 0xd7, 0x2b, 0x85, 0xac, 0x19, 0xf1, 0xcf, 0x59, 0xf7,
	0x43, 0x92, 0xe7, 0x10, 0x44, 0x8f, 0xcc, 0x0f, 0xa3, 0xf9, 0x2f, 0x04, 0x65, 0x54, 0x62, 0xd4,
	0xe5, 0x49, 0x29, 0xfa, 0x8d, 0xa8, 0xc7, 0x27, 0x63, 0x89, 0x18, 0xb5, 0xae, 0x54, 0x82, 0x35,
	0xb4, 0xb2, 0x54, 0x12, 0x31, 0xff, 0x94, 0xed, 0xc2, 0x1c, 0x94, 0xd8, 0x27, 0xf5, 0x7e, 0x54,
	0xbf, 0x99, 0x83, 0x92, 0xa4, 0x18, 0xfe, 0xbe, 0xc3, 0xda, 0x67, 0x36, 0xe3, 0xcf, 0x59, 0x2f,
	0xb7, 0x59, 0x0e, 0x33, 0xc8, 0x63, 0xce, 0x57, 0x32, 0x3f, 0x62, 0xf7, 0x73, 0x9b, 0x61, 0x7e,
	0x6c, 0x0e, 0x67, 0x64, 0xb2, 0x43, 0x26, 0x9b, 0x98, 0x0b, 0xb6, 0x97, 0xdb, 0xec, 0xad, 0xce,
	0xab, 0x22, 0xf4, 0xe5, 0x52, 0xe4, 0x03, 0xb6, 0x5f, 0x24, 0x73, 0xfc, 0x39, 0xd1, 0xbf, 0x81,
	0xd8, 0x1d, 0xb4, 0x8e, 0x0e, 0x65, 0x1d, 0xf1, 0x97, 0x8c, 0x15, 0xc9, 0xfc, 0x75, 0xa2, 0x6e,
	0xa6, 0x65, 0x55, 0x9b, 0x43, 0x59, 0x23, 0xfc, 0x29, 0xeb, 0x16, 0xc9, 0xfc, 0x34, 0x03, 0xaa,
	0xc4, 0xa1, 0x8c, 0x12, 0x7f, 0xc1, 0xfa, 0xb9, 0x55, 0x49, 0x7e, 0xa1, 0x0b, 0xa0, 0xbc, 0xf7,
	0xe4, 0x1a, 0x60, 0x5c, 0xca, 0x16, 0xa5, 0x03, 0xef, 0x29, 0xcb, 0x3d, 0xb9, 0x92, 0xf1, 0x44,
	0x85, 0x29, 0x76, 0x74, 0xe1, 0x3e, 0x69, 0x6b, 0x84, 0x7f, 0xc1, 0xee, 0x45, 0x69, 0x6a, 0x54,
	0xd0, 0xd6, 0x50, 0x96, 0x7b, 0x72, 0x83, 0x0e, 0x0b, 0xb6, 0x17, 0xdb, 0x81, 0x7f, 0xc6, 0x0e,
	0x4b, 0x6b, 0xf3, 0x51, 0xa2, 0xae, 0xab, 0x40, 0x31, 0x97, 0x6d, 0xd9, 0x84, 0x78, 0xa9, 0x42,
	0x9b, 0x8b, 0xf9, 0x5b, 0x00, 0xca, 0x64, 0x5b, 0xae, 0x64, 0x4c, 0xd4, 0x95, 0x75, 0x0a, 0x4e,
	0x95, 0x82, 0x32, 0x50, 0x1a, 0x7b, 0xb2, 0x8e, 0x86, 0x7f, 0xec, 0xb1, 0xfe, 0xaa, 0x59, 0x39,
	0x67, 0xbb, 0x26, 0x29, 0x96, 0x0f, 0x85, 0x7e, 0x63, 0x19, 0x32, 0x30, 0xe0, 0xb5, 0x8f, 0x85,
	0x5a, 0x8a, 0x94, 0x64, 0x6d, 0xc0, 0xf9, 0x90, 0xb8, 0xa5, 0xf3, 0x1a, 0xe1, 0x5f, 0xb2, 0x07,
	0xd1, 0x94, 0x7a, 0x96, 0x72, 0xba, 0x4b, 0x37, 0xdc, 0xe2, 0xe8, 0xeb, 0xda, 0x86, 0x1b, 0x58,
	0x9c, 0xa6, 0xa9, 0xa3, 0x82, 0xf5, 0x65, 0x8d, 0xac, 0x22, 0x39, 0xd7, 0x46, 0x9b, 0x8c, 0xaa,
	0xb6, 0x8c, 0xa4, 0x42, 0x58, 0xd2, 0xf7, 0x36, 0x85, 0x77, 0x29, 0xd5, 0xad, 0x2d, 0xa3, 0x84,
	0xf9, 0x19, 0x03, 0x38, 0xff, 0xb3, 0x3c, 0xa3, 0xa2, 0xf5, 0xe5, 0x4a, 0xc6, 0x53, 0x47, 0xb9,
	0x06, 0x13, 0xe8, 0xd4, 0x7e, 0x75, 0xea, 0x9a, 0xe0, 0xa9, 0x2e, 0xb9, 0x0a, 0xa7, 0xa5, 0x1e,
	0x5b, 0x17, 0xc4, 0x7d, 0x72, 0x5c, 0x47, 0x58, 0x23, 0xed, 0xdf, 0xc3, 0x87, 0x1f, 0xad, 0x36,
	0x78, 0xa0, 0x78, 0x40, 0x37, 0x6b, 0x42, 0xcc, 0x84, 0x83, 0x24, 0xfd, 0xc9, 0xe4, 0x8b, 0xd5,
	0x5d, 0x1e, 0xd2, 0x69, 0x5b, 0x1c, 0xcf, 0x4c, 0xd2, 0x74, 0x65, 0xc6, 0xc9, 0xac, 0x8e, 0xd0,
	0x5b, 0x0a, 0x57, 0xc9, 0x34, 0x0f, 0x13, 0x93, 0x94, 0x23, 0x3b, 0x35, 0x41, 0x3c, 0xaa, 0xf2,
	0xba, 0xc9, 0xb1, 0xed, 0x82, 0x2e, 0xc0, 0x4e, 0xc3, 0xd8, 0xd9, 0xd2, 0x7a, 0x10, 0x8f, 0x07,
	0xad, 0xa3, 0x8e, 0xdc, 0xa0, 0xfc, 0x15, 0x7b, 0xd4, 0x24, 0x3f, 0x40, 0x1e, 0x12, 0xf1, 0x84,
	0x8c, 0x6f, 0x53, 0x35, 0x3c, 0xc3, 0xcc, 0x06, 0x10, 0x4f, 0x37, 0x3c, 0x13, 0x6d, 0x78, 0x26,
	0x52, 0x79, 0xfe, 0xdf, 0x86, 0xe7, 0xb5, 0x0a, 0xe3, 0x5b, 0x63, 0x65, 0x8b, 0x42, 0x07, 0x21,
	0xc8, 0x7c, 0x8b, 0xf3, 0x6f, 0xd9, 0x93, 0x4d, 0x56, 0xf9, 0x7f, 0x46, 0x7f, 0xb8, 0x5d, 0x89,
	0x55, 0x8b, 0x8a, 0x51, 0xe5, 0xfe, 0x39, 0x59, 0x37, 0x21, 0xff, 0x8a, 0x3d, 0xf4, 0x37, 0xba,
	0xbc, 0x68, 0x58, 0xfe, 0x9f, 0xea, 0xbb, 0xad, 0x40, 0x6b, 0xe5, 0x20, 0x09, 0xf0, 0xa6, 0x28,
	0xc3, 0x82, 0x3a, 0xdb, 0x8b, 0x17, 0x95, 0xf5, 0x96, 0x82, 0x7f, 0xc7, 0x9e, 0x6d, 0xc1, 0x77,
	0x26, 0x80, 0x9b, 0x25, 0xb9, 0xf8, 0x84, 0x6e, 0x73, 0xb7, 0x01, 0x6e, 0x34, 0x0f, 0x90, 0x7a,
	0xf1, 0x72, 0xd0, 0xc6, 0x8d, 0x46, 0xc2, 0xf0, 0xcf, 0x16, 0xeb, 0x56, 0xe3, 0x9e, 0xe6, 0x9b,
	0x36, 0x38, 0x12, 0xaa, 0x99, 0x11, 0x25, 0xe4, 0xa9, 0xd3, 0x33, 0x70, 0xf1, 0x2d, 0x47, 0x89,
	0xf8, 0xe5, 0x38, 0x09, 0xd7, 0x71, 0xd4, 0x46, 0x09, 0x1f, 0x7f, 0x7a, 0x49, 0xb3, 0x86, 0x5e,
	0x6e, 0x47, 0x2e, 0x45, 0x7c, 0x56, 0x5e, 0x67, 0xe6, 0x62, 0x51, 0x42, 0x7c, 0xae, 0x2b, 0xf9,
	0x3f, 0x3c, 0xd6, 0x21, 0x3b, 0xa0, 0x41, 0x91, 0x6a, 0x9f, 0x5c, 0xe6, 0xcb, 0x51, 0xdb, 0x60,
	0x43, 0x60, 0x1d, 0x5a, 0xb7, 0xb7, 0x4e, 0xa5, 0x8f, 0x16, 0xc8, 0xf0, 0xef, 0x1d, 0xc6, 0xd6,
	0x3b, 0x15, 0x6f, 0x96, 0xc2, 0xd5, 0xe6, 0xcc, 0x6d, 0x30, 0x6c, 0x50, 0x5c, 0x36, 0x10, 0xd4,
	0x35, 0xfd, 0xf3, 0xfd, 0xb4, 0x88, 0xa3, 0x77, 0x8b, 0xd7, 0x9e, 0xc9, 0x04, 0x94, 0x35, 0xa9,
	0xa7, 0x8b, 0xb5, 0xe5, 0x06, 0xc5, 0x96, 0xbc, 0x4c, 0xea, 0x0e, 0xab, 0x49, 0xd9, 0x84, 0xb5,
	0xb0, 0x3b, 0x77, 0x84, 0xdd, 0xbd, 0x2b, 0xec, 0xbd, 0x66, 0xfd, 0x5e, 0xb1, 0x47, 0xda, 0x4f,
	0x82, 0xb3, 0x86, 0xb6, 0xae, 0xf6, 0x01, 0x8c, 0x5a, 0xc4, 0xb5, 0x76, 0x9b, 0x0a, 0x87, 0xa5,
	0xd7, 0x26, 0xcb, 0xe1, 0x1c, 0xe7, 0x5c, 0xdc, 0x70, 0x6b, 0x82, 0xbb, 0x93, 0x2e, 0xeb, 0x17,
	0x46, 0xc5, 0xe5, 0xb6, 0x06, 0xc3, 0xbf, 0x76, 0x58, 0x7b, 0x7c, 0x32, 0xa6, 0xbe, 0x01, 0x48,
	0x69, 0x9e, 0xb6, 0xe8, 0x4a, 0x2b, 0xf9, 0x23, 0x76, 0xe7, 0x80, 0xed, 0x67, 0xae, 0x54, 0x67,
	0xf1, 0xfb, 0xa1, 0x4a, 0x56, 0x1d, 0xa1, 0x4f, 0xed, 0x27, 0x00, 0x69, 0x6c, 0xcf, 0x28, 0xe1,
	0x3f, 0x3d, 0xb8, 0x19, 0xb8, 0x09, 0x6d, 0xb5, 0xaa, 0x31, 0xeb, 0x68, 0xfd, 0xf8, 0x7a, 0xb5,
	0xc7, 0x87, 0xfe, 0xc0, 0x50, 0x2f, 0x57, 0x99, 0x89, 0x12, 0x75, 0xba, 0xcf, 0xd6, 0xfd, 0xc4,
	0xe8, 0xa2, 0x0d, 0x86, 0x71, 0xcc, 0xc0, 0x79, 0xfc, 0x28, 0xd8, 0xaf, 0xe2, 0x88, 0x22, 0x7a,
	0x9d, 0x81, 0x3b, 0xd7, 0x73, 0x71, 0x40, 0x8a, 0x28, 0x2d, 0x79, 0x32, 0x17, 0x87, 0x6b, 0x9e,
	0xcc, 0x87, 0x9a, 0xb5, 0x65, 0xa9, 0xf0, 0xd0, 0x5f, 0x5d, 0xa9, 0x5e, 0x6b, 0x93, 0xd2, 0x66,
	0xab, 0x5e, 0x4e, 0x83, 0xa1, 0x4d, 0x56, 0xb7, 0xa9, 0x52, 0xde, 0x60, 0x58, 0xac, 0x0f, 0xd7,
	0x3a, 0xe4, 0xda, 0xe3, 0x7e, 0xc7, 0x68, 0x57, 0xf2, 0xf0, 0x7b, 0xb6, 0x8b, 0x9f, 0x7e, 0xf1,
	0x2b, 0x00, 0x7f, 0xae, 0xc7, 0x4d, 0x8d, 0x54, 0x89, 0x7e, 0xeb, 0xe2, 0xd7, 0x09, 0x25, 0x1a,
	0xa5, 0xcb, 0x2e, 0x7d, 0xae, 0x7f, 0xf3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x21, 0x25, 0xc5,
	0xfc, 0xbe, 0x0b, 0x00, 0x00,
}
