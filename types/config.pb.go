// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Config struct {
	Title      string      `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Log        *Log        `protobuf:"bytes,2,opt,name=log" json:"log,omitempty"`
	Store      *Store      `protobuf:"bytes,3,opt,name=store" json:"store,omitempty"`
	Consensus  *Consensus  `protobuf:"bytes,5,opt,name=consensus" json:"consensus,omitempty"`
	MemPool    *MemPool    `protobuf:"bytes,6,opt,name=memPool" json:"memPool,omitempty"`
	BlockChain *BlockChain `protobuf:"bytes,7,opt,name=blockChain" json:"blockChain,omitempty"`
	Wallet     *Wallet     `protobuf:"bytes,8,opt,name=wallet" json:"wallet,omitempty"`
	P2P        *P2P        `protobuf:"bytes,9,opt,name=p2p" json:"p2p,omitempty"`
	Rpc        *Rpc        `protobuf:"bytes,10,opt,name=rpc" json:"rpc,omitempty"`
	Exec       *Exec       `protobuf:"bytes,11,opt,name=exec" json:"exec,omitempty"`
	TestNet    bool        `protobuf:"varint,12,opt,name=testNet" json:"testNet,omitempty"`
	FixTime    bool        `protobuf:"varint,13,opt,name=fixTime" json:"fixTime,omitempty"`
	Pprof      *Pprof      `protobuf:"bytes,14,opt,name=pprof" json:"pprof,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Config) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Config) GetLog() *Log {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *Config) GetStore() *Store {
	if m != nil {
		return m.Store
	}
	return nil
}

func (m *Config) GetConsensus() *Consensus {
	if m != nil {
		return m.Consensus
	}
	return nil
}

func (m *Config) GetMemPool() *MemPool {
	if m != nil {
		return m.MemPool
	}
	return nil
}

func (m *Config) GetBlockChain() *BlockChain {
	if m != nil {
		return m.BlockChain
	}
	return nil
}

func (m *Config) GetWallet() *Wallet {
	if m != nil {
		return m.Wallet
	}
	return nil
}

func (m *Config) GetP2P() *P2P {
	if m != nil {
		return m.P2P
	}
	return nil
}

func (m *Config) GetRpc() *Rpc {
	if m != nil {
		return m.Rpc
	}
	return nil
}

func (m *Config) GetExec() *Exec {
	if m != nil {
		return m.Exec
	}
	return nil
}

func (m *Config) GetTestNet() bool {
	if m != nil {
		return m.TestNet
	}
	return false
}

func (m *Config) GetFixTime() bool {
	if m != nil {
		return m.FixTime
	}
	return false
}

func (m *Config) GetPprof() *Pprof {
	if m != nil {
		return m.Pprof
	}
	return nil
}

type Log struct {
	// 日志级别，支持debug(dbug)/info/warn/error(eror)/crit
	Loglevel        string `protobuf:"bytes,1,opt,name=loglevel" json:"loglevel,omitempty"`
	LogConsoleLevel string `protobuf:"bytes,2,opt,name=logConsoleLevel" json:"logConsoleLevel,omitempty"`
	// 日志文件名，可带目录，所有生成的日志文件都放到此目录下
	LogFile string `protobuf:"bytes,3,opt,name=logFile" json:"logFile,omitempty"`
	// 单个日志文件的最大值（单位：兆）
	MaxFileSize uint32 `protobuf:"varint,4,opt,name=maxFileSize" json:"maxFileSize,omitempty"`
	// 最多保存的历史日志文件个数
	MaxBackups uint32 `protobuf:"varint,5,opt,name=maxBackups" json:"maxBackups,omitempty"`
	// 最多保存的历史日志消息（单位：天）
	MaxAge uint32 `protobuf:"varint,6,opt,name=maxAge" json:"maxAge,omitempty"`
	// 日志文件名是否使用本地事件（否则使用UTC时间）
	LocalTime bool `protobuf:"varint,7,opt,name=localTime" json:"localTime,omitempty"`
	// 历史日志文件是否压缩（压缩格式为gz）
	Compress bool `protobuf:"varint,8,opt,name=compress" json:"compress,omitempty"`
	// 是否打印调用源文件和行号
	CallerFile bool `protobuf:"varint,9,opt,name=callerFile" json:"callerFile,omitempty"`
	// 是否打印调用方法
	CallerFunction bool `protobuf:"varint,10,opt,name=callerFunction" json:"callerFunction,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Log) GetLoglevel() string {
	if m != nil {
		return m.Loglevel
	}
	return ""
}

func (m *Log) GetLogConsoleLevel() string {
	if m != nil {
		return m.LogConsoleLevel
	}
	return ""
}

func (m *Log) GetLogFile() string {
	if m != nil {
		return m.LogFile
	}
	return ""
}

func (m *Log) GetMaxFileSize() uint32 {
	if m != nil {
		return m.MaxFileSize
	}
	return 0
}

func (m *Log) GetMaxBackups() uint32 {
	if m != nil {
		return m.MaxBackups
	}
	return 0
}

func (m *Log) GetMaxAge() uint32 {
	if m != nil {
		return m.MaxAge
	}
	return 0
}

func (m *Log) GetLocalTime() bool {
	if m != nil {
		return m.LocalTime
	}
	return false
}

func (m *Log) GetCompress() bool {
	if m != nil {
		return m.Compress
	}
	return false
}

func (m *Log) GetCallerFile() bool {
	if m != nil {
		return m.CallerFile
	}
	return false
}

func (m *Log) GetCallerFunction() bool {
	if m != nil {
		return m.CallerFunction
	}
	return false
}

type MemPool struct {
	PoolCacheSize      int64 `protobuf:"varint,1,opt,name=poolCacheSize" json:"poolCacheSize,omitempty"`
	MinTxFee           int64 `protobuf:"varint,2,opt,name=minTxFee" json:"minTxFee,omitempty"`
	ForceAccept        bool  `protobuf:"varint,3,opt,name=forceAccept" json:"forceAccept,omitempty"`
	MaxTxNumPerAccount int64 `protobuf:"varint,4,opt,name=maxTxNumPerAccount" json:"maxTxNumPerAccount,omitempty"`
}

func (m *MemPool) Reset()                    { *m = MemPool{} }
func (m *MemPool) String() string            { return proto.CompactTextString(m) }
func (*MemPool) ProtoMessage()               {}
func (*MemPool) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *MemPool) GetPoolCacheSize() int64 {
	if m != nil {
		return m.PoolCacheSize
	}
	return 0
}

func (m *MemPool) GetMinTxFee() int64 {
	if m != nil {
		return m.MinTxFee
	}
	return 0
}

func (m *MemPool) GetForceAccept() bool {
	if m != nil {
		return m.ForceAccept
	}
	return false
}

func (m *MemPool) GetMaxTxNumPerAccount() int64 {
	if m != nil {
		return m.MaxTxNumPerAccount
	}
	return 0
}

type Consensus struct {
	Name                 string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	GenesisBlockTime     int64  `protobuf:"varint,2,opt,name=genesisBlockTime" json:"genesisBlockTime,omitempty"`
	Minerstart           bool   `protobuf:"varint,3,opt,name=minerstart" json:"minerstart,omitempty"`
	Genesis              string `protobuf:"bytes,4,opt,name=genesis" json:"genesis,omitempty"`
	HotkeyAddr           string `protobuf:"bytes,5,opt,name=hotkeyAddr" json:"hotkeyAddr,omitempty"`
	ForceMining          bool   `protobuf:"varint,6,opt,name=forceMining" json:"forceMining,omitempty"`
	WriteBlockSeconds    int64  `protobuf:"varint,20,opt,name=writeBlockSeconds" json:"writeBlockSeconds,omitempty"`
	ParaRemoteGrpcClient string `protobuf:"bytes,22,opt,name=paraRemoteGrpcClient" json:"paraRemoteGrpcClient,omitempty"`
	StartHeight          int64  `protobuf:"varint,23,opt,name=startHeight" json:"startHeight,omitempty"`
	EmptyBlockInterval   int64  `protobuf:"varint,24,opt,name=emptyBlockInterval" json:"emptyBlockInterval,omitempty"`
	AuthAccount          string `protobuf:"bytes,25,opt,name=authAccount" json:"authAccount,omitempty"`
	WaitBlocks4CommitMsg int32  `protobuf:"varint,26,opt,name=waitBlocks4CommitMsg" json:"waitBlocks4CommitMsg,omitempty"`
}

func (m *Consensus) Reset()                    { *m = Consensus{} }
func (m *Consensus) String() string            { return proto.CompactTextString(m) }
func (*Consensus) ProtoMessage()               {}
func (*Consensus) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Consensus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Consensus) GetGenesisBlockTime() int64 {
	if m != nil {
		return m.GenesisBlockTime
	}
	return 0
}

func (m *Consensus) GetMinerstart() bool {
	if m != nil {
		return m.Minerstart
	}
	return false
}

func (m *Consensus) GetGenesis() string {
	if m != nil {
		return m.Genesis
	}
	return ""
}

func (m *Consensus) GetHotkeyAddr() string {
	if m != nil {
		return m.HotkeyAddr
	}
	return ""
}

func (m *Consensus) GetForceMining() bool {
	if m != nil {
		return m.ForceMining
	}
	return false
}

func (m *Consensus) GetWriteBlockSeconds() int64 {
	if m != nil {
		return m.WriteBlockSeconds
	}
	return 0
}

func (m *Consensus) GetParaRemoteGrpcClient() string {
	if m != nil {
		return m.ParaRemoteGrpcClient
	}
	return ""
}

func (m *Consensus) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *Consensus) GetEmptyBlockInterval() int64 {
	if m != nil {
		return m.EmptyBlockInterval
	}
	return 0
}

func (m *Consensus) GetAuthAccount() string {
	if m != nil {
		return m.AuthAccount
	}
	return ""
}

func (m *Consensus) GetWaitBlocks4CommitMsg() int32 {
	if m != nil {
		return m.WaitBlocks4CommitMsg
	}
	return 0
}

type Wallet struct {
	MinFee   int64  `protobuf:"varint,1,opt,name=minFee" json:"minFee,omitempty"`
	Driver   string `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	DbPath   string `protobuf:"bytes,3,opt,name=dbPath" json:"dbPath,omitempty"`
	DbCache  int32  `protobuf:"varint,4,opt,name=dbCache" json:"dbCache,omitempty"`
	SignType string `protobuf:"bytes,5,opt,name=signType" json:"signType,omitempty"`
}

func (m *Wallet) Reset()                    { *m = Wallet{} }
func (m *Wallet) String() string            { return proto.CompactTextString(m) }
func (*Wallet) ProtoMessage()               {}
func (*Wallet) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *Wallet) GetMinFee() int64 {
	if m != nil {
		return m.MinFee
	}
	return 0
}

func (m *Wallet) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Wallet) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *Wallet) GetDbCache() int32 {
	if m != nil {
		return m.DbCache
	}
	return 0
}

func (m *Wallet) GetSignType() string {
	if m != nil {
		return m.SignType
	}
	return ""
}

type Store struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Driver  string `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	DbPath  string `protobuf:"bytes,3,opt,name=dbPath" json:"dbPath,omitempty"`
	DbCache int32  `protobuf:"varint,4,opt,name=dbCache" json:"dbCache,omitempty"`
}

func (m *Store) Reset()                    { *m = Store{} }
func (m *Store) String() string            { return proto.CompactTextString(m) }
func (*Store) ProtoMessage()               {}
func (*Store) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *Store) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Store) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Store) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *Store) GetDbCache() int32 {
	if m != nil {
		return m.DbCache
	}
	return 0
}

type BlockChain struct {
	DefCacheSize          int64  `protobuf:"varint,1,opt,name=defCacheSize" json:"defCacheSize,omitempty"`
	MaxFetchBlockNum      int64  `protobuf:"varint,2,opt,name=maxFetchBlockNum" json:"maxFetchBlockNum,omitempty"`
	TimeoutSeconds        int64  `protobuf:"varint,3,opt,name=timeoutSeconds" json:"timeoutSeconds,omitempty"`
	BatchBlockNum         int64  `protobuf:"varint,4,opt,name=batchBlockNum" json:"batchBlockNum,omitempty"`
	Driver                string `protobuf:"bytes,5,opt,name=driver" json:"driver,omitempty"`
	DbPath                string `protobuf:"bytes,6,opt,name=dbPath" json:"dbPath,omitempty"`
	DbCache               int32  `protobuf:"varint,7,opt,name=dbCache" json:"dbCache,omitempty"`
	IsStrongConsistency   bool   `protobuf:"varint,8,opt,name=isStrongConsistency" json:"isStrongConsistency,omitempty"`
	SingleMode            bool   `protobuf:"varint,9,opt,name=singleMode" json:"singleMode,omitempty"`
	Batchsync             bool   `protobuf:"varint,10,opt,name=batchsync" json:"batchsync,omitempty"`
	IsRecordBlockSequence bool   `protobuf:"varint,11,opt,name=isRecordBlockSequence" json:"isRecordBlockSequence,omitempty"`
	IsParaChain           bool   `protobuf:"varint,12,opt,name=isParaChain" json:"isParaChain,omitempty"`
	EnableTxQuickIndex    bool   `protobuf:"varint,13,opt,name=enableTxQuickIndex" json:"enableTxQuickIndex,omitempty"`
}

func (m *BlockChain) Reset()                    { *m = BlockChain{} }
func (m *BlockChain) String() string            { return proto.CompactTextString(m) }
func (*BlockChain) ProtoMessage()               {}
func (*BlockChain) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *BlockChain) GetDefCacheSize() int64 {
	if m != nil {
		return m.DefCacheSize
	}
	return 0
}

func (m *BlockChain) GetMaxFetchBlockNum() int64 {
	if m != nil {
		return m.MaxFetchBlockNum
	}
	return 0
}

func (m *BlockChain) GetTimeoutSeconds() int64 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *BlockChain) GetBatchBlockNum() int64 {
	if m != nil {
		return m.BatchBlockNum
	}
	return 0
}

func (m *BlockChain) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *BlockChain) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *BlockChain) GetDbCache() int32 {
	if m != nil {
		return m.DbCache
	}
	return 0
}

func (m *BlockChain) GetIsStrongConsistency() bool {
	if m != nil {
		return m.IsStrongConsistency
	}
	return false
}

func (m *BlockChain) GetSingleMode() bool {
	if m != nil {
		return m.SingleMode
	}
	return false
}

func (m *BlockChain) GetBatchsync() bool {
	if m != nil {
		return m.Batchsync
	}
	return false
}

func (m *BlockChain) GetIsRecordBlockSequence() bool {
	if m != nil {
		return m.IsRecordBlockSequence
	}
	return false
}

func (m *BlockChain) GetIsParaChain() bool {
	if m != nil {
		return m.IsParaChain
	}
	return false
}

func (m *BlockChain) GetEnableTxQuickIndex() bool {
	if m != nil {
		return m.EnableTxQuickIndex
	}
	return false
}

type P2P struct {
	SeedPort        int32    `protobuf:"varint,1,opt,name=seedPort" json:"seedPort,omitempty"`
	Driver          string   `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	DbPath          string   `protobuf:"bytes,3,opt,name=dbPath" json:"dbPath,omitempty"`
	DbCache         int32    `protobuf:"varint,4,opt,name=dbCache" json:"dbCache,omitempty"`
	GrpcLogFile     string   `protobuf:"bytes,5,opt,name=grpcLogFile" json:"grpcLogFile,omitempty"`
	IsSeed          bool     `protobuf:"varint,6,opt,name=isSeed" json:"isSeed,omitempty"`
	ServerStart     bool     `protobuf:"varint,7,opt,name=serverStart" json:"serverStart,omitempty"`
	Seeds           []string `protobuf:"bytes,8,rep,name=seeds" json:"seeds,omitempty"`
	Enable          bool     `protobuf:"varint,9,opt,name=enable" json:"enable,omitempty"`
	MsgCacheSize    int32    `protobuf:"varint,10,opt,name=msgCacheSize" json:"msgCacheSize,omitempty"`
	Version         int32    `protobuf:"varint,11,opt,name=version" json:"version,omitempty"`
	VerMix          int32    `protobuf:"varint,12,opt,name=verMix" json:"verMix,omitempty"`
	VerMax          int32    `protobuf:"varint,13,opt,name=verMax" json:"verMax,omitempty"`
	InnerSeedEnable bool     `protobuf:"varint,14,opt,name=innerSeedEnable" json:"innerSeedEnable,omitempty"`
	InnerBounds     int32    `protobuf:"varint,15,opt,name=innerBounds" json:"innerBounds,omitempty"`
	UseGithub       bool     `protobuf:"varint,16,opt,name=useGithub" json:"useGithub,omitempty"`
}

func (m *P2P) Reset()                    { *m = P2P{} }
func (m *P2P) String() string            { return proto.CompactTextString(m) }
func (*P2P) ProtoMessage()               {}
func (*P2P) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *P2P) GetSeedPort() int32 {
	if m != nil {
		return m.SeedPort
	}
	return 0
}

func (m *P2P) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *P2P) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *P2P) GetDbCache() int32 {
	if m != nil {
		return m.DbCache
	}
	return 0
}

func (m *P2P) GetGrpcLogFile() string {
	if m != nil {
		return m.GrpcLogFile
	}
	return ""
}

func (m *P2P) GetIsSeed() bool {
	if m != nil {
		return m.IsSeed
	}
	return false
}

func (m *P2P) GetServerStart() bool {
	if m != nil {
		return m.ServerStart
	}
	return false
}

func (m *P2P) GetSeeds() []string {
	if m != nil {
		return m.Seeds
	}
	return nil
}

func (m *P2P) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *P2P) GetMsgCacheSize() int32 {
	if m != nil {
		return m.MsgCacheSize
	}
	return 0
}

func (m *P2P) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2P) GetVerMix() int32 {
	if m != nil {
		return m.VerMix
	}
	return 0
}

func (m *P2P) GetVerMax() int32 {
	if m != nil {
		return m.VerMax
	}
	return 0
}

func (m *P2P) GetInnerSeedEnable() bool {
	if m != nil {
		return m.InnerSeedEnable
	}
	return false
}

func (m *P2P) GetInnerBounds() int32 {
	if m != nil {
		return m.InnerBounds
	}
	return 0
}

func (m *P2P) GetUseGithub() bool {
	if m != nil {
		return m.UseGithub
	}
	return false
}

type Rpc struct {
	JrpcBindAddr      string   `protobuf:"bytes,1,opt,name=jrpcBindAddr" json:"jrpcBindAddr,omitempty"`
	GrpcBindAddr      string   `protobuf:"bytes,2,opt,name=grpcBindAddr" json:"grpcBindAddr,omitempty"`
	Whitlist          []string `protobuf:"bytes,3,rep,name=whitlist" json:"whitlist,omitempty"`
	Whitelist         []string `protobuf:"bytes,4,rep,name=whitelist" json:"whitelist,omitempty"`
	JrpcFuncWhitelist []string `protobuf:"bytes,5,rep,name=jrpcFuncWhitelist" json:"jrpcFuncWhitelist,omitempty"`
	GrpcFuncWhitelist []string `protobuf:"bytes,6,rep,name=grpcFuncWhitelist" json:"grpcFuncWhitelist,omitempty"`
	JrpcFuncBlacklist []string `protobuf:"bytes,7,rep,name=jrpcFuncBlacklist" json:"jrpcFuncBlacklist,omitempty"`
	GrpcFuncBlacklist []string `protobuf:"bytes,8,rep,name=grpcFuncBlacklist" json:"grpcFuncBlacklist,omitempty"`
	MainnetJrpcAddr   string   `protobuf:"bytes,9,opt,name=mainnetJrpcAddr" json:"mainnetJrpcAddr,omitempty"`
}

func (m *Rpc) Reset()                    { *m = Rpc{} }
func (m *Rpc) String() string            { return proto.CompactTextString(m) }
func (*Rpc) ProtoMessage()               {}
func (*Rpc) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *Rpc) GetJrpcBindAddr() string {
	if m != nil {
		return m.JrpcBindAddr
	}
	return ""
}

func (m *Rpc) GetGrpcBindAddr() string {
	if m != nil {
		return m.GrpcBindAddr
	}
	return ""
}

func (m *Rpc) GetWhitlist() []string {
	if m != nil {
		return m.Whitlist
	}
	return nil
}

func (m *Rpc) GetWhitelist() []string {
	if m != nil {
		return m.Whitelist
	}
	return nil
}

func (m *Rpc) GetJrpcFuncWhitelist() []string {
	if m != nil {
		return m.JrpcFuncWhitelist
	}
	return nil
}

func (m *Rpc) GetGrpcFuncWhitelist() []string {
	if m != nil {
		return m.GrpcFuncWhitelist
	}
	return nil
}

func (m *Rpc) GetJrpcFuncBlacklist() []string {
	if m != nil {
		return m.JrpcFuncBlacklist
	}
	return nil
}

func (m *Rpc) GetGrpcFuncBlacklist() []string {
	if m != nil {
		return m.GrpcFuncBlacklist
	}
	return nil
}

func (m *Rpc) GetMainnetJrpcAddr() string {
	if m != nil {
		return m.MainnetJrpcAddr
	}
	return ""
}

type Exec struct {
	MinExecFee      int64    `protobuf:"varint,1,opt,name=minExecFee" json:"minExecFee,omitempty"`
	IsFree          bool     `protobuf:"varint,2,opt,name=isFree" json:"isFree,omitempty"`
	EnableStat      bool     `protobuf:"varint,3,opt,name=enableStat" json:"enableStat,omitempty"`
	EnableMVCC      bool     `protobuf:"varint,4,opt,name=enableMVCC" json:"enableMVCC,omitempty"`
	Alias           []string `protobuf:"bytes,5,rep,name=alias" json:"alias,omitempty"`
	SaveTokenTxList bool     `protobuf:"varint,6,opt,name=saveTokenTxList" json:"saveTokenTxList,omitempty"`
}

func (m *Exec) Reset()                    { *m = Exec{} }
func (m *Exec) String() string            { return proto.CompactTextString(m) }
func (*Exec) ProtoMessage()               {}
func (*Exec) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *Exec) GetMinExecFee() int64 {
	if m != nil {
		return m.MinExecFee
	}
	return 0
}

func (m *Exec) GetIsFree() bool {
	if m != nil {
		return m.IsFree
	}
	return false
}

func (m *Exec) GetEnableStat() bool {
	if m != nil {
		return m.EnableStat
	}
	return false
}

func (m *Exec) GetEnableMVCC() bool {
	if m != nil {
		return m.EnableMVCC
	}
	return false
}

func (m *Exec) GetAlias() []string {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *Exec) GetSaveTokenTxList() bool {
	if m != nil {
		return m.SaveTokenTxList
	}
	return false
}

type Pprof struct {
	ListenAddr string `protobuf:"bytes,1,opt,name=listenAddr" json:"listenAddr,omitempty"`
}

func (m *Pprof) Reset()                    { *m = Pprof{} }
func (m *Pprof) String() string            { return proto.CompactTextString(m) }
func (*Pprof) ProtoMessage()               {}
func (*Pprof) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *Pprof) GetListenAddr() string {
	if m != nil {
		return m.ListenAddr
	}
	return ""
}

func init() {
	proto.RegisterType((*Config)(nil), "types.Config")
	proto.RegisterType((*Log)(nil), "types.Log")
	proto.RegisterType((*MemPool)(nil), "types.MemPool")
	proto.RegisterType((*Consensus)(nil), "types.Consensus")
	proto.RegisterType((*Wallet)(nil), "types.Wallet")
	proto.RegisterType((*Store)(nil), "types.Store")
	proto.RegisterType((*BlockChain)(nil), "types.BlockChain")
	proto.RegisterType((*P2P)(nil), "types.P2P")
	proto.RegisterType((*Rpc)(nil), "types.Rpc")
	proto.RegisterType((*Exec)(nil), "types.Exec")
	proto.RegisterType((*Pprof)(nil), "types.Pprof")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 1342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdd, 0x6e, 0x1b, 0xc5,
	0x17, 0x97, 0xe3, 0xd8, 0xb1, 0x27, 0x1f, 0x6d, 0xf7, 0xdf, 0x7f, 0x59, 0xaa, 0x0a, 0x22, 0xab,
	0x80, 0x85, 0x50, 0x80, 0xa4, 0x2f, 0x90, 0x58, 0x6d, 0x01, 0x25, 0x95, 0x99, 0x44, 0x54, 0xe2,
	0x6e, 0x3c, 0x3e, 0x59, 0x0f, 0xd9, 0x9d, 0x59, 0x66, 0xc6, 0x8e, 0xc3, 0x03, 0xf0, 0x16, 0xbc,
	0x0a, 0x12, 0x97, 0x5c, 0x70, 0xc1, 0x63, 0x20, 0xf1, 0x10, 0xe8, 0x9c, 0x19, 0xaf, 0xd7, 0x8e,
	0x7b, 0xd7, 0xab, 0xf8, 0xfc, 0x7e, 0x67, 0x67, 0xce, 0xf7, 0x99, 0xb0, 0x3d, 0x69, 0xf4, 0xb5,
	0xca, 0x8e, 0x4a, 0x6b, 0xbc, 0x49, 0x5a, 0xfe, 0xae, 0x04, 0xd7, 0xfb, 0xb3, 0xc9, 0xda, 0x03,
	0xc2, 0x93, 0xc7, 0xac, 0xe5, 0x95, 0xcf, 0x21, 0x6d, 0x1c, 0x36, 0xfa, 0x5d, 0x1e, 0x84, 0xe4,
	0x19, 0x6b, 0xe6, 0x26, 0x4b, 0xb7, 0x0e, 0x1b, 0xfd, 0xdd, 0x63, 0x76, 0x44, 0x5f, 0x1d, 0x9d,
	0x9b, 0x8c, 0x23, 0x9c, 0xf4, 0x58, 0xcb, 0x79, 0x63, 0x21, 0x6d, 0x12, 0xbf, 0x17, 0xf9, 0x4b,
	0xc4, 0x78, 0xa0, 0x92, 0x23, 0xd6, 0x95, 0x46, 0x3b, 0xd0, 0x6e, 0xea, 0xd2, 0x16, 0xe9, 0x3d,
	0x8c, 0x7a, 0x83, 0x05, 0xce, 0x97, 0x2a, 0x49, 0x9f, 0xed, 0x14, 0x50, 0x0c, 0x8d, 0xc9, 0xd3,
	0x36, 0x69, 0x1f, 0x44, 0xed, 0x8b, 0x80, 0xf2, 0x05, 0x9d, 0x7c, 0xcd, 0xd8, 0x28, 0x37, 0xf2,
	0x66, 0x30, 0x11, 0x4a, 0xa7, 0x3b, 0xa4, 0xfc, 0x28, 0x2a, 0x9f, 0x55, 0x04, 0xaf, 0x29, 0x25,
	0x9f, 0xb0, 0xf6, 0xad, 0xc8, 0x73, 0xf0, 0x69, 0x87, 0xd4, 0xf7, 0xa3, 0xfa, 0x5b, 0x02, 0x79,
	0x24, 0xd1, 0xeb, 0xf2, 0xb8, 0x4c, 0xbb, 0x2b, 0x5e, 0x0f, 0x8f, 0x87, 0x1c, 0x61, 0x64, 0x6d,
	0x29, 0x53, 0xb6, 0xc2, 0xf2, 0x52, 0x72, 0x84, 0x93, 0x8f, 0xd9, 0x36, 0xcc, 0x41, 0xa6, 0xbb,
	0x44, 0xef, 0x46, 0xfa, 0xe5, 0x1c, 0x24, 0x27, 0x22, 0x49, 0xd9, 0x8e, 0x07, 0xe7, 0xdf, 0x80,
	0x4f, 0xf7, 0x0e, 0x1b, 0xfd, 0x0e, 0x5f, 0x88, 0xc8, 0x5c, 0xab, 0xf9, 0x95, 0x2a, 0x20, 0xdd,
	0x0f, 0x4c, 0x14, 0x31, 0xd0, 0x65, 0x69, 0xcd, 0x75, 0x7a, 0xb0, 0x12, 0xe8, 0x21, 0x62, 0x3c,
	0x50, 0xbd, 0x3f, 0xb6, 0x58, 0xf3, 0xdc, 0x64, 0xc9, 0x53, 0xd6, 0xc9, 0x4d, 0x96, 0xc3, 0x0c,
	0xf2, 0x98, 0xcb, 0x4a, 0x4e, 0xfa, 0xec, 0x41, 0x6e, 0x32, 0x8c, 0xbb, 0xc9, 0xe1, 0x9c, 0x54,
	0xb6, 0x48, 0x65, 0x1d, 0x46, 0x5b, 0x72, 0x93, 0xbd, 0x52, 0x79, 0x48, 0x6e, 0x97, 0x2f, 0xc4,
	0xe4, 0x90, 0xed, 0x16, 0x62, 0x8e, 0x3f, 0x2f, 0xd5, 0x2f, 0x90, 0x6e, 0x1f, 0x36, 0xfa, 0xfb,
	0xbc, 0x0e, 0x25, 0x1f, 0x31, 0x56, 0x88, 0xf9, 0x99, 0x90, 0x37, 0xd3, 0x32, 0xe4, 0x7c, 0x9f,
	0xd7, 0x90, 0xe4, 0x09, 0x6b, 0x17, 0x62, 0x7e, 0x9a, 0x01, 0x65, 0x78, 0x9f, 0x47, 0x29, 0x79,
	0xc6, 0xba, 0xb9, 0x91, 0x22, 0xa7, 0x08, 0xec, 0x50, 0x04, 0x96, 0x00, 0xfa, 0x25, 0x4d, 0x51,
	0x5a, 0x70, 0x8e, 0xb2, 0xd7, 0xe1, 0x95, 0x8c, 0x37, 0x4a, 0x4c, 0x9d, 0x25, 0x83, 0xbb, 0xc4,
	0xd6, 0x90, 0xe4, 0x53, 0x76, 0x10, 0xa5, 0xa9, 0x96, 0x5e, 0x19, 0x4d, 0xd9, 0xeb, 0xf0, 0x35,
	0xb4, 0xf7, 0x5b, 0x83, 0xed, 0xc4, 0x3a, 0x4b, 0x9e, 0xb3, 0xfd, 0xd2, 0x98, 0x7c, 0x20, 0xe4,
	0x24, 0x78, 0x8a, 0xc1, 0x6c, 0xf2, 0x55, 0x10, 0xad, 0x2a, 0x94, 0xbe, 0x9a, 0xbf, 0x02, 0xa0,
	0x50, 0x36, 0x79, 0x25, 0x63, 0xa4, 0xae, 0x8d, 0x95, 0x70, 0x2a, 0x25, 0x94, 0x9e, 0xe2, 0xd8,
	0xe1, 0x75, 0x28, 0x39, 0x62, 0x49, 0x21, 0xe6, 0x57, 0xf3, 0x37, 0xd3, 0x62, 0x08, 0xf6, 0x54,
	0x4a, 0x33, 0xd5, 0x9e, 0x42, 0xda, 0xe4, 0x1b, 0x98, 0xde, 0xdf, 0x4d, 0xd6, 0xad, 0xba, 0x26,
	0x49, 0xd8, 0xb6, 0x16, 0xc5, 0xa2, 0x63, 0xe9, 0x77, 0xf2, 0x39, 0x7b, 0x98, 0x81, 0x06, 0xa7,
	0x1c, 0xb5, 0x00, 0x85, 0x32, 0xd8, 0x75, 0x0f, 0xa7, 0x3c, 0x29, 0x0d, 0xd6, 0x79, 0x61, 0x17,
	0xe6, 0xd5, 0x10, 0xac, 0x81, 0xf8, 0x0d, 0x99, 0xd4, 0xe5, 0x0b, 0x11, 0xbf, 0x9c, 0x18, 0x7f,
	0x03, 0x77, 0xa7, 0xe3, 0xb1, 0xa5, 0x0c, 0x77, 0x79, 0x0d, 0xa9, 0x3c, 0xbf, 0x50, 0x5a, 0xe9,
	0x8c, 0xd2, 0xbc, 0xf0, 0x3c, 0x40, 0xc9, 0x17, 0xec, 0xd1, 0xad, 0x55, 0x1e, 0xc8, 0x9a, 0x4b,
	0x90, 0x46, 0x8f, 0x5d, 0xfa, 0x98, 0x0c, 0xbd, 0x4f, 0x24, 0xc7, 0xec, 0x71, 0x29, 0xac, 0xe0,
	0x50, 0x18, 0x0f, 0xaf, 0x6d, 0x29, 0x07, 0xb9, 0x02, 0xed, 0xd3, 0x27, 0x74, 0xf3, 0x46, 0x0e,
	0x6d, 0x20, 0x37, 0xbe, 0x01, 0x95, 0x4d, 0x7c, 0xfa, 0x01, 0x9d, 0x5d, 0x87, 0x30, 0xfa, 0x50,
	0x94, 0xfe, 0x8e, 0xae, 0xfa, 0x56, 0x7b, 0xb0, 0x33, 0x91, 0xa7, 0x69, 0x88, 0xfe, 0x7d, 0x06,
	0x4f, 0x14, 0x53, 0x3f, 0x59, 0xa4, 0xe9, 0x43, 0xba, 0xbc, 0x0e, 0xa1, 0x9d, 0xb7, 0x42, 0x79,
	0xfa, 0xcc, 0xbd, 0x18, 0x98, 0xa2, 0x50, 0xfe, 0xc2, 0x65, 0xe9, 0xd3, 0xc3, 0x46, 0xbf, 0xc5,
	0x37, 0x72, 0xbd, 0x5f, 0x1b, 0xac, 0x1d, 0xe6, 0x0f, 0x35, 0x86, 0xd2, 0x58, 0x4a, 0xa1, 0xd6,
	0xa2, 0x84, 0xf8, 0xd8, 0xaa, 0x19, 0xd8, 0xd8, 0xad, 0x51, 0x22, 0x7c, 0x34, 0x14, 0x7e, 0x12,
	0x7b, 0x34, 0x4a, 0x98, 0xb8, 0xf1, 0x88, 0x6a, 0x94, 0x12, 0xd7, 0xe2, 0x0b, 0x11, 0xcb, 0xd5,
	0xa9, 0x4c, 0x5f, 0xdd, 0x95, 0x10, 0xd3, 0x56, 0xc9, 0x3d, 0x60, 0x2d, 0x9a, 0xdc, 0x1b, 0xeb,
	0xea, 0xbd, 0x99, 0xd0, 0xfb, 0xb7, 0xc9, 0xd8, 0x72, 0x3c, 0x27, 0x3d, 0xb6, 0x37, 0x86, 0xeb,
	0xf5, 0x2e, 0x5b, 0xc1, 0xb0, 0xa8, 0x71, 0xbe, 0x80, 0x97, 0x13, 0xfa, 0xf2, 0xcd, 0xb4, 0x58,
	0x14, 0xf5, 0x3a, 0x8e, 0xad, 0xee, 0x55, 0x01, 0x66, 0xea, 0x17, 0x55, 0xd5, 0x24, 0xcd, 0x35,
	0x14, 0xdb, 0x7b, 0x24, 0xea, 0x07, 0x86, 0xae, 0x5b, 0x05, 0x6b, 0x6e, 0xb7, 0xde, 0xe1, 0x76,
	0xfb, 0x5d, 0x6e, 0xef, 0xac, 0x46, 0xfe, 0x2b, 0xf6, 0x3f, 0xe5, 0x2e, 0xbd, 0x35, 0x9a, 0x06,
	0xad, 0x72, 0x1e, 0xb4, 0xbc, 0x8b, 0x93, 0x6c, 0x13, 0x85, 0x4d, 0xe6, 0x94, 0xce, 0x72, 0xb8,
	0x30, 0xe3, 0x6a, 0xa8, 0x2d, 0x11, 0x1c, 0x97, 0x64, 0xac, 0xbb, 0xd3, 0x32, 0xce, 0xb3, 0x25,
	0x90, 0xbc, 0x60, 0xff, 0x57, 0x8e, 0x83, 0x34, 0x76, 0x1c, 0x5b, 0xe9, 0xe7, 0x29, 0x68, 0x09,
	0xb4, 0x98, 0x3a, 0x7c, 0x33, 0x89, 0x25, 0xae, 0xdc, 0x50, 0x58, 0x11, 0x96, 0x6a, 0x58, 0x50,
	0x75, 0x88, 0x9a, 0x46, 0x8b, 0x51, 0x0e, 0x57, 0xf3, 0xef, 0xa7, 0x0a, 0xbb, 0x63, 0x0c, 0xf3,
	0xb8, 0xaf, 0x36, 0x30, 0xbd, 0xbf, 0x9a, 0xac, 0x39, 0x3c, 0x1e, 0x52, 0xe5, 0x01, 0x8c, 0x87,
	0xc6, 0x7a, 0xca, 0x71, 0x8b, 0x57, 0xf2, 0x7b, 0xac, 0xef, 0x43, 0xb6, 0x9b, 0xd9, 0x52, 0x9e,
	0xc7, 0xd5, 0x15, 0x92, 0x56, 0x87, 0xf0, 0x4c, 0xe5, 0x2e, 0x01, 0xc6, 0x71, 0x2a, 0x45, 0x89,
	0xc6, 0x05, 0xd8, 0x19, 0xd8, 0x4b, 0x9a, 0x86, 0x61, 0xfd, 0xd4, 0x21, 0x7c, 0x21, 0xa1, 0xc5,
	0xb8, 0x7d, 0x9a, 0xf8, 0x42, 0x22, 0x01, 0xcf, 0x0b, 0x5e, 0xc7, 0x0c, 0x45, 0x09, 0xeb, 0xba,
	0x70, 0xd9, 0xb2, 0xae, 0x19, 0x19, 0xba, 0x82, 0xa1, 0x1f, 0x33, 0xb0, 0x0e, 0xf7, 0xd1, 0x6e,
	0xf0, 0x23, 0x8a, 0x78, 0xea, 0x0c, 0xec, 0x85, 0x9a, 0x53, 0x0a, 0x5a, 0x3c, 0x4a, 0x0b, 0x5c,
	0x84, 0x88, 0x47, 0x5c, 0xcc, 0x71, 0xb1, 0x2b, 0xad, 0xc1, 0xa2, 0x2b, 0x2f, 0x83, 0x39, 0x07,
	0x64, 0xce, 0x3a, 0x4c, 0x19, 0x46, 0xe8, 0xcc, 0x4c, 0xb1, 0x39, 0x1e, 0xd0, 0x31, 0x75, 0x08,
	0xeb, 0x6a, 0xea, 0xe0, 0xb5, 0xf2, 0x93, 0xe9, 0x28, 0x7d, 0x18, 0xea, 0xaa, 0x02, 0x7a, 0xff,
	0x6c, 0xb1, 0x26, 0x2f, 0x25, 0xfa, 0xf7, 0x93, 0x2d, 0xe5, 0x99, 0xd2, 0x63, 0x5a, 0x02, 0x61,
	0x58, 0xac, 0x60, 0xa8, 0x93, 0xd5, 0x75, 0x42, 0x76, 0x57, 0x30, 0xac, 0x8b, 0xdb, 0x89, 0xf2,
	0xb9, 0x72, 0xb8, 0x82, 0x30, 0xb0, 0x95, 0x8c, 0x96, 0xe0, 0x6f, 0x20, 0x72, 0x9b, 0xc8, 0x25,
	0x80, 0x2b, 0x04, 0x6f, 0xc3, 0xe5, 0xfd, 0xb6, 0xd2, 0x6a, 0x91, 0xd6, 0x7d, 0x02, 0xb5, 0xb3,
	0x7b, 0xda, 0xed, 0xa0, 0x9d, 0x6d, 0xd2, 0x5e, 0x1c, 0x71, 0x96, 0x0b, 0x79, 0x43, 0xda, 0x3b,
	0xab, 0x67, 0x57, 0x44, 0xfd, 0xec, 0xa5, 0x76, 0x67, 0xf5, 0xec, 0xa5, 0x76, 0x9f, 0x3d, 0x28,
	0x04, 0x06, 0xdc, 0x7f, 0x67, 0x4b, 0x49, 0x81, 0xe9, 0x86, 0x47, 0xd8, 0x1a, 0xdc, 0xfb, 0xbd,
	0xc1, 0xb6, 0xf1, 0xe5, 0x18, 0x37, 0x35, 0xfe, 0x5c, 0x2e, 0x87, 0x1a, 0x12, 0x8a, 0xfa, 0x95,
	0x8d, 0x6f, 0x10, 0x2a, 0x6a, 0x94, 0xf0, 0xbb, 0x50, 0x8e, 0x97, 0x5e, 0x54, 0x1b, 0x7e, 0x89,
	0x2c, 0xf9, 0x8b, 0x1f, 0x06, 0x03, 0xea, 0xa5, 0x8a, 0x47, 0x04, 0x4b, 0x5e, 0xe4, 0x4a, 0xb8,
	0x18, 0xd6, 0x20, 0xa0, 0x03, 0x4e, 0xcc, 0xe0, 0xca, 0xdc, 0x80, 0xbe, 0x9a, 0x9f, 0x87, 0x40,
	0x52, 0xb1, 0xad, 0xc1, 0xbd, 0xcf, 0x58, 0x8b, 0xde, 0xa8, 0x78, 0x51, 0x4e, 0x73, 0xad, 0x56,
	0x2b, 0x35, 0xe4, 0xec, 0xf9, 0x8f, 0xbd, 0x4c, 0xf9, 0x5c, 0x8c, 0x8e, 0x4e, 0x4e, 0x8e, 0xa4,
	0xfe, 0x52, 0xe2, 0xac, 0x39, 0x39, 0xa9, 0xfe, 0xd2, 0x7b, 0x77, 0xd4, 0xa6, 0x7f, 0x5e, 0x4e,
	0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x44, 0x30, 0xdd, 0x8d, 0xcc, 0x0c, 0x00, 0x00,
}
