// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	config.proto

It has these top-level messages:
	Config
	MemPool
	Consensus
	Wallet
	Store
	LocalStore
	BlockChain
	P2P
	Rpc
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Config struct {
	Title           string      `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Loglevel        string      `protobuf:"bytes,2,opt,name=loglevel" json:"loglevel,omitempty"`
	LogConsoleLevel string      `protobuf:"bytes,3,opt,name=logConsoleLevel" json:"logConsoleLevel,omitempty"`
	LogFile         string      `protobuf:"bytes,4,opt,name=logFile" json:"logFile,omitempty"`
	Store           *Store      `protobuf:"bytes,6,opt,name=store" json:"store,omitempty"`
	LocalStore      *LocalStore `protobuf:"bytes,7,opt,name=localStore" json:"localStore,omitempty"`
	Consensus       *Consensus  `protobuf:"bytes,8,opt,name=consensus" json:"consensus,omitempty"`
	MemPool         *MemPool    `protobuf:"bytes,9,opt,name=memPool" json:"memPool,omitempty"`
	BlockChain      *BlockChain `protobuf:"bytes,10,opt,name=blockChain" json:"blockChain,omitempty"`
	Wallet          *Wallet     `protobuf:"bytes,11,opt,name=wallet" json:"wallet,omitempty"`
	P2P             *P2P        `protobuf:"bytes,12,opt,name=p2p" json:"p2p,omitempty"`
	Rpc             *Rpc        `protobuf:"bytes,13,opt,name=rpc" json:"rpc,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Config) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Config) GetLoglevel() string {
	if m != nil {
		return m.Loglevel
	}
	return ""
}

func (m *Config) GetLogConsoleLevel() string {
	if m != nil {
		return m.LogConsoleLevel
	}
	return ""
}

func (m *Config) GetLogFile() string {
	if m != nil {
		return m.LogFile
	}
	return ""
}

func (m *Config) GetStore() *Store {
	if m != nil {
		return m.Store
	}
	return nil
}

func (m *Config) GetLocalStore() *LocalStore {
	if m != nil {
		return m.LocalStore
	}
	return nil
}

func (m *Config) GetConsensus() *Consensus {
	if m != nil {
		return m.Consensus
	}
	return nil
}

func (m *Config) GetMemPool() *MemPool {
	if m != nil {
		return m.MemPool
	}
	return nil
}

func (m *Config) GetBlockChain() *BlockChain {
	if m != nil {
		return m.BlockChain
	}
	return nil
}

func (m *Config) GetWallet() *Wallet {
	if m != nil {
		return m.Wallet
	}
	return nil
}

func (m *Config) GetP2P() *P2P {
	if m != nil {
		return m.P2P
	}
	return nil
}

func (m *Config) GetRpc() *Rpc {
	if m != nil {
		return m.Rpc
	}
	return nil
}

type MemPool struct {
	PoolCacheSize int64 `protobuf:"varint,1,opt,name=poolCacheSize" json:"poolCacheSize,omitempty"`
	MinTxFee      int64 `protobuf:"varint,2,opt,name=minTxFee" json:"minTxFee,omitempty"`
}

func (m *MemPool) Reset()                    { *m = MemPool{} }
func (m *MemPool) String() string            { return proto.CompactTextString(m) }
func (*MemPool) ProtoMessage()               {}
func (*MemPool) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *MemPool) GetPoolCacheSize() int64 {
	if m != nil {
		return m.PoolCacheSize
	}
	return 0
}

func (m *MemPool) GetMinTxFee() int64 {
	if m != nil {
		return m.MinTxFee
	}
	return 0
}

type Consensus struct {
	Name                      string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Genesis                   string   `protobuf:"bytes,2,opt,name=genesis" json:"genesis,omitempty"`
	Minerstart                bool     `protobuf:"varint,3,opt,name=minerstart" json:"minerstart,omitempty"`
	GenesisBlockTime          int64    `protobuf:"varint,4,opt,name=genesisBlockTime" json:"genesisBlockTime,omitempty"`
	HotkeyAddr                string   `protobuf:"bytes,5,opt,name=hotkeyAddr" json:"hotkeyAddr,omitempty"`
	TimeoutPropose            int32    `protobuf:"varint,6,opt,name=timeoutPropose" json:"timeoutPropose,omitempty"`
	TimeoutProposeDelta       int32    `protobuf:"varint,7,opt,name=timeoutProposeDelta" json:"timeoutProposeDelta,omitempty"`
	TimeoutPrevote            int32    `protobuf:"varint,8,opt,name=timeoutPrevote" json:"timeoutPrevote,omitempty"`
	TimeoutPrevoteDelta       int32    `protobuf:"varint,9,opt,name=timeoutPrevoteDelta" json:"timeoutPrevoteDelta,omitempty"`
	TimeoutPrecommit          int32    `protobuf:"varint,10,opt,name=timeoutPrecommit" json:"timeoutPrecommit,omitempty"`
	TimeoutPrecommitDelta     int32    `protobuf:"varint,11,opt,name=timeoutPrecommitDelta" json:"timeoutPrecommitDelta,omitempty"`
	TimeoutCommit             int32    `protobuf:"varint,12,opt,name=timeoutCommit" json:"timeoutCommit,omitempty"`
	SkipTimeoutCommit         bool     `protobuf:"varint,13,opt,name=skipTimeoutCommit" json:"skipTimeoutCommit,omitempty"`
	CreateEmptyBlocks         bool     `protobuf:"varint,14,opt,name=createEmptyBlocks" json:"createEmptyBlocks,omitempty"`
	CreateEmptyBlocksInterval int32    `protobuf:"varint,15,opt,name=createEmptyBlocksInterval" json:"createEmptyBlocksInterval,omitempty"`
	Seeds                     []string `protobuf:"bytes,16,rep,name=seeds" json:"seeds,omitempty"`
}

func (m *Consensus) Reset()                    { *m = Consensus{} }
func (m *Consensus) String() string            { return proto.CompactTextString(m) }
func (*Consensus) ProtoMessage()               {}
func (*Consensus) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *Consensus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Consensus) GetGenesis() string {
	if m != nil {
		return m.Genesis
	}
	return ""
}

func (m *Consensus) GetMinerstart() bool {
	if m != nil {
		return m.Minerstart
	}
	return false
}

func (m *Consensus) GetGenesisBlockTime() int64 {
	if m != nil {
		return m.GenesisBlockTime
	}
	return 0
}

func (m *Consensus) GetHotkeyAddr() string {
	if m != nil {
		return m.HotkeyAddr
	}
	return ""
}

func (m *Consensus) GetTimeoutPropose() int32 {
	if m != nil {
		return m.TimeoutPropose
	}
	return 0
}

func (m *Consensus) GetTimeoutProposeDelta() int32 {
	if m != nil {
		return m.TimeoutProposeDelta
	}
	return 0
}

func (m *Consensus) GetTimeoutPrevote() int32 {
	if m != nil {
		return m.TimeoutPrevote
	}
	return 0
}

func (m *Consensus) GetTimeoutPrevoteDelta() int32 {
	if m != nil {
		return m.TimeoutPrevoteDelta
	}
	return 0
}

func (m *Consensus) GetTimeoutPrecommit() int32 {
	if m != nil {
		return m.TimeoutPrecommit
	}
	return 0
}

func (m *Consensus) GetTimeoutPrecommitDelta() int32 {
	if m != nil {
		return m.TimeoutPrecommitDelta
	}
	return 0
}

func (m *Consensus) GetTimeoutCommit() int32 {
	if m != nil {
		return m.TimeoutCommit
	}
	return 0
}

func (m *Consensus) GetSkipTimeoutCommit() bool {
	if m != nil {
		return m.SkipTimeoutCommit
	}
	return false
}

func (m *Consensus) GetCreateEmptyBlocks() bool {
	if m != nil {
		return m.CreateEmptyBlocks
	}
	return false
}

func (m *Consensus) GetCreateEmptyBlocksInterval() int32 {
	if m != nil {
		return m.CreateEmptyBlocksInterval
	}
	return 0
}

func (m *Consensus) GetSeeds() []string {
	if m != nil {
		return m.Seeds
	}
	return nil
}

type Wallet struct {
	MinFee   int64  `protobuf:"varint,1,opt,name=minFee" json:"minFee,omitempty"`
	Driver   string `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	DbPath   string `protobuf:"bytes,3,opt,name=dbPath" json:"dbPath,omitempty"`
	SignType string `protobuf:"bytes,4,opt,name=signType" json:"signType,omitempty"`
}

func (m *Wallet) Reset()                    { *m = Wallet{} }
func (m *Wallet) String() string            { return proto.CompactTextString(m) }
func (*Wallet) ProtoMessage()               {}
func (*Wallet) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Wallet) GetMinFee() int64 {
	if m != nil {
		return m.MinFee
	}
	return 0
}

func (m *Wallet) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Wallet) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *Wallet) GetSignType() string {
	if m != nil {
		return m.SignType
	}
	return ""
}

type Store struct {
	Driver string `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	DbPath string `protobuf:"bytes,2,opt,name=dbPath" json:"dbPath,omitempty"`
}

func (m *Store) Reset()                    { *m = Store{} }
func (m *Store) String() string            { return proto.CompactTextString(m) }
func (*Store) ProtoMessage()               {}
func (*Store) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *Store) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Store) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

type LocalStore struct {
	Driver string `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	DbPath string `protobuf:"bytes,2,opt,name=dbPath" json:"dbPath,omitempty"`
}

func (m *LocalStore) Reset()                    { *m = LocalStore{} }
func (m *LocalStore) String() string            { return proto.CompactTextString(m) }
func (*LocalStore) ProtoMessage()               {}
func (*LocalStore) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *LocalStore) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *LocalStore) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

type BlockChain struct {
	DefCacheSize        int64  `protobuf:"varint,1,opt,name=defCacheSize" json:"defCacheSize,omitempty"`
	MaxFetchBlockNum    int64  `protobuf:"varint,2,opt,name=maxFetchBlockNum" json:"maxFetchBlockNum,omitempty"`
	TimeoutSeconds      int64  `protobuf:"varint,3,opt,name=timeoutSeconds" json:"timeoutSeconds,omitempty"`
	BatchBlockNum       int64  `protobuf:"varint,4,opt,name=batchBlockNum" json:"batchBlockNum,omitempty"`
	Driver              string `protobuf:"bytes,5,opt,name=driver" json:"driver,omitempty"`
	DbPath              string `protobuf:"bytes,6,opt,name=dbPath" json:"dbPath,omitempty"`
	IsStrongConsistency bool   `protobuf:"varint,7,opt,name=isStrongConsistency" json:"isStrongConsistency,omitempty"`
	SingleMode          bool   `protobuf:"varint,8,opt,name=singleMode" json:"singleMode,omitempty"`
}

func (m *BlockChain) Reset()                    { *m = BlockChain{} }
func (m *BlockChain) String() string            { return proto.CompactTextString(m) }
func (*BlockChain) ProtoMessage()               {}
func (*BlockChain) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *BlockChain) GetDefCacheSize() int64 {
	if m != nil {
		return m.DefCacheSize
	}
	return 0
}

func (m *BlockChain) GetMaxFetchBlockNum() int64 {
	if m != nil {
		return m.MaxFetchBlockNum
	}
	return 0
}

func (m *BlockChain) GetTimeoutSeconds() int64 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *BlockChain) GetBatchBlockNum() int64 {
	if m != nil {
		return m.BatchBlockNum
	}
	return 0
}

func (m *BlockChain) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *BlockChain) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *BlockChain) GetIsStrongConsistency() bool {
	if m != nil {
		return m.IsStrongConsistency
	}
	return false
}

func (m *BlockChain) GetSingleMode() bool {
	if m != nil {
		return m.SingleMode
	}
	return false
}

type P2P struct {
	SeedPort     int32    `protobuf:"varint,1,opt,name=seedPort" json:"seedPort,omitempty"`
	DbPath       string   `protobuf:"bytes,2,opt,name=dbPath" json:"dbPath,omitempty"`
	GrpcLogFile  string   `protobuf:"bytes,3,opt,name=grpcLogFile" json:"grpcLogFile,omitempty"`
	IsSeed       bool     `protobuf:"varint,4,opt,name=isSeed" json:"isSeed,omitempty"`
	Seeds        []string `protobuf:"bytes,5,rep,name=seeds" json:"seeds,omitempty"`
	Enable       bool     `protobuf:"varint,6,opt,name=enable" json:"enable,omitempty"`
	MsgCacheSize int32    `protobuf:"varint,7,opt,name=msgCacheSize" json:"msgCacheSize,omitempty"`
	Version      int32    `protobuf:"varint,8,opt,name=version" json:"version,omitempty"`
	VerMix       int32    `protobuf:"varint,9,opt,name=verMix" json:"verMix,omitempty"`
	VerMax       int32    `protobuf:"varint,10,opt,name=verMax" json:"verMax,omitempty"`
}

func (m *P2P) Reset()                    { *m = P2P{} }
func (m *P2P) String() string            { return proto.CompactTextString(m) }
func (*P2P) ProtoMessage()               {}
func (*P2P) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *P2P) GetSeedPort() int32 {
	if m != nil {
		return m.SeedPort
	}
	return 0
}

func (m *P2P) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *P2P) GetGrpcLogFile() string {
	if m != nil {
		return m.GrpcLogFile
	}
	return ""
}

func (m *P2P) GetIsSeed() bool {
	if m != nil {
		return m.IsSeed
	}
	return false
}

func (m *P2P) GetSeeds() []string {
	if m != nil {
		return m.Seeds
	}
	return nil
}

func (m *P2P) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *P2P) GetMsgCacheSize() int32 {
	if m != nil {
		return m.MsgCacheSize
	}
	return 0
}

func (m *P2P) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2P) GetVerMix() int32 {
	if m != nil {
		return m.VerMix
	}
	return 0
}

func (m *P2P) GetVerMax() int32 {
	if m != nil {
		return m.VerMax
	}
	return 0
}

type Rpc struct {
	JrpcBindAddr string   `protobuf:"bytes,1,opt,name=jrpcBindAddr" json:"jrpcBindAddr,omitempty"`
	GrpcBindAddr string   `protobuf:"bytes,2,opt,name=grpcBindAddr" json:"grpcBindAddr,omitempty"`
	Whitlist     []string `protobuf:"bytes,3,rep,name=whitlist" json:"whitlist,omitempty"`
}

func (m *Rpc) Reset()                    { *m = Rpc{} }
func (m *Rpc) String() string            { return proto.CompactTextString(m) }
func (*Rpc) ProtoMessage()               {}
func (*Rpc) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *Rpc) GetJrpcBindAddr() string {
	if m != nil {
		return m.JrpcBindAddr
	}
	return ""
}

func (m *Rpc) GetGrpcBindAddr() string {
	if m != nil {
		return m.GrpcBindAddr
	}
	return ""
}

func (m *Rpc) GetWhitlist() []string {
	if m != nil {
		return m.Whitlist
	}
	return nil
}

func init() {
	proto.RegisterType((*Config)(nil), "types.Config")
	proto.RegisterType((*MemPool)(nil), "types.MemPool")
	proto.RegisterType((*Consensus)(nil), "types.Consensus")
	proto.RegisterType((*Wallet)(nil), "types.Wallet")
	proto.RegisterType((*Store)(nil), "types.Store")
	proto.RegisterType((*LocalStore)(nil), "types.LocalStore")
	proto.RegisterType((*BlockChain)(nil), "types.BlockChain")
	proto.RegisterType((*P2P)(nil), "types.P2P")
	proto.RegisterType((*Rpc)(nil), "types.Rpc")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 871 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xd1, 0x6e, 0x23, 0x35,
	0x17, 0xc7, 0xd5, 0xce, 0x4e, 0x9a, 0x9c, 0xa6, 0xdd, 0xae, 0xf7, 0xfb, 0xd0, 0x80, 0x10, 0xaa,
	0x46, 0x80, 0x2a, 0x84, 0xaa, 0xa5, 0x20, 0x71, 0xb3, 0x37, 0x6c, 0xa0, 0x12, 0xa2, 0x45, 0x91,
	0x53, 0x89, 0xeb, 0xc9, 0xcc, 0xd9, 0x89, 0xa9, 0xc7, 0x1e, 0xd9, 0x6e, 0xb6, 0xe1, 0x25, 0x10,
	0xef, 0xc1, 0x6b, 0xf0, 0x5e, 0xc8, 0xc7, 0x4e, 0x32, 0x93, 0xb4, 0x17, 0xdc, 0xf5, 0xfc, 0xce,
	0xdf, 0x27, 0xb6, 0xcf, 0xdf, 0x67, 0x0a, 0xe3, 0x52, 0xab, 0xf7, 0xa2, 0xbe, 0x6c, 0x8d, 0x76,
	0x9a, 0xa5, 0x6e, 0xd5, 0xa2, 0xcd, 0xff, 0x49, 0x60, 0x30, 0x21, 0xce, 0xfe, 0x07, 0xa9, 0x13,
	0x4e, 0x62, 0x76, 0x70, 0x7e, 0x70, 0x31, 0xe2, 0x21, 0x60, 0x9f, 0xc0, 0x50, 0xea, 0x5a, 0xe2,
	0x12, 0x65, 0x76, 0x48, 0x89, 0x4d, 0xcc, 0x2e, 0xe0, 0xa5, 0xd4, 0xf5, 0x44, 0x2b, 0xab, 0x25,
	0xde, 0x90, 0x24, 0x21, 0xc9, 0x2e, 0x66, 0x19, 0x1c, 0x49, 0x5d, 0x5f, 0x0b, 0x89, 0xd9, 0x0b,
	0x52, 0xac, 0x43, 0x96, 0x43, 0x6a, 0x9d, 0x36, 0x98, 0x0d, 0xce, 0x0f, 0x2e, 0x8e, 0xaf, 0xc6,
	0x97, 0xb4, 0xaf, 0xcb, 0x99, 0x67, 0x3c, 0xa4, 0xd8, 0x37, 0x00, 0x52, 0x97, 0x85, 0x24, 0x98,
	0x1d, 0x91, 0xf0, 0x55, 0x14, 0xde, 0x6c, 0x12, 0xbc, 0x23, 0x62, 0x97, 0x30, 0x2a, 0xb5, 0xb2,
	0xa8, 0xec, 0x83, 0xcd, 0x86, 0xb4, 0xe2, 0x2c, 0xae, 0x98, 0xac, 0x39, 0xdf, 0x4a, 0xd8, 0x05,
	0x1c, 0x35, 0xd8, 0x4c, 0xb5, 0x96, 0xd9, 0x88, 0xd4, 0xa7, 0x51, 0x7d, 0x1b, 0x28, 0x5f, 0xa7,
	0xfd, 0x66, 0xe6, 0x52, 0x97, 0xf7, 0x93, 0x45, 0x21, 0x54, 0x06, 0xbd, 0xcd, 0xbc, 0xdb, 0x24,
	0x78, 0x47, 0xc4, 0xbe, 0x80, 0xc1, 0x87, 0x42, 0x4a, 0x74, 0xd9, 0x31, 0xc9, 0x4f, 0xa2, 0xfc,
	0x37, 0x82, 0x3c, 0x26, 0xd9, 0xa7, 0x90, 0xb4, 0x57, 0x6d, 0x36, 0x26, 0x0d, 0x44, 0xcd, 0xf4,
	0x6a, 0xca, 0x3d, 0xf6, 0x59, 0xd3, 0x96, 0xd9, 0x49, 0x2f, 0xcb, 0xdb, 0x92, 0x7b, 0x9c, 0xff,
	0x02, 0x47, 0x71, 0xa7, 0xec, 0x73, 0x38, 0x69, 0xb5, 0x96, 0x93, 0xa2, 0x5c, 0xe0, 0x4c, 0xfc,
	0x11, 0xfa, 0x99, 0xf0, 0x3e, 0xf4, 0x7d, 0x6d, 0x84, 0xba, 0x7b, 0xbc, 0x46, 0xa4, 0xbe, 0x26,
	0x7c, 0x13, 0xe7, 0x7f, 0xa5, 0x30, 0xda, 0xdc, 0x12, 0x63, 0xf0, 0x42, 0x15, 0xcd, 0xda, 0x16,
	0xf4, 0xb7, 0xef, 0x67, 0x8d, 0x0a, 0xad, 0xb0, 0xd1, 0x14, 0xeb, 0x90, 0x7d, 0x06, 0xd0, 0x08,
	0x85, 0xc6, 0xba, 0xc2, 0x38, 0xb2, 0xc3, 0x90, 0x77, 0x08, 0xfb, 0x0a, 0xce, 0xa2, 0x94, 0x2e,
	0xeb, 0x4e, 0x34, 0xc1, 0x12, 0x09, 0xdf, 0xe3, 0xbe, 0xd6, 0x42, 0xbb, 0x7b, 0x5c, 0xfd, 0x50,
	0x55, 0x26, 0x4b, 0xe9, 0x87, 0x3a, 0x84, 0x7d, 0x09, 0xa7, 0x4e, 0x34, 0xa8, 0x1f, 0xdc, 0xd4,
	0xe8, 0x56, 0xdb, 0x60, 0xa2, 0x94, 0xef, 0x50, 0xf6, 0x06, 0x5e, 0xf7, 0xc9, 0x8f, 0x28, 0x5d,
	0x41, 0x46, 0x4a, 0xf9, 0x53, 0xa9, 0x5e, 0x65, 0x5c, 0x6a, 0x87, 0xe4, 0xa1, 0x6e, 0x65, 0xa2,
	0xbd, 0xca, 0x44, 0x42, 0xe5, 0xd1, 0x4e, 0xe5, 0x6d, 0xca, 0x9f, 0x7f, 0x8b, 0x4b, 0xdd, 0x34,
	0xc2, 0x91, 0x89, 0x52, 0xbe, 0xc7, 0xd9, 0x77, 0xf0, 0xff, 0x5d, 0x16, 0xea, 0x1f, 0xd3, 0x82,
	0xa7, 0x93, 0xbe, 0xff, 0x31, 0x31, 0x09, 0xe5, 0xc7, 0xa4, 0xee, 0x43, 0xf6, 0x35, 0xbc, 0xb2,
	0xf7, 0xa2, 0xbd, 0xeb, 0x29, 0x4f, 0xa8, 0x5d, 0xfb, 0x09, 0xaf, 0x2e, 0x0d, 0x16, 0x0e, 0x7f,
	0x6a, 0x5a, 0xb7, 0xa2, 0x0e, 0xd9, 0xec, 0x34, 0xa8, 0xf7, 0x12, 0xec, 0x2d, 0x7c, 0xbc, 0x07,
	0x7f, 0x56, 0x0e, 0xcd, 0xb2, 0x90, 0xd9, 0x4b, 0xda, 0xcd, 0xf3, 0x02, 0x3f, 0x87, 0x2c, 0x62,
	0x65, 0xb3, 0xb3, 0xf3, 0xc4, 0xcf, 0x21, 0x0a, 0x72, 0x09, 0x83, 0xf0, 0x5c, 0xd8, 0x47, 0x30,
	0x68, 0x84, 0xf2, 0xbe, 0x0d, 0xc6, 0x8e, 0x91, 0xe7, 0x95, 0x11, 0x4b, 0x34, 0xd1, 0x92, 0x31,
	0x22, 0x3e, 0x9f, 0x16, 0x6e, 0x11, 0x87, 0x53, 0x8c, 0xfc, 0x0b, 0xb0, 0xa2, 0x56, 0x77, 0xab,
	0x76, 0x3d, 0x94, 0x36, 0x71, 0xfe, 0x3d, 0xa4, 0x61, 0x8e, 0x6c, 0x8b, 0x1e, 0x3c, 0x53, 0xf4,
	0xb0, 0x5b, 0x34, 0x7f, 0x0b, 0xb0, 0x9d, 0x48, 0xff, 0x79, 0xf5, 0xdf, 0x87, 0x00, 0xdb, 0x19,
	0xc2, 0x72, 0x18, 0x57, 0xf8, 0x7e, 0xf7, 0x21, 0xf7, 0x98, 0xf7, 0x53, 0x53, 0x3c, 0x5e, 0xa3,
	0x2b, 0x17, 0xb4, 0xf2, 0xd7, 0x87, 0x26, 0xbe, 0xe7, 0x3d, 0xde, 0x71, 0xf5, 0x0c, 0x4b, 0xad,
	0x2a, 0x4b, 0x37, 0x92, 0xf0, 0x1d, 0xea, 0x1d, 0x34, 0x2f, 0xba, 0x05, 0xc3, 0x03, 0xed, 0xc3,
	0xce, 0xe1, 0xd2, 0x67, 0x0e, 0x37, 0xe8, 0xdd, 0xf7, 0x1b, 0x78, 0x2d, 0xec, 0xcc, 0x19, 0xad,
	0xe8, 0xdb, 0x20, 0xac, 0x43, 0x55, 0xae, 0xe8, 0x15, 0x0e, 0xf9, 0x53, 0x29, 0xff, 0xfe, 0xad,
	0x50, 0xb5, 0xc4, 0x5b, 0x5d, 0x85, 0x17, 0x38, 0xe4, 0x1d, 0x92, 0xff, 0x79, 0x08, 0xc9, 0xf4,
	0x6a, 0x4a, 0x9d, 0x44, 0xac, 0xa6, 0xda, 0x38, 0xba, 0xa3, 0x94, 0x6f, 0xe2, 0xe7, 0xae, 0x9a,
	0x9d, 0xc3, 0x71, 0x6d, 0xda, 0xf2, 0x26, 0x7e, 0x95, 0x82, 0x35, 0xba, 0xc8, 0xaf, 0x14, 0x76,
	0x86, 0x58, 0xd1, 0xf1, 0x87, 0x3c, 0x46, 0x5b, 0x7f, 0xa6, 0x1d, 0x7f, 0x7a, 0x35, 0xaa, 0x62,
	0x2e, 0xc3, 0x0c, 0x1a, 0xf2, 0x18, 0xf9, 0x1e, 0x36, 0xb6, 0xde, 0xf6, 0x30, 0x0c, 0x9d, 0x1e,
	0xf3, 0xd3, 0x74, 0x89, 0xc6, 0x0a, 0xad, 0xe2, 0x98, 0x59, 0x87, 0xbe, 0xea, 0x12, 0xcd, 0xad,
	0x78, 0x8c, 0x23, 0x25, 0x46, 0x6b, 0x5e, 0x3c, 0xc6, 0xd9, 0x11, 0xa3, 0x5c, 0x40, 0xc2, 0xdb,
	0xd2, 0xff, 0xe8, 0xef, 0xa6, 0x2d, 0xdf, 0x09, 0x55, 0xd1, 0xe8, 0x0c, 0xee, 0xeb, 0x31, 0xaf,
	0xa9, 0xbb, 0x9a, 0x70, 0x3d, 0x3d, 0xe6, 0x2f, 0xf6, 0xc3, 0x42, 0x38, 0x29, 0xac, 0x1f, 0xe5,
	0xfe, 0xb4, 0x9b, 0x78, 0x3e, 0xa0, 0xff, 0x23, 0xbe, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0xa3,
	0x71, 0x1f, 0x71, 0x57, 0x08, 0x00, 0x00,
}
