// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Config struct {
	Title      string      `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Log        *Log        `protobuf:"bytes,2,opt,name=log" json:"log,omitempty"`
	Store      *Store      `protobuf:"bytes,3,opt,name=store" json:"store,omitempty"`
	Consensus  *Consensus  `protobuf:"bytes,5,opt,name=consensus" json:"consensus,omitempty"`
	MemPool    *MemPool    `protobuf:"bytes,6,opt,name=memPool" json:"memPool,omitempty"`
	BlockChain *BlockChain `protobuf:"bytes,7,opt,name=blockChain" json:"blockChain,omitempty"`
	Wallet     *Wallet     `protobuf:"bytes,8,opt,name=wallet" json:"wallet,omitempty"`
	P2P        *P2P        `protobuf:"bytes,9,opt,name=p2p" json:"p2p,omitempty"`
	Rpc        *Rpc        `protobuf:"bytes,10,opt,name=rpc" json:"rpc,omitempty"`
	Exec       *Exec       `protobuf:"bytes,11,opt,name=exec" json:"exec,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Config) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Config) GetLog() *Log {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *Config) GetStore() *Store {
	if m != nil {
		return m.Store
	}
	return nil
}

func (m *Config) GetConsensus() *Consensus {
	if m != nil {
		return m.Consensus
	}
	return nil
}

func (m *Config) GetMemPool() *MemPool {
	if m != nil {
		return m.MemPool
	}
	return nil
}

func (m *Config) GetBlockChain() *BlockChain {
	if m != nil {
		return m.BlockChain
	}
	return nil
}

func (m *Config) GetWallet() *Wallet {
	if m != nil {
		return m.Wallet
	}
	return nil
}

func (m *Config) GetP2P() *P2P {
	if m != nil {
		return m.P2P
	}
	return nil
}

func (m *Config) GetRpc() *Rpc {
	if m != nil {
		return m.Rpc
	}
	return nil
}

func (m *Config) GetExec() *Exec {
	if m != nil {
		return m.Exec
	}
	return nil
}

type Log struct {
	// 日志级别，支持debug(dbug)/info/warn/error(eror)/crit
	Loglevel        string `protobuf:"bytes,1,opt,name=loglevel" json:"loglevel,omitempty"`
	LogConsoleLevel string `protobuf:"bytes,2,opt,name=logConsoleLevel" json:"logConsoleLevel,omitempty"`
	// 日志文件名，可带目录，所有生成的日志文件都放到此目录下
	LogFile string `protobuf:"bytes,3,opt,name=logFile" json:"logFile,omitempty"`
	// 单个日志文件的最大值（单位：兆）
	MaxFileSize uint32 `protobuf:"varint,4,opt,name=maxFileSize" json:"maxFileSize,omitempty"`
	// 最多保存的历史日志文件个数
	MaxBackups uint32 `protobuf:"varint,5,opt,name=maxBackups" json:"maxBackups,omitempty"`
	// 最多保存的历史日志消息（单位：天）
	MaxAge uint32 `protobuf:"varint,6,opt,name=maxAge" json:"maxAge,omitempty"`
	// 日志文件名是否使用本地事件（否则使用UTC时间）
	LocalTime bool `protobuf:"varint,7,opt,name=localTime" json:"localTime,omitempty"`
	// 历史日志文件是否压缩（压缩格式为gz）
	Compress bool `protobuf:"varint,8,opt,name=compress" json:"compress,omitempty"`
	// 是否打印调用源文件和行号
	CallerFile bool `protobuf:"varint,9,opt,name=callerFile" json:"callerFile,omitempty"`
	// 是否打印调用方法
	CallerFunction bool `protobuf:"varint,10,opt,name=callerFunction" json:"callerFunction,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Log) GetLoglevel() string {
	if m != nil {
		return m.Loglevel
	}
	return ""
}

func (m *Log) GetLogConsoleLevel() string {
	if m != nil {
		return m.LogConsoleLevel
	}
	return ""
}

func (m *Log) GetLogFile() string {
	if m != nil {
		return m.LogFile
	}
	return ""
}

func (m *Log) GetMaxFileSize() uint32 {
	if m != nil {
		return m.MaxFileSize
	}
	return 0
}

func (m *Log) GetMaxBackups() uint32 {
	if m != nil {
		return m.MaxBackups
	}
	return 0
}

func (m *Log) GetMaxAge() uint32 {
	if m != nil {
		return m.MaxAge
	}
	return 0
}

func (m *Log) GetLocalTime() bool {
	if m != nil {
		return m.LocalTime
	}
	return false
}

func (m *Log) GetCompress() bool {
	if m != nil {
		return m.Compress
	}
	return false
}

func (m *Log) GetCallerFile() bool {
	if m != nil {
		return m.CallerFile
	}
	return false
}

func (m *Log) GetCallerFunction() bool {
	if m != nil {
		return m.CallerFunction
	}
	return false
}

type MemPool struct {
	PoolCacheSize int64 `protobuf:"varint,1,opt,name=poolCacheSize" json:"poolCacheSize,omitempty"`
	MinTxFee      int64 `protobuf:"varint,2,opt,name=minTxFee" json:"minTxFee,omitempty"`
}

func (m *MemPool) Reset()                    { *m = MemPool{} }
func (m *MemPool) String() string            { return proto.CompactTextString(m) }
func (*MemPool) ProtoMessage()               {}
func (*MemPool) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *MemPool) GetPoolCacheSize() int64 {
	if m != nil {
		return m.PoolCacheSize
	}
	return 0
}

func (m *MemPool) GetMinTxFee() int64 {
	if m != nil {
		return m.MinTxFee
	}
	return 0
}

type Consensus struct {
	Name             string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Genesis          string `protobuf:"bytes,2,opt,name=genesis" json:"genesis,omitempty"`
	Minerstart       bool   `protobuf:"varint,3,opt,name=minerstart" json:"minerstart,omitempty"`
	GenesisBlockTime int64  `protobuf:"varint,4,opt,name=genesisBlockTime" json:"genesisBlockTime,omitempty"`
	HotkeyAddr       string `protobuf:"bytes,5,opt,name=hotkeyAddr" json:"hotkeyAddr,omitempty"`
	ForceMining      bool   `protobuf:"varint,6,opt,name=forceMining" json:"forceMining,omitempty"`
}

func (m *Consensus) Reset()                    { *m = Consensus{} }
func (m *Consensus) String() string            { return proto.CompactTextString(m) }
func (*Consensus) ProtoMessage()               {}
func (*Consensus) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Consensus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Consensus) GetGenesis() string {
	if m != nil {
		return m.Genesis
	}
	return ""
}

func (m *Consensus) GetMinerstart() bool {
	if m != nil {
		return m.Minerstart
	}
	return false
}

func (m *Consensus) GetGenesisBlockTime() int64 {
	if m != nil {
		return m.GenesisBlockTime
	}
	return 0
}

func (m *Consensus) GetHotkeyAddr() string {
	if m != nil {
		return m.HotkeyAddr
	}
	return ""
}

func (m *Consensus) GetForceMining() bool {
	if m != nil {
		return m.ForceMining
	}
	return false
}

type Wallet struct {
	MinFee      int64  `protobuf:"varint,1,opt,name=minFee" json:"minFee,omitempty"`
	Driver      string `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	DbPath      string `protobuf:"bytes,3,opt,name=dbPath" json:"dbPath,omitempty"`
	SignType    string `protobuf:"bytes,4,opt,name=signType" json:"signType,omitempty"`
	ForceMining bool   `protobuf:"varint,5,opt,name=forceMining" json:"forceMining,omitempty"`
}

func (m *Wallet) Reset()                    { *m = Wallet{} }
func (m *Wallet) String() string            { return proto.CompactTextString(m) }
func (*Wallet) ProtoMessage()               {}
func (*Wallet) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *Wallet) GetMinFee() int64 {
	if m != nil {
		return m.MinFee
	}
	return 0
}

func (m *Wallet) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Wallet) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *Wallet) GetSignType() string {
	if m != nil {
		return m.SignType
	}
	return ""
}

func (m *Wallet) GetForceMining() bool {
	if m != nil {
		return m.ForceMining
	}
	return false
}

type Store struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Driver string `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	DbPath string `protobuf:"bytes,3,opt,name=dbPath" json:"dbPath,omitempty"`
}

func (m *Store) Reset()                    { *m = Store{} }
func (m *Store) String() string            { return proto.CompactTextString(m) }
func (*Store) ProtoMessage()               {}
func (*Store) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *Store) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Store) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Store) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

type BlockChain struct {
	DefCacheSize        int64  `protobuf:"varint,1,opt,name=defCacheSize" json:"defCacheSize,omitempty"`
	MaxFetchBlockNum    int64  `protobuf:"varint,2,opt,name=maxFetchBlockNum" json:"maxFetchBlockNum,omitempty"`
	TimeoutSeconds      int64  `protobuf:"varint,3,opt,name=timeoutSeconds" json:"timeoutSeconds,omitempty"`
	BatchBlockNum       int64  `protobuf:"varint,4,opt,name=batchBlockNum" json:"batchBlockNum,omitempty"`
	Driver              string `protobuf:"bytes,5,opt,name=driver" json:"driver,omitempty"`
	DbPath              string `protobuf:"bytes,6,opt,name=dbPath" json:"dbPath,omitempty"`
	IsStrongConsistency bool   `protobuf:"varint,7,opt,name=isStrongConsistency" json:"isStrongConsistency,omitempty"`
	SingleMode          bool   `protobuf:"varint,8,opt,name=singleMode" json:"singleMode,omitempty"`
	Batchsync           bool   `protobuf:"varint,9,opt,name=batchsync" json:"batchsync,omitempty"`
}

func (m *BlockChain) Reset()                    { *m = BlockChain{} }
func (m *BlockChain) String() string            { return proto.CompactTextString(m) }
func (*BlockChain) ProtoMessage()               {}
func (*BlockChain) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *BlockChain) GetDefCacheSize() int64 {
	if m != nil {
		return m.DefCacheSize
	}
	return 0
}

func (m *BlockChain) GetMaxFetchBlockNum() int64 {
	if m != nil {
		return m.MaxFetchBlockNum
	}
	return 0
}

func (m *BlockChain) GetTimeoutSeconds() int64 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *BlockChain) GetBatchBlockNum() int64 {
	if m != nil {
		return m.BatchBlockNum
	}
	return 0
}

func (m *BlockChain) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *BlockChain) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *BlockChain) GetIsStrongConsistency() bool {
	if m != nil {
		return m.IsStrongConsistency
	}
	return false
}

func (m *BlockChain) GetSingleMode() bool {
	if m != nil {
		return m.SingleMode
	}
	return false
}

func (m *BlockChain) GetBatchsync() bool {
	if m != nil {
		return m.Batchsync
	}
	return false
}

type P2P struct {
	SeedPort     int32    `protobuf:"varint,1,opt,name=seedPort" json:"seedPort,omitempty"`
	Driver       string   `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	DbPath       string   `protobuf:"bytes,3,opt,name=dbPath" json:"dbPath,omitempty"`
	GrpcLogFile  string   `protobuf:"bytes,4,opt,name=grpcLogFile" json:"grpcLogFile,omitempty"`
	IsSeed       bool     `protobuf:"varint,5,opt,name=isSeed" json:"isSeed,omitempty"`
	ServerStart  bool     `protobuf:"varint,6,opt,name=serverStart" json:"serverStart,omitempty"`
	Seeds        []string `protobuf:"bytes,7,rep,name=seeds" json:"seeds,omitempty"`
	Enable       bool     `protobuf:"varint,8,opt,name=enable" json:"enable,omitempty"`
	MsgCacheSize int32    `protobuf:"varint,9,opt,name=msgCacheSize" json:"msgCacheSize,omitempty"`
	Version      int32    `protobuf:"varint,10,opt,name=version" json:"version,omitempty"`
	VerMix       int32    `protobuf:"varint,11,opt,name=verMix" json:"verMix,omitempty"`
	VerMax       int32    `protobuf:"varint,12,opt,name=verMax" json:"verMax,omitempty"`
}

func (m *P2P) Reset()                    { *m = P2P{} }
func (m *P2P) String() string            { return proto.CompactTextString(m) }
func (*P2P) ProtoMessage()               {}
func (*P2P) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *P2P) GetSeedPort() int32 {
	if m != nil {
		return m.SeedPort
	}
	return 0
}

func (m *P2P) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *P2P) GetDbPath() string {
	if m != nil {
		return m.DbPath
	}
	return ""
}

func (m *P2P) GetGrpcLogFile() string {
	if m != nil {
		return m.GrpcLogFile
	}
	return ""
}

func (m *P2P) GetIsSeed() bool {
	if m != nil {
		return m.IsSeed
	}
	return false
}

func (m *P2P) GetServerStart() bool {
	if m != nil {
		return m.ServerStart
	}
	return false
}

func (m *P2P) GetSeeds() []string {
	if m != nil {
		return m.Seeds
	}
	return nil
}

func (m *P2P) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *P2P) GetMsgCacheSize() int32 {
	if m != nil {
		return m.MsgCacheSize
	}
	return 0
}

func (m *P2P) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *P2P) GetVerMix() int32 {
	if m != nil {
		return m.VerMix
	}
	return 0
}

func (m *P2P) GetVerMax() int32 {
	if m != nil {
		return m.VerMax
	}
	return 0
}

type Rpc struct {
	JrpcBindAddr string   `protobuf:"bytes,1,opt,name=jrpcBindAddr" json:"jrpcBindAddr,omitempty"`
	GrpcBindAddr string   `protobuf:"bytes,2,opt,name=grpcBindAddr" json:"grpcBindAddr,omitempty"`
	Whitlist     []string `protobuf:"bytes,3,rep,name=whitlist" json:"whitlist,omitempty"`
}

func (m *Rpc) Reset()                    { *m = Rpc{} }
func (m *Rpc) String() string            { return proto.CompactTextString(m) }
func (*Rpc) ProtoMessage()               {}
func (*Rpc) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *Rpc) GetJrpcBindAddr() string {
	if m != nil {
		return m.JrpcBindAddr
	}
	return ""
}

func (m *Rpc) GetGrpcBindAddr() string {
	if m != nil {
		return m.GrpcBindAddr
	}
	return ""
}

func (m *Rpc) GetWhitlist() []string {
	if m != nil {
		return m.Whitlist
	}
	return nil
}

type Exec struct {
	MinExecFee int64 `protobuf:"varint,1,opt,name=minExecFee" json:"minExecFee,omitempty"`
	IsFree     bool  `protobuf:"varint,2,opt,name=isFree" json:"isFree,omitempty"`
}

func (m *Exec) Reset()                    { *m = Exec{} }
func (m *Exec) String() string            { return proto.CompactTextString(m) }
func (*Exec) ProtoMessage()               {}
func (*Exec) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *Exec) GetMinExecFee() int64 {
	if m != nil {
		return m.MinExecFee
	}
	return 0
}

func (m *Exec) GetIsFree() bool {
	if m != nil {
		return m.IsFree
	}
	return false
}

func init() {
	proto.RegisterType((*Config)(nil), "types.Config")
	proto.RegisterType((*Log)(nil), "types.Log")
	proto.RegisterType((*MemPool)(nil), "types.MemPool")
	proto.RegisterType((*Consensus)(nil), "types.Consensus")
	proto.RegisterType((*Wallet)(nil), "types.Wallet")
	proto.RegisterType((*Store)(nil), "types.Store")
	proto.RegisterType((*BlockChain)(nil), "types.BlockChain")
	proto.RegisterType((*P2P)(nil), "types.P2P")
	proto.RegisterType((*Rpc)(nil), "types.Rpc")
	proto.RegisterType((*Exec)(nil), "types.Exec")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 892 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xc1, 0x8e, 0xe3, 0x44,
	0x13, 0xc7, 0x95, 0x64, 0x9c, 0xc4, 0x95, 0xc9, 0x7e, 0xfb, 0x35, 0x08, 0x59, 0x68, 0x05, 0x91,
	0x05, 0x28, 0xe2, 0x30, 0x82, 0xe1, 0x8e, 0xb4, 0x33, 0x62, 0x2e, 0x3b, 0x83, 0xa2, 0xce, 0x48,
	0x9c, 0x9d, 0x4e, 0x8d, 0xd3, 0x8c, 0xdd, 0x6d, 0x75, 0x3b, 0xd9, 0x84, 0x87, 0xe0, 0x9d, 0x38,
	0x21, 0x78, 0x1b, 0xde, 0x00, 0x55, 0xb9, 0x93, 0x38, 0x99, 0xe5, 0xb0, 0xb7, 0xfc, 0x7f, 0x55,
	0xb1, 0xbb, 0xfe, 0x55, 0xd5, 0x86, 0x4b, 0x65, 0xcd, 0x93, 0xce, 0xaf, 0x2a, 0x67, 0x6b, 0x2b,
	0xa2, 0x7a, 0x57, 0xa1, 0x4f, 0xff, 0xe9, 0x42, 0xff, 0x96, 0xb9, 0xf8, 0x14, 0xa2, 0x5a, 0xd7,
	0x05, 0x26, 0x9d, 0x49, 0x67, 0x1a, 0xcb, 0x46, 0x88, 0x37, 0xd0, 0x2b, 0x6c, 0x9e, 0x74, 0x27,
	0x9d, 0xe9, 0xe8, 0x1a, 0xae, 0xf8, 0x5f, 0x57, 0xf7, 0x36, 0x97, 0x84, 0x45, 0x0a, 0x91, 0xaf,
	0xad, 0xc3, 0xa4, 0xc7, 0xf1, 0xcb, 0x10, 0x9f, 0x13, 0x93, 0x4d, 0x48, 0x5c, 0x41, 0xac, 0xac,
	0xf1, 0x68, 0xfc, 0xda, 0x27, 0x11, 0xe7, 0xbd, 0x0e, 0x79, 0xb7, 0x7b, 0x2e, 0x8f, 0x29, 0x62,
	0x0a, 0x83, 0x12, 0xcb, 0x99, 0xb5, 0x45, 0xd2, 0xe7, 0xec, 0x57, 0x21, 0xfb, 0xa1, 0xa1, 0x72,
	0x1f, 0x16, 0xdf, 0x03, 0x2c, 0x0a, 0xab, 0x9e, 0x6f, 0x57, 0x99, 0x36, 0xc9, 0x80, 0x93, 0xff,
	0x1f, 0x92, 0x6f, 0x0e, 0x01, 0xd9, 0x4a, 0x12, 0x5f, 0x43, 0xff, 0x7d, 0x56, 0x14, 0x58, 0x27,
	0x43, 0x4e, 0x1f, 0x87, 0xf4, 0x5f, 0x18, 0xca, 0x10, 0xa4, 0xaa, 0xab, 0xeb, 0x2a, 0x89, 0x4f,
	0xaa, 0x9e, 0x5d, 0xcf, 0x24, 0x61, 0x8a, 0xba, 0x4a, 0x25, 0x70, 0x12, 0x95, 0x95, 0x92, 0x84,
	0xc5, 0x97, 0x70, 0x81, 0x5b, 0x54, 0xc9, 0x88, 0xc3, 0xa3, 0x10, 0xfe, 0x69, 0x8b, 0x4a, 0x72,
	0x20, 0xfd, 0xa3, 0x0b, 0xbd, 0x7b, 0x9b, 0x8b, 0xcf, 0x61, 0x58, 0xd8, 0xbc, 0xc0, 0x0d, 0x16,
	0xc1, 0xf3, 0x83, 0x16, 0x53, 0xf8, 0x5f, 0x61, 0x73, 0xf2, 0xc7, 0x16, 0x78, 0xcf, 0x29, 0x5d,
	0x4e, 0x39, 0xc7, 0x22, 0x81, 0x41, 0x61, 0xf3, 0x3b, 0x5d, 0x34, 0x4d, 0x88, 0xe5, 0x5e, 0x8a,
	0x09, 0x8c, 0xca, 0x6c, 0x4b, 0x3f, 0xe7, 0xfa, 0x37, 0x4c, 0x2e, 0x26, 0x9d, 0xe9, 0x58, 0xb6,
	0x91, 0xf8, 0x02, 0xa0, 0xcc, 0xb6, 0x37, 0x99, 0x7a, 0x5e, 0x57, 0x4d, 0x6f, 0xc6, 0xb2, 0x45,
	0xc4, 0x67, 0xd0, 0x2f, 0xb3, 0xed, 0xdb, 0x1c, 0xb9, 0x13, 0x63, 0x19, 0x94, 0x78, 0x03, 0x71,
	0x61, 0x55, 0x56, 0x3c, 0xea, 0x12, 0xd9, 0xf7, 0xa1, 0x3c, 0x02, 0xaa, 0x4b, 0xd9, 0xb2, 0x72,
	0xe8, 0x3d, 0xbb, 0x3c, 0x94, 0x07, 0x4d, 0x6f, 0x54, 0x64, 0xb1, 0xe3, 0x03, 0xc7, 0x1c, 0x6d,
	0x11, 0xf1, 0x0d, 0xbc, 0x0a, 0x6a, 0x6d, 0x54, 0xad, 0xad, 0x61, 0x97, 0x87, 0xf2, 0x8c, 0xa6,
	0xef, 0x60, 0x10, 0xc6, 0x41, 0x7c, 0x05, 0xe3, 0xca, 0xda, 0xe2, 0x36, 0x53, 0xab, 0xa6, 0x50,
	0xf2, 0xb2, 0x27, 0x4f, 0x21, 0x1d, 0xaa, 0xd4, 0xe6, 0x71, 0x7b, 0x87, 0xc8, 0x4e, 0xf6, 0xe4,
	0x41, 0xa7, 0x7f, 0x76, 0x20, 0x3e, 0x8c, 0xa2, 0x10, 0x70, 0x61, 0xb2, 0x72, 0xbf, 0x06, 0xfc,
	0x9b, 0x4c, 0xce, 0xd1, 0xa0, 0xd7, 0x3e, 0xb4, 0x61, 0x2f, 0xd9, 0x42, 0x6d, 0xd0, 0xf9, 0x3a,
	0x73, 0x35, 0x77, 0x60, 0x28, 0x5b, 0x44, 0x7c, 0x0b, 0xaf, 0x43, 0x2a, 0x4f, 0x24, 0x3b, 0x76,
	0xc1, 0xef, 0x7f, 0xc1, 0xe9, 0x59, 0x2b, 0x5b, 0x3f, 0xe3, 0xee, 0xed, 0x72, 0xe9, 0xb8, 0x1d,
	0xb1, 0x6c, 0x11, 0x6a, 0xe8, 0x93, 0x75, 0x0a, 0x1f, 0xb4, 0xd1, 0x26, 0xe7, 0x9e, 0x0c, 0x65,
	0x1b, 0xa5, 0xbf, 0x77, 0xa0, 0xdf, 0x8c, 0x32, 0xf7, 0x4e, 0x1b, 0x2a, 0xb7, 0xf1, 0x23, 0x28,
	0xe2, 0x4b, 0xa7, 0x37, 0xe8, 0x42, 0x25, 0x41, 0x31, 0x5f, 0xcc, 0xb2, 0x7a, 0x15, 0xc6, 0x28,
	0x28, 0x32, 0xce, 0xeb, 0xdc, 0x3c, 0xee, 0xaa, 0xe6, 0xe0, 0xb1, 0x3c, 0xe8, 0xf3, 0x03, 0x45,
	0x2f, 0x0f, 0xf4, 0x0e, 0x22, 0xbe, 0x0c, 0x3e, 0xe8, 0xea, 0x47, 0x1e, 0x25, 0xfd, 0xbb, 0x0b,
	0x70, 0xdc, 0x6b, 0x91, 0xc2, 0xe5, 0x12, 0x9f, 0xce, 0xfb, 0x7e, 0xc2, 0xc8, 0x7e, 0x1a, 0x78,
	0xac, 0xd5, 0x8a, 0xff, 0xf9, 0xf3, 0xba, 0x0c, 0xed, 0x7f, 0xc1, 0x69, 0xf6, 0x6a, 0x5d, 0xa2,
	0x5d, 0xd7, 0x73, 0x54, 0xd6, 0x2c, 0x3d, 0xbf, 0xbe, 0x27, 0xcf, 0x28, 0x0d, 0xdc, 0x22, 0x6b,
	0x3f, 0xb0, 0xe9, 0xe7, 0x29, 0x6c, 0x15, 0x17, 0xfd, 0x47, 0x71, 0xfd, 0x13, 0x9f, 0xbf, 0x83,
	0x4f, 0xb4, 0x9f, 0xd7, 0xce, 0x1a, 0xde, 0x6f, 0xed, 0x6b, 0x34, 0x6a, 0x17, 0xb6, 0xeb, 0x43,
	0x21, 0x1a, 0x17, 0xaf, 0x4d, 0x5e, 0xe0, 0x83, 0x5d, 0x62, 0xd8, 0xb4, 0x16, 0xa1, 0x2d, 0xe5,
	0x23, 0xf9, 0x9d, 0x51, 0x61, 0xd5, 0x8e, 0x20, 0xfd, 0xab, 0x0b, 0xbd, 0xd9, 0xf5, 0x8c, 0xfb,
	0x8b, 0xb8, 0x9c, 0x59, 0x57, 0xb3, 0x83, 0x91, 0x3c, 0xe8, 0x8f, 0x9e, 0x95, 0x09, 0x8c, 0x72,
	0x57, 0xa9, 0xfb, 0x70, 0x1f, 0x35, 0xe3, 0xd2, 0x46, 0xf4, 0x4f, 0xed, 0xe7, 0x88, 0xcb, 0x30,
	0x2c, 0x41, 0xd1, 0x3f, 0x3d, 0xba, 0x0d, 0xba, 0x39, 0xef, 0x51, 0x18, 0xed, 0x16, 0xa2, 0xcf,
	0x13, 0x9d, 0xcb, 0x27, 0x83, 0x49, 0x8f, 0x3e, 0x4f, 0x2c, 0xe8, 0x79, 0x68, 0xb2, 0x45, 0xb1,
	0xaf, 0x3f, 0x28, 0x9a, 0x8d, 0xd2, 0xe7, 0xc7, 0xd9, 0x88, 0xb9, 0xb2, 0x13, 0x46, 0x4b, 0xbd,
	0x41, 0xe7, 0xf7, 0x97, 0x4c, 0x24, 0xf7, 0x92, 0x9e, 0xba, 0x41, 0xf7, 0xa0, 0xb7, 0x7c, 0x89,
	0x47, 0x32, 0xa8, 0x3d, 0xcf, 0xb6, 0xc9, 0xe5, 0x91, 0x67, 0xdb, 0x54, 0x43, 0x4f, 0x56, 0x8a,
	0x5e, 0xfa, 0xab, 0xab, 0xd4, 0x8d, 0x36, 0x4b, 0xde, 0xe0, 0x66, 0xd6, 0x4f, 0x18, 0xe5, 0xe4,
	0xed, 0x9c, 0xc6, 0xd8, 0x13, 0x46, 0x2d, 0x79, 0xbf, 0xd2, 0x75, 0xa1, 0x3d, 0xdd, 0x28, 0x54,
	0xed, 0x41, 0xa7, 0x3f, 0xc2, 0x05, 0x7d, 0x4a, 0xc2, 0xbd, 0x43, 0x3f, 0x8f, 0x2b, 0xde, 0x22,
	0x8d, 0xd1, 0x77, 0x2e, 0xdc, 0x76, 0x6c, 0x34, 0xa9, 0x45, 0x9f, 0x3f, 0xff, 0x3f, 0xfc, 0x1b,
	0x00, 0x00, 0xff, 0xff, 0x30, 0x33, 0x42, 0x4c, 0x0e, 0x08, 0x00, 0x00,
}
