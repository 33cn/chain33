// Code generated by protoc-gen-go.
// source: coins.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	coins.proto

It has these top-level messages:
	CoinsAction
	CoinsGenesis
	CoinsTransfer
	CoinsTransferToExec
	CoinsWithdraw
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// message for execs.coins
type CoinsAction struct {
	// Types that are valid to be assigned to Value:
	//	*CoinsAction_Transfer
	//	*CoinsAction_Withdraw
	//	*CoinsAction_Genesis
	//	*CoinsAction_TransferToExec
	Value isCoinsAction_Value `protobuf_oneof:"value"`
	Ty    int32               `protobuf:"varint,3,opt,name=ty" json:"ty,omitempty"`
}

func (m *CoinsAction) Reset()                    { *m = CoinsAction{} }
func (m *CoinsAction) String() string            { return proto.CompactTextString(m) }
func (*CoinsAction) ProtoMessage()               {}
func (*CoinsAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isCoinsAction_Value interface {
	isCoinsAction_Value()
}

type CoinsAction_Transfer struct {
	Transfer *CoinsTransfer `protobuf:"bytes,1,opt,name=transfer,oneof"`
}
type CoinsAction_Withdraw struct {
	Withdraw *CoinsWithdraw `protobuf:"bytes,4,opt,name=withdraw,oneof"`
}
type CoinsAction_Genesis struct {
	Genesis *CoinsGenesis `protobuf:"bytes,2,opt,name=genesis,oneof"`
}
type CoinsAction_TransferToExec struct {
	TransferToExec *CoinsTransferToExec `protobuf:"bytes,5,opt,name=transferToExec,oneof"`
}

func (*CoinsAction_Transfer) isCoinsAction_Value()       {}
func (*CoinsAction_Withdraw) isCoinsAction_Value()       {}
func (*CoinsAction_Genesis) isCoinsAction_Value()        {}
func (*CoinsAction_TransferToExec) isCoinsAction_Value() {}

func (m *CoinsAction) GetValue() isCoinsAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CoinsAction) GetTransfer() *CoinsTransfer {
	if x, ok := m.GetValue().(*CoinsAction_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *CoinsAction) GetWithdraw() *CoinsWithdraw {
	if x, ok := m.GetValue().(*CoinsAction_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (m *CoinsAction) GetGenesis() *CoinsGenesis {
	if x, ok := m.GetValue().(*CoinsAction_Genesis); ok {
		return x.Genesis
	}
	return nil
}

func (m *CoinsAction) GetTransferToExec() *CoinsTransferToExec {
	if x, ok := m.GetValue().(*CoinsAction_TransferToExec); ok {
		return x.TransferToExec
	}
	return nil
}

func (m *CoinsAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CoinsAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CoinsAction_OneofMarshaler, _CoinsAction_OneofUnmarshaler, _CoinsAction_OneofSizer, []interface{}{
		(*CoinsAction_Transfer)(nil),
		(*CoinsAction_Withdraw)(nil),
		(*CoinsAction_Genesis)(nil),
		(*CoinsAction_TransferToExec)(nil),
	}
}

func _CoinsAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CoinsAction)
	// value
	switch x := m.Value.(type) {
	case *CoinsAction_Transfer:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transfer); err != nil {
			return err
		}
	case *CoinsAction_Withdraw:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Withdraw); err != nil {
			return err
		}
	case *CoinsAction_Genesis:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Genesis); err != nil {
			return err
		}
	case *CoinsAction_TransferToExec:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransferToExec); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CoinsAction.Value has unexpected type %T", x)
	}
	return nil
}

func _CoinsAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CoinsAction)
	switch tag {
	case 1: // value.transfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoinsTransfer)
		err := b.DecodeMessage(msg)
		m.Value = &CoinsAction_Transfer{msg}
		return true, err
	case 4: // value.withdraw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoinsWithdraw)
		err := b.DecodeMessage(msg)
		m.Value = &CoinsAction_Withdraw{msg}
		return true, err
	case 2: // value.genesis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoinsGenesis)
		err := b.DecodeMessage(msg)
		m.Value = &CoinsAction_Genesis{msg}
		return true, err
	case 5: // value.transferToExec
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CoinsTransferToExec)
		err := b.DecodeMessage(msg)
		m.Value = &CoinsAction_TransferToExec{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CoinsAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CoinsAction)
	// value
	switch x := m.Value.(type) {
	case *CoinsAction_Transfer:
		s := proto.Size(x.Transfer)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CoinsAction_Withdraw:
		s := proto.Size(x.Withdraw)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CoinsAction_Genesis:
		s := proto.Size(x.Genesis)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CoinsAction_TransferToExec:
		s := proto.Size(x.TransferToExec)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// 给某个地址凭空打币
// 只能执行一次，不能执行第二次
type CoinsGenesis struct {
	Amount        int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	ReturnAddress string `protobuf:"bytes,3,opt,name=returnAddress" json:"returnAddress,omitempty"`
}

func (m *CoinsGenesis) Reset()                    { *m = CoinsGenesis{} }
func (m *CoinsGenesis) String() string            { return proto.CompactTextString(m) }
func (*CoinsGenesis) ProtoMessage()               {}
func (*CoinsGenesis) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CoinsGenesis) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CoinsGenesis) GetReturnAddress() string {
	if m != nil {
		return m.ReturnAddress
	}
	return ""
}

type CoinsTransfer struct {
	Cointoken string `protobuf:"bytes,1,opt,name=cointoken" json:"cointoken,omitempty"`
	Amount    int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Note      string `protobuf:"bytes,3,opt,name=note" json:"note,omitempty"`
	To        string `protobuf:"bytes,4,opt,name=to" json:"to,omitempty"`
}

func (m *CoinsTransfer) Reset()                    { *m = CoinsTransfer{} }
func (m *CoinsTransfer) String() string            { return proto.CompactTextString(m) }
func (*CoinsTransfer) ProtoMessage()               {}
func (*CoinsTransfer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CoinsTransfer) GetCointoken() string {
	if m != nil {
		return m.Cointoken
	}
	return ""
}

func (m *CoinsTransfer) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CoinsTransfer) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *CoinsTransfer) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type CoinsTransferToExec struct {
	Cointoken string `protobuf:"bytes,1,opt,name=cointoken" json:"cointoken,omitempty"`
	Amount    int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Note      string `protobuf:"bytes,3,opt,name=note" json:"note,omitempty"`
	ExecName  string `protobuf:"bytes,4,opt,name=execName" json:"execName,omitempty"`
	To        string `protobuf:"bytes,5,opt,name=to" json:"to,omitempty"`
}

func (m *CoinsTransferToExec) Reset()                    { *m = CoinsTransferToExec{} }
func (m *CoinsTransferToExec) String() string            { return proto.CompactTextString(m) }
func (*CoinsTransferToExec) ProtoMessage()               {}
func (*CoinsTransferToExec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CoinsTransferToExec) GetCointoken() string {
	if m != nil {
		return m.Cointoken
	}
	return ""
}

func (m *CoinsTransferToExec) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CoinsTransferToExec) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *CoinsTransferToExec) GetExecName() string {
	if m != nil {
		return m.ExecName
	}
	return ""
}

func (m *CoinsTransferToExec) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type CoinsWithdraw struct {
	Cointoken string `protobuf:"bytes,1,opt,name=cointoken" json:"cointoken,omitempty"`
	Amount    int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Note      string `protobuf:"bytes,3,opt,name=note" json:"note,omitempty"`
	ExecName  string `protobuf:"bytes,4,opt,name=execName" json:"execName,omitempty"`
	To        string `protobuf:"bytes,5,opt,name=to" json:"to,omitempty"`
}

func (m *CoinsWithdraw) Reset()                    { *m = CoinsWithdraw{} }
func (m *CoinsWithdraw) String() string            { return proto.CompactTextString(m) }
func (*CoinsWithdraw) ProtoMessage()               {}
func (*CoinsWithdraw) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CoinsWithdraw) GetCointoken() string {
	if m != nil {
		return m.Cointoken
	}
	return ""
}

func (m *CoinsWithdraw) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CoinsWithdraw) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *CoinsWithdraw) GetExecName() string {
	if m != nil {
		return m.ExecName
	}
	return ""
}

func (m *CoinsWithdraw) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func init() {
	proto.RegisterType((*CoinsAction)(nil), "types.CoinsAction")
	proto.RegisterType((*CoinsGenesis)(nil), "types.CoinsGenesis")
	proto.RegisterType((*CoinsTransfer)(nil), "types.CoinsTransfer")
	proto.RegisterType((*CoinsTransferToExec)(nil), "types.CoinsTransferToExec")
	proto.RegisterType((*CoinsWithdraw)(nil), "types.CoinsWithdraw")
}

func init() { proto.RegisterFile("coins.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x92, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0xc6, 0x69, 0xa1, 0x40, 0x07, 0xe1, 0xb0, 0x18, 0xd3, 0x10, 0x0f, 0xa4, 0xf1, 0xc0, 0x09,
	0x13, 0x7c, 0x02, 0xfc, 0x13, 0x39, 0x18, 0x0f, 0x1b, 0x12, 0xcf, 0xb5, 0x1d, 0xb5, 0x51, 0x76,
	0xc9, 0xee, 0x54, 0xe8, 0x03, 0x70, 0xf2, 0xa5, 0x4d, 0x97, 0x6d, 0x05, 0xc5, 0x9b, 0x89, 0xb7,
	0xce, 0xcc, 0xf7, 0xeb, 0xf7, 0xcd, 0xb4, 0xd0, 0x89, 0x65, 0x2a, 0xf4, 0x78, 0xa9, 0x24, 0x49,
	0xe6, 0x51, 0xbe, 0x44, 0x1d, 0x6e, 0x5c, 0xe8, 0x5c, 0x15, 0xed, 0x69, 0x4c, 0xa9, 0x14, 0x6c,
	0x02, 0x6d, 0x52, 0x91, 0xd0, 0x4f, 0xa8, 0x02, 0x67, 0xe8, 0x8c, 0x3a, 0x93, 0xe3, 0xb1, 0x51,
	0x8e, 0x8d, 0x6a, 0x6e, 0x67, 0xb3, 0x1a, 0xaf, 0x74, 0x05, 0xb3, 0x4a, 0xe9, 0x25, 0x51, 0xd1,
	0x2a, 0x68, 0xfc, 0x64, 0x1e, 0xec, 0xac, 0x60, 0x4a, 0x1d, 0x3b, 0x87, 0xd6, 0x33, 0x0a, 0xd4,
	0xa9, 0x0e, 0x5c, 0x83, 0xf4, 0x77, 0x91, 0xdb, 0xed, 0x68, 0x56, 0xe3, 0xa5, 0x8a, 0x5d, 0x43,
	0xaf, 0x34, 0x9c, 0xcb, 0x9b, 0x35, 0xc6, 0x81, 0x67, 0xb8, 0xc1, 0xa1, 0x78, 0x5b, 0xc5, 0xac,
	0xc6, 0xbf, 0x31, 0xac, 0x07, 0x2e, 0xe5, 0x41, 0x7d, 0xe8, 0x8c, 0x3c, 0xee, 0x52, 0x7e, 0xd9,
	0x02, 0xef, 0x3d, 0x7a, 0xcb, 0x30, 0xbc, 0x83, 0xa3, 0x5d, 0x67, 0x76, 0x02, 0xcd, 0x68, 0x21,
	0x33, 0x41, 0x26, 0x5e, 0x9d, 0xdb, 0x8a, 0x9d, 0x41, 0x57, 0x21, 0x65, 0x4a, 0x4c, 0x93, 0x44,
	0xa1, 0xd6, 0xe6, 0x5d, 0x3e, 0xdf, 0x6f, 0x86, 0x29, 0x74, 0xf7, 0xf2, 0xb0, 0x53, 0xf0, 0x8b,
	0xe3, 0x93, 0x7c, 0x45, 0x61, 0xee, 0xea, 0xf3, 0xaf, 0xc6, 0xaf, 0x66, 0x0c, 0x1a, 0x42, 0x12,
	0x5a, 0x0f, 0xf3, 0x6c, 0x36, 0x90, 0xe6, 0xcc, 0x3e, 0x77, 0x49, 0x86, 0x1f, 0x0e, 0xf4, 0x0f,
	0xec, 0xfe, 0x87, 0x8e, 0x03, 0x68, 0xe3, 0x1a, 0xe3, 0xfb, 0x68, 0x81, 0xd6, 0xb7, 0xaa, 0x6d,
	0x1a, 0xaf, 0x4a, 0xb3, 0x71, 0xec, 0xe6, 0xe5, 0x47, 0xff, 0x9f, 0x1c, 0x8f, 0x4d, 0xf3, 0x93,
	0x5f, 0x7c, 0x06, 0x00, 0x00, 0xff, 0xff, 0x83, 0x7a, 0x68, 0x3f, 0xf3, 0x02, 0x00, 0x00,
}
